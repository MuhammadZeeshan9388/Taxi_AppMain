
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taxi_AppMain.Classes
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "OnlineTaxiQuickBooking")]
    public partial class WebDataClassesDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertFare(Fare instance);
        partial void UpdateFare(Fare instance);
        partial void DeleteFare(Fare instance);
        partial void InsertLocation(Location instance);
        partial void UpdateLocation(Location instance);
        partial void DeleteLocation(Location instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertVehicle(Vehicle instance);
        partial void UpdateVehicle(Vehicle instance);
        partial void DeleteVehicle(Vehicle instance);
        partial void InsertAccountsBooking(AccountsBooking instance);
        partial void UpdateAccountsBooking(AccountsBooking instance);
        partial void DeleteAccountsBooking(AccountsBooking instance);
        partial void InsertCLient(CLient instance);
        partial void UpdateCLient(CLient instance);
        partial void DeleteCLient(CLient instance);
        partial void InsertAccount_Detail(Account_Detail instance);
        partial void UpdateAccount_Detail(Account_Detail instance);
        partial void DeleteAccount_Detail(Account_Detail instance);
        partial void InsertAccount(Account instance);
        partial void UpdateAccount(Account instance);
        partial void DeleteAccount(Account instance);
        partial void InsertFare_Percentage(Fare_Percentage instance);
        partial void UpdateFare_Percentage(Fare_Percentage instance);
        partial void DeleteFare_Percentage(Fare_Percentage instance);
        partial void InsertWebBooking(WebBooking instance);
        partial void UpdateWebBooking(WebBooking instance);
        partial void DeleteWebBooking(WebBooking instance);
        partial void InsertBooking_BookerDetail(Booking_BookerDetail instance);
        partial void UpdateBooking_BookerDetail(Booking_BookerDetail instance);
        partial void DeleteBooking_BookerDetail(Booking_BookerDetail instance);
        #endregion


        public WebDataClassesDataContext() :
            base(General.DecryptConnectionString(Program.objLic.OnlineDataString), mappingSource)
        {
            OnCreated();
        }

        public WebDataClassesDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WebDataClassesDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WebDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public WebDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Fare> Fares
        {
            get
            {
                return this.GetTable<Fare>();
            }
        }

        public System.Data.Linq.Table<Location> Locations
        {
            get
            {
                return this.GetTable<Location>();
            }
        }

        public System.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public System.Data.Linq.Table<Vehicle> Vehicles
        {
            get
            {
                return this.GetTable<Vehicle>();
            }
        }

        public System.Data.Linq.Table<AccountsBooking> AccountsBookings
        {
            get
            {
                return this.GetTable<AccountsBooking>();
            }
        }

        public System.Data.Linq.Table<CLient> CLients
        {
            get
            {
                return this.GetTable<CLient>();
            }
        }

        public System.Data.Linq.Table<Account_Detail> Account_Details
        {
            get
            {
                return this.GetTable<Account_Detail>();
            }
        }

        public System.Data.Linq.Table<Account> Accounts
        {
            get
            {
                return this.GetTable<Account>();
            }
        }

        public System.Data.Linq.Table<Fare_Percentage> Fare_Percentages
        {
            get
            {
                return this.GetTable<Fare_Percentage>();
            }
        }

        public System.Data.Linq.Table<WebBooking> WebBookings
        {
            get
            {
                return this.GetTable<WebBooking>();
            }
        }

        public System.Data.Linq.Table<WebBooking_ViaLocation> WebBooking_ViaLocations
        {
            get
            {
                return this.GetTable<WebBooking_ViaLocation>();
            }
        }

        public System.Data.Linq.Table<Booking_BookerDetail> Booking_BookerDetails
        {
            get
            {
                return this.GetTable<Booking_BookerDetail>();
            }
        }

        public System.Data.Linq.Table<CreditData> CreditDatas
        {
            get
            {
                return this.GetTable<CreditData>();
            }
        }

        [Function(Name = "dbo.stp_VerifyLicense")]
        public ISingleResult<CLient> stp_VerifyLicense([Parameter(Name = "ClientName", DbType = "VarChar(100)")] string clientName)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientName);
            return ((ISingleResult<CLient>)(result.ReturnValue));
        }

        [Function(Name = "dbo.stp_UpdateFetchedBookingStatus")]
        public int stp_UpdateFetchedBookingStatus([Parameter(Name = "BookingId", DbType = "BigInt")] System.Nullable<long> bookingId, [Parameter(Name = "SystemBookingId", DbType = "BigInt")] System.Nullable<long> systemBookingId, [Parameter(Name = "UpdateMessage", DbType = "VarChar(MAX)")] string updateMessage, [Parameter(Name = "UpdateOn", DbType = "DateTime")] System.Nullable<System.DateTime> updateOn, [Parameter(Name = "UpdateBy", DbType = "VarChar(100)")] string updateBy)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookingId, systemBookingId, updateMessage, updateOn, updateBy);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.spUpdateBookingFromApp")]
        public int spUpdateBookingFromApp([Parameter(Name = "DefaultClientId", DbType = "Int")] System.Nullable<int> defaultClientId, [Parameter(Name = "BookingNo", DbType = "BigInt")] System.Nullable<long> bookingNo, [Parameter(Name = "Status", DbType = "VarChar(50)")] string status)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), defaultClientId, bookingNo, status);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.spGetFare_Milevise")]
        public ISingleResult<spGetFare_MileviseResult> spGetFare_Milevise([Parameter(DbType = "Decimal")] System.Nullable<decimal> milesString, [Parameter(Name = "ClientID", DbType = "BigInt")] System.Nullable<long> clientID, [Parameter(Name = "FromType", DbType = "VarChar(50)")] string fromType, [Parameter(Name = "IncVal", DbType = "Decimal")] System.Nullable<decimal> incVal)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), milesString, clientID, fromType, incVal);
            return ((ISingleResult<spGetFare_MileviseResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.stp_VerifyClientAppAccount")]
        public ISingleResult<stp_VerifyClientAppAccountResult> stp_VerifyClientAppAccount([Parameter(Name = "DeviceInfo", DbType = "VarChar(200)")] string deviceInfo, [Parameter(Name = "AccountCode", DbType = "VarChar(20)")] string accountCode, [Parameter(Name = "DeviceId", DbType = "VarChar(50)")] string deviceId, [Parameter(Name = "RegisteredFrom", DbType = "VarChar(50)")] string registeredFrom)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), deviceInfo, accountCode, deviceId, registeredFrom);
            return ((ISingleResult<stp_VerifyClientAppAccountResult>)(result.ReturnValue));
        }

        [Function(Name = "dbo.spGetFare_LocationVise1")]
        public ISingleResult<spGetFare_LocationVise1Result> spGetFare_LocationVise1([Parameter(Name = "ClientID", DbType = "BigInt")] System.Nullable<long> clientID, [Parameter(Name = "FromPostCode", DbType = "VarChar(10)")] string fromPostCode, [Parameter(Name = "ToPostCode", DbType = "VarChar(10)")] string toPostCode, [Parameter(Name = "FromType", DbType = "VarChar(50)")] string fromType, [Parameter(Name = "ToType", DbType = "VarChar(50)")] string toType)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientID, fromPostCode, toPostCode, fromType, toType);
            return ((ISingleResult<spGetFare_LocationVise1Result>)(result.ReturnValue));
        }

        [Function(Name = "dbo.stp_CalculateFaresCustomerApp2")]
        public int stp_CalculateFaresCustomerApp2([Parameter(DbType = "Decimal")] System.Nullable<decimal> milesString, [Parameter(Name = "ClientID", DbType = "BigInt")] System.Nullable<long> clientID)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), milesString, clientID);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.stp_CalculateFares2")]
        public int stp_CalculateFares2([Parameter(DbType = "Decimal")] System.Nullable<decimal> milesString, [Parameter(Name = "ClientID", DbType = "BigInt")] System.Nullable<long> clientID, [Parameter(Name = "FromType", DbType = "VarChar(50)")] string fromType, [Parameter(Name = "IncVal", DbType = "Decimal")] System.Nullable<decimal> incVal)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), milesString, clientID, fromType, incVal);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.spUpdateBookingConfirmationFromApp")]
        public int spUpdateBookingConfirmationFromApp([Parameter(Name = "DefaultClientId", DbType = "Int")] System.Nullable<int> defaultClientId, [Parameter(Name = "BookingNo", DbType = "BigInt")] System.Nullable<long> bookingNo, [Parameter(Name = "Status", DbType = "VarChar(50)")] string status, [Parameter(Name = "FareRate", DbType = "Decimal")] System.Nullable<decimal> fareRate, [Parameter(Name = "WaitingTime", DbType = "VarChar(50)")] string waitingTime)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), defaultClientId, bookingNo, status, fareRate, waitingTime);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.spUpdateBookingConfirmationFromApp2")]
        public int spUpdateBookingConfirmationFromApp2([Parameter(Name = "DefaultClientId", DbType = "Int")] System.Nullable<int> defaultClientId, [Parameter(Name = "BookingNo", DbType = "BigInt")] System.Nullable<long> bookingNo, [Parameter(Name = "Status", DbType = "VarChar(50)")] string status, [Parameter(Name = "FareRate", DbType = "Decimal")] System.Nullable<decimal> fareRate, [Parameter(Name = "WaitingTime", DbType = "VarChar(50)")] string waitingTime, [Parameter(Name = "PickupDate", DbType = "VarChar(50)")] string pickupDate, [Parameter(Name = "PickupTime", DbType = "VarChar(50)")] string pickupTime)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), defaultClientId, bookingNo, status, fareRate, waitingTime, pickupDate, pickupTime);
            return ((int)(result.ReturnValue));
        }

        [Function(Name = "dbo.spUpdateBookingConfirmationFromApp3")]
        public int spUpdateBookingConfirmationFromApp3([Parameter(Name = "DefaultClientId", DbType = "Int")] System.Nullable<int> defaultClientId, [Parameter(Name = "BookingNo", DbType = "BigInt")] System.Nullable<long> bookingNo, [Parameter(Name = "Status", DbType = "VarChar(50)")] string status, [Parameter(Name = "FareRate", DbType = "Decimal")] System.Nullable<decimal> fareRate, [Parameter(Name = "WaitingTime", DbType = "VarChar(50)")] string waitingTime, [Parameter(Name = "PickupDate", DbType = "VarChar(50)")] string pickupDate, [Parameter(Name = "PickupTime", DbType = "VarChar(50)")] string pickupTime, [Parameter(Name = "ReturnDate", DbType = "VarChar(50)")] string returnDate, [Parameter(Name = "ReturnTime", DbType = "VarChar(50)")] string returnTime, [Parameter(Name = "ReturnFare", DbType = "Decimal")] System.Nullable<decimal> returnFare)
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), defaultClientId, bookingNo, status, fareRate, waitingTime, pickupDate, pickupTime, returnDate, returnTime, returnFare);
            return ((int)(result.ReturnValue));
        }
    }

    [Table(Name = "dbo.Fare")]
    public partial class Fare : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private System.Nullable<long> _VehicleID;

        private System.Nullable<System.DateTime> _InsDate;

        private System.Nullable<System.DateTime> _ModifyDate;

        private System.Nullable<long> _CLientID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnVehicleIDChanging(System.Nullable<long> value);
        partial void OnVehicleIDChanged();
        partial void OnInsDateChanging(System.Nullable<System.DateTime> value);
        partial void OnInsDateChanged();
        partial void OnModifyDateChanging(System.Nullable<System.DateTime> value);
        partial void OnModifyDateChanged();
        partial void OnCLientIDChanging(System.Nullable<long> value);
        partial void OnCLientIDChanged();
        #endregion

        public Fare()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_VehicleID", DbType = "BigInt")]
        public System.Nullable<long> VehicleID
        {
            get
            {
                return this._VehicleID;
            }
            set
            {
                if ((this._VehicleID != value))
                {
                    this.OnVehicleIDChanging(value);
                    this.SendPropertyChanging();
                    this._VehicleID = value;
                    this.SendPropertyChanged("VehicleID");
                    this.OnVehicleIDChanged();
                }
            }
        }

        [Column(Storage = "_InsDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> InsDate
        {
            get
            {
                return this._InsDate;
            }
            set
            {
                if ((this._InsDate != value))
                {
                    this.OnInsDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsDate = value;
                    this.SendPropertyChanged("InsDate");
                    this.OnInsDateChanged();
                }
            }
        }

        [Column(Storage = "_ModifyDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> ModifyDate
        {
            get
            {
                return this._ModifyDate;
            }
            set
            {
                if ((this._ModifyDate != value))
                {
                    this.OnModifyDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifyDate = value;
                    this.SendPropertyChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }

        [Column(Storage = "_CLientID", DbType = "BigInt")]
        public System.Nullable<long> CLientID
        {
            get
            {
                return this._CLientID;
            }
            set
            {
                if ((this._CLientID != value))
                {
                    this.OnCLientIDChanging(value);
                    this.SendPropertyChanging();
                    this._CLientID = value;
                    this.SendPropertyChanged("CLientID");
                    this.OnCLientIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Location")]
    public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private string _Name;

        private System.Nullable<long> _LocationTypeID;

        private string _PostCode;

        private string _Address;

        private System.Nullable<long> _SortBy;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLocationTypeIDChanging(System.Nullable<long> value);
        partial void OnLocationTypeIDChanged();
        partial void OnPostCodeChanging(string value);
        partial void OnPostCodeChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnSortByChanging(System.Nullable<long> value);
        partial void OnSortByChanged();
        #endregion

        public Location()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(250)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_LocationTypeID", DbType = "BigInt")]
        public System.Nullable<long> LocationTypeID
        {
            get
            {
                return this._LocationTypeID;
            }
            set
            {
                if ((this._LocationTypeID != value))
                {
                    this.OnLocationTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._LocationTypeID = value;
                    this.SendPropertyChanged("LocationTypeID");
                    this.OnLocationTypeIDChanged();
                }
            }
        }

        [Column(Storage = "_PostCode", DbType = "VarChar(50)")]
        public string PostCode
        {
            get
            {
                return this._PostCode;
            }
            set
            {
                if ((this._PostCode != value))
                {
                    this.OnPostCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostCode = value;
                    this.SendPropertyChanged("PostCode");
                    this.OnPostCodeChanged();
                }
            }
        }

        [Column(Storage = "_Address", DbType = "VarChar(500)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Storage = "_SortBy", DbType = "BigInt")]
        public System.Nullable<long> SortBy
        {
            get
            {
                return this._SortBy;
            }
            set
            {
                if ((this._SortBy != value))
                {
                    this.OnSortByChanging(value);
                    this.SendPropertyChanging();
                    this._SortBy = value;
                    this.SendPropertyChanged("SortBy");
                    this.OnSortByChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private string _Name;

        private string _Email;

        private string _Password;

        private string _Phone;

        private System.Nullable<bool> _isActive;

        private System.Nullable<System.DateTime> _InsertedDate;

        private System.Nullable<System.DateTime> _ModifiedDate;

        private System.Nullable<long> _ClientID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnisActiveChanging(System.Nullable<bool> value);
        partial void OnisActiveChanged();
        partial void OnInsertedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnInsertedDateChanged();
        partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
        partial void OnModifiedDateChanged();
        partial void OnClientIDChanging(System.Nullable<long> value);
        partial void OnClientIDChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(250)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Email", DbType = "VarChar(100)")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if ((this._Email != value))
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        [Column(Storage = "_Password", DbType = "VarChar(50)")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Storage = "_Phone", DbType = "VarChar(20)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if ((this._Phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [Column(Storage = "_isActive", DbType = "Bit")]
        public System.Nullable<bool> isActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnisActiveChanging(value);
                    this.SendPropertyChanging();
                    this._isActive = value;
                    this.SendPropertyChanged("isActive");
                    this.OnisActiveChanged();
                }
            }
        }

        [Column(Storage = "_InsertedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> InsertedDate
        {
            get
            {
                return this._InsertedDate;
            }
            set
            {
                if ((this._InsertedDate != value))
                {
                    this.OnInsertedDateChanging(value);
                    this.SendPropertyChanging();
                    this._InsertedDate = value;
                    this.SendPropertyChanged("InsertedDate");
                    this.OnInsertedDateChanged();
                }
            }
        }

        [Column(Storage = "_ModifiedDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> ModifiedDate
        {
            get
            {
                return this._ModifiedDate;
            }
            set
            {
                if ((this._ModifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.SendPropertyChanging();
                    this._ModifiedDate = value;
                    this.SendPropertyChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }

        [Column(Storage = "_ClientID", DbType = "BigInt")]
        public System.Nullable<long> ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Vehicle")]
    public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private string _Name;

        private string _Image;

        private System.Nullable<short> _NoOfPassengers;

        private System.Nullable<short> _NoOfLuggages;

        private System.Nullable<short> _HandLuggages;

        private System.Nullable<decimal> _StartRate;

        private System.Nullable<decimal> _IncrementDistance;

        private System.Nullable<decimal> _IncrementRate;

        private System.Nullable<decimal> _StartRateValidMiles;

        private System.Nullable<int> _SortOrder;

        private System.Nullable<long> _ClientID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnImageChanging(string value);
        partial void OnImageChanged();
        partial void OnNoOfPassengersChanging(System.Nullable<short> value);
        partial void OnNoOfPassengersChanged();
        partial void OnNoOfLuggagesChanging(System.Nullable<short> value);
        partial void OnNoOfLuggagesChanged();
        partial void OnHandLuggagesChanging(System.Nullable<short> value);
        partial void OnHandLuggagesChanged();
        partial void OnStartRateChanging(System.Nullable<decimal> value);
        partial void OnStartRateChanged();
        partial void OnIncrementDistanceChanging(System.Nullable<decimal> value);
        partial void OnIncrementDistanceChanged();
        partial void OnIncrementRateChanging(System.Nullable<decimal> value);
        partial void OnIncrementRateChanged();
        partial void OnStartRateValidMilesChanging(System.Nullable<decimal> value);
        partial void OnStartRateValidMilesChanged();
        partial void OnSortOrderChanging(System.Nullable<int> value);
        partial void OnSortOrderChanged();
        partial void OnClientIDChanging(System.Nullable<long> value);
        partial void OnClientIDChanged();
        #endregion

        public Vehicle()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Image", DbType = "VarChar(50)")]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if ((this._Image != value))
                {
                    this.OnImageChanging(value);
                    this.SendPropertyChanging();
                    this._Image = value;
                    this.SendPropertyChanged("Image");
                    this.OnImageChanged();
                }
            }
        }

        [Column(Storage = "_NoOfPassengers", DbType = "SmallInt")]
        public System.Nullable<short> NoOfPassengers
        {
            get
            {
                return this._NoOfPassengers;
            }
            set
            {
                if ((this._NoOfPassengers != value))
                {
                    this.OnNoOfPassengersChanging(value);
                    this.SendPropertyChanging();
                    this._NoOfPassengers = value;
                    this.SendPropertyChanged("NoOfPassengers");
                    this.OnNoOfPassengersChanged();
                }
            }
        }

        [Column(Storage = "_NoOfLuggages", DbType = "SmallInt")]
        public System.Nullable<short> NoOfLuggages
        {
            get
            {
                return this._NoOfLuggages;
            }
            set
            {
                if ((this._NoOfLuggages != value))
                {
                    this.OnNoOfLuggagesChanging(value);
                    this.SendPropertyChanging();
                    this._NoOfLuggages = value;
                    this.SendPropertyChanged("NoOfLuggages");
                    this.OnNoOfLuggagesChanged();
                }
            }
        }

        [Column(Storage = "_HandLuggages", DbType = "SmallInt")]
        public System.Nullable<short> HandLuggages
        {
            get
            {
                return this._HandLuggages;
            }
            set
            {
                if ((this._HandLuggages != value))
                {
                    this.OnHandLuggagesChanging(value);
                    this.SendPropertyChanging();
                    this._HandLuggages = value;
                    this.SendPropertyChanged("HandLuggages");
                    this.OnHandLuggagesChanged();
                }
            }
        }

        [Column(Storage = "_StartRate", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> StartRate
        {
            get
            {
                return this._StartRate;
            }
            set
            {
                if ((this._StartRate != value))
                {
                    this.OnStartRateChanging(value);
                    this.SendPropertyChanging();
                    this._StartRate = value;
                    this.SendPropertyChanged("StartRate");
                    this.OnStartRateChanged();
                }
            }
        }

        [Column(Storage = "_IncrementDistance", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> IncrementDistance
        {
            get
            {
                return this._IncrementDistance;
            }
            set
            {
                if ((this._IncrementDistance != value))
                {
                    this.OnIncrementDistanceChanging(value);
                    this.SendPropertyChanging();
                    this._IncrementDistance = value;
                    this.SendPropertyChanged("IncrementDistance");
                    this.OnIncrementDistanceChanged();
                }
            }
        }

        [Column(Storage = "_IncrementRate", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> IncrementRate
        {
            get
            {
                return this._IncrementRate;
            }
            set
            {
                if ((this._IncrementRate != value))
                {
                    this.OnIncrementRateChanging(value);
                    this.SendPropertyChanging();
                    this._IncrementRate = value;
                    this.SendPropertyChanged("IncrementRate");
                    this.OnIncrementRateChanged();
                }
            }
        }

        [Column(Storage = "_StartRateValidMiles", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> StartRateValidMiles
        {
            get
            {
                return this._StartRateValidMiles;
            }
            set
            {
                if ((this._StartRateValidMiles != value))
                {
                    this.OnStartRateValidMilesChanging(value);
                    this.SendPropertyChanging();
                    this._StartRateValidMiles = value;
                    this.SendPropertyChanged("StartRateValidMiles");
                    this.OnStartRateValidMilesChanged();
                }
            }
        }

        [Column(Storage = "_SortOrder", DbType = "Int")]
        public System.Nullable<int> SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if ((this._SortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.SendPropertyChanging();
                    this._SortOrder = value;
                    this.SendPropertyChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }

        [Column(Storage = "_ClientID", DbType = "BigInt")]
        public System.Nullable<long> ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.AccountsBooking")]
    public partial class AccountsBooking : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private long _BookingId;

        private System.Nullable<int> _AccountId;

        private System.Nullable<long> _SystemJobId;

        private EntityRef<WebBooking> _WebBooking;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnBookingIdChanging(long value);
        partial void OnBookingIdChanged();
        partial void OnAccountIdChanging(System.Nullable<int> value);
        partial void OnAccountIdChanged();
        partial void OnSystemJobIdChanging(System.Nullable<long> value);
        partial void OnSystemJobIdChanged();
        #endregion

        public AccountsBooking()
        {
            this._WebBooking = default(EntityRef<WebBooking>);
            OnCreated();
        }

        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_BookingId", DbType = "BigInt NOT NULL")]
        public long BookingId
        {
            get
            {
                return this._BookingId;
            }
            set
            {
                if ((this._BookingId != value))
                {
                    if (this._WebBooking.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnBookingIdChanging(value);
                    this.SendPropertyChanging();
                    this._BookingId = value;
                    this.SendPropertyChanged("BookingId");
                    this.OnBookingIdChanged();
                }
            }
        }

        [Column(Storage = "_AccountId", DbType = "Int")]
        public System.Nullable<int> AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if ((this._AccountId != value))
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

        [Column(Storage = "_SystemJobId", DbType = "BigInt")]
        public System.Nullable<long> SystemJobId
        {
            get
            {
                return this._SystemJobId;
            }
            set
            {
                if ((this._SystemJobId != value))
                {
                    this.OnSystemJobIdChanging(value);
                    this.SendPropertyChanging();
                    this._SystemJobId = value;
                    this.SendPropertyChanged("SystemJobId");
                    this.OnSystemJobIdChanged();
                }
            }
        }

        [Association(Name = "WebBooking_AccountsBooking", Storage = "_WebBooking", ThisKey = "BookingId", OtherKey = "ID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
        public WebBooking WebBooking
        {
            get
            {
                return this._WebBooking.Entity;
            }
            set
            {
                WebBooking previousValue = this._WebBooking.Entity;
                if (((previousValue != value)
                            || (this._WebBooking.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._WebBooking.Entity = null;
                        previousValue.BookingAccount = null;
                    }
                    this._WebBooking.Entity = value;
                    if ((value != null))
                    {
                        value.BookingAccount = this;
                        this._BookingId = value.ID;
                    }
                    else
                    {
                        this._BookingId = default(long);
                    }
                    this.SendPropertyChanged("WebBooking");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.CLients")]
    public partial class CLient : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private string _Name;

        private System.Nullable<bool> _LicenseExpired;

        private System.Nullable<long> _ClientTypeID;

        private System.Nullable<int> _Script;

        private string _SmsType;

        private System.Nullable<System.DateTime> _InstallationDate;

        private System.Nullable<System.DateTime> _LastBackUpDate;

        private System.Nullable<System.DateTime> _LicenseExpiryDate;

        private EntitySet<WebBooking> _WebBookings;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLicenseExpiredChanging(System.Nullable<bool> value);
        partial void OnLicenseExpiredChanged();
        partial void OnClientTypeIDChanging(System.Nullable<long> value);
        partial void OnClientTypeIDChanged();
        partial void OnScriptChanging(System.Nullable<int> value);
        partial void OnScriptChanged();
        partial void OnSmsTypeChanging(string value);
        partial void OnSmsTypeChanged();
        partial void OnInstallationDateChanging(System.Nullable<System.DateTime> value);
        partial void OnInstallationDateChanged();
        partial void OnLastBackUpDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLastBackUpDateChanged();
        partial void OnLicenseExpiryDateChanging(System.Nullable<System.DateTime> value);
        partial void OnLicenseExpiryDateChanged();
        #endregion

        public CLient()
        {
            this._WebBookings = new EntitySet<WebBooking>(new Action<WebBooking>(this.attach_WebBookings), new Action<WebBooking>(this.detach_WebBookings));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_LicenseExpired", DbType = "Bit")]
        public System.Nullable<bool> LicenseExpired
        {
            get
            {
                return this._LicenseExpired;
            }
            set
            {
                if ((this._LicenseExpired != value))
                {
                    this.OnLicenseExpiredChanging(value);
                    this.SendPropertyChanging();
                    this._LicenseExpired = value;
                    this.SendPropertyChanged("LicenseExpired");
                    this.OnLicenseExpiredChanged();
                }
            }
        }

        [Column(Storage = "_ClientTypeID", DbType = "BigInt")]
        public System.Nullable<long> ClientTypeID
        {
            get
            {
                return this._ClientTypeID;
            }
            set
            {
                if ((this._ClientTypeID != value))
                {
                    this.OnClientTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientTypeID = value;
                    this.SendPropertyChanged("ClientTypeID");
                    this.OnClientTypeIDChanged();
                }
            }
        }

        [Column(Storage = "_Script", DbType = "Int")]
        public System.Nullable<int> Script
        {
            get
            {
                return this._Script;
            }
            set
            {
                if ((this._Script != value))
                {
                    this.OnScriptChanging(value);
                    this.SendPropertyChanging();
                    this._Script = value;
                    this.SendPropertyChanged("Script");
                    this.OnScriptChanged();
                }
            }
        }

        [Column(Storage = "_SmsType", DbType = "VarChar(50)")]
        public string SmsType
        {
            get
            {
                return this._SmsType;
            }
            set
            {
                if ((this._SmsType != value))
                {
                    this.OnSmsTypeChanging(value);
                    this.SendPropertyChanging();
                    this._SmsType = value;
                    this.SendPropertyChanged("SmsType");
                    this.OnSmsTypeChanged();
                }
            }
        }

        [Column(Storage = "_InstallationDate", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> InstallationDate
        {
            get
            {
                return this._InstallationDate;
            }
            set
            {
                if ((this._InstallationDate != value))
                {
                    this.OnInstallationDateChanging(value);
                    this.SendPropertyChanging();
                    this._InstallationDate = value;
                    this.SendPropertyChanged("InstallationDate");
                    this.OnInstallationDateChanged();
                }
            }
        }

        [Column(Storage = "_LastBackUpDate", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> LastBackUpDate
        {
            get
            {
                return this._LastBackUpDate;
            }
            set
            {
                if ((this._LastBackUpDate != value))
                {
                    this.OnLastBackUpDateChanging(value);
                    this.SendPropertyChanging();
                    this._LastBackUpDate = value;
                    this.SendPropertyChanged("LastBackUpDate");
                    this.OnLastBackUpDateChanged();
                }
            }
        }

        [Column(Storage = "_LicenseExpiryDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> LicenseExpiryDate
        {
            get
            {
                return this._LicenseExpiryDate;
            }
            set
            {
                if ((this._LicenseExpiryDate != value))
                {
                    this.OnLicenseExpiryDateChanging(value);
                    this.SendPropertyChanging();
                    this._LicenseExpiryDate = value;
                    this.SendPropertyChanged("LicenseExpiryDate");
                    this.OnLicenseExpiryDateChanged();
                }
            }
        }

        [Association(Name = "CLient_WebBooking", Storage = "_WebBookings", ThisKey = "ID", OtherKey = "CLientID")]
        public EntitySet<WebBooking> WebBookings
        {
            get
            {
                return this._WebBookings;
            }
            set
            {
                this._WebBookings.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_WebBookings(WebBooking entity)
        {
            this.SendPropertyChanging();
            entity.CLient = this;
        }

        private void detach_WebBookings(WebBooking entity)
        {
            this.SendPropertyChanging();
            entity.CLient = null;
        }
    }

    [Table(Name = "dbo.Account_Details")]
    public partial class Account_Detail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _ClientId;

        private string _AccountNumber;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnClientIdChanging(string value);
        partial void OnClientIdChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        #endregion

        public Account_Detail()
        {
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_ClientId", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string ClientId
        {
            get
            {
                return this._ClientId;
            }
            set
            {
                if ((this._ClientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.SendPropertyChanging();
                    this._ClientId = value;
                    this.SendPropertyChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }

        [Column(Storage = "_AccountNumber", DbType = "VarChar(50)")]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if ((this._AccountNumber != value))
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Accounts")]
    public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _ClientId;

        private string _LoginId;

        private string _Password;

        private System.Nullable<bool> _IsActive;

        private string _AccountName;

        private System.Nullable<int> _AccountId;

        private string _AccountNumber;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnClientIdChanging(string value);
        partial void OnClientIdChanged();
        partial void OnLoginIdChanging(string value);
        partial void OnLoginIdChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnIsActiveChanging(System.Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnAccountNameChanging(string value);
        partial void OnAccountNameChanged();
        partial void OnAccountIdChanging(System.Nullable<int> value);
        partial void OnAccountIdChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        #endregion

        public Account()
        {
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Storage = "_ClientId", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string ClientId
        {
            get
            {
                return this._ClientId;
            }
            set
            {
                if ((this._ClientId != value))
                {
                    this.OnClientIdChanging(value);
                    this.SendPropertyChanging();
                    this._ClientId = value;
                    this.SendPropertyChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }

        [Column(Storage = "_LoginId", DbType = "VarChar(50)")]
        public string LoginId
        {
            get
            {
                return this._LoginId;
            }
            set
            {
                if ((this._LoginId != value))
                {
                    this.OnLoginIdChanging(value);
                    this.SendPropertyChanging();
                    this._LoginId = value;
                    this.SendPropertyChanged("LoginId");
                    this.OnLoginIdChanged();
                }
            }
        }

        [Column(Storage = "_Password", DbType = "VarChar(50)")]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Storage = "_IsActive", DbType = "Bit")]
        public System.Nullable<bool> IsActive
        {
            get
            {
                return this._IsActive;
            }
            set
            {
                if ((this._IsActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.SendPropertyChanging();
                    this._IsActive = value;
                    this.SendPropertyChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }

        [Column(Storage = "_AccountName", DbType = "VarChar(100)")]
        public string AccountName
        {
            get
            {
                return this._AccountName;
            }
            set
            {
                if ((this._AccountName != value))
                {
                    this.OnAccountNameChanging(value);
                    this.SendPropertyChanging();
                    this._AccountName = value;
                    this.SendPropertyChanged("AccountName");
                    this.OnAccountNameChanged();
                }
            }
        }

        [Column(Storage = "_AccountId", DbType = "Int", IsPrimaryKey = true)]
        public System.Nullable<int> AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if ((this._AccountId != value))
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging();
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

        [Column(Storage = "_AccountNumber", DbType = "VarChar(50)")]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if ((this._AccountNumber != value))
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging();
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Fare_Percentage")]
    public partial class Fare_Percentage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private System.Nullable<long> _VehicleID;

        private System.Nullable<bool> _IsAmountWise;

        private System.Nullable<int> _Percentage;

        private System.Nullable<decimal> _Amount;

        private System.Nullable<long> _ClientID;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnVehicleIDChanging(System.Nullable<long> value);
        partial void OnVehicleIDChanged();
        partial void OnIsAmountWiseChanging(System.Nullable<bool> value);
        partial void OnIsAmountWiseChanged();
        partial void OnPercentageChanging(System.Nullable<int> value);
        partial void OnPercentageChanged();
        partial void OnAmountChanging(System.Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnClientIDChanging(System.Nullable<long> value);
        partial void OnClientIDChanged();
        #endregion

        public Fare_Percentage()
        {
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_VehicleID", DbType = "BigInt")]
        public System.Nullable<long> VehicleID
        {
            get
            {
                return this._VehicleID;
            }
            set
            {
                if ((this._VehicleID != value))
                {
                    this.OnVehicleIDChanging(value);
                    this.SendPropertyChanging();
                    this._VehicleID = value;
                    this.SendPropertyChanged("VehicleID");
                    this.OnVehicleIDChanged();
                }
            }
        }

        [Column(Storage = "_IsAmountWise", DbType = "Bit")]
        public System.Nullable<bool> IsAmountWise
        {
            get
            {
                return this._IsAmountWise;
            }
            set
            {
                if ((this._IsAmountWise != value))
                {
                    this.OnIsAmountWiseChanging(value);
                    this.SendPropertyChanging();
                    this._IsAmountWise = value;
                    this.SendPropertyChanged("IsAmountWise");
                    this.OnIsAmountWiseChanged();
                }
            }
        }

        [Column(Storage = "_Percentage", DbType = "Int")]
        public System.Nullable<int> Percentage
        {
            get
            {
                return this._Percentage;
            }
            set
            {
                if ((this._Percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.SendPropertyChanging();
                    this._Percentage = value;
                    this.SendPropertyChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }

        [Column(Storage = "_Amount", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if ((this._Amount != value))
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        [Column(Storage = "_ClientID", DbType = "BigInt")]
        public System.Nullable<long> ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging(value);
                    this.SendPropertyChanging();
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Booking")]
    public partial class WebBooking : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _ID;

        private string _From;

        private string _FromType;

        private string _To;

        private string _ToType;

        private string _FlightNumber;

        private string _ToDoorNo;

        private string _ComingFrom;

        private string _VehicleName;

        private string _PickupDate;

        private string _PickupTime;

        private System.Nullable<short> _NoOfPassangers;

        private System.Nullable<short> _NoOfLuggages;

        private string _PassengerPhone;

        private string _Name;

        private System.Nullable<short> _NoOfHandLuggages;

        private string _Email;

        private string _SpecialRequirement;

        private string _FromOther;

        private string _PassengerMobile;

        private string _FromDoor;

        private string _FromStreet;

        private System.Nullable<bool> _IsUpdated;

        private System.Nullable<int> _JourneyTypeId;

        private System.Nullable<decimal> _Fares;

        private System.Nullable<decimal> _ReturnFares;

        private string _ToStreet;

        private System.Nullable<System.DateTime> _UpdatedOn;

        private string _UpdatedBy;

        private string _UpdateMessage;

        private System.Nullable<System.DateTime> _BookingDate;

        private string _ReturnDate;

        private string _ReturnTime;

        private string _PaymentType;

        private System.Nullable<long> _CLientID;

        private string _Status;

        private EntityRef<AccountsBooking> _AccountsBookings;

        private EntityRef<CLient> _CLient;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnFromChanging(string value);
        partial void OnFromChanged();
        partial void OnFromTypeChanging(string value);
        partial void OnFromTypeChanged();
        partial void OnToChanging(string value);
        partial void OnToChanged();
        partial void OnToTypeChanging(string value);
        partial void OnToTypeChanged();
        partial void OnFlightNumberChanging(string value);
        partial void OnFlightNumberChanged();
        partial void OnToDoorNoChanging(string value);
        partial void OnToDoorNoChanged();
        partial void OnComingFromChanging(string value);
        partial void OnComingFromChanged();
        partial void OnVehicleNameChanging(string value);
        partial void OnVehicleNameChanged();
        partial void OnPickupDateChanging(string value);
        partial void OnPickupDateChanged();
        partial void OnPickupTimeChanging(string value);
        partial void OnPickupTimeChanged();
        partial void OnNoOfPassangersChanging(System.Nullable<short> value);
        partial void OnNoOfPassangersChanged();
        partial void OnNoOfLuggagesChanging(System.Nullable<short> value);
        partial void OnNoOfLuggagesChanged();
        partial void OnPassengerPhoneChanging(string value);
        partial void OnPassengerPhoneChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNoOfHandLuggagesChanging(System.Nullable<short> value);
        partial void OnNoOfHandLuggagesChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnSpecialRequirementChanging(string value);
        partial void OnSpecialRequirementChanged();
        partial void OnFromOtherChanging(string value);
        partial void OnFromOtherChanged();
        partial void OnPassengerMobileChanging(string value);
        partial void OnPassengerMobileChanged();
        partial void OnFromDoorChanging(string value);
        partial void OnFromDoorChanged();
        partial void OnFromStreetChanging(string value);
        partial void OnFromStreetChanged();
        partial void OnIsUpdatedChanging(System.Nullable<bool> value);
        partial void OnIsUpdatedChanged();
        partial void OnJourneyTypeIdChanging(System.Nullable<int> value);
        partial void OnJourneyTypeIdChanged();
        partial void OnFaresChanging(System.Nullable<decimal> value);
        partial void OnFaresChanged();
        partial void OnReturnFaresChanging(System.Nullable<decimal> value);
        partial void OnReturnFaresChanged();
        partial void OnToStreetChanging(string value);
        partial void OnToStreetChanged();
        partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
        partial void OnUpdatedOnChanged();
        partial void OnUpdatedByChanging(string value);
        partial void OnUpdatedByChanged();
        partial void OnUpdateMessageChanging(string value);
        partial void OnUpdateMessageChanged();
        partial void OnBookingDateChanging(System.Nullable<System.DateTime> value);
        partial void OnBookingDateChanged();
        partial void OnReturnDateChanging(string value);
        partial void OnReturnDateChanged();
        partial void OnReturnTimeChanging(string value);
        partial void OnReturnTimeChanged();
        partial void OnPaymentTypeChanging(string value);
        partial void OnPaymentTypeChanged();
        partial void OnCLientIDChanging(System.Nullable<long> value);
        partial void OnCLientIDChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        #endregion

        public WebBooking()
        {
            this._AccountsBookings = default(EntityRef<AccountsBooking>);
            this._CLient = default(EntityRef<CLient>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Name = "[From]", Storage = "_From", DbType = "VarChar(500)")]
        public string From
        {
            get
            {
                return this._From;
            }
            set
            {
                if ((this._From != value))
                {
                    this.OnFromChanging(value);
                    this.SendPropertyChanging();
                    this._From = value;
                    this.SendPropertyChanged("From");
                    this.OnFromChanged();
                }
            }
        }

        [Column(Storage = "_FromType", DbType = "VarChar(50)")]
        public string FromType
        {
            get
            {
                return this._FromType;
            }
            set
            {
                if ((this._FromType != value))
                {
                    this.OnFromTypeChanging(value);
                    this.SendPropertyChanging();
                    this._FromType = value;
                    this.SendPropertyChanged("FromType");
                    this.OnFromTypeChanged();
                }
            }
        }

        [Column(Name = "[To]", Storage = "_To", DbType = "VarChar(500)")]
        public string To
        {
            get
            {
                return this._To;
            }
            set
            {
                if ((this._To != value))
                {
                    this.OnToChanging(value);
                    this.SendPropertyChanging();
                    this._To = value;
                    this.SendPropertyChanged("To");
                    this.OnToChanged();
                }
            }
        }

        [Column(Storage = "_ToType", DbType = "VarChar(50)")]
        public string ToType
        {
            get
            {
                return this._ToType;
            }
            set
            {
                if ((this._ToType != value))
                {
                    this.OnToTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ToType = value;
                    this.SendPropertyChanged("ToType");
                    this.OnToTypeChanged();
                }
            }
        }

        [Column(Storage = "_FlightNumber", DbType = "VarChar(50)")]
        public string FlightNumber
        {
            get
            {
                return this._FlightNumber;
            }
            set
            {
                if ((this._FlightNumber != value))
                {
                    this.OnFlightNumberChanging(value);
                    this.SendPropertyChanging();
                    this._FlightNumber = value;
                    this.SendPropertyChanged("FlightNumber");
                    this.OnFlightNumberChanged();
                }
            }
        }

        [Column(Storage = "_ToDoorNo", DbType = "VarChar(50)")]
        public string ToDoorNo
        {
            get
            {
                return this._ToDoorNo;
            }
            set
            {
                if ((this._ToDoorNo != value))
                {
                    this.OnToDoorNoChanging(value);
                    this.SendPropertyChanging();
                    this._ToDoorNo = value;
                    this.SendPropertyChanged("ToDoorNo");
                    this.OnToDoorNoChanged();
                }
            }
        }

        [Column(Storage = "_ComingFrom", DbType = "VarChar(100)")]
        public string ComingFrom
        {
            get
            {
                return this._ComingFrom;
            }
            set
            {
                if ((this._ComingFrom != value))
                {
                    this.OnComingFromChanging(value);
                    this.SendPropertyChanging();
                    this._ComingFrom = value;
                    this.SendPropertyChanged("ComingFrom");
                    this.OnComingFromChanged();
                }
            }
        }

        [Column(Storage = "_VehicleName", DbType = "VarChar(150)")]
        public string VehicleName
        {
            get
            {
                return this._VehicleName;
            }
            set
            {
                if ((this._VehicleName != value))
                {
                    this.OnVehicleNameChanging(value);
                    this.SendPropertyChanging();
                    this._VehicleName = value;
                    this.SendPropertyChanged("VehicleName");
                    this.OnVehicleNameChanged();
                }
            }
        }

        [Column(Storage = "_PickupDate", DbType = "VarChar(50)")]
        public string PickupDate
        {
            get
            {
                return this._PickupDate;
            }
            set
            {
                if ((this._PickupDate != value))
                {
                    this.OnPickupDateChanging(value);
                    this.SendPropertyChanging();
                    this._PickupDate = value;
                    this.SendPropertyChanged("PickupDate");
                    this.OnPickupDateChanged();
                }
            }
        }

        [Column(Storage = "_PickupTime", DbType = "VarChar(50)")]
        public string PickupTime
        {
            get
            {
                return this._PickupTime;
            }
            set
            {
                if ((this._PickupTime != value))
                {
                    this.OnPickupTimeChanging(value);
                    this.SendPropertyChanging();
                    this._PickupTime = value;
                    this.SendPropertyChanged("PickupTime");
                    this.OnPickupTimeChanged();
                }
            }
        }

        [Column(Storage = "_NoOfPassangers", DbType = "SmallInt")]
        public System.Nullable<short> NoOfPassangers
        {
            get
            {
                return this._NoOfPassangers;
            }
            set
            {
                if ((this._NoOfPassangers != value))
                {
                    this.OnNoOfPassangersChanging(value);
                    this.SendPropertyChanging();
                    this._NoOfPassangers = value;
                    this.SendPropertyChanged("NoOfPassangers");
                    this.OnNoOfPassangersChanged();
                }
            }
        }

        [Column(Storage = "_NoOfLuggages", DbType = "SmallInt")]
        public System.Nullable<short> NoOfLuggages
        {
            get
            {
                return this._NoOfLuggages;
            }
            set
            {
                if ((this._NoOfLuggages != value))
                {
                    this.OnNoOfLuggagesChanging(value);
                    this.SendPropertyChanging();
                    this._NoOfLuggages = value;
                    this.SendPropertyChanged("NoOfLuggages");
                    this.OnNoOfLuggagesChanged();
                }
            }
        }

        [Column(Storage = "_PassengerPhone", DbType = "VarChar(50)")]
        public string PassengerPhone
        {
            get
            {
                return this._PassengerPhone;
            }
            set
            {
                if ((this._PassengerPhone != value))
                {
                    this.OnPassengerPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._PassengerPhone = value;
                    this.SendPropertyChanged("PassengerPhone");
                    this.OnPassengerPhoneChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(100)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_NoOfHandLuggages", DbType = "SmallInt")]
        public System.Nullable<short> NoOfHandLuggages
        {
            get
            {
                return this._NoOfHandLuggages;
            }
            set
            {
                if ((this._NoOfHandLuggages != value))
                {
                    this.OnNoOfHandLuggagesChanging(value);
                    this.SendPropertyChanging();
                    this._NoOfHandLuggages = value;
                    this.SendPropertyChanged("NoOfHandLuggages");
                    this.OnNoOfHandLuggagesChanged();
                }
            }
        }

        [Column(Storage = "_Email", DbType = "VarChar(100)")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if ((this._Email != value))
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        [Column(Storage = "_SpecialRequirement", DbType = "VarChar(500)")]
        public string SpecialRequirement
        {
            get
            {
                return this._SpecialRequirement;
            }
            set
            {
                if ((this._SpecialRequirement != value))
                {
                    this.OnSpecialRequirementChanging(value);
                    this.SendPropertyChanging();
                    this._SpecialRequirement = value;
                    this.SendPropertyChanged("SpecialRequirement");
                    this.OnSpecialRequirementChanged();
                }
            }
        }

        [Column(Storage = "_FromOther", DbType = "VarChar(250)")]
        public string FromOther
        {
            get
            {
                return this._FromOther;
            }
            set
            {
                if ((this._FromOther != value))
                {
                    this.OnFromOtherChanging(value);
                    this.SendPropertyChanging();
                    this._FromOther = value;
                    this.SendPropertyChanged("FromOther");
                    this.OnFromOtherChanged();
                }
            }
        }

        [Column(Storage = "_PassengerMobile", DbType = "VarChar(50)")]
        public string PassengerMobile
        {
            get
            {
                return this._PassengerMobile;
            }
            set
            {
                if ((this._PassengerMobile != value))
                {
                    this.OnPassengerMobileChanging(value);
                    this.SendPropertyChanging();
                    this._PassengerMobile = value;
                    this.SendPropertyChanged("PassengerMobile");
                    this.OnPassengerMobileChanged();
                }
            }
        }

        [Column(Storage = "_FromDoor", DbType = "VarChar(50)")]
        public string FromDoor
        {
            get
            {
                return this._FromDoor;
            }
            set
            {
                if ((this._FromDoor != value))
                {
                    this.OnFromDoorChanging(value);
                    this.SendPropertyChanging();
                    this._FromDoor = value;
                    this.SendPropertyChanged("FromDoor");
                    this.OnFromDoorChanged();
                }
            }
        }

        [Column(Storage = "_FromStreet", DbType = "VarChar(100)")]
        public string FromStreet
        {
            get
            {
                return this._FromStreet;
            }
            set
            {
                if ((this._FromStreet != value))
                {
                    this.OnFromStreetChanging(value);
                    this.SendPropertyChanging();
                    this._FromStreet = value;
                    this.SendPropertyChanged("FromStreet");
                    this.OnFromStreetChanged();
                }
            }
        }

        [Column(Storage = "_IsUpdated", DbType = "Bit")]
        public System.Nullable<bool> IsUpdated
        {
            get
            {
                return this._IsUpdated;
            }
            set
            {
                if ((this._IsUpdated != value))
                {
                    this.OnIsUpdatedChanging(value);
                    this.SendPropertyChanging();
                    this._IsUpdated = value;
                    this.SendPropertyChanged("IsUpdated");
                    this.OnIsUpdatedChanged();
                }
            }
        }

        [Column(Storage = "_JourneyTypeId", DbType = "Int")]
        public System.Nullable<int> JourneyTypeId
        {
            get
            {
                return this._JourneyTypeId;
            }
            set
            {
                if ((this._JourneyTypeId != value))
                {
                    this.OnJourneyTypeIdChanging(value);
                    this.SendPropertyChanging();
                    this._JourneyTypeId = value;
                    this.SendPropertyChanged("JourneyTypeId");
                    this.OnJourneyTypeIdChanged();
                }
            }
        }

        [Column(Storage = "_Fares", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> Fares
        {
            get
            {
                return this._Fares;
            }
            set
            {
                if ((this._Fares != value))
                {
                    this.OnFaresChanging(value);
                    this.SendPropertyChanging();
                    this._Fares = value;
                    this.SendPropertyChanged("Fares");
                    this.OnFaresChanged();
                }
            }
        }

        [Column(Storage = "_ReturnFares", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> ReturnFares
        {
            get
            {
                return this._ReturnFares;
            }
            set
            {
                if ((this._ReturnFares != value))
                {
                    this.OnReturnFaresChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnFares = value;
                    this.SendPropertyChanged("ReturnFares");
                    this.OnReturnFaresChanged();
                }
            }
        }

        [Column(Storage = "_ToStreet", DbType = "VarChar(100)")]
        public string ToStreet
        {
            get
            {
                return this._ToStreet;
            }
            set
            {
                if ((this._ToStreet != value))
                {
                    this.OnToStreetChanging(value);
                    this.SendPropertyChanging();
                    this._ToStreet = value;
                    this.SendPropertyChanged("ToStreet");
                    this.OnToStreetChanged();
                }
            }
        }

        [Column(Storage = "_UpdatedOn", DbType = "DateTime")]
        public System.Nullable<System.DateTime> UpdatedOn
        {
            get
            {
                return this._UpdatedOn;
            }
            set
            {
                if ((this._UpdatedOn != value))
                {
                    this.OnUpdatedOnChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedOn = value;
                    this.SendPropertyChanged("UpdatedOn");
                    this.OnUpdatedOnChanged();
                }
            }
        }

        [Column(Storage = "_UpdatedBy", DbType = "VarChar(50)")]
        public string UpdatedBy
        {
            get
            {
                return this._UpdatedBy;
            }
            set
            {
                if ((this._UpdatedBy != value))
                {
                    this.OnUpdatedByChanging(value);
                    this.SendPropertyChanging();
                    this._UpdatedBy = value;
                    this.SendPropertyChanged("UpdatedBy");
                    this.OnUpdatedByChanged();
                }
            }
        }

        [Column(Storage = "_UpdateMessage", DbType = "VarChar(200)")]
        public string UpdateMessage
        {
            get
            {
                return this._UpdateMessage;
            }
            set
            {
                if ((this._UpdateMessage != value))
                {
                    this.OnUpdateMessageChanging(value);
                    this.SendPropertyChanging();
                    this._UpdateMessage = value;
                    this.SendPropertyChanged("UpdateMessage");
                    this.OnUpdateMessageChanged();
                }
            }
        }

        [Column(Storage = "_BookingDate", DbType = "DateTime")]
        public System.Nullable<System.DateTime> BookingDate
        {
            get
            {
                return this._BookingDate;
            }
            set
            {
                if ((this._BookingDate != value))
                {
                    this.OnBookingDateChanging(value);
                    this.SendPropertyChanging();
                    this._BookingDate = value;
                    this.SendPropertyChanged("BookingDate");
                    this.OnBookingDateChanged();
                }
            }
        }

        [Column(Storage = "_ReturnDate", DbType = "VarChar(50)")]
        public string ReturnDate
        {
            get
            {
                return this._ReturnDate;
            }
            set
            {
                if ((this._ReturnDate != value))
                {
                    this.OnReturnDateChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnDate = value;
                    this.SendPropertyChanged("ReturnDate");
                    this.OnReturnDateChanged();
                }
            }
        }

        [Column(Storage = "_ReturnTime", DbType = "VarChar(50)")]
        public string ReturnTime
        {
            get
            {
                return this._ReturnTime;
            }
            set
            {
                if ((this._ReturnTime != value))
                {
                    this.OnReturnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ReturnTime = value;
                    this.SendPropertyChanged("ReturnTime");
                    this.OnReturnTimeChanged();
                }
            }
        }

        [Column(Storage = "_PaymentType", DbType = "VarChar(50)")]
        public string PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if ((this._PaymentType != value))
                {
                    this.OnPaymentTypeChanging(value);
                    this.SendPropertyChanging();
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        [Column(Storage = "_CLientID", DbType = "BigInt")]
        public System.Nullable<long> CLientID
        {
            get
            {
                return this._CLientID;
            }
            set
            {
                if ((this._CLientID != value))
                {
                    if (this._CLient.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCLientIDChanging(value);
                    this.SendPropertyChanging();
                    this._CLientID = value;
                    this.SendPropertyChanged("CLientID");
                    this.OnCLientIDChanged();
                }
            }
        }

        [Column(Storage = "_Status", DbType = "VarChar(50)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if ((this._Status != value))
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [Association(Name = "WebBooking_AccountsBooking", Storage = "_AccountsBookings", ThisKey = "ID", OtherKey = "BookingId", IsUnique = true, IsForeignKey = false)]
        public AccountsBooking BookingAccount
        {
            get
            {
                return this._AccountsBookings.Entity;
            }
            set
            {
                AccountsBooking previousValue = this._AccountsBookings.Entity;
                if (((previousValue != value)
                            || (this._AccountsBookings.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._AccountsBookings.Entity = null;
                        previousValue.WebBooking = null;
                    }
                    this._AccountsBookings.Entity = value;
                    if ((value != null))
                    {
                        value.WebBooking = this;
                    }
                    this.SendPropertyChanged("BookingAccount");
                }
            }
        }

        [Association(Name = "CLient_WebBooking", Storage = "_CLient", ThisKey = "CLientID", OtherKey = "ID", IsForeignKey = true)]
        public CLient CLient
        {
            get
            {
                return this._CLient.Entity;
            }
            set
            {
                CLient previousValue = this._CLient.Entity;
                if (((previousValue != value)
                            || (this._CLient.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._CLient.Entity = null;
                        previousValue.WebBookings.Remove(this);
                    }
                    this._CLient.Entity = value;
                    if ((value != null))
                    {
                        value.WebBookings.Add(this);
                        this._CLientID = value.ID;
                    }
                    else
                    {
                        this._CLientID = default(Nullable<long>);
                    }
                    this.SendPropertyChanged("CLient");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Booking_ViaLocations")]
    public partial class WebBooking_ViaLocation
    {

        private long _Id;

        private long _BookingId;

        private string _ViaLocValue;

        public WebBooking_ViaLocation()
        {
        }

        [Column(Storage = "_Id", AutoSync = AutoSync.Always, DbType = "BigInt NOT NULL IDENTITY", IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this._Id = value;
                }
            }
        }

        [Column(Storage = "_BookingId", DbType = "BigInt NOT NULL")]
        public long BookingId
        {
            get
            {
                return this._BookingId;
            }
            set
            {
                if ((this._BookingId != value))
                {
                    this._BookingId = value;
                }
            }
        }

        [Column(Storage = "_ViaLocValue", DbType = "VarChar(500)")]
        public string ViaLocValue
        {
            get
            {
                return this._ViaLocValue;
            }
            set
            {
                if ((this._ViaLocValue != value))
                {
                    this._ViaLocValue = value;
                }
            }
        }
    }

    [Table(Name = "dbo.Booking_BookerDetail")]
    public partial class Booking_BookerDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _id;

        private string _BookerFullName;

        private string _BookerEmail;

        private string _BookingMobileNo;

        private string _BookerHomeNo;

        private long _BookingId;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(long value);
        partial void OnidChanged();
        partial void OnBookerFullNameChanging(string value);
        partial void OnBookerFullNameChanged();
        partial void OnBookerEmailChanging(string value);
        partial void OnBookerEmailChanged();
        partial void OnBookingMobileNoChanging(string value);
        partial void OnBookingMobileNoChanged();
        partial void OnBookerHomeNoChanging(string value);
        partial void OnBookerHomeNoChanged();
        partial void OnBookingIdChanging(long value);
        partial void OnBookingIdChanged();
        #endregion

        public Booking_BookerDetail()
        {
            OnCreated();
        }

        [Column(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [Column(Storage = "_BookerFullName", DbType = "VarChar(250) NOT NULL", CanBeNull = false)]
        public string BookerFullName
        {
            get
            {
                return this._BookerFullName;
            }
            set
            {
                if ((this._BookerFullName != value))
                {
                    this.OnBookerFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._BookerFullName = value;
                    this.SendPropertyChanged("BookerFullName");
                    this.OnBookerFullNameChanged();
                }
            }
        }

        [Column(Storage = "_BookerEmail", DbType = "VarChar(250) NOT NULL", CanBeNull = false)]
        public string BookerEmail
        {
            get
            {
                return this._BookerEmail;
            }
            set
            {
                if ((this._BookerEmail != value))
                {
                    this.OnBookerEmailChanging(value);
                    this.SendPropertyChanging();
                    this._BookerEmail = value;
                    this.SendPropertyChanged("BookerEmail");
                    this.OnBookerEmailChanged();
                }
            }
        }

        [Column(Storage = "_BookingMobileNo", DbType = "VarChar(250) NOT NULL", CanBeNull = false)]
        public string BookingMobileNo
        {
            get
            {
                return this._BookingMobileNo;
            }
            set
            {
                if ((this._BookingMobileNo != value))
                {
                    this.OnBookingMobileNoChanging(value);
                    this.SendPropertyChanging();
                    this._BookingMobileNo = value;
                    this.SendPropertyChanged("BookingMobileNo");
                    this.OnBookingMobileNoChanged();
                }
            }
        }

        [Column(Storage = "_BookerHomeNo", DbType = "VarChar(250)")]
        public string BookerHomeNo
        {
            get
            {
                return this._BookerHomeNo;
            }
            set
            {
                if ((this._BookerHomeNo != value))
                {
                    this.OnBookerHomeNoChanging(value);
                    this.SendPropertyChanging();
                    this._BookerHomeNo = value;
                    this.SendPropertyChanged("BookerHomeNo");
                    this.OnBookerHomeNoChanged();
                }
            }
        }

        [Column(Storage = "_BookingId", DbType = "BigInt NOT NULL")]
        public long BookingId
        {
            get
            {
                return this._BookingId;
            }
            set
            {
                if ((this._BookingId != value))
                {
                    this.OnBookingIdChanging(value);
                    this.SendPropertyChanging();
                    this._BookingId = value;
                    this.SendPropertyChanged("BookingId");
                    this.OnBookingIdChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.CreditData")]
    public partial class CreditData
    {

        private System.Nullable<long> _BookingId;

        private string _CardNumber;

        private string _StartDate;

        private string _Expiry;

        private string _SecurityCode;

        private string _CardRegisterAddress;

        private System.Nullable<decimal> _Amount;

        private string _CardType;

        private string _LastName;

        private string _FirstName;

        private string _AddressLine2;

        private string _Town;

        private string _Postcode;

        private string _Country;

        public CreditData()
        {
        }

        [Column(Storage = "_BookingId", DbType = "BigInt")]
        public System.Nullable<long> BookingId
        {
            get
            {
                return this._BookingId;
            }
            set
            {
                if ((this._BookingId != value))
                {
                    this._BookingId = value;
                }
            }
        }

        [Column(Storage = "_CardNumber", DbType = "VarChar(50)")]
        public string CardNumber
        {
            get
            {
                return this._CardNumber;
            }
            set
            {
                if ((this._CardNumber != value))
                {
                    this._CardNumber = value;
                }
            }
        }

        [Column(Storage = "_StartDate", DbType = "VarChar(50)")]
        public string StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if ((this._StartDate != value))
                {
                    this._StartDate = value;
                }
            }
        }

        [Column(Storage = "_Expiry", DbType = "VarChar(50)")]
        public string Expiry
        {
            get
            {
                return this._Expiry;
            }
            set
            {
                if ((this._Expiry != value))
                {
                    this._Expiry = value;
                }
            }
        }

        [Column(Storage = "_SecurityCode", DbType = "VarChar(50)")]
        public string SecurityCode
        {
            get
            {
                return this._SecurityCode;
            }
            set
            {
                if ((this._SecurityCode != value))
                {
                    this._SecurityCode = value;
                }
            }
        }

        [Column(Storage = "_CardRegisterAddress", DbType = "VarChar(MAX)")]
        public string CardRegisterAddress
        {
            get
            {
                return this._CardRegisterAddress;
            }
            set
            {
                if ((this._CardRegisterAddress != value))
                {
                    this._CardRegisterAddress = value;
                }
            }
        }

        [Column(Storage = "_Amount", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if ((this._Amount != value))
                {
                    this._Amount = value;
                }
            }
        }

        [Column(Storage = "_CardType", DbType = "VarChar(50)")]
        public string CardType
        {
            get
            {
                return this._CardType;
            }
            set
            {
                if ((this._CardType != value))
                {
                    this._CardType = value;
                }
            }
        }

        [Column(Storage = "_LastName", DbType = "VarChar(100)")]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if ((this._LastName != value))
                {
                    this._LastName = value;
                }
            }
        }

        [Column(Storage = "_FirstName", DbType = "VarChar(100)")]
        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if ((this._FirstName != value))
                {
                    this._FirstName = value;
                }
            }
        }

        [Column(Storage = "_AddressLine2", DbType = "VarChar(MAX)")]
        public string AddressLine2
        {
            get
            {
                return this._AddressLine2;
            }
            set
            {
                if ((this._AddressLine2 != value))
                {
                    this._AddressLine2 = value;
                }
            }
        }

        [Column(Storage = "_Town", DbType = "VarChar(250)")]
        public string Town
        {
            get
            {
                return this._Town;
            }
            set
            {
                if ((this._Town != value))
                {
                    this._Town = value;
                }
            }
        }

        [Column(Storage = "_Postcode", DbType = "VarChar(250)")]
        public string Postcode
        {
            get
            {
                return this._Postcode;
            }
            set
            {
                if ((this._Postcode != value))
                {
                    this._Postcode = value;
                }
            }
        }

        [Column(Storage = "_Country", DbType = "VarChar(250)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if ((this._Country != value))
                {
                    this._Country = value;
                }
            }
        }
    }

    public partial class spGetFare_MileviseResult
    {

        private long _ID;

        private string _Name;

        private string _Image;

        private System.Nullable<short> _NoOfPassengers;

        private System.Nullable<short> _NoOfLuggages;

        private System.Nullable<short> _HandLuggages;

        private System.Nullable<decimal> _StartRate;

        private string _Logo;

        private System.Nullable<int> _SortOrder;

        private System.Nullable<decimal> _Fare;

        private System.Nullable<decimal> _ReturnFare;

        public spGetFare_MileviseResult()
        {
        }

        [Column(Storage = "_ID", DbType = "BigInt NOT NULL")]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [Column(Storage = "_Image", DbType = "VarChar(50)")]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if ((this._Image != value))
                {
                    this._Image = value;
                }
            }
        }

        [Column(Storage = "_NoOfPassengers", DbType = "SmallInt")]
        public System.Nullable<short> NoOfPassengers
        {
            get
            {
                return this._NoOfPassengers;
            }
            set
            {
                if ((this._NoOfPassengers != value))
                {
                    this._NoOfPassengers = value;
                }
            }
        }

        [Column(Storage = "_NoOfLuggages", DbType = "SmallInt")]
        public System.Nullable<short> NoOfLuggages
        {
            get
            {
                return this._NoOfLuggages;
            }
            set
            {
                if ((this._NoOfLuggages != value))
                {
                    this._NoOfLuggages = value;
                }
            }
        }

        [Column(Storage = "_HandLuggages", DbType = "SmallInt")]
        public System.Nullable<short> HandLuggages
        {
            get
            {
                return this._HandLuggages;
            }
            set
            {
                if ((this._HandLuggages != value))
                {
                    this._HandLuggages = value;
                }
            }
        }

        [Column(Storage = "_StartRate", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> StartRate
        {
            get
            {
                return this._StartRate;
            }
            set
            {
                if ((this._StartRate != value))
                {
                    this._StartRate = value;
                }
            }
        }

        [Column(Storage = "_Logo", DbType = "VarChar(117)")]
        public string Logo
        {
            get
            {
                return this._Logo;
            }
            set
            {
                if ((this._Logo != value))
                {
                    this._Logo = value;
                }
            }
        }

        [Column(Storage = "_SortOrder", DbType = "Int")]
        public System.Nullable<int> SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if ((this._SortOrder != value))
                {
                    this._SortOrder = value;
                }
            }
        }

        [Column(Storage = "_Fare", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> Fare
        {
            get
            {
                return this._Fare;
            }
            set
            {
                if ((this._Fare != value))
                {
                    this._Fare = value;
                }
            }
        }

        [Column(Storage = "_ReturnFare", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> ReturnFare
        {
            get
            {
                return this._ReturnFare;
            }
            set
            {
                if ((this._ReturnFare != value))
                {
                    this._ReturnFare = value;
                }
            }
        }
    }

    public partial class stp_VerifyClientAppAccountResult
    {

        private string _VerifyingColumn;

        public stp_VerifyClientAppAccountResult()
        {
        }

        [Column(Storage = "_VerifyingColumn", DbType = "VarChar(MAX)")]
        public string VerifyingColumn
        {
            get
            {
                return this._VerifyingColumn;
            }
            set
            {
                if ((this._VerifyingColumn != value))
                {
                    this._VerifyingColumn = value;
                }
            }
        }
    }

    public partial class spGetFare_LocationVise1Result
    {

        private long _ID;

        private string _Name;

        private string _Image;

        private System.Nullable<short> _NoOfPassengers;

        private System.Nullable<short> _NoOfLuggages;

        private System.Nullable<short> _HandLuggages;

        private System.Nullable<decimal> _StartRate;

        private System.Nullable<decimal> _IncrementRate;

        private System.Nullable<decimal> _StartRateValidMiles;

        private string _Logo;

        private System.Nullable<int> _SortOrder;

        private System.Nullable<decimal> _Fare;

        private System.Nullable<decimal> _ReturnFare;

        public spGetFare_LocationVise1Result()
        {
        }

        [Column(Storage = "_ID", DbType = "BigInt NOT NULL")]
        public long ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }

        [Column(Storage = "_Name", DbType = "VarChar(50)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }

        [Column(Storage = "_Image", DbType = "VarChar(50)")]
        public string Image
        {
            get
            {
                return this._Image;
            }
            set
            {
                if ((this._Image != value))
                {
                    this._Image = value;
                }
            }
        }

        [Column(Storage = "_NoOfPassengers", DbType = "SmallInt")]
        public System.Nullable<short> NoOfPassengers
        {
            get
            {
                return this._NoOfPassengers;
            }
            set
            {
                if ((this._NoOfPassengers != value))
                {
                    this._NoOfPassengers = value;
                }
            }
        }

        [Column(Storage = "_NoOfLuggages", DbType = "SmallInt")]
        public System.Nullable<short> NoOfLuggages
        {
            get
            {
                return this._NoOfLuggages;
            }
            set
            {
                if ((this._NoOfLuggages != value))
                {
                    this._NoOfLuggages = value;
                }
            }
        }

        [Column(Storage = "_HandLuggages", DbType = "SmallInt")]
        public System.Nullable<short> HandLuggages
        {
            get
            {
                return this._HandLuggages;
            }
            set
            {
                if ((this._HandLuggages != value))
                {
                    this._HandLuggages = value;
                }
            }
        }

        [Column(Storage = "_StartRate", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> StartRate
        {
            get
            {
                return this._StartRate;
            }
            set
            {
                if ((this._StartRate != value))
                {
                    this._StartRate = value;
                }
            }
        }

        [Column(Storage = "_IncrementRate", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> IncrementRate
        {
            get
            {
                return this._IncrementRate;
            }
            set
            {
                if ((this._IncrementRate != value))
                {
                    this._IncrementRate = value;
                }
            }
        }

        [Column(Storage = "_StartRateValidMiles", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> StartRateValidMiles
        {
            get
            {
                return this._StartRateValidMiles;
            }
            set
            {
                if ((this._StartRateValidMiles != value))
                {
                    this._StartRateValidMiles = value;
                }
            }
        }

        [Column(Storage = "_Logo", DbType = "VarChar(117)")]
        public string Logo
        {
            get
            {
                return this._Logo;
            }
            set
            {
                if ((this._Logo != value))
                {
                    this._Logo = value;
                }
            }
        }

        [Column(Storage = "_SortOrder", DbType = "Int")]
        public System.Nullable<int> SortOrder
        {
            get
            {
                return this._SortOrder;
            }
            set
            {
                if ((this._SortOrder != value))
                {
                    this._SortOrder = value;
                }
            }
        }

        [Column(Storage = "_Fare", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> Fare
        {
            get
            {
                return this._Fare;
            }
            set
            {
                if ((this._Fare != value))
                {
                    this._Fare = value;
                }
            }
        }

        [Column(Storage = "_ReturnFare", DbType = "Decimal(0,0)")]
        public System.Nullable<decimal> ReturnFare
        {
            get
            {
                return this._ReturnFare;
            }
            set
            {
                if ((this._ReturnFare != value))
                {
                    this._ReturnFare = value;
                }
            }
        }
    }
}
#pragma warning restore 1591
