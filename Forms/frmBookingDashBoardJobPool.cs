using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Taxi_BLL;
using DAL;
using Taxi_Model;
using Telerik.WinControls.UI;
using Utils;
using System.Threading;
using System.Diagnostics;
using Telerik.WinControls;
using Telerik.WinControls.UI.Docking;

using Taxi_AppMain.Classes;

using System.Net;
using System.Xml;
using Telerik.WinControls.Enumerations;
using System.IO;
using System.Collections;
using Taxi_AppMain.Forms;

using Telerik.WinControls.Primitives;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using Microsoft.Win32;
using DotNetCoords;
using System.Data.Linq;
using System.Media;
using System.Speech.Synthesis;
using System.Linq.Expressions;
using System.Reflection;
using System.Net.Mail;




namespace Taxi_AppMain
{
    public partial class frmBookingDashBoardJobPool: UI.SetupBase
    {
        private string bookingEngineType = "old";

        RadDropDownMenu statsContextMenu = null;

        RadDropDownMenu EditFare = null;

        [DllImport("kernel32.dll")]
        public static extern bool SetProcessWorkingSetSize(IntPtr proc, int min, int max);

        frmAuthorization frmAuth = null;

        BookingBO objMaster;

        private Color selectedRowBackColor;
        private Color selectedRowForeColor;

        RadDropDownMenu firstContextMenu = null;
        RadDropDownMenu secondContextMenu = null;
        RadDropDownMenu driverContextMenu = null;

        RadDropDownMenu searchJobContextMenu = null;

        delegate void UIDelegate();
        delegate void UIParameterizedDelegate(string name, string phoneNumber);
        delegate void UIOnlineBookingDelegate(List<Booking> list);
        delegate void UIOnlineBookingMultiDelegate(long jobId, Booking objNewBooking);
        frmSMSReply frmInbox = null;

        private bool IsServer = true;

        bool CanReadSMS;
        bool EnableWebBooking;
        bool enableBiddingTab;

        ConditionalFormattingObject objPanic = null;
        ConditionalFormattingObject objPanicBlink = null;
        DateTime now;

        private bool _IsLicenseExpired;

        public bool IsLicenseExpired
        {
            get { return _IsLicenseExpired; }
            set { _IsLicenseExpired = value; }
        }


        string contentText = string.Empty;
        string captionText = string.Empty;
        Image contentImage = null;
        System.Media.SystemSound alertSound = null;


        frmLoading frm = null;

        private bool _EnablePDA;

        public bool EnablePDA
        {
            get { return _EnablePDA; }
            set { _EnablePDA = value; }
        }


        Font regularFont = new Font("Tahoma", 10, FontStyle.Regular);

        Font oldFont = new Font("Tahoma", 10, FontStyle.Bold);
        Font newFont = new Font("Tahoma", 10, FontStyle.Bold);
        Font bigFont = new Font("Tahoma", 12, FontStyle.Bold);

        private Color _HeaderRowBackColor = Color.SteelBlue;

        public Color HeaderRowBackColor
        {
            get { return _HeaderRowBackColor; }
            set { _HeaderRowBackColor = value; }
        }


        private Color _HeaderRowBorderColor = Color.DarkSlateBlue;

        public Color HeaderRowBorderColor
        {
            get { return _HeaderRowBorderColor; }
            set { _HeaderRowBorderColor = value; }
        }

        private int AvgFirstBookingExpMins = 0;
        private int EachAdditoinalBookingExpMins = 0;

        Thread th_WebBooking = null;

        bool Keycalled = false;

        DateTime? fromDate = null;
        DateTime? tillDate = null;

        private int DaysInTodayBooking = 0;
        bool IsRecentJob_TabbedOpened = false;
        bool IsStats_TabbedOpened = false;


        private int BookingAlertMins = 0;

        System.Media.SoundPlayer sp = new System.Media.SoundPlayer(System.Windows.Forms.Application.StartupPath + "\\sound\\Startup.wav");
        System.Media.SoundPlayer spMessaging = new System.Media.SoundPlayer();

      

        List<Gen_Syspolicy_LocationExpiry> listofLocationExpiry = null;

        private bool HasWebBookingTab;
        private bool DisableWebBookingPopup;
        private string AccJobsShowNotifyDay = string.Empty;

        private bool DisablePopupNotifications;
        private bool ApplyAccBgOnRow;


        int PHCVehicleDays = 0;
        int PHCDriverDays = 0;
        int MOTDays = 0;
        int InsuranceDays = 0;
        int MOT2Days = 0;
        int LicenseDays = 0;
        int RoadTaxDays = 0;


        private bool AutoEmailControllerReport;
        private int PreBookingDefaultDays;
        private string ControllerReportDay;
        private bool AutoBookingDueAlert;
        private bool EnableGhostJob = false;

       
        public frmBookingDashBoardJobPool()
        {


            try
            {


                InitializeComponent();

                string conn = General.DecryptConnectionString(System.Configuration.ConfigurationManager.AppSettings["ConnectionString"].ToStr());
                string ip = conn.Remove(conn.IndexOf(';'));
                ip = ip.Substring(ip.IndexOf('=') + 1);
                if (ip.IsValidIPAddress() || ip.Contains("."))
                    IsServer = false;



                this.Load += new EventHandler(frmBookingsList_Load);
                ddlDriver.Enter += new EventHandler(ddlDriver_Enter);
                ddlVehicleType.Enter += new EventHandler(ddlVehicleType_Enter);
                ddlCompany.Enter += new EventHandler(ddlCompany_Enter);

                if (ThemeResolutionService.ApplicationThemeName == "ControlDefault")
                {
                    this.selectedRowBackColor = Color.DeepSkyBlue;
                    this.selectedRowForeColor = Color.White;
                }
                else
                {
                    this.selectedRowBackColor = Color.Empty;
                    this.selectedRowForeColor = Color.Black;
                }


                grdPendingJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);
                grdPendingJobs.RowsChanging += new Telerik.WinControls.UI.GridViewCollectionChangingEventHandler(Grid_RowsChanging);

             //   grdDriverWaiting.TableElement.AllowDrag = true;
             //   grdDriverWaiting.TableElement.AllowDrop = true;


             //   grdPendingJobs.TableElement.AllowDrag = false;
               // grdPendingJobs.TableElement.AllowDrop = false;


                RadDragDropService dragDropServicePending = grdPendingJobs.GridViewElement.GetService<RadDragDropService>();
                dragDropServicePending.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropServicePending_PreviewDragStart);
              


                this.FormClosing += new FormClosingEventHandler(frmBookingDashBoard_FormClosing);

                grdDriverWaiting.ShowRowHeaderColumn = false;
                grdDriverWaiting.ShowGroupPanel = false;
                grdDriverWaiting.AllowAddNewRow = false;
                grdDriverWaiting.CommandCellClick += new CommandCellClickEventHandler(grdDriverWaiting_CommandCellClick);
                grdDriverWaiting.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                grdDriverWaiting.AllowAutoSizeColumns = true;
                grdDriverWaiting.Font = new Font("Tahoma", 9, FontStyle.Regular);
                grdDriverWaiting.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdDriverWaiting_ToolTipTextNeeded);
                grdDriverWaiting.CellDoubleClick += new GridViewCellEventHandler(grdDriver_CellDoubleClick);
                grdDriverWaiting.CellFormatting += new CellFormattingEventHandler(grdDriver_CellFormatting);
                grdDriverWaiting.AllowColumnResize = false;
                grdDriverWaiting.AllowColumnReorder = false;

                grdDriverWaiting.EnableSorting = false;
                grdDriverWaiting.AllowRowResize = false;
             //   grdDriverWaiting.AllowRowReorder = false;


                grdDriverWaiting.AllowRowReorder = true;
                grdDriverWaiting.SelectionMode = GridViewSelectionMode.FullRowSelect;
                grdDriverWaiting.ReadOnly = true;


                RadDragDropService dragDropService = grdDriverWaiting.GridViewElement.GetService<RadDragDropService>();
        
                dragDropService.PreviewDragOver += new EventHandler<RadDragOverEventArgs>(dragDropService_PreviewDragOver);
                dragDropService.PreviewDragDrop += new EventHandler<RadDropEventArgs>(dragDropService_PreviewDragDrop);
              
                dragDropService.PreviewDragHint += new EventHandler<PreviewDragHintEventArgs>(dragDropService_PreviewDragHint);
                dragDropService.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropService_PreviewDragStart);



                //var gridBehavior = this.grdDriverWaiting.GridBehavior as BaseGridBehavior;
                //gridBehavior.UnregisterBehavior(typeof(GridViewDataRowInfo));
                //gridBehavior.RegisterBehavior(typeof(GridViewDataRowInfo), new MyGridDataRowBehavior());

                grdOnBoardDriver.ShowRowHeaderColumn = false;
                grdOnBoardDriver.ShowGroupPanel = false;
                grdOnBoardDriver.AllowAddNewRow = false;
                grdOnBoardDriver.CommandCellClick += new CommandCellClickEventHandler(grdDriverWaiting_CommandCellClick);
                grdOnBoardDriver.Font = new Font("Tahoma", 9, FontStyle.Regular);
                grdOnBoardDriver.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdDriverWaiting_ToolTipTextNeeded);

                grdOnBoardDriver.EnableSorting = false;
                grdOnBoardDriver.AllowRowResize = false;
                grdOnBoardDriver.AllowRowReorder = false;

                grdOnBoardDriver.CellDoubleClick += new GridViewCellEventHandler(grdDriver_CellDoubleClick);
                grdOnBoardDriver.AllowColumnResize = false;
                grdOnBoardDriver.AllowColumnReorder = false;


                grdPendingJobs.AllowColumnReorder = false;
                grdPendingJobs.AllowColumnResize = false;
                grdPendingJobs.AllowRowResize = false;
                grdPendingJobs.EnableSorting = false;

                grdPendingJobs.AllowAutoSizeColumns = true;
                grdPendingJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;

               
                grdPreBookings.AllowColumnReorder = false;
                grdPreBookings.AllowColumnResize = false;
                grdPreBookings.AllowRowResize = false;
                grdPreBookings.EnableSorting = false;
                grdPreBookings.AllowAutoSizeColumns = true;
                grdPreBookings.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                grdAllJobs.AllowColumnReorder = false;
                grdAllJobs.AllowColumnResize = false;
                grdAllJobs.AllowRowResize = false;
                grdAllJobs.EnableSorting = false;
                grdAllJobs.AllowAutoSizeColumns = true;
                grdAllJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;

                if (AppVars.objPolicyConfiguration != null && AppVars.objPolicyConfiguration.GridRowSize.ToInt() > 0)
                    grdPendingJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();

                grdPendingJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                grdPreBookings.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                grdAllJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);

                grdPreBookings.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);
                grdPreBookings.RowsChanging += new GridViewCollectionChangingEventHandler(PreGrid_RowsChanging);

                grdPendingJobs.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                grdPreBookings.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                grdAllJobs.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);

                grdAllJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);
                grdAllJobs.RowsChanging += new GridViewCollectionChangingEventHandler(AllGrid_RowsChanging);

                grdAllJobs.ShowGroupPanel = false;


                grdPendingJobs.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);
                grdPreBookings.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);
                grdAllJobs.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);

                objMaster = new BookingBO();

                this.SetProperties((INavigation)objMaster);
                grdPendingJobs.ShowGroupPanel = false;

                this.Shown += new EventHandler(frmBookingDashBoard_Shown);
                radPageView1.SelectedPage = Pg_PendingJobs;



                grdPendingJobs.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);

               // grdPendingJobs.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdPendingJobs_ToolTipTextNeeded);
                grdPendingJobs.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdPendingJobs_ScreenTipNeeded);


                if (AppVars.objPolicyConfiguration.ShowJobDetailScreenPopup.ToBool() == true)
                {
                    grdPreBookings.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdPendingJobs_ScreenTipNeeded);

                    grdAllJobs.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdPendingJobs_ScreenTipNeeded);                 
                }


                // need to uncomment both
                grdPreBookings.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);
                grdPreBookings.ViewRowFormatting += new RowFormattingEventHandler(grdPreBookings_ViewRowFormatting);



                grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";
                //grdPreBookings.AutoExpandGroups = true;


                grdAllJobs.ViewCellFormatting += new CellFormattingEventHandler(grdAllJobs_ViewCellFormatting);
                btnSearchJobsPool.Click += new EventHandler(btnSearchJobsPool_Click);
                btnShowAllJobsPool.Click += new EventHandler(btnShowAllJobsPool_Click);
                grdJobsPool.CellDoubleClick += new GridViewCellEventHandler(grdJobsPool_CellDoubleClick);

                grdAllJobs.AllowAddNewRow = false;

                this.KeyDown += new KeyEventHandler(frmBookingDashBoard_KeyDown);

                grdOnBoardDriver.CellFormatting += new CellFormattingEventHandler(grdOnBoardDriver_CellFormatting);


                BookingAlertMins = AppVars.objPolicyConfiguration.BookingAlertExpiryNoticeInMins.ToInt();

                BookingHours = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt();
                EnablePDA = AppVars.objPolicyConfiguration.EnablePDA.ToBool();

                ApplyAccBgOnRow = AppVars.objPolicyConfiguration.ApplyAccBgColorOnRow.ToBool();
                DisablePopupNotifications = AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool();


                this.AutoEmailControllerReport = AppVars.objPolicyConfiguration.AutoEmailControllerReport.ToBool();
                this.ControllerReportDay = AppVars.objPolicyConfiguration.DayOfWeekControllerReport.ToStr().Trim();
                this.PreBookingDefaultDays = AppVars.objPolicyConfiguration.HourControllerReport.ToInt();
                this.DisableWebBookingPopup = AppVars.objPolicyConfiguration.DisableWebBookingAlertPopup.ToBool();


            //     AppVars.objPolicyConfiguration.

                this.AutoBookingDueAlert = AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool();
                this.AvgFirstBookingExpMins = AppVars.objPolicyConfiguration.AvgFirstMileExpiryMins.ToInt();
                this.EachAdditoinalBookingExpMins = AppVars.objPolicyConfiguration.EachAdditionalMileExpiryMins.ToInt();


                grdOnPlotDrivers.Visible = EnablePDA;


                if (ApplyAccBgOnRow)
                {
                    grdPendingJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);
                    grdPreBookings.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);
                    grdAllJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);



                }

                // PDA Driver Context Menu
                driverContextMenu = new RadDropDownMenu();
             

                RadMenuItem viewJobItem = new RadMenuItem("View Job");
                viewJobItem.Name = "ViewJob";
                viewJobItem.ForeColor = Color.Blue;
                viewJobItem.BackColor = Color.Blue;
                viewJobItem.Click += new EventHandler(ViewJobItem_Click);
                viewJobItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(viewJobItem);


                RadMenuItem RecoverJobContextMenuItem1 = new RadMenuItem("Recover Job");
                RecoverJobContextMenuItem1.Name = "RecoverJob";
                RecoverJobContextMenuItem1.ForeColor = Color.Red;
                RecoverJobContextMenuItem1.BackColor = Color.Blue;
                RecoverJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                RecoverJobContextMenuItem1.Click += new EventHandler(RecoverJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(RecoverJobContextMenuItem1);


                RadMenuItem NoShowJobContextMenuItem1 = new RadMenuItem("No Pickup");
                NoShowJobContextMenuItem1.Name = "NoShowJob";
                NoShowJobContextMenuItem1.ForeColor = Color.OrangeRed;
                NoShowJobContextMenuItem1.BackColor = Color.Blue;
                NoShowJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                NoShowJobContextMenuItem1.Click += new EventHandler(NoShowJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(NoShowJobContextMenuItem1);


                RadMenuItem ShiftJobContextMenuItem1 = new RadMenuItem("View Shift Jobs");
                ShiftJobContextMenuItem1.Name = "ShiftJob";
                ShiftJobContextMenuItem1.ForeColor = Color.Blue;
                ShiftJobContextMenuItem1.BackColor = Color.Blue;
                ShiftJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                ShiftJobContextMenuItem1.Click += new EventHandler(ShiftJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(ShiftJobContextMenuItem1);




                RadMenuItem ClearJobContextMenuItem1 = new RadMenuItem("Clear Job");
                ClearJobContextMenuItem1.Name = "ClearJob";
                ClearJobContextMenuItem1.ForeColor = Color.Blue;
                ClearJobContextMenuItem1.BackColor = Color.Blue;
                ClearJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                ClearJobContextMenuItem1.Click += new EventHandler(ClearJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(ClearJobContextMenuItem1);



                RadMenuItem streetViewItem = new RadMenuItem("Street View");
                streetViewItem.Name = "StreetView";
                streetViewItem.ForeColor = Color.Blue;
                streetViewItem.BackColor = Color.Blue;
                streetViewItem.Click += new EventHandler(streetViewItem_Click);
                streetViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(streetViewItem);


                RadMenuItem callItem = new RadMenuItem("Call");
                callItem.Name = "Call";
                callItem.ForeColor = Color.Blue;
                callItem.BackColor = Color.Blue;
                callItem.Click += new EventHandler(CallItem_Click);
                callItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(callItem);


                RadMenuItem unBlockViewItem = new RadMenuItem("UnBlock");
                unBlockViewItem.Name = "UnBlock";
                unBlockViewItem.ForeColor = Color.Black;
                unBlockViewItem.BackColor = Color.Red;
                unBlockViewItem.Click += new EventHandler(unBlockViewItem_Click);
                unBlockViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(unBlockViewItem);


                RadMenuItem ForceActionItem = new RadMenuItem("Force Arrive Request");
                ForceActionItem.Name = "ArrivedPOB";
                ForceActionItem.ForeColor = Color.Red;
                ForceActionItem.BackColor = Color.Red;
                ForceActionItem.Click += new EventHandler(ForceActionItem_Click);
                ForceActionItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(ForceActionItem);
      


                RadMenuItem trackDrvItem = new RadMenuItem("Track Driver");
                trackDrvItem.Name = "TrackDriver";
                trackDrvItem.ForeColor = Color.Blue;
                trackDrvItem.BackColor = Color.Blue;
                trackDrvItem.Click += new EventHandler(TrackDriverItem_Click);
                trackDrvItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(trackDrvItem);


                RadMenuItem ForceLogoutItem = new RadMenuItem("Logout");
                ForceLogoutItem.Name = "Logout";
                ForceLogoutItem.ForeColor = Color.Red;
                ForceLogoutItem.BackColor = Color.Red;
                ForceLogoutItem.Click += new EventHandler(ForceLogoutItem_Click);
                ForceLogoutItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(ForceLogoutItem);


                RadMenuItem recoverFojItem = new RadMenuItem("Recover FOJ");
                recoverFojItem.Name = "RecoverFOJ";
                recoverFojItem.ForeColor = Color.Purple;
                recoverFojItem.BackColor = Color.Blue;
                recoverFojItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                recoverFojItem.Click += new EventHandler(RecoveFOJFromDriverStatustem_Click);
                driverContextMenu.Items.Add(recoverFojItem);




                firstContextMenu = new RadDropDownMenu();
                firstContextMenu.BackColor = Color.Orange;

                RadMenuItem firstContextMenuItem1 = new RadMenuItem("OnBreak");
                firstContextMenuItem1.ForeColor = Color.DarkOrange;
                firstContextMenuItem1.BackColor = Color.Orange;
                firstContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                firstContextMenuItem1.Click += new EventHandler(firstContextMenuItem1_Click);
                firstContextMenu.Items.Add(firstContextMenuItem1);


                secondContextMenu = new RadDropDownMenu();
                secondContextMenu.BackColor = Color.DarkGreen;
                RadMenuItem secondContextMenuItem1 = new RadMenuItem("Available");
                secondContextMenuItem1.ForeColor = Color.DarkGreen;
                secondContextMenuItem1.BackColor = Color.Green;
                secondContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                secondContextMenuItem1.Click += new EventHandler(secondContextMenuItem1_Click);
                secondContextMenu.Items.Add(secondContextMenuItem1);


                grdOnPlotDrivers.ShowCellToolTips = true;
                grdOnPlotDrivers.CellMouseDown += new DataGridViewCellMouseEventHandler(grdOnPlotDrivers_CellMouseDown);
                // grdOnPlotDrivers.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdOnPlotDrivers_ContextMenuOpening);
                grdDriverWaiting.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdDriver_ContextMenuOpening);
                grdOnBoardDriver.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdDriver_ContextMenuOpening);


                tmrAlert.Enabled = true;
                tmrAlert.Start();


                //-------------------

                EditFare = new RadDropDownMenu();
               
                EditFare.BackColor = Color.Orange;


                RadMenuItem EditFareItem1 = new RadMenuItem("Dispatch Job");  // 0 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnDespatchJob_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Edit Fare");  // 1 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(EditFareItem1_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Cancel Job");  // 2 index
                EditFareItem1.ForeColor = Color.Red;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(CancelJobItem_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Allocate Driver");  // 3 index
                EditFareItem1.ForeColor = Color.Green;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(AllocateDriverItem_Click);
                EditFare.Items.Add(EditFareItem1);


                //  if (EnablePDA && AppVars.objPolicyConfiguration.EnableFOJ.ToBool())
                //  {
                EditFareItem1 = new RadMenuItem("Follow-On-Job");  // 4 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(FOJJobItem_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Dispatch SMS");  // 5 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(DespatchSMS_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Complete Job");  // 6 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ForceCompleteJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("View Group");  // 7 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(GroupJobItem_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Send Pre-Job");  // 8 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(SendPreJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Recover Pre-Job");  // 9 index
                EditFareItem1.ForeColor = Color.Crimson;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(RecoverPreJob_Click);
                EditFareItem1.Name = "RecoverPreJob";
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("SMS Job Details");  // 10 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(SMSJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Copy Booking");  // 11 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(CopyBooking_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Clear Job");  // 12 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ClearJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Bidding");  // 13 index
                EditFareItem1.CheckOnClick = true;

                EditFareItem1.ForeColor = Color.RosyBrown;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(OnBiddingJob_Click);
                EditFare.Items.Add(EditFareItem1);

                EditFareItem1 = new RadMenuItem("AutoDespatch");  // 14 index
                EditFareItem1.ForeColor = Color.RosyBrown;
                EditFareItem1.CheckOnClick = true;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(OnAutoDespatchJob_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("ReSend Pre-Job");  // 15 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ResendJob_Click);
                EditFare.Items.Add(EditFareItem1);

                EditFareItem1 = new RadMenuItem("Recall Job");  // 16 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(RecallPendingJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Transfer To Pool");  // 17 index
                EditFareItem1.ForeColor = Color.Purple;
             
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(TransferJob_Click);
                EditFareItem1.Visibility = AppVars.listUserRights.Count(c => c.functionId == "TRANSFER JOB") > 0 ? ElementVisibility.Visible : ElementVisibility.Collapsed; 
                EditFare.Items.Add(EditFareItem1);




                

                enableBiddingTab = AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "PRICE BIDDING") > 0;



                //if (enableBiddingTab)
                //{

                    EditFareItem1 = new RadMenuItem("Send Bidding Notification"); // 18 index
                    EditFareItem1.ForeColor = Color.Black;
                    EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    EditFareItem1.Click += new EventHandler(BiddingPriceNotification_Click);
                    EditFareItem1.Visibility = ElementVisibility.Collapsed;
                    EditFare.Items.Add(EditFareItem1);



                    EditFareItem1 = new RadMenuItem("Show Driver Bids"); // 19 index
                    EditFareItem1.ForeColor = Color.Black;
                    EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    EditFareItem1.Click += new EventHandler(ShowDriverPriceBidding_Click);
                    EditFareItem1.Visibility = ElementVisibility.Collapsed;
                    EditFare.Items.Add(EditFareItem1);

                   if (enableBiddingTab)
                   {
                        InitializePriceBidding();

                   }


                EditFareItem1 = new RadMenuItem("Dispatch as Ghost Job"); // 20 index
                EditFareItem1.ForeColor = Color.Gray;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnDespatchGhostJob_Click);
                EditFareItem1.Visibility = AppVars.objPolicyConfiguration.EnableGhostJob.ToBool() ? ElementVisibility.Visible : ElementVisibility.Collapsed;
                EditFare.Items.Add(EditFareItem1);


                if (EditFareItem1.Visibility == ElementVisibility.Visible)
                {
                    lblTokenNo.Visible = true;
                    txtTokenNo.Visible = true;

                    EnableGhostJob = true;

                }



                //if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "JOB AUDIT TRAIL") > 0)
                //{
                //    EditFareItem1 = new RadMenuItem("Job Audit Trail");
                //    EditFareItem1.ForeColor = Color.Black;
                //    EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                //    EditFareItem1.Click += new EventHandler(AuditReport_Click);
                //    EditFare.Items.Add(EditFareItem1);
                //}



                grdPendingJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);
                grdPreBookings.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);
                grdAllJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);


               

                if(IsServer)
                 this.CanReadSMS =    AppVars.objSMSConfiguration.CanReadSMS.ToBool();


                

                //if (!CanReadSMS)
                //{
                //    btnEmailPrint.Visibility = ElementVisibility.Collapsed;
                //}




                grdStats.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdStats_ScreenTipNeeded);
                grdStats.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdStats_ContextMenuOpening);


                listofLocationExpiry = General.GetQueryable<Gen_Syspolicy_LocationExpiry>(c => c.ExpiryMins != null).ToList();


                grdQuotations.Font = new Font("Tahoma", 9, FontStyle.Regular);

                lst_cdr.DoubleClick += new EventHandler(lst_cdr_DoubleClick);
                lst_cdr.SelectionMode = SelectionMode.None;
                lst_cdr.Font = new Font("Tahoma", 8, FontStyle.Bold);


                this.HasWebBookingTab = AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW WEB BOOKING TAB") > 0;

                HasBookingHistoryTab = AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW BOOKING HISTORY TAB") > 0;



                if (HasWebBookingTab)
                {

                    InitializeWebBookingTab();

                    FormatNewWebBookingGrid();
                    FormatPendingWebBookingGrid();

                    grdWebBookingsNew.AllowEditRow = false;
                    grdWebBookingsNew.ViewCellFormatting += new CellFormattingEventHandler(grdWebBookings_ViewCellFormatting);
                    grdWebBookingsNew.GridViewElement.TableElement.VScrollBar.ValueChanged += VScrollBar_ValueChanged;
                    grdWebBookingsNew.KeyPress += new System.Windows.Forms.KeyPressEventHandler(grdWebBookingsNew_KeyPress);
                    grdWebBookingsNew.MouseClick += new System.Windows.Forms.MouseEventHandler(grdWebBookingsNew_MouseClick);

                    
                    grdWebBookingsPending.ViewCellFormatting += new CellFormattingEventHandler(grdWebBookings_ViewCellFormatting);


                    PopulateWebBookingsGrid();
                    PopulateDeclinedWebBookings();

                }


                if (HasBookingHistoryTab)
                {

                    InitializeBookingHistoryTab();
                }





            }
            catch (Exception ex)
            {


            }
        }

        void grdJobsPool_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            if (e.Row != null)
            {
                frmBooking frm = new frmBooking();
                frm.OnDisplayRecord(e.Row.Cells["Id"].Value.ToInt());
                frm.ControlBox = true;
                frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm.MaximizeBox = false;
                frm.ShowDialog();
            }
        }

        void btnShowAllJobsPool_Click(object sender, EventArgs e)
        {
            dtpFromJobsPool.Value = null;
            dtpTillJobsPool.Value = null;
            PopulateJobsPool();
        }

        void btnSearchJobsPool_Click(object sender, EventArgs e)
        {
            PopulateJobsPool();
        }

     
      

    
    
        

        void ddlCompany_Enter(object sender, EventArgs e)
        {
            if(ddlCompany.DataSource==null)
              ComboFunctions.FillCompanyCombo(ddlCompany);
        }

        void ddlVehicleType_Enter(object sender, EventArgs e)
        {
            if (ddlVehicleType.DataSource == null)
            {
                ComboFunctions.FillVehicleTypeCombo(ddlVehicleType);
            }
        }

        void ddlDriver_Enter(object sender, EventArgs e)
        {
            if (ddlDriver.DataSource == null)
            {
                ComboFunctions.FillDriverNoCombo(ddlDriver);


            }
        }

        void dragDropServicePending_PreviewDragStart(object sender, PreviewDragStartEventArgs e)
        {
            e.CanStart = false;
        }


      //  RadDropDownMenu biddingTabMenu = null;

        private void InitializePriceBidding()
        {
            if (this.pg_biddingjobs != null)
                return;


            this.pg_biddingjobs = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdBiddingJobs = new Telerik.WinControls.UI.RadGridView();
            this.radLabel28 = new Telerik.WinControls.UI.RadLabel();


            this.pg_biddingjobs.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdBiddingJobs)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdBiddingJobs.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel28)).BeginInit();
            this.radLabel28.SuspendLayout();
            this.radPageView1.Controls.Add(this.pg_biddingjobs);




            // 
            // pg_biddingjobs
            // 
            this.pg_biddingjobs.Controls.Add(this.grdBiddingJobs);
            this.pg_biddingjobs.Controls.Add(this.radLabel28);
            this.pg_biddingjobs.Location = new System.Drawing.Point(10, 10);
            this.pg_biddingjobs.Name = "pg_biddingjobs";
            this.pg_biddingjobs.Size = new System.Drawing.Size(1179, 686);
            this.pg_biddingjobs.Text = "Driver Bidding";
            // 
            // grdBiddingJobs
            // 
            this.grdBiddingJobs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdBiddingJobs.EnableHotTracking = false;
            this.grdBiddingJobs.Location = new System.Drawing.Point(0, 30);
            this.grdBiddingJobs.Name = "grdBiddingJobs";
            this.grdBiddingJobs.Size = new System.Drawing.Size(1179, 656);
            this.grdBiddingJobs.TabIndex = 114;
            this.grdBiddingJobs.Text = "myGridView1";
            // 
            // radLabel28
            // 
            this.radLabel28.AutoSize = false;
            this.radLabel28.BackColor = System.Drawing.Color.DimGray;
            this.radLabel28.Controls.Add(this.btnRefreshDrvBidding);
            this.radLabel28.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel28.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel28.ForeColor = System.Drawing.Color.White;
            this.radLabel28.Location = new System.Drawing.Point(0, 0);
            this.radLabel28.Name = "radLabel28";
            // 
            // 
            // 
            this.radLabel28.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel28.Size = new System.Drawing.Size(1179, 30);
            this.radLabel28.TabIndex = 113;
            this.radLabel28.Text = "Driver Bidding";
            this.radLabel28.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            this.btnRefreshDrvBidding = new System.Windows.Forms.Button();


            // 
            // btnRefreshDrvBidding
            // 
            this.btnRefreshDrvBidding.BackColor = System.Drawing.Color.SteelBlue;
            this.btnRefreshDrvBidding.Dock = System.Windows.Forms.DockStyle.Right;
            this.btnRefreshDrvBidding.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.btnRefreshDrvBidding.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            this.btnRefreshDrvBidding.ImageAlign = System.Drawing.ContentAlignment.MiddleRight;
            this.btnRefreshDrvBidding.Location = new System.Drawing.Point(1072, 0);
            this.btnRefreshDrvBidding.Name = "btnRefreshDrvBidding";
            this.btnRefreshDrvBidding.Size = new System.Drawing.Size(107, 30);
            this.btnRefreshDrvBidding.TabIndex = 0;
            this.btnRefreshDrvBidding.Text = "Refresh";
            this.btnRefreshDrvBidding.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.btnRefreshDrvBidding.UseVisualStyleBackColor = false;
            this.btnRefreshDrvBidding.Click += new System.EventHandler(this.btnRefreshDrvBidding_Click);




            this.pg_biddingjobs.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdBiddingJobs.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdBiddingJobs)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel28)).EndInit();
            this.radLabel28.ResumeLayout(false);



        }

        void grdPendingJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {





                if (e.CellElement is GridHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //    e.CellElement
                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }

                else if (e.CellElement is GridFilterCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.White;
                        e.CellElement.RowElement.BackColor = Color.White;
                        e.CellElement.RowElement.NumberOfColors = 1;

                        e.CellElement.BorderColor = Color.DarkSlateBlue;


                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }
                }


                else if (e.CellElement is GridGroupContentCellElement)
                {



                    //e.Row.Height = 30;
                    //if ( e.Row.Group.IsExpanded == false)
                    //{
                    //   e.Row.Group.Expand();

                    // }

                    e.CellElement.Font = bigFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.NumberOfColors = 1;
                    e.CellElement.ForeColor = Color.Blue;

                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridRowHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement is GridTableHeaderCellElement)
                        {

                            e.CellElement.BorderColor = _HeaderRowBorderColor;

                            e.CellElement.BackColor = _HeaderRowBackColor;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.Font = newFont;
                            e.CellElement.ForeColor = Color.White;
                            e.CellElement.DrawFill = true;

                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }
                        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                        {

                            e.CellElement.Font = oldFont;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.White;
                            e.CellElement.RowElement.BackColor = Color.White;
                            e.CellElement.RowElement.NumberOfColors = 1;



                            e.CellElement.BorderColor = Color.DarkSlateBlue;


                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }

                        else
                        {
                            e.CellElement.DrawFill = false;

                            if ((e.Row.Cells["SubCompanyBgColor"] != null))
                            {

                                e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BorderColor = Color.DarkSlateBlue;
                                e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                e.CellElement.DrawFill = true;
                            }

                            if (e.Row.Cells["IsAutoDespatch"]!=null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()
                                && e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()==false)
                            //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
                            {
                                e.CellElement.Font = newFont;
                                e.CellElement.Text = "A";


                                //if (e.CellElement.GridControl!=null && e.CellElement.GridControl.Name == "grdAllJobs" && DateTime.Now.AddMinutes(5) >= e.Row.Cells["PickupDateTemp"].Value.ToDateTime())
                                //{
                                //    if (e.CellElement.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                                //    {

                                //        e.CellElement.RowElement.BackColor = Color.DarkOrange;
                                //        e.CellElement.RowElement.NumberOfColors = 1;
                                //        e.CellElement.RowElement.BorderColor = Color.DarkSlateBlue;
                                //        e.CellElement.RowElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                //        e.CellElement.RowElement.DrawFill = true;
                                //    }
                                //    else
                                //    {
                                //        e.CellElement.BackColor = Color.DarkOrange;
                                //        e.CellElement.NumberOfColors = 1;
                                //        e.CellElement.BorderColor = Color.DarkSlateBlue;
                                //        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                //        e.CellElement.DrawFill = true;

                                //    }

                                //}
                                //else
                                //{


                                //    e.CellElement.BackColor = Color.DarkOrange;
                                //    e.CellElement.NumberOfColors = 1;
                                //    e.CellElement.BorderColor = Color.DarkSlateBlue;
                                //    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                //    e.CellElement.DrawFill = true;
                                //}

                            }
                            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                                && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()==false)
                            {
                                //e.CellElement.BackColor = Color.Green;
                                //e.CellElement.NumberOfColors = 1;
                                //e.CellElement.BorderColor = Color.DarkSlateBlue;
                                //e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                //e.CellElement.DrawFill = true;

                                e.CellElement.Font = newFont;
                                e.CellElement.Text = "B";

                            }
                            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                               && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool())
                            {
                               // e.CellElement.BackColor = Color.Purple;
                              //  e.CellElement.NumberOfColors = 1;
                              //  e.CellElement.BorderColor = Color.DarkSlateBlue;
                             //   e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                             //   e.CellElement.DrawFill = true;
                                e.CellElement.Font = newFont;
                                e.CellElement.Text = "R";

                            }
                            else
                            {

                                e.CellElement.Font = newFont;
                                e.CellElement.Text = "H";

                            //    if ((e.Row.Cells["SubCompanyBgColor"] != null))
                            //    {

                            //        e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                            //        e.CellElement.NumberOfColors = 1;
                            //        e.CellElement.BorderColor = Color.DarkSlateBlue;
                            //        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                            //        e.CellElement.DrawFill = true;
                            //    }
                            }

                        }
                    }
                }





                else if (e.CellElement is GridDataCellElement)
                {





                    e.CellElement.BackgroundImage = null;
                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;


                   


                    if (ApplyAccBgOnRow == false)
                    {


                        e.CellElement.ForeColor = Color.Black;



                        e.CellElement.Font = oldFont;

                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            if (e.CellElement.RowElement.IsSelected == true)
                            {

                                e.CellElement.RowElement.NumberOfColors = 1;
                                e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = this.selectedRowBackColor;
                                e.CellElement.ForeColor = this.selectedRowForeColor;
                                e.CellElement.Font = newFont;

                            }


                            else
                            {
                                e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                                if (e.CellElement.BackColor == this.selectedRowBackColor)
                                    e.CellElement.DrawFill = false;
                            }
                        }





                        if (e.Column.IsVisible &&
                            (e.Column.Name != "Plot"
                            && e.Column.Name != "Time" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                            && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                           && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode" ))
                        {
                            e.CellElement.DrawFill = false;
                        }




                        if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate")
                        {





                            if (e.CellElement.RowElement.IsSelected == false)
                            {
                                e.CellElement.BackColor = Color.White;
                            }

                            int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                            if (bgColor != 0)
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.FromArgb(bgColor);
                                e.CellElement.DrawFill = true;
                            }


                        }





                        if (e.Column.Name == "Account"

                            )
                        {


                            if (e.CellElement.Value.ToStr() != string.Empty)
                            {

                                e.CellElement.NumberOfColors = 1;



                                string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                                string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                                if (Bgcolor != string.Empty && textColor != string.Empty)
                                {



                                    e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                                }
                                else
                                {
                                    e.CellElement.ForeColor = Color.White;
                                    e.CellElement.BackColor = Color.Crimson;


                                }

                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                e.CellElement.DrawFill = false;

                            }
                        }

                        else if (e.Column.Name == "Vehicle")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
                            string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {

                                e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
                                e.CellElement.DrawFill = true;
                            }
                        }


                        else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
                        {





                            if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;

                                if (listofAirports == null)
                                {
                                    FillAirportsList();
                                }

                                if (listofAirports.Count(c => c.PostCode==e.Row.Cells["FromPostCode"].Value.ToStr())>0)
                                {
                                    e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode==(e.Row.Cells["FromPostCode"].Value.ToStr())).BackgroundColor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["FromPostCode"].Value.ToStr())).TextColor.ToInt());
                             
                                    
                                 //   e.CellElement.ForeColor = Color.Black;                                
                                }
                                else
                                {

                                    e.CellElement.BackColor = Color.FromArgb(-5374161);
                                    e.CellElement.ForeColor = Color.Black;
                                }
                              





                                //if (e.Row.Cells["FromLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["FromLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;



                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
                        {

                            if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;


                                //e.CellElement.BackColor = Color.FromArgb(-5374161);
                                //e.CellElement.ForeColor = Color.Black;


                                if (listofAirports == null)
                                {
                                    FillAirportsList();
                                }

                                if (listofAirports.Count(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())) > 0)
                                {
                                    e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode==(e.Row.Cells["ToPostCode"].Value.ToStr())).BackgroundColor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())).TextColor.ToInt());
                           
                                 
                                }
                                else
                                {

                                    e.CellElement.BackColor = Color.FromArgb(-5374161);
                                    e.CellElement.ForeColor = Color.Black;
                                }


                              //  e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["ToLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["ToLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["ToLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;


                            }
                            else
                                e.CellElement.DrawFill = false;


                        }

                        else if (e.Column.Name == "Status")
                        {


                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                            e.CellElement.ForeColor = Color.Black;

                            e.CellElement.DrawFill = true;





                        }
                        else if (e.Column.Name == "Driver")
                        {
                            if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.Aqua;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                if (e.CellElement.BackColor == Color.Aqua)
                                {
                                    e.CellElement.BackColor = Color.White;
                                    e.CellElement.ForeColor = Color.Black;
                                }
                            }

                        }

                        else if (e.Column.Name == "HasNotesImg")
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }
                         

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
                                }
                                else
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;

                                }
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }
                            //else if (e.Row.Cells["GroupId"].Value != null)
                            //{

                            //    e.CellElement.BackgroundImage = Resources.Resource1.select;
                            //}

                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }
                    }
                    else
                    {

                        if (e.Column.Name == "HasNotesImg"

                       )
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }
                          

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }
                            //else if (e.Row.Cells["GroupId"].Value != null)
                            //{

                            //    e.CellElement.BackgroundImage = Resources.Resource1.select;
                            //}

                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }

                        if (e.CellElement.IsCurrent)
                        {
                            e.CellElement.DrawFill = false;
                        }
                        //else
                        //{

                        //    if (e.Row.Cells["Account"].Value.ToStr() == string.Empty)
                        //    {


                        //    }


                        //}
                        //else
                        //{
                        //    e.CellElement.ResetValue(LightVisualElement.DrawFillProperty, ValueResetFlags.Local);
                        //}
                        //if (AppVars.AppTheme == "ControlDefault")
                        //{
                        //    e.CellElement.DrawFill = false;
                        //    if (e.CellElement.IsCurrent == true && e.CellElement.RowElement.IsSelected == true)
                        //    {


                        //        e.CellElement.NumberOfColors = 1;
                        //        e.CellElement.BackColor = this.selectedRowBackColor;
                        //        e.CellElement.ForeColor = this.selectedRowForeColor;
                        //        e.CellElement.Font = newFont;
                        //        e.CellElement.DrawFill = true;
                        //    }


                        //    else
                        //    {
                        //        //e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                        //        //if (e.CellElement.RowElement.IsSelected == false)
                        //        //{
                        //        //    e.CellElement.ForeColor = Color.Black;
                        //        //}
                        //        //if (e.CellElement.BackColor == this.selectedRowBackColor)
                        //        //    e.CellElement.DrawFill = false;
                        //    }
                        //}

                    }



                    if (e.Column.Name == "Plot" && e.CellElement.Value.ToStr() != "")
                    {

                        e.CellElement.ToolTipText = "Pickup is " + e.Row.Cells["DeadMileage"].Value.ToStr() + " mi away";


                    }
                    else
                        e.CellElement.ToolTipText = string.Empty;


                }
            }
            catch { }
        }


        public void FillAirportsList()
        {
            try
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {


                    listofAirports = db.Gen_Locations.Where(a => a.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT && a.BackgroundColor!=null).ToList();
                    //where 
                    //select new Gen_Location
                    //{
                    //     Id= a.Id,
                    //     BackgroundColor= a.BackgroundColor,
                    //     TextColor= a.TextColor,
                    //      LocationName=a.LocationName

                    //}).ToList();

                }
            }
            catch
            {


            }

        }


        void grdPendingJobs_ViewRowFormatting(object sender, RowFormattingEventArgs e)
        {


                //if (e.RowElement is GridRowHeaderCellElement gridrow)
                //{
                //    if (AppVars.AppTheme == "ControlDefault")
                //    {
                //        if (e.CellElement is GridTableHeaderCellElement)
                //        {

                //            e.CellElement.BorderColor = _HeaderRowBorderColor;

                //            e.CellElement.BackColor = _HeaderRowBackColor;
                //            e.CellElement.NumberOfColors = 1;
                //            e.CellElement.Font = newFont;
                //            e.CellElement.ForeColor = Color.White;
                //            e.CellElement.DrawFill = true;

                //            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                //        }
                //        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                //        {

                //            e.CellElement.Font = oldFont;
                //            e.CellElement.NumberOfColors = 1;
                //            e.CellElement.BackColor = Color.White;
                //            e.CellElement.RowElement.BackColor = Color.White;
                //            e.CellElement.RowElement.NumberOfColors = 1;



                //            e.CellElement.BorderColor = Color.DarkSlateBlue;


                //            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                //        }

                //        else
                //        {
                //            e.CellElement.DrawFill = false;

                //            if ((e.Row.Cells["SubCompanyBgColor"] != null))
                //            {

                //                e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                //                e.CellElement.NumberOfColors = 1;
                //                e.CellElement.BorderColor = Color.DarkSlateBlue;
                //                e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                //                e.CellElement.DrawFill = true;
                //            }

                //            if (e.Row.Cells["IsAutoDespatch"]!=null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()
                //                && e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()==false)
                //            //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
                //            {
                //                e.CellElement.Font = newFont;
                //                e.CellElement.Text = "A";                             

                //            }
                //            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                //                && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()==false)
                //            {
                            

                //                e.CellElement.Font = newFont;
                //                e.CellElement.Text = "B";

                //            }
                //            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                //               && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool())
                //            {
                         
                //                e.CellElement.Font = newFont;
                //                e.CellElement.Text = "R";

                //            }
                //            else
                //            {

                //                e.CellElement.Font = newFont;
                //                e.CellElement.Text = "H";

                         
                //            }

                //        }
                //    }
                //}












            if (e.RowElement is GridDataRowElement)
            {



                e.RowElement.ForeColor = Color.Black;




                if (e.RowElement.RowInfo.Cells["Account"].Value.ToStr() != string.Empty)
                {

                    e.RowElement.Font = oldFont;

                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.RowElement.IsSelected == true)
                        {

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;
                            e.RowElement.ForeColor = this.selectedRowForeColor;
                            e.RowElement.Font = newFont;
                            e.RowElement.DrawFill = true;
                        }


                        else
                        {
                            e.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);
                            e.RowElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.TwoWayBindingLocal);

                            if (e.RowElement.BackColor == this.selectedRowBackColor)
                                e.RowElement.DrawFill = false;



                            e.RowElement.NumberOfColors = 1;





                            string Bgcolor = e.RowElement.RowInfo.Cells["BackgroundColor1"].Value.ToStr().Trim();
                            string textColor = e.RowElement.RowInfo.Cells["TextColor1"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {



                                e.RowElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.RowElement.ForeColor = Color.FromArgb(textColor.ToInt());

                            }
                            else
                            {
                                e.RowElement.ForeColor = Color.White;
                                e.RowElement.BackColor = Color.Crimson;


                            }



                            //     e.RowElement.DrawFill = true;
                        }
                    }





                    e.RowElement.DrawFill = true;



                }
                else
                {

                    e.RowElement.NumberOfColors = 1;

                    e.RowElement.Font = oldFont;

                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.RowElement.IsSelected == true)
                        {

                            e.RowElement.DrawFill = true;

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;
                            e.RowElement.ForeColor = this.selectedRowForeColor;
                            e.RowElement.Font = newFont;

                        }


                        else
                        {
                            //e.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                            //if (e.RowElement.BackColor == this.selectedRowBackColor)
                            //    e.RowElement.DrawFill = false;


                            e.RowElement.BackColor = Color.White;
                            e.RowElement.ForeColor = Color.Black;
                            e.RowElement.DrawFill = true;
                        }
                    }



                    //if (e.Column.Name == "RefNumber" || e.Column.Name == "BookingDate")
                    //{

                      //  e.CellElement.BackColor = Color.White;
                     //   e.CellElement.NumberOfColors = 1;

                    if (e.RowElement.RowInfo.Cells["BookingBackgroundColor"].Value != null )
                    {

                        e.RowElement.RowInfo.Cells["PickupDate"].Style.BackColor = Color.FromArgb((e.RowElement.RowInfo.Cells["BookingBackgroundColor"].Value.ToInt()));
                        e.RowElement.RowInfo.Cells["PickupDate"].Style.CustomizeFill = true;
                    }


                  //  }


                }







                string Bggcolor = e.RowElement.RowInfo.Cells["BackgroundColor"].Value.ToStr().Trim();
                string texttColor = e.RowElement.RowInfo.Cells["TextColor"].Value.ToStr().Trim();

                if (Bggcolor != string.Empty && texttColor != string.Empty)
                {
                    e.RowElement.RowInfo.Cells["Vehicle"].Style.BackColor = Color.FromArgb(Bggcolor.ToInt());
                    e.RowElement.RowInfo.Cells["Vehicle"].Style.ForeColor = Color.FromArgb(texttColor.ToInt());
                    e.RowElement.RowInfo.Cells["Vehicle"].Style.CustomizeFill = true;


                }



                if (e.RowElement.RowInfo.Cells["FromLocTypeId"].Value.ToStr() != "" && e.RowElement.RowInfo.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {
                    if (listofAirports == null)
                        FillAirportsList();


                    if (listofAirports.Count(c => c.PostCode==e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()) > 0)
                    {
                        e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode==e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()).BackgroundColor.ToInt());
                       // e.CellElement.ForeColor = Color.Black;
                        e.RowElement.RowInfo.Cells["From"].Style.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()).TextColor.ToInt()); 
              
                    }
                    else
                    {
                        e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.GreenYellow;
                        e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.Black;
                      //  e.CellElement.BackColor = Color.FromArgb(-5374161);
                       // e.CellElement.ForeColor = Color.Black;
                    }

                 //   e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.LocationName.Contains(e.RowElement.RowInfo.Cells["From"].Value.ToStr())).BackgroundColor.ToInt());
          
                    //  e.CellElement.ForeColor = Color.Black;

                 //   e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.GreenYellow;
                   // e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = true;
                 //   e.RowElement.DrawFill = true;

                  //  e.RowElement.DrawFill = true;

                    e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = true;
                }

                if (e.RowElement.RowInfo.Cells["ToLocTypeId"].Value.ToStr() != "" && e.RowElement.RowInfo.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    if (listofAirports == null)
                        FillAirportsList();

                  //  e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.LocationName.Contains(e.RowElement.RowInfo.Cells["To"].Value.ToStr())).BackgroundColor.ToInt());
          
                   // e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.GreenYellow;
                   // e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = true;

                    if (listofAirports.Count(c => c.PostCode==(e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr())) > 0)
                    {
                        e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode==e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr()).BackgroundColor.ToInt());
                        // e.CellElement.ForeColor = Color.Black;
                        e.RowElement.RowInfo.Cells["To"].Style.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr()).TextColor.ToInt()); 
              
                    }
                    else
                    {
                        e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.GreenYellow;                     
                        e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.Black;
                    }

                  //  e.RowElement.DrawFill = true;
                    e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = true;
                }

                if (e.RowElement.RowInfo.Cells["StatusColor"].Value.ToStr() != string.Empty)
                {

                    e.RowElement.RowInfo.Cells["Status"].Style.BackColor = Color.FromArgb(e.RowElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                    e.RowElement.RowInfo.Cells["Status"].Style.CustomizeFill = true;
                   // e.RowElement.DrawFill = true;
                }

            //    e.RowElement.DrawFill = true;
              //  Console.WriteLine(DateTime.Now.ToString("hh:mm:ss") + "  : call");
            }

        }

        void grdPreBookings_ViewRowFormatting(object sender, RowFormattingEventArgs e)
        {
            if (e.RowElement.RowInfo.Group != null && e.RowElement.RowInfo.Group.IsExpanded == false)
            {
                e.RowElement.RowInfo.Group.Expand();

            }
        }



        void grdAllJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {





                if (e.CellElement is GridHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //    e.CellElement
                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }

                else if (e.CellElement is GridFilterCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.White;
                        e.CellElement.RowElement.BackColor = Color.White;
                        e.CellElement.RowElement.NumberOfColors = 1;

                        e.CellElement.BorderColor = Color.DarkSlateBlue;


                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }
                }


                else if (e.CellElement is GridGroupContentCellElement)
                {



                    //e.Row.Height = 30;
                    //if ( e.Row.Group.IsExpanded == false)
                    //{
                    //   e.Row.Group.Expand();

                    // }

                    e.CellElement.Font = bigFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.NumberOfColors = 1;
                    e.CellElement.ForeColor = Color.Blue;

                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridRowHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement is GridTableHeaderCellElement)
                        {

                            e.CellElement.BorderColor = _HeaderRowBorderColor;

                            e.CellElement.BackColor = _HeaderRowBackColor;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.Font = newFont;
                            e.CellElement.ForeColor = Color.White;
                            e.CellElement.DrawFill = true;

                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }
                        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                        {

                            e.CellElement.Font = oldFont;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.White;
                            e.CellElement.RowElement.BackColor = Color.White;
                            e.CellElement.RowElement.NumberOfColors = 1;



                            e.CellElement.BorderColor = Color.DarkSlateBlue;


                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }

                        else
                        {
                            e.CellElement.DrawFill = false;

                            if (e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool() && e.Row.Cells["Plot"].Value.ToStr() != "")
                            //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
                            {

                                if (e.CellElement.GridControl != null && e.CellElement.GridControl.Name == "grdAllJobs" && DateTime.Now.AddMinutes(5) >= e.Row.Cells["PickupDateTemp"].Value.ToDateTime())
                                {
                                    if (e.CellElement.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                                    {

                                        e.CellElement.RowElement.BackColor = Color.DarkOrange;
                                        e.CellElement.RowElement.NumberOfColors = 1;
                                        e.CellElement.RowElement.BorderColor = Color.DarkSlateBlue;
                                        e.CellElement.RowElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                        e.CellElement.RowElement.DrawFill = true;
                                    }
                                    else
                                    {
                                        e.CellElement.BackColor = Color.DarkOrange;
                                        e.CellElement.NumberOfColors = 1;
                                        e.CellElement.BorderColor = Color.DarkSlateBlue;
                                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                        e.CellElement.DrawFill = true;

                                    }

                                }
                                else
                                {


                                    e.CellElement.BackColor = Color.DarkOrange;
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                    e.CellElement.DrawFill = true;
                                }

                            }
                            else
                            {



                                if ((e.Row.Cells["SubCompanyBgColor"] != null))
                                {

                                    e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                    e.CellElement.DrawFill = true;
                                }
                            }

                        }
                    }
                }





                else if (e.CellElement is GridDataCellElement)
                {





                    e.CellElement.BackgroundImage = null;
                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;





                    if (ApplyAccBgOnRow == false)
                    {


                        e.CellElement.ForeColor = Color.Black;



                        e.CellElement.Font = oldFont;

                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            if (e.CellElement.RowElement.IsSelected == true)
                            {

                                e.CellElement.RowElement.NumberOfColors = 1;
                                e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = this.selectedRowBackColor;
                                e.CellElement.ForeColor = this.selectedRowForeColor;
                                e.CellElement.Font = newFont;

                            }


                            else
                            {
                                e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                                if (e.CellElement.BackColor == this.selectedRowBackColor)
                                    e.CellElement.DrawFill = false;
                            }
                        }





                        if (e.Column.IsVisible &&
                            (e.Column.Name != "Plot"
                            && e.Column.Name != "Time" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                            && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                           && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
                        {
                            e.CellElement.DrawFill = false;
                        }




                        if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate")
                        {





                            if (e.CellElement.RowElement.IsSelected == false)
                            {
                                e.CellElement.BackColor = Color.White;
                            }

                            int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                            if (bgColor != 0)
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.FromArgb(bgColor);
                                e.CellElement.DrawFill = true;
                            }


                        }





                        if (e.Column.Name == "Account"

                            )
                        {


                            if (e.CellElement.Value.ToStr() != string.Empty)
                            {

                                e.CellElement.NumberOfColors = 1;



                                string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                                string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                                if (Bgcolor != string.Empty && textColor != string.Empty)
                                {



                                    e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                                }
                                else
                                {
                                    e.CellElement.ForeColor = Color.White;
                                    e.CellElement.BackColor = Color.Crimson;


                                }

                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                e.CellElement.DrawFill = false;

                            }
                        }

                        else if (e.Column.Name == "Vehicle")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
                            string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {

                                e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
                                e.CellElement.DrawFill = true;
                            }
                        }


                        else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
                        {





                            if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;


                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;

                                //e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["FromLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["FromLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["FromLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;



                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
                        {

                            if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;



                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;
                                //e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["ToLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["ToLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["ToLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;


                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.Name == "Status")
                        {


                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                            e.CellElement.ForeColor = Color.Black;

                            e.CellElement.DrawFill = true;





                        }
                        else if (e.Column.Name == "Driver")
                        {

                            if (e.Row.Cells["GroupId"].Value != null && e.Row.Cells["IsConfirmedDriver"].Value.ToBool()==false &&  e.Row.Cells["Driver"].Value != null)
                            {

                                e.CellElement.Font = newFont;
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.White;
                                e.CellElement.ForeColor = Color.WhiteSmoke;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {

                                if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                                {
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BackColor = Color.Aqua;
                                    e.CellElement.ForeColor = Color.Black;
                                    e.CellElement.DrawFill = true;
                                }
                                else
                                {
                                    if (e.CellElement.BackColor == Color.Aqua)
                                    {
                                        e.CellElement.BackColor = Color.White;
                                        e.CellElement.ForeColor = Color.Black;
                                    }
                                }



                                //e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                                //e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                                //e.CellElement.DrawFill = false;

                            }


                            

                        }

                        else if (e.Column.Name == "HasNotesImg")
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                              else  if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }
                            //else if (e.Row.Cells["GroupId"].Value != null)
                            //{

                            //    e.CellElement.BackgroundImage = Resources.Resource1.select;
                            //}

                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }
                    }
                    else
                    {

                        if (e.Column.Name == "HasNotesImg"

                       )
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }
                            //else if (e.Row.Cells["GroupId"].Value != null)
                            //{

                            //    e.CellElement.BackgroundImage = Resources.Resource1.select;
                            //}

                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }

                        if (e.CellElement.IsCurrent)
                        {
                            e.CellElement.DrawFill = false;
                        }
                        //else
                        //{

                        //    if (e.Row.Cells["Account"].Value.ToStr() == string.Empty)
                        //    {


                        //    }


                        //}
                        //else
                        //{
                        //    e.CellElement.ResetValue(LightVisualElement.DrawFillProperty, ValueResetFlags.Local);
                        //}
                        //if (AppVars.AppTheme == "ControlDefault")
                        //{
                        //    e.CellElement.DrawFill = false;
                        //    if (e.CellElement.IsCurrent == true && e.CellElement.RowElement.IsSelected == true)
                        //    {


                        //        e.CellElement.NumberOfColors = 1;
                        //        e.CellElement.BackColor = this.selectedRowBackColor;
                        //        e.CellElement.ForeColor = this.selectedRowForeColor;
                        //        e.CellElement.Font = newFont;
                        //        e.CellElement.DrawFill = true;
                        //    }


                        //    else
                        //    {
                        //        //e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                        //        //if (e.CellElement.RowElement.IsSelected == false)
                        //        //{
                        //        //    e.CellElement.ForeColor = Color.Black;
                        //        //}
                        //        //if (e.CellElement.BackColor == this.selectedRowBackColor)
                        //        //    e.CellElement.DrawFill = false;
                        //    }
                        //}

                    }



                    if (e.Column.Name == "Plot" && e.CellElement.Value.ToStr() != "")
                    {

                        e.CellElement.ToolTipText = "Pickup is " + e.Row.Cells["DeadMileage"].Value.ToStr() + " mi away";


                    }
                    else
                        e.CellElement.ToolTipText = string.Empty;


                }
            }
            catch { }
        }



        private void InitializeBookingHistoryTab()
        {


            this.Pg_BookingHistory = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdLister = new Telerik.WinControls.UI.RadGridView();
            this.radPanel3 = new Telerik.WinControls.UI.RadPanel();
            this.btnLastRecords = new Telerik.WinControls.UI.RadButton();
            this.btnNextRecord = new Telerik.WinControls.UI.RadButton();
            this.btnPreviousRecords = new Telerik.WinControls.UI.RadButton();
            this.btnFirstRecords = new Telerik.WinControls.UI.RadButton();
            this.radPanel4 = new Telerik.WinControls.UI.RadPanel();
            this.radButton1 = new Telerik.WinControls.UI.RadButton();
            this.btnShowAllBookingHistory = new Telerik.WinControls.UI.RadButton();
            this.dtpToDate = new UI.MyDatePicker();
            this.label14 = new System.Windows.Forms.Label();
            this.dtpFromDate = new UI.MyDatePicker();
            this.label15 = new System.Windows.Forms.Label();
            this.btnFindBookingHistory = new Telerik.WinControls.UI.RadButton();
            this.txtsearchBookingHistory = new Telerik.WinControls.UI.RadTextBox();
            this.ddlColumnBookingHistory = new Telerik.WinControls.UI.RadDropDownList();
            this.label16 = new System.Windows.Forms.Label();
            this.radLabel27 = new Telerik.WinControls.UI.RadLabel();
            this.lblProgressBookingHistory = new Telerik.WinControls.UI.RadLabel();



            this.Pg_BookingHistory.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel3)).BeginInit();
            this.radPanel3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnLastRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnNextRecord)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnPreviousRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFirstRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel4)).BeginInit();
            this.radPanel4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.radButton1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnShowAllBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpToDate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpFromDate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFindBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtsearchBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ddlColumnBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel27)).BeginInit();
            this.radLabel27.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.lblProgressBookingHistory)).BeginInit();





            this.radPageView1.Pages.Insert(2, Pg_BookingHistory);

            //  this.radPageView1.Controls.Add(this.Pg_BookingHistory);



            // 
            // Pg_BookingHistory
            // 
            this.Pg_BookingHistory.Controls.Add(this.grdLister);
            this.Pg_BookingHistory.Controls.Add(this.radPanel3);
            this.Pg_BookingHistory.Controls.Add(this.radPanel4);
            this.Pg_BookingHistory.Controls.Add(this.radLabel27);
            this.Pg_BookingHistory.Location = new System.Drawing.Point(10, 10);
            this.Pg_BookingHistory.Name = "Pg_BookingHistory";
            this.Pg_BookingHistory.Size = new System.Drawing.Size(1179, 686);
            this.Pg_BookingHistory.Text = "Booking History";
            // 
            // grdLister
            // 
            this.grdLister.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdLister.Location = new System.Drawing.Point(0, 64);
            this.grdLister.Name = "grdLister";
            this.grdLister.Size = new System.Drawing.Size(1179, 575);
            this.grdLister.TabIndex = 115;
            this.grdLister.Text = "myGridView1";
            // 
            // radPanel3
            // 
            this.radPanel3.BackColor = System.Drawing.Color.AliceBlue;
            this.radPanel3.Controls.Add(this.btnLastRecords);
            this.radPanel3.Controls.Add(this.btnNextRecord);
            this.radPanel3.Controls.Add(this.btnPreviousRecords);
            this.radPanel3.Controls.Add(this.btnFirstRecords);
            this.radPanel3.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.radPanel3.Location = new System.Drawing.Point(0, 639);
            this.radPanel3.Name = "radPanel3";
            this.radPanel3.Size = new System.Drawing.Size(1179, 47);
            this.radPanel3.TabIndex = 116;
            // 
            // btnLastRecords
            // 
            this.btnLastRecords.Image = global::Taxi_AppMain.Properties.Resources.last_resultset1;
            this.btnLastRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnLastRecords.Location = new System.Drawing.Point(668, 4);
            this.btnLastRecords.Name = "btnLastRecords";
            this.btnLastRecords.Size = new System.Drawing.Size(110, 40);
            this.btnLastRecords.TabIndex = 3;
            this.btnLastRecords.Text = "Move Last";
            this.btnLastRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.last_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).Text = "Move Last";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnLastRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnLastRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnNextRecord
            // 
            this.btnNextRecord.Image = global::Taxi_AppMain.Properties.Resources.resultset_next1;
            this.btnNextRecord.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnNextRecord.Location = new System.Drawing.Point(522, 4);
            this.btnNextRecord.Name = "btnNextRecord";
            this.btnNextRecord.Size = new System.Drawing.Size(110, 40);
            this.btnNextRecord.TabIndex = 2;
            this.btnNextRecord.Text = "Move Next";
            this.btnNextRecord.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.resultset_next1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).Text = "Move Next";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnNextRecord.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnNextRecord.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnPreviousRecords
            // 
            this.btnPreviousRecords.Image = global::Taxi_AppMain.Properties.Resources.previous_resultset1;
            this.btnPreviousRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnPreviousRecords.Location = new System.Drawing.Point(376, 4);
            this.btnPreviousRecords.Name = "btnPreviousRecords";
            this.btnPreviousRecords.Size = new System.Drawing.Size(110, 40);
            this.btnPreviousRecords.TabIndex = 1;
            this.btnPreviousRecords.Text = "Move Previous";
            this.btnPreviousRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.previous_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).Text = "Move Previous";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnPreviousRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnPreviousRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnFirstRecords
            // 
            this.btnFirstRecords.Image = global::Taxi_AppMain.Properties.Resources.first_resultset1;
            this.btnFirstRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnFirstRecords.Location = new System.Drawing.Point(228, 4);
            this.btnFirstRecords.Name = "btnFirstRecords";
            this.btnFirstRecords.Size = new System.Drawing.Size(110, 40);
            this.btnFirstRecords.TabIndex = 0;
            this.btnFirstRecords.Text = "Move First";
            this.btnFirstRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.first_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).Text = "Move First";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFirstRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFirstRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // radPanel4
            // 
            this.radPanel4.BackColor = System.Drawing.Color.AliceBlue;
            this.radPanel4.Controls.Add(this.radButton1);
            this.radPanel4.Controls.Add(this.btnShowAllBookingHistory);
            this.radPanel4.Controls.Add(this.dtpToDate);
            this.radPanel4.Controls.Add(this.label14);
            this.radPanel4.Controls.Add(this.dtpFromDate);
            this.radPanel4.Controls.Add(this.label15);
            this.radPanel4.Controls.Add(this.btnFindBookingHistory);
            this.radPanel4.Controls.Add(this.txtsearchBookingHistory);
            this.radPanel4.Controls.Add(this.ddlColumnBookingHistory);
            this.radPanel4.Controls.Add(this.label16);
            this.radPanel4.Dock = System.Windows.Forms.DockStyle.Top;
            this.radPanel4.Location = new System.Drawing.Point(0, 30);
            this.radPanel4.Name = "radPanel4";
            this.radPanel4.Size = new System.Drawing.Size(1179, 34);
            this.radPanel4.TabIndex = 114;
            // 
            // radButton1
            // 
            this.radButton1.Dock = System.Windows.Forms.DockStyle.Right;
            this.radButton1.Image = global::Taxi_AppMain.Properties.Resources.delete;
            this.radButton1.Location = new System.Drawing.Point(1052, 0);
            this.radButton1.Margin = new System.Windows.Forms.Padding(10, 3, 3, 10);
            this.radButton1.Name = "radButton1";
            this.radButton1.Size = new System.Drawing.Size(127, 34);
            this.radButton1.TabIndex = 0;
            this.radButton1.Text = "Delete Selected";
            this.radButton1.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.radButton1.Visible = false;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.delete;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).Text = "Delete Selected";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.radButton1.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.radButton1.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnShowAllBookingHistory
            // 
            this.btnShowAllBookingHistory.Location = new System.Drawing.Point(787, 5);
            this.btnShowAllBookingHistory.Name = "btnShowAllBookingHistory";
            this.btnShowAllBookingHistory.Size = new System.Drawing.Size(77, 24);
            this.btnShowAllBookingHistory.TabIndex = 15;
            this.btnShowAllBookingHistory.Tag = "";
            this.btnShowAllBookingHistory.Text = "Show All ";
            this.btnShowAllBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).Image = null;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).Text = "Show All ";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // dtpToDate
            // 
            this.dtpToDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpToDate.CustomFormat = "dd/MM/yyyy HH:mm";
            this.dtpToDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpToDate.Format = System.Windows.Forms.DateTimePickerFormat.Long;
            this.dtpToDate.Location = new System.Drawing.Point(576, 4);
            this.dtpToDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpToDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpToDate.Name = "dtpToDate";
            this.dtpToDate.NullDate = new System.DateTime(((long)(0)));
            this.dtpToDate.Size = new System.Drawing.Size(140, 24);
            this.dtpToDate.TabIndex = 14;
            this.dtpToDate.TabStop = false;
            this.dtpToDate.Text = "myDatePicker1";
            this.dtpToDate.Value = null;
            // 
            // label14
            // 
            this.label14.AutoSize = true;
            this.label14.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label14.Location = new System.Drawing.Point(552, 9);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(23, 16);
            this.label14.TabIndex = 13;
            this.label14.Text = "To";
            // 
            // dtpFromDate
            // 
            this.dtpFromDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpFromDate.CustomFormat = "dd/MM/yyyy HH:mm";
            this.dtpFromDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpFromDate.Format = System.Windows.Forms.DateTimePickerFormat.Long;
            this.dtpFromDate.Location = new System.Drawing.Point(409, 5);
            this.dtpFromDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpFromDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpFromDate.Name = "dtpFromDate";
            this.dtpFromDate.NullDate = new System.DateTime(((long)(0)));
            this.dtpFromDate.Size = new System.Drawing.Size(140, 24);
            this.dtpFromDate.TabIndex = 12;
            this.dtpFromDate.TabStop = false;
            this.dtpFromDate.Text = "myDatePicker1";
            this.dtpFromDate.Value = null;
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label15.Location = new System.Drawing.Point(334, 9);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(74, 16);
            this.label15.TabIndex = 8;
            this.label15.Text = "Date From";
            // 
            // btnFindBookingHistory
            // 
            this.btnFindBookingHistory.Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
            this.btnFindBookingHistory.Location = new System.Drawing.Point(722, 5);
            this.btnFindBookingHistory.Name = "btnFindBookingHistory";
            this.btnFindBookingHistory.Size = new System.Drawing.Size(59, 24);
            this.btnFindBookingHistory.TabIndex = 7;
            this.btnFindBookingHistory.Tag = "";
            this.btnFindBookingHistory.Text = "Find";
            this.btnFindBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).Text = "Find";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFindBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFindBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // txtsearchBookingHistory
            // 
            this.txtsearchBookingHistory.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtsearchBookingHistory.Location = new System.Drawing.Point(69, 7);
            this.txtsearchBookingHistory.Name = "txtsearchBookingHistory";
            this.txtsearchBookingHistory.Size = new System.Drawing.Size(133, 21);
            this.txtsearchBookingHistory.TabIndex = 5;
            this.txtsearchBookingHistory.TabStop = false;
            // 
            // ddlColumnBookingHistory
            // 
            this.ddlColumnBookingHistory.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
            this.ddlColumnBookingHistory.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlColumnBookingHistory.Location = new System.Drawing.Point(211, 6);
            this.ddlColumnBookingHistory.Name = "ddlColumnBookingHistory";
            this.ddlColumnBookingHistory.Size = new System.Drawing.Size(111, 23);
            this.ddlColumnBookingHistory.TabIndex = 6;
            // 
            // label16
            // 
            this.label16.AutoSize = true;
            this.label16.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label16.Location = new System.Drawing.Point(8, 10);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(53, 16);
            this.label16.TabIndex = 4;
            this.label16.Text = "Search";
            // 
            // radLabel27
            // 
            this.radLabel27.AutoSize = false;
            this.radLabel27.BackColor = System.Drawing.Color.Red;
            this.radLabel27.Controls.Add(this.lblProgressBookingHistory);
            this.radLabel27.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel27.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel27.ForeColor = System.Drawing.Color.White;
            this.radLabel27.Location = new System.Drawing.Point(0, 0);
            this.radLabel27.Name = "radLabel27";
            // 
            // 
            // 
            this.radLabel27.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel27.Size = new System.Drawing.Size(1179, 30);
            this.radLabel27.TabIndex = 7;
            this.radLabel27.Text = "Booking History";
            this.radLabel27.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // lblProgressBookingHistory
            // 
            this.lblProgressBookingHistory.AutoSize = false;
            this.lblProgressBookingHistory.BackColor = System.Drawing.Color.Red;
            this.lblProgressBookingHistory.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblProgressBookingHistory.ForeColor = System.Drawing.Color.White;
            this.lblProgressBookingHistory.Image = global::Taxi_AppMain.Properties.Resources.spinner;
            this.lblProgressBookingHistory.Location = new System.Drawing.Point(1, 2);
            this.lblProgressBookingHistory.Name = "lblProgressBookingHistory";
            // 
            // 
            // 
            this.lblProgressBookingHistory.RootElement.ForeColor = System.Drawing.Color.White;
            this.lblProgressBookingHistory.Size = new System.Drawing.Size(185, 27);
            this.lblProgressBookingHistory.TabIndex = 14;
            this.lblProgressBookingHistory.Text = "Loading";
            this.lblProgressBookingHistory.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.lblProgressBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.lblProgressBookingHistory.Visible = false;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.spinner;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleLeft;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).Text = "Loading";
            ((Telerik.WinControls.Layouts.ImageAndTextLayoutPanel)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2).GetChildAt(1))).BackColor = System.Drawing.Color.Red;



            this.Pg_BookingHistory.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdLister.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel3)).EndInit();
            this.radPanel3.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnLastRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnNextRecord)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnPreviousRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFirstRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel4)).EndInit();
            this.radPanel4.ResumeLayout(false);
            this.radPanel4.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.radButton1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnShowAllBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpToDate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpFromDate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFindBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtsearchBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ddlColumnBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel27)).EndInit();
            this.radLabel27.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.lblProgressBookingHistory)).EndInit();



            //HasBookingHistory


            grdLister.VerticalScroll.LargeChange = 100;
            grdLister.TableElement.VScrollBar.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighSpeed;
            grdLister.ShowGroupPanel = false;

            grdLister.CellDoubleClick += new GridViewCellEventHandler(grdBookingHistoryLister_CellDoubleClick);
            grdLister.RowsChanging += new Telerik.WinControls.UI.GridViewCollectionChangingEventHandler(Grid_RowsChanging);
            grdLister.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
            grdLister.CommandCellClick += new CommandCellClickEventHandler(grdLister_CommandCellClick);
            grdLister.ViewCellFormatting += new CellFormattingEventHandler(grdLister_ViewCellFormatting);
            grdLister.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdLister_ContextMenuOpening);


            pageSize = AppVars.objPolicyConfiguration.ListingPagingSize.ToInt();

            btnFirstRecords.Click += new EventHandler(btnFirstRecords_Click);
            btnPreviousRecords.Click += new EventHandler(btnPreviousRecords_Click);
            btnNextRecord.Click += new EventHandler(btnNextRecord_Click);
            btnLastRecords.Click += new EventHandler(btnLastRecords_Click);


            btnShowAllBookingHistory.Click += new EventHandler(btnShowAllBookingHistory_Click);
            btnFindBookingHistory.Click += new EventHandler(btnFindBookingHistory_Click);
            txtsearchBookingHistory.KeyDown += new KeyEventHandler(txtSearchBookingHistory_KeyDown);




        }




        void grdOnPlotDrivers_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Right)
                {

                    if (e.RowIndex != -1 && e.ColumnIndex != -1 && grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
                    {





                        if (plotsContextMenu == null)
                        {

                            plotsContextMenu = new ContextMenu();


                            MenuItem mItem = new MenuItem();
                            mItem.Text = "Move Up";
                            mItem.Name = "moveupitem";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);                     
                            plotsContextMenu.MenuItems.Add(mItem);



                            mItem = new MenuItem();
                            mItem.Text = "Move Down";
                            mItem.Name = "movedownitem";
                            mItem.Visible = false;

                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "UnBlock";
                            mItem.Name = "movedownitem";
                            mItem.Visible = false;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(unBlockViewItem_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                             mItem = new MenuItem();
                            mItem.Text = "Logout";
                            mItem.Name = "logoutitem";
                            mItem.Visible = true;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "Move to Top";
                            mItem.Name = "movetop";
                            mItem.Visible = true;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem("UnBlock");
                            //mItem.ForeColor = Color.Black;
                            //unBlockViewItem.BackColor = Color.Red;
                            //unBlockViewItem.Click += new EventHandler(unBlockViewItem_Click);
                            //unBlockViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                            //driverContextMenu.Items.Add(unBlockViewItem);

                        }

                        if (grdOnPlotDrivers.Columns[e.ColumnIndex].Name == "SIN BIN")
                        {

                            plotsContextMenu.MenuItems[2].Visible = true;
                            plotsContextMenu.MenuItems[0].Visible = false;
                            plotsContextMenu.MenuItems[1].Visible = false;
                            plotsContextMenu.MenuItems[3].Visible =false;
                            plotsContextMenu.MenuItems[4].Visible = false;

                            plotsContextMenu.MenuItems[2].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                        }
                        else
                        {

                            plotsContextMenu.MenuItems[0].Visible = true;
                            plotsContextMenu.MenuItems[1].Visible = true;
                            plotsContextMenu.MenuItems[3].Visible = true;
                            plotsContextMenu.MenuItems[4].Visible = true;

                            plotsContextMenu.MenuItems[0].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems[1].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                            plotsContextMenu.MenuItems[3].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();


                            plotsContextMenu.MenuItems[4].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                        }








                        plotsContextMenu.Show(grdOnPlotDrivers, new Point(e.X, e.Y));
                    }

                }
            }
            catch (Exception ex)
            {


            }
        }



        ContextMenu plotsContextMenu;

        // For Toolip
        private void grdOnPlotDrivers_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {

            try
            {
                if (e.RowIndex == -1 || e.ColumnIndex == -1)
                    return;


                if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToStr() != string.Empty)
                {







                    DataGridViewRow row = grdOnPlotDrivers.Rows[e.RowIndex];
                    Fleet_DriverQueueList obj = null;

                    if (row != null)
                    {


                        string plot = string.Empty;


                        int driverId = row.Cells[e.ColumnIndex].ErrorText.ToInt();
                        if (driverId > 0)
                        {
                            obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                        }



                        DateTime? loginDateTime = null;

                        if (obj != null)
                        {



                            string vehicleNo = obj.FleetMasterId != null ? obj.Fleet_Master.Fleet_VehicleType.VehicleType + " - " + obj.Fleet_Master.Plateno.ToStr() : "";


                            loginDateTime = obj.LoginDateTime;
                            int driverType = obj.Fleet_Driver.DefaultIfEmpty().DriverTypeId.ToInt();





                            var list = from a in General.GetQueryable<Booking>(c => (c.PickupDateTime != null && c.PickupDateTime >= loginDateTime) && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                          && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED && c.Fleet_Driver.DriverTypeId == driverType)


                                       select new
                                       {

                                           FareRate = a.TotalCharges
                                       };



                            string waitSince = string.Empty;

                            if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                            {
                                waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(obj.WaitSinceOn.Value));
                                waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                                if (waitSince.StartsWith("00"))
                                    waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                                else if (waitSince.StartsWith("0"))
                                    waitSince = waitSince.Remove(0, 1);

                                if (waitSince.Contains(":"))
                                    waitSince = waitSince.Replace(":", " hour(s) ").Trim();


                                waitSince = Environment.NewLine + "Wait Since : " + waitSince;


                            }


                            string journeyType = "";

                            if (obj.CurrentJobId != null)
                            {
                                if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                    journeyType = "(One Way Journey)";
                                else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                    journeyType = "(Return Journey)";
                                else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                    journeyType = "(Wait and Return Journey)";
                            }


                            string lastGPSContact = string.Empty;

                            string sinbinTill = string.Empty;
                            if (obj.DriverId != null && obj.Fleet_Driver.HasPDA.ToBool() && obj.Fleet_Driver.Fleet_Driver_Locations.Count > 0)
                            {
                                lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().UpdateDate.ToDateTime());

                                if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SINBIN)
                                {
                                    sinbinTill = " - till : " + string.Format("{0:HH:mm:ss}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().SinBinTillOn.ToDateTime());
                                }
                            }


                            decimal totalEarning = list.Sum(c => c.FareRate).ToDecimal();
                            string earn = string.Format("{0:c}", totalEarning).Substring(1);
                            grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText = "Driver No : " + obj.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr()
                                                + Environment.NewLine +
                                                 "Name : " + obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr() + Environment.NewLine
                                                 + plot


                                                    + "Jobs Done : " + list.Count()
                                                + Environment.NewLine + "Total Earned : £ " + earn
                                                + Environment.NewLine + "Status : " + obj.Fleet_DriverWorkingStatus.DefaultIfEmpty().WorkStatus.ToStr() + sinbinTill
                                                + lastGPSContact
                                                + (vehicleNo != string.Empty ? Environment.NewLine + "Vehicle : " + vehicleNo : "")
                                                + Environment.NewLine + "Login Since : " + loginDateTime + " (" + obj.LoginFrom.ToStr() + ")"
                                                + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + Environment.NewLine + "On Job:" + journeyType + Environment.NewLine + " Pickup : "
                                                                    + obj.Booking.FromAddress + Environment.NewLine + " Destination : " + obj.Booking.ToAddress : "")
                                                + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.Booking.DropOffZoneId != null ? Environment.NewLine + "DropOff Plot : " + obj.Booking.Gen_Zone.ZoneName + "(" + obj.Booking.Gen_Zone.DefaultIfEmpty().ShortName.ToStr() + ")" : "")
                                                + Environment.NewLine + "Vehicle : " + obj.Fleet_Driver.DefaultIfEmpty().Fleet_VehicleType.VehicleType.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleNo.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleColor.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleMake.ToStr()

                                                + waitSince;


                        }




                    }

                }

            }
            catch (Exception ex)
            {


            }




        }




        void grdWebBookings_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                if (e.CellElement is GridHeaderCellElement)
                {
                    //e.CellElement
                    e.CellElement.BorderColor = _HeaderRowBorderColor;
                    e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                    //e.CellElement.DrawBorder = false;
                    e.CellElement.BackColor = _HeaderRowBackColor;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.Font = newFont;
                    e.CellElement.ForeColor = Color.White;
                    e.CellElement.DrawFill = true;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                }

                else if (e.CellElement is GridFilterCellElement)
                {

                    e.CellElement.Font = oldFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.White;
                    e.CellElement.RowElement.BackColor = Color.White;
                    e.CellElement.RowElement.NumberOfColors = 1;

                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridDataCellElement)
                {




                    e.CellElement.ToolTipText = e.CellElement.Text;






                }
            }
            catch { }
        }


        private void InitializeWebBookingTab()
        {
            this.Pg_NewWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdWebBookingsNew = new Telerik.WinControls.UI.RadGridView();
            this.radLabel7 = new Telerik.WinControls.UI.RadLabel();
            this.btnRefreshWaitingWebBooking = new Telerik.WinControls.UI.RadButton();
            this.Pg_PendingWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdWebBookingsPending = new Telerik.WinControls.UI.RadGridView();
            this.radLabel13 = new Telerik.WinControls.UI.RadLabel();
            this.btnRefreshPendingWebBooking = new Telerik.WinControls.UI.RadButton();

            this.txtNewWebBookingTotal = new Telerik.WinControls.UI.RadLabel();
            this.txtPendingWebBookingTotal = new Telerik.WinControls.UI.RadLabel();
            this.txtDeclinedWebBookingTotal = new Telerik.WinControls.UI.RadLabel();

            this.Pg_NewWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel7)).BeginInit();
            this.radLabel7.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshWaitingWebBooking)).BeginInit();
            this.Pg_PendingWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel13)).BeginInit();
            this.radLabel13.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshPendingWebBooking)).BeginInit();

            ((System.ComponentModel.ISupportInitialize)(this.txtNewWebBookingTotal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtPendingWebBookingTotal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtDeclinedWebBookingTotal)).BeginInit();

            this.radPageView1.Controls.Add(this.Pg_NewWebBookings);
            this.radPageView1.Controls.Add(this.Pg_PendingWebBookings);




            // 
            // Pg_NewWebBookings
            // 
            this.Pg_NewWebBookings.Controls.Add(this.grdWebBookingsNew);
            this.Pg_NewWebBookings.Controls.Add(this.radLabel7);
            this.Pg_NewWebBookings.ImageAlignment = System.Drawing.ContentAlignment.BottomLeft;
            this.Pg_NewWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_NewWebBookings.Name = "Pg_NewWebBookings";
            this.Pg_NewWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_NewWebBookings.Text = "New Web Bookings";
            this.Pg_NewWebBookings.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            // 
            // grdWebBookingsNew
            // 
            this.grdWebBookingsNew.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdWebBookingsNew.EnableHotTracking = false;
            this.grdWebBookingsNew.Location = new System.Drawing.Point(0, 30);
            this.grdWebBookingsNew.Name = "grdWebBookingsNew";
            this.grdWebBookingsNew.Size = new System.Drawing.Size(1179, 656);
            this.grdWebBookingsNew.TabIndex = 114;
            this.grdWebBookingsNew.Text = "myGridView1";
            // 
            // radLabel7
            // 
            this.radLabel7.AutoSize = false;
            this.radLabel7.BackColor = System.Drawing.Color.Crimson;
            this.radLabel7.Controls.Add(this.btnRefreshWaitingWebBooking);
            this.radLabel7.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel7.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel7.ForeColor = System.Drawing.Color.White;
            this.radLabel7.Location = new System.Drawing.Point(0, 0);
            this.radLabel7.Name = "radLabel7";
            // 
            // 
            // 
            this.radLabel7.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel7.Size = new System.Drawing.Size(1179, 30);
            this.radLabel7.TabIndex = 7;
            this.radLabel7.Text = "New Web Bookings";
            this.radLabel7.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel7.Controls.Add(this.txtNewWebBookingTotal);


            // 
            // txtNewWebBookingTotal
            // 
            this.txtNewWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtNewWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtNewWebBookingTotal.Name = "txtNewWebBookingTotal";
            this.txtNewWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtNewWebBookingTotal.TabIndex = 0;
            this.txtNewWebBookingTotal.Text = "1000";

            // 
            // btnRefreshWaitingWebBooking
            // 
            this.btnRefreshWaitingWebBooking.Dock = System.Windows.Forms.DockStyle.Right;
            this.btnRefreshWaitingWebBooking.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            this.btnRefreshWaitingWebBooking.Location = new System.Drawing.Point(1049, 0);
            this.btnRefreshWaitingWebBooking.Name = "btnRefreshWaitingWebBooking";
            this.btnRefreshWaitingWebBooking.Size = new System.Drawing.Size(130, 30);
            this.btnRefreshWaitingWebBooking.TabIndex = 0;
            this.btnRefreshWaitingWebBooking.Text = "Refresh";
            this.btnRefreshWaitingWebBooking.Click += new System.EventHandler(this.btnRefreshWaitingWebBooking_Click);
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshWaitingWebBooking.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshWaitingWebBooking.GetChildAt(0))).Text = "Refresh";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshWaitingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshWaitingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // Pg_PendingWebBookings
            // 
            this.Pg_PendingWebBookings.Controls.Add(this.grdWebBookingsPending);
            this.Pg_PendingWebBookings.Controls.Add(this.radLabel13);
            this.Pg_PendingWebBookings.ImageAlignment = System.Drawing.ContentAlignment.BottomLeft;
            this.Pg_PendingWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_PendingWebBookings.Name = "Pg_PendingWebBookings";
            this.Pg_PendingWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_PendingWebBookings.Text = "Pending Web Bookings";
            this.Pg_PendingWebBookings.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            // 
            // grdWebBookingsPending
            // 
            this.grdWebBookingsPending.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdWebBookingsPending.EnableHotTracking = false;
            this.grdWebBookingsPending.Location = new System.Drawing.Point(0, 30);
            this.grdWebBookingsPending.Name = "grdWebBookingsPending";
            this.grdWebBookingsPending.Size = new System.Drawing.Size(1179, 656);
            this.grdWebBookingsPending.TabIndex = 114;
            this.grdWebBookingsPending.Text = "myGridView1";



            // 
            // txtNewWebBookingTotal
            // 
            this.txtPendingWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtPendingWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtPendingWebBookingTotal.Name = "txtPendingWebBookingTotal";
            this.txtPendingWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtPendingWebBookingTotal.TabIndex = 0;
            this.txtPendingWebBookingTotal.Text = "1000";

            // 
            // radLabel13
            // 
            this.radLabel13.AutoSize = false;
            this.radLabel13.BackColor = System.Drawing.Color.Crimson;
            this.radLabel13.Controls.Add(this.btnRefreshPendingWebBooking);
            this.radLabel13.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel13.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel13.ForeColor = System.Drawing.Color.White;
            this.radLabel13.Location = new System.Drawing.Point(0, 0);
            this.radLabel13.Name = "radLabel13";
            // 
            // 
            // 
            this.radLabel13.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel13.Size = new System.Drawing.Size(1179, 30);
            this.radLabel13.TabIndex = 7;
            this.radLabel13.Text = "Pending Web Bookings";
            this.radLabel13.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel13.Controls.Add(this.txtPendingWebBookingTotal);
            // 
            // btnRefreshPendingWebBooking
            // 
            this.btnRefreshPendingWebBooking.Dock = System.Windows.Forms.DockStyle.Right;
            this.btnRefreshPendingWebBooking.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            this.btnRefreshPendingWebBooking.Location = new System.Drawing.Point(1049, 0);
            this.btnRefreshPendingWebBooking.Name = "btnRefreshPendingWebBooking";
            this.btnRefreshPendingWebBooking.Size = new System.Drawing.Size(130, 30);
            this.btnRefreshPendingWebBooking.TabIndex = 1;
            this.btnRefreshPendingWebBooking.Text = "Refresh";
            this.btnRefreshPendingWebBooking.Click += new System.EventHandler(this.btnRefreshPendingWebBooking_Click);
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshPendingWebBooking.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshPendingWebBooking.GetChildAt(0))).Text = "Refresh";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshPendingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshPendingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));



            this.Pg_NewWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel7)).EndInit();
            this.radLabel7.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshWaitingWebBooking)).EndInit();
            this.Pg_PendingWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel13)).EndInit();
            this.radLabel13.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshPendingWebBooking)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtNewWebBookingTotal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtPendingWebBookingTotal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtDeclinedWebBookingTotal)).EndInit();




            this.radLabel26 = new Telerik.WinControls.UI.RadLabel();
            this.Pg_DeclinedWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdRejectedWebBookings = new Telerik.WinControls.UI.RadGridView();



            ((System.ComponentModel.ISupportInitialize)(this.radLabel26)).BeginInit();
            this.Pg_DeclinedWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings.MasterTemplate)).BeginInit();


            this.radPageView1.Controls.Add(this.Pg_DeclinedWebBookings);


            // 
            // radLabel26
            // 
            this.radLabel26.AutoSize = false;
            this.radLabel26.BackColor = System.Drawing.Color.Crimson;
            this.radLabel26.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel26.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel26.ForeColor = System.Drawing.Color.White;
            this.radLabel26.Location = new System.Drawing.Point(0, 0);
            this.radLabel26.Name = "radLabel26";



            // 
            // txtNewWebBookingTotal
            // 
            this.txtDeclinedWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtDeclinedWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtDeclinedWebBookingTotal.Name = "txtDeclinedWebBookingTotal";
            this.txtDeclinedWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtDeclinedWebBookingTotal.TabIndex = 0;
            this.txtDeclinedWebBookingTotal.Text = "1000";

            // 
            // 
            // 
            this.radLabel26.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel26.Size = new System.Drawing.Size(1179, 30);
            this.radLabel26.TabIndex = 113;
            this.radLabel26.Text = "Declined Web Bookings";
            this.radLabel26.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel26.Controls.Add(this.txtDeclinedWebBookingTotal);

            // 
            // Pg_DeclinedWebBookings
            // 
            this.Pg_DeclinedWebBookings.Controls.Add(this.grdRejectedWebBookings);
            this.Pg_DeclinedWebBookings.Controls.Add(this.radLabel26);
            this.Pg_DeclinedWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_DeclinedWebBookings.Name = "Pg_DeclinedWebBookings";
            this.Pg_DeclinedWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_DeclinedWebBookings.Text = "Declined Web Bookings";
            // 
            // grdRejectedWebBookings
            // 
            this.grdRejectedWebBookings.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdRejectedWebBookings.EnableHotTracking = false;
            this.grdRejectedWebBookings.Location = new System.Drawing.Point(0, 30);
            this.grdRejectedWebBookings.Name = "grdRejectedWebBookings";
            this.grdRejectedWebBookings.Size = new System.Drawing.Size(1179, 656);
            this.grdRejectedWebBookings.TabIndex = 114;
            this.grdRejectedWebBookings.Text = "myGridView1";

            ((System.ComponentModel.ISupportInitialize)(this.radLabel26)).EndInit();
            this.Pg_DeclinedWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings)).EndInit();
        }

        private void FormatNewWebBookingGrid()
        {


            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.HeaderText = "ID";
            col.IsVisible = false;
            col.Name = "ID";
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Ref #";
            col.Name = "REFNO";
            col.IsVisible = true;
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Booked On";
            col.Name = "BOOKEDON";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);







            col = new GridViewTextBoxColumn();
            col.HeaderText = "Passenger";
            col.Name = "PASSENGER";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Contact";
            col.Name = "CONTACTNO";
            col.Width = 140;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "EMAIL";

            grdWebBookingsNew.Columns.Add(col);


            //col = new GridViewTextBoxColumn();
            //col.IsVisible = false;
            //col.Name = "STATUS";
            //grdLister.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "BOOKINGTYPEID";
            grdWebBookingsNew.Columns.Add(col);

            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "DEFAULTCLIENTID";
            grdWebBookingsNew.Columns.Add(col);

            GridViewDateTimeColumn colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Pickup Date";
            colD.Name = "PICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.ReadOnly = true;
            colD.Width = 95;
            colD.WrapText = true;
            colD.SortOrder = RadSortOrder.Ascending;
            colD.Sort(RadSortOrder.Descending, true);
            grdWebBookingsNew.Columns.Add(colD);

            colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Time";
            colD.Name = "PICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.ReadOnly = true;
            colD.Width = 70;
            colD.WrapText = true;
            colD.SortOrder = RadSortOrder.Ascending;
            colD.Sort(RadSortOrder.Descending, true);
            grdWebBookingsNew.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.IsVisible = false;
            grdWebBookingsNew.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.IsVisible = false;
            grdWebBookingsNew.Columns.Add(colD);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Flight No";
            col.Name = "FlightNo";
            col.Width = 80;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Pickup";
            col.Name = "FROMADDRESS";
            col.ReadOnly = true;
            col.Width = 170;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Via";
            col.Name = "VIA";
            col.ReadOnly = true;
            col.Width = 130;
            col.IsVisible = false;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Destination";
            col.Name = "TOADDRESS";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 170;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Car Type";
            col.Name = "VEHICLETYPE";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 130;
            grdWebBookingsNew.Columns.Add(col);



            GridViewDecimalColumn colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Fares";
            colDec.Name = "FARES";
            col.ReadOnly = true;
            //  colDec.IsVisible = true;
            colDec.Width = 70;
            grdWebBookingsNew.Columns.Add(colDec);


            colDec = new GridViewDecimalColumn();
            colDec.Name = "OLDFARES";
            colDec.IsVisible = false;
            grdWebBookingsNew.Columns.Add(colDec);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Method";
            col.Name = "PAYMENTTYPE";
            col.Width = 150;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);




            colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Waiting Time(Mins)";
            colDec.Name = "WaitingTime";
            colDec.IsVisible = false;
            colDec.Width = 150;
            grdWebBookingsNew.Columns.Add(colDec);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Notes/Booker Info";
            col.Name = "Notes";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 230;
            grdWebBookingsNew.Columns.Add(col);


            GridViewCommandColumn commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Accept";
            commandCol.Name = "ACCEPT";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;
            grdWebBookingsNew.Columns.Add(commandCol);


            commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Pending Accept";
            commandCol.Name = "PENDINGACCEPT";
            commandCol.HeaderText = "";
            commandCol.Width = 100;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsNew.Columns.Add(commandCol);







            commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Decline";
            commandCol.Name = "DECLINE";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsNew.Columns.Add(commandCol);



            grdWebBookingsNew.CommandCellClick += grdWebBookings_CommandCellClick;
            grdWebBookingsNew.ShowRowHeaderColumn = false;
            grdWebBookingsNew.ShowGroupPanel = false;
            grdWebBookingsNew.AllowAddNewRow = false;
            grdWebBookingsNew.ShowGroupPanel = false;

            grdWebBookingsNew.AllowColumnResize = false;
            grdWebBookingsNew.AllowColumnReorder = false;
            grdWebBookingsNew.AllowDeleteRow = false;
            grdWebBookingsNew.AllowMultiColumnSorting = true;


            grdWebBookingsNew.TableElement.RowHeight = 50;
            // grdWebBookingsNew.AllowEditRow = false;
            //    grdWebBookingsNew.AllowDeleteRow = false;
            grdWebBookingsNew.Font = new Font("Tahoma", 9, FontStyle.Regular);
            grdWebBookingsNew.MasterTemplate.AllowColumnChooser = false;

            grdWebBookingsNew.EnableFiltering = true;
            grdWebBookingsNew.ShowFilteringRow = true;


            grdWebBookingsNew.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
        }

        void grdWebBookingsNew_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            if (e.Row != null && e.Row is GridViewDataRowInfo)
            {


                ShowBookingWebForm(e.Row.Cells["Id"].Value.ToLong());
            }

        }




        private void FormatPendingWebBookingGrid()
        {


            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.HeaderText = "ID";
            col.IsVisible = false;
            col.Name = "ID";
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Ref #";
            col.Name = "REFNO";
            col.IsVisible = true;
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Booked On";
            col.Name = "BOOKEDON";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Passenger";
            col.Name = "PASSENGER";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Contact";
            col.Name = "CONTACTNO";
            col.Width = 160;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "EMAIL";

            grdWebBookingsPending.Columns.Add(col);


            //col = new GridViewTextBoxColumn();
            //col.IsVisible = false;
            //col.Name = "STATUS";
            //grdLister.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "BOOKINGTYPEID";
            grdWebBookingsPending.Columns.Add(col);

            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "DEFAULTCLIENTID";
            grdWebBookingsPending.Columns.Add(col);

            GridViewDateTimeColumn colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Pickup Date";
            colD.Name = "PICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.ReadOnly = false;
            colD.Width = 95;
            colD.WrapText = true;
            grdWebBookingsPending.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Time";
            colD.Name = "PICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.ReadOnly = false;
            colD.Width = 95;
            colD.WrapText = true;
            grdWebBookingsPending.Columns.Add(colD);



            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colD);



            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colD);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Flight No";
            col.Name = "FlightNo";
            col.Width = 80;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Pickup";
            col.Name = "FROMADDRESS";
            col.ReadOnly = true;
            col.Width = 180;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Via";
            col.Name = "VIA";
            col.ReadOnly = true;
            col.Width = 130;
            col.WrapText = true;
            col.IsVisible = false;
            grdWebBookingsPending.Columns.Add(col);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Destination";
            col.Name = "TOADDRESS";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 180;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Car Type";
            col.Name = "VEHICLETYPE";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 130;
            grdWebBookingsPending.Columns.Add(col);



            GridViewDecimalColumn colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Fares";
            colDec.Name = "FARES";
            col.ReadOnly = false;
            //  colDec.IsVisible = true;
            colDec.Width = 70;
            grdWebBookingsPending.Columns.Add(colDec);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Method";
            col.Name = "PAYMENTTYPE";
            col.Width = 150;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            colDec = new GridViewDecimalColumn();
            colDec.Name = "OLDFARES";
            colDec.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colDec);



            colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Waiting Time(Mins)";
            colDec.Name = "WaitingTime";
            colDec.IsVisible = false;
            colDec.Width = 150;
            grdWebBookingsPending.Columns.Add(colDec);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Notes/Booker Info";
            col.Name = "Notes";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 230;
            grdWebBookingsPending.Columns.Add(col);

            GridViewCommandColumn commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Accept";
            commandCol.Name = "ACCEPT";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsPending.Columns.Add(commandCol);


            commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Decline";
            commandCol.Name = "DECLINE";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsPending.Columns.Add(commandCol);



            grdWebBookingsPending.CommandCellClick += grdWebBookings_CommandCellClick;
            grdWebBookingsPending.ShowRowHeaderColumn = false;
            grdWebBookingsPending.ShowGroupPanel = false;
            grdWebBookingsPending.AllowAddNewRow = false;

            grdWebBookingsNew.ShowGroupPanel = false;
            grdWebBookingsPending.TableElement.RowHeight = 50;
            grdWebBookingsPending.Font = new Font("Tahoma", 9, FontStyle.Regular);


            grdWebBookingsPending.AllowColumnResize = false;
            grdWebBookingsPending.AllowColumnReorder = false;
            grdWebBookingsPending.AllowDeleteRow = false;
            grdWebBookingsPending.AllowMultiColumnSorting = true;


            grdWebBookingsPending.MasterTemplate.AllowColumnChooser = false;

            grdWebBookingsPending.EnableFiltering = true;
            grdWebBookingsPending.ShowFilteringRow = true;
            // grdWebBookingsNew.AllowEditRow = false;
            //    grdWebBookingsPending.AllowDeleteRow = false;
            grdWebBookingsPending.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
        }


        private List<Booking> GetWebBookingList(Expression<Func<Booking, bool>> exp)
        {


            return General.GetQueryable<Booking>(exp).ToList();


        }


        public void PopulateWebBookingsGrid()
        {
            try
            {

                //DateTime? nowDate = DateTime.Now.Date;
                //DateTime? fromDate = dtpFromDatePreBook.Value.ToDateorNull();
                //DateTime? tillDate = dtpToDatePreBook.Value.ToDateorNull();

                //if (fromDate != null && fromDate < nowDate)
                //    fromDate = nowDate;


                //&& (fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                // && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)

                List<Booking> list = General.GetQueryable<Booking>(a => (a.BookingStatusId == 18 || a.BookingStatusId == 19)



                                             ).ToList();



                PopulateNewWebBookings(list.Where(c => c.BookingStatusId == 19).ToList());

                PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());

            }
            catch (Exception ex)
            {


            }
        }


        public void PopulateNewWebBookings(List<Booking> listofNewWebBookings)
        {
            //     List<Booking> listofNewWebBookings = list.Where(c => c.BookingStatusId == 19).ToList();

            try
            {

                if (listofNewWebBookings == null)
                    listofNewWebBookings = GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING);


                grdWebBookingsNew.BeginUpdate();

                grdWebBookingsNew.RowCount = listofNewWebBookings.Count;

                int cnt = grdWebBookingsNew.RowCount;

              

                GridViewRowInfo row = null;
                for (int i = 0; i < cnt; i++)
                {

                    row = grdWebBookingsNew.Rows[i];

                    row.Cells["ID"].Value = listofNewWebBookings[i].Id;
                    row.Cells["REFNO"].Value = listofNewWebBookings[i].BookingNo;

                    row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", listofNewWebBookings[i].BookingDate.ToDateTime());

                    row.Cells["PASSENGER"].Value = listofNewWebBookings[i].CustomerName;

                    row.Cells["BOOKINGTYPEID"].Value = listofNewWebBookings[i].BookingTypeId;
                    row.Cells["DEFAULTCLIENTID"].Value = listofNewWebBookings[i].AddBy;
                    row.Cells["VEHICLETYPE"].Value = listofNewWebBookings[i].Fleet_VehicleType.DefaultIfEmpty().VehicleType.ToStr();


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerPhoneNo) && !string.IsNullOrEmpty(listofNewWebBookings[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerPhoneNo + "/" + listofNewWebBookings[i].CustomerMobileNo;

                    else if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerPhoneNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerPhoneNo;

                    else if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerMobileNo;


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerEmail))
                    {
                        row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + listofNewWebBookings[i].CustomerEmail;
                        row.Cells["EMAIL"].Value = listofNewWebBookings[i].CustomerEmail;

                    }


                    row.Cells["PICKUPDATETIME"].Value = listofNewWebBookings[i].PickupDateTime;
                    row.Cells["PICKUPTIME"].Value = listofNewWebBookings[i].PickupDateTime;

                    row.Cells["OLDPICKUPDATETIME"].Value = listofNewWebBookings[i].PickupDateTime;


                    row.Cells["FlightNo"].Value = listofNewWebBookings[i].FromDoorNo;


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].FromStreet.ToStr().Trim()))
                        row.Cells["FlightNo"].Value += " - " + listofNewWebBookings[i].FromStreet;




                    row.Cells["FROMADDRESS"].Value = listofNewWebBookings[i].FromAddress;
                    row.Cells["TOADDRESS"].Value = listofNewWebBookings[i].ToAddress;

                    row.Cells["FARES"].Value = listofNewWebBookings[i].FareRate.ToDecimal();
                    row.Cells["OLDFARES"].Value = listofNewWebBookings[i].FareRate.ToDecimal();


                    row.Cells["VIA"].Value = listofNewWebBookings[i].DistanceString.ToStr();
                  
                    row.Cells["PAYMENTTYPE"].Value = listofNewWebBookings[i].Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr().Trim();



                    row.Cells["Notes"].Value = listofNewWebBookings[i].Booking_Notes.Count > 0 ? listofNewWebBookings[i].Booking_Notes[0].notes.ToStr() : "";


                }


                grdWebBookingsNew.EndUpdate();


              

                AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);


                txtNewWebBookingTotal.Text = cnt.ToStr();

                //grdWebBookingsNew.Columns["FARES"].ReadOnly = true;
                //grdWebBookingsNew.Columns["WaitingTime"].ReadOnly = true;
                //grdWebBookingsNew.Columns["WaitingTime"].IsVisible = false;

                //grdWebBookingsNew.Columns["FROMADDRESS"].Width += 50;
                //grdWebBookingsNew.Columns["TOADDRESS"].Width += 50;
                //grdWebBookingsNew.Columns["VIA"].Width += 50;
            }
            catch (Exception ex)
            {


            }
        }



        public void PopulatePendingWebBookings(List<Booking> list)
        {
            try
            {

                if (list == null)
                    list = GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING);

                //     List<Booking> listofNewWebBookings = list.Where(c => c.BookingStatusId == 19).ToList();

                grdWebBookingsPending.BeginUpdate();


                grdWebBookingsPending.RowCount = list.Count;

                int cnt = grdWebBookingsPending.RowCount;



                GridViewRowInfo row = null;

                for (int i = 0; i < cnt; i++)
                {

                    row = grdWebBookingsPending.Rows[i];


                    row.Cells["ID"].Value = list[i].Id;
                    row.Cells["REFNO"].Value = list[i].BookingNo;

                    row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", list[i].BookingDate.ToDateTime());



                    row.Cells["PASSENGER"].Value = list[i].CustomerName;

                    row.Cells["BOOKINGTYPEID"].Value = list[i].BookingTypeId;
                    row.Cells["DEFAULTCLIENTID"].Value = list[i].AddBy;

                    row.Cells["VEHICLETYPE"].Value = list[i].Fleet_VehicleType.DefaultIfEmpty().VehicleType.ToStr();


                    if (!string.IsNullOrEmpty(list[i].CustomerPhoneNo) && !string.IsNullOrEmpty(list[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = list[i].CustomerPhoneNo + "/" + list[i].CustomerMobileNo;

                    else if (!string.IsNullOrEmpty(list[i].CustomerPhoneNo))
                        row.Cells["CONTACTNO"].Value = list[i].CustomerPhoneNo;

                    else if (!string.IsNullOrEmpty(list[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = list[i].CustomerMobileNo;


                    if (!string.IsNullOrEmpty(list[i].CustomerEmail))
                    {
                        row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + list[i].CustomerEmail;
                        row.Cells["EMAIL"].Value = list[i].CustomerEmail;

                    }


                    row.Cells["PICKUPDATETIME"].Value = list[i].PickupDateTime;
                    row.Cells["PICKUPTIME"].Value = list[i].PickupDateTime;
                    row.Cells["OLDPICKUPDATETIME"].Value = list[i].PickupDateTime;


                    row.Cells["FlightNo"].Value = list[i].FromDoorNo;


                    if (!string.IsNullOrEmpty(list[i].FromStreet.ToStr().Trim()))
                        row.Cells["FlightNo"].Value += " - " + list[i].FromStreet;




                    row.Cells["FROMADDRESS"].Value = list[i].FromAddress;
                    row.Cells["TOADDRESS"].Value = list[i].ToAddress;

                    row.Cells["FARES"].Value = list[i].FareRate.ToDecimal();
                    row.Cells["OLDFARES"].Value = list[i].FareRate.ToDecimal();


                    row.Cells["VIA"].Value = list[i].DistanceString.ToStr();


                    row.Cells["PAYMENTTYPE"].Value = list[i].Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr().Trim();


                    row.Cells["Notes"].Value = list[i].Booking_Notes.Count > 0 ? list[i].Booking_Notes[0].notes.ToStr() : "";



                }



                grdWebBookingsPending.EndUpdate();

                AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

                txtPendingWebBookingTotal.Text = cnt.ToStr();
            }
            catch (Exception ex)
            {


            }
        }


        private void ResetWebBookingBlinking()
        {

            if (grdWebBookingsNew.Rows.Count == 0)
            {

                Pg_NewWebBookings.Tag = null;
            }

        }

        public void PopulateDeclinedWebBookingsGrid(IList list)
        {
            try
            {

             


               

                grdRejectedWebBookings.DataSource = list;
           

                txtDeclinedWebBookingTotal.Text = list.Count.ToStr();
            }
            catch (Exception ex)
            {

            }
        }


        public void PopulateDeclinedWebBookings()
        {
            try
            {

                DateTime fromdate = DateTime.Now.AddDays(-60).ToDate();

                var data1 = General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date >= fromdate



                   && (c.BookingTypeId == Enums.BOOKING_TYPES.WEB || c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                   && (c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING || c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || c.BookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)

                  )


                 .OrderByDescending(c => c.PickupDateTime);
                var query = (from a in data1


                             select new
                             {
                                 Id = a.Id,
                                 RefNumber = a.BookingNo,
                                 BookingDate = a.BookingDate,
                                 PickupDate = a.PickupDateTime,
                                 Passenger = a.CustomerName,
                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 Fare = a.FareRate,
                                 Account = a.Gen_Company.CompanyName,
                                 Driver = a.Fleet_Driver.DriverNo,
                                 DriverId = a.DriverId,
                                 Vehicle = a.Fleet_VehicleType.VehicleType,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 BookingTypeId = a.BookingTypeId,
                                 VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                 VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,
                                 MobileNo = a.CustomerMobileNo,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                             }).ToList();


                //    this.grdRejectedWebBookings.TableElement.BeginUpdate();

                grdRejectedWebBookings.DataSource = query;
                //    this.grdRejectedWebBookings.TableElement.EndUpdate();

                //frmRejectedWebBookingsList frmRej = (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmRejectedWebBookingsList") as frmRejectedWebBookingsList);

                //if (frmRej != null)
                //{
                //    frmRej.RefreshData();

                //}

                txtDeclinedWebBookingTotal.Text = query.Count.ToStr();
            }
            catch (Exception ex)
            {

            }
        }


        // private string webBookingTemplate = string.Empty;
       

        public void SendEmail(Gen_SubCompany objSubCompany, string ToAddress, string subject, string strBody)
        {

            try
            {


                if (ToAddress.IsValidEmailAddress() && !string.IsNullOrEmpty(strBody))
                {

                    if (objSubCompany != null && objSubCompany.SmtpHost != null)
                    {

                        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage();
                        msg.To.Add(ToAddress);
                        msg.From = new System.Net.Mail.MailAddress(objSubCompany.SmtpUserName.ToStr(), objSubCompany.CompanyName.ToStr());
                        msg.Subject = subject;



                        if (objSubCompany.EmailCC.ToStr().Trim() != string.Empty)
                        {
                            msg.CC.Add(objSubCompany.EmailCC.ToStr().Trim());
                        }




                        msg.Body = strBody;

                        msg.BodyEncoding = System.Text.Encoding.UTF8;
                        msg.IsBodyHtml = true;

                        //    msg.Priority = System.Net.Mail.MailPriority.High;

                        System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                        client.Credentials = new NetworkCredential(objSubCompany.SmtpUserName.ToStr(), objSubCompany.SmtpPassword.ToStr());
                        client.Port = Convert.ToInt32(objSubCompany.SmtpPort);
                        client.Host = objSubCompany.SmtpHost;
                        client.EnableSsl = objSubCompany.SmtpHasSSL.ToBool();




                        FieldInfo transport = client.GetType().GetField("transport", BindingFlags.NonPublic | BindingFlags.Instance);
                        FieldInfo authModules = transport.GetValue(client).GetType().GetField("authenticationModules", BindingFlags.NonPublic | BindingFlags.Instance);

                        Array modulesArray = authModules.GetValue(transport.GetValue(client)) as Array;
                        modulesArray.SetValue(modulesArray.GetValue(3), 1);
                       
                            ServicePointManager.ServerCertificateValidationCallback =
                                delegate(object s, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                         System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
                                { return true; };
                        
                        client.Send(msg);
                    }
                    else
                    {
                        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage();
                        msg.To.Add(ToAddress);
                        msg.From = new System.Net.Mail.MailAddress(AppVars.objPolicyConfiguration.UserName.ToStr(), AppVars.objSubCompany.CompanyName.ToStr());
                        msg.Subject = subject;



                        if (AppVars.objSubCompany != null && AppVars.objSubCompany.EmailCC.ToStr().Trim() != string.Empty)
                        {
                            msg.CC.Add(AppVars.objSubCompany.EmailCC.ToStr().Trim());
                        }




                        msg.Body = strBody;
                        msg.BodyEncoding = System.Text.Encoding.UTF8;
                        msg.IsBodyHtml = true;
                        msg.Priority = System.Net.Mail.MailPriority.High;
                        System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                        client.Credentials = new NetworkCredential(AppVars.objPolicyConfiguration.UserName.ToStr(), AppVars.objPolicyConfiguration.Password.ToStr());
                        client.Port = Convert.ToInt32(AppVars.objPolicyConfiguration.Port);
                        client.Host = AppVars.objPolicyConfiguration.SmtpHost;
                        client.EnableSsl = objSubCompany.SmtpHasSSL.ToBool();

                        FieldInfo transport = client.GetType().GetField("transport", BindingFlags.NonPublic | BindingFlags.Instance);
                        FieldInfo authModules = transport.GetValue(client).GetType().GetField("authenticationModules", BindingFlags.NonPublic | BindingFlags.Instance);

                        Array modulesArray = authModules.GetValue(transport.GetValue(client)) as Array;
                        modulesArray.SetValue(modulesArray.GetValue(3), 1);

                        
                            ServicePointManager.ServerCertificateValidationCallback =
                                delegate(object s, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                         System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
                                { return true; };
                        
                        client.Send(msg);


                    }
                }
            }
            catch (Exception ex)
            {


            }

        }







        void grdStats_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;

                if (statsContextMenu == null)
                {
                    statsContextMenu = new RadDropDownMenu();

                    RadMenuItem menu_showJobs = new RadMenuItem("Show Jobs");
                    menu_showJobs.ForeColor = Color.Blue;
                    menu_showJobs.BackColor = Color.Blue;
                    menu_showJobs.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    menu_showJobs.Click += new EventHandler(menu_showJobs_Click);
                    statsContextMenu.Items.Add(menu_showJobs);
                }

                e.ContextMenu = statsContextMenu;
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }





        void menu_showJobs_Click(object sender, EventArgs e)
        {

            try
            {

                RadMenuItem item = (RadMenuItem)sender;
                GridViewRowInfo row = grdStats.CurrentRow;

                if (row != null && row is GridViewDataRowInfo)
                {
                    int driverId = row.Cells["DriverId"].Value.ToInt();


                    Fleet_DriverQueueList obj = null;
                    DateTime? fromDate = DateTime.Now.ToDate();
                    DateTime? tillDate = DateTime.Now.ToDate();


                    if (optDriverWise.ToggleState == ToggleState.On)
                    {

                        obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                    }
                    else if (optMonthWise.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();

                    }
                    else if (optToday.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();


                    }


                    if (obj != null || (fromDate != null && tillDate != null))
                    {

                        List<Booking> list = null;
                        if (obj != null)
                        {
                            list = General.GetQueryable<Booking>(c => c.PickupDateTime >= obj.LoginDateTime
                                                   && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                 && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();

                        }
                        else
                        {

                            if (optMonthWise.ToggleState == ToggleState.On)
                            {
                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value >= fromDate && c.PickupDateTime.Value <= tillDate)
                                                       && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                            }
                            else if (optToday.ToggleState == ToggleState.On)
                            {

                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date == DateTime.Now.Date && c.PickupDateTime.Value.TimeOfDay >= fromDate.Value.TimeOfDay && c.PickupDateTime.Value.TimeOfDay <= tillDate.Value.TimeOfDay)
                                                       && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                            }
                        }

                        //  Fleet_DriverQueueList obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                        //if (obj != null)
                        //{

                        //    var list = General.GetQueryable<Booking>(c => c.PickupDateTime >= obj.LoginDateTime
                        //                                && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                        //                              && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();


                        if (list.Count > 0)
                        {

                            frmDriverJobs frmDrvJobs = new frmDriverJobs(list, row.Cells["DriverNo"].Value.ToStr());
                            frmDrvJobs.StartPosition = FormStartPosition.CenterScreen;
                            frmDrvJobs.ShowDialog();
                            frmDrvJobs.Dispose();
                        }
                        // }
                    }
                }

            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }


        }

        void grdStats_ScreenTipNeeded(object sender, ScreenTipNeededEventArgs e)
        {
            ShowScreenTipForCellStats(e.Item as GridDataCellElement);
        }



        private void ShowScreenTipForCellStats(GridDataCellElement cell)
        {
            if (cell == null)
                return;

            try
            {


                GridViewRowInfo row = cell.RowElement.RowInfo;

                if (row != null && row is GridViewDataRowInfo)
                {

                    int driverId = row.Cells["DriverId"].Value.ToInt();

                    Fleet_DriverQueueList obj = null;
                    DateTime? fromDate = DateTime.Now.ToDate();
                    DateTime? tillDate = DateTime.Now.ToDate();


                    if (optDriverWise.ToggleState == ToggleState.On)
                    {

                        obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                    }
                    else if (optMonthWise.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();

                    }
                    else if (optToday.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();


                    }
                

                    if (obj != null || (fromDate!=null && tillDate!=null))
                    {

                        List<Booking> list =null;
                        if (obj != null)
                        {
                            list = General.GetQueryable<Booking>(c => c.PickupDateTime >= obj.LoginDateTime
                                                   && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                 && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();

                        }
                        else
                        {

                            if (optMonthWise.ToggleState == ToggleState.On)
                            {
                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date >=fromDate && c.PickupDateTime.Value.Date<=tillDate)
                                                       && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).OrderByDescending(c=>c.PickupDateTime).Take(15).ToList();
                            }
                            else if (optToday.ToggleState == ToggleState.On)
                            {

                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date==DateTime.Now.Date && c.PickupDateTime.Value.TimeOfDay >= fromDate.Value.TimeOfDay && c.PickupDateTime.Value.TimeOfDay <= tillDate.Value.TimeOfDay)
                                                       && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).OrderByDescending(c => c.PickupDateTime).Take(15).ToList();
                            }
                        }

                       


                        if (list.Count > 0)
                        {
                            StringBuilder text = new StringBuilder();

                            text.Append("<html>");

                            for (int i = 0; i < list.Count; i++)
                            {

                                text.Append("<b>" + (i + 1).ToStr() + "." + " Ref # : " + list[i].BookingNo.ToStr() + " @ <color=Red>" + string.Format("{0:dd/MM/yy HH:mm}", list[i].PickupDateTime) + "</b>");

                                text.Append("<br><color=Black>Pickup : " + list[i].FromAddress.ToStr());
                                text.Append("<br>Destination : " + list[i].ToAddress.ToStr());

                                text.Append("<br><br>");



                            }


                            RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();
                            screenTip.CaptionLabel.Margin = new Padding(3);

                            screenTip.CaptionLabel.Text = text.ToStr() + "<br><br><strong>For More Results, Right Click and press Show Jobs</strong>";
                         //   screenTip.CaptionLabel.Text = text.ToStr();
                            screenTip.MainTextLabel.Text = string.Empty;
                            screenTip.EnableCustomSize = false;


                            cell.ScreenTip = screenTip;
                        }
                    }
                }

            }
            catch (Exception ex)
            {


            }



        }





        private void PlaySoundNotification(string soundFileName, bool looping)
        {

            spMessaging.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\" + soundFileName;




            if (File.Exists(spMessaging.SoundLocation))
            {

                if (looping)
                    spMessaging.PlayLooping();

                else
                    spMessaging.Play();
            }
        }




        private void PlaySound(string soundFileName, bool looping)
        {


            //      sp.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\" + soundFileName;




            if (File.Exists(sp.SoundLocation))
            {

                if (looping)
                    sp.PlayLooping();

                else
                    sp.Play();
            }
        }



        private void StopJobDueSound()
        {
            if (frmJobDue != null && frmJobDue.IsDisposed == false)
            {
                frmJobDue.Close();
            }

        }


        //private void StopSound()
        //{
        //    if (dueAlert != null)
        //    {
        //        dueAlert.Hide();
        //        dueAlert = null;
        //        sp.Stop();
        //    }

        //}


        private bool? HasHoldAndReleaseValue;


        void grdPendingJobs_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    if (e.KeyCode == Keys.I)
                    {
                        RadGridView grd = (sender as RadGridView);
                        if (grd.CurrentRow != null && grd.CurrentRow is GridViewDataRowInfo)
                        {
                            long id = grd.CurrentRow.Cells["Id"].Value.ToLong();


                            frmCustomScreenTip frmTip = new frmCustomScreenTip(General.GetObject<Booking>(c => c.Id == id));
                            frmTip.StartPosition = FormStartPosition.CenterParent;
                            frmTip.ShowInTaskbar = false;
                            frmTip.ShowDialog();
                            KeyEventArgs key = frmTip.LastSendEventArgs;

                            frmTip.Dispose();
                            frmBookingDashBoard_KeyDown(null, key);
                        }
                    }

                    else if (e.KeyCode == Keys.H && radPageView1.SelectedPage == Pg_PendingJobs && (sender as Telerik.WinControls.UI.RadGridView).Name == "grdPendingJobs") // waiting to HOLD Job
                    {
                        if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() )
                        {
                            try
                            {


                                if (HasHoldAndReleaseValue == null)
                                {
                                    if (AppVars.listUserRights.Count(c => c.functionId == "USE HOLD AND RELEASE SHORTKEYS") > 0)
                                        HasHoldAndReleaseValue = true;
                                    else
                                        HasHoldAndReleaseValue = false;


                                }

                                if (HasHoldAndReleaseValue.ToBool())
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {

                                        if (db.GetTable<Booking>().Count(c => c.Id == grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong()
                                                  && (c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                  || c.BookingStatusId == Enums.BOOKINGSTATUS.POB || c.BookingStatusId == Enums.BOOKINGSTATUS.STC)) > 0)
                                        {

                                            MessageBox.Show("Job is already Accepted by driver");
                                        }
                                        else
                                        {

                                            db.stp_UpdateJobStatus(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong(), Enums.BOOKINGSTATUS.ONHOLD);

                                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                          //  RefreshTodayBookingData();
                                        }
                                    }
                                }
                            }
                            catch
                            {


                            }

                         
                        }

                    }

                    else if (e.KeyCode == Keys.R && radPageView1.SelectedPage == Pg_PendingJobs && (sender as Telerik.WinControls.UI.RadGridView).Name == "grdPendingJobs") // Release Job
                    {

                        if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                        {

                            //frmDespatchJob frmD = null;
                            //if (ReleaseJob(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr(), grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong(), ref frmD, false, "", ""))
                            //{

                            //    RefreshActiveData();



                            //}

                            try
                            {


                                if (HasHoldAndReleaseValue == null)
                                {
                                    if (AppVars.listUserRights.Count(c => c.functionId == "USE HOLD AND RELEASE SHORTKEYS") > 0)
                                        HasHoldAndReleaseValue = true;
                                    else
                                        HasHoldAndReleaseValue = false;


                                }
                                if (HasHoldAndReleaseValue.ToBool())
                                {


                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {

                                        


                                        var objBooking = db.Bookings.FirstOrDefault(c => c.Id == grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());

                                        if (objBooking != null)
                                        {
                                            objBooking.AutoDespatch = true;
                                            objBooking.IsBidding = true;
                                            db.SubmitChanges();

                                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                           // RefreshTodayBookingData();
                                        }
                                        //  }
                                    }
                                }

                            }
                            catch
                            {


                            }

                            
                        }
                    }
                    //else if (e.KeyCode == Keys.F && radPageView1.SelectedPage == Pg_PendingJobs && (sender as RadGridView).Name == "grdPendingJobs") // FOJ Job
                    //{

                    //    DespatchFOJJob();
                    //}

                    //else if (e.KeyCode == Keys.C && radPageView1.SelectedPage == Pg_PendingJobs && (sender as RadGridView).Name == "grdPendingJobs") // FOJ Job
                    //{

                    //    CompleteJob();
                    //}
                    //else if (e.KeyCode == Keys.A && radPageView1.SelectedPage == Pg_PendingJobs && (sender as RadGridView).Name == "grdPendingJobs") // FOJ Job
                    //{

                    //    AllocateDriver();
                    //}
                }
            }
            catch 
            {


            }
        }


        private int GetDriverIdFromDriverNo(string driverNo)
        {
            int driverId = 0;


            try
            {

                if (grdDriverWaiting.Rows.Count(c => c.Cells["DriverNo"].Value.ToStr() == driverNo
                    && c.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE) > 0)
                {

                    driverId = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == driverNo).Cells["DriverId"].Value.ToInt();

                }
                else if (grdOnBoardDriver.Rows.Count(c => c.Cells["DriverNo"].Value.ToStr() == driverNo
                    && c.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE) > 0)
                {

                    driverId = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == driverNo).Cells["DriverId"].Value.ToInt();

                }

            }
            catch (Exception ex)
            {


            }

            return driverId;

        }




        //  List<ClsAutoDespatchPlot> listOfReleaseAutoDespatchJobs = null;
        //public bool ReleaseJob(string plotName, long jobId, ref frmDespatchJob frmDesp, bool onSaveandRelease, string vehicle, string fromAddress)
        //{
        //    bool IsReleased = false;

        //    try
        //    {


        //        if (!string.IsNullOrEmpty(plotName))
        //        {
        //            if (grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().Count(c => c.HeaderText.Contains(plotName)) > 0)
        //            {
        //                string backupPlot1 = string.Empty;
        //                string backupPlot2 = string.Empty;

        //                int colIndex = grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().FirstOrDefault(c => c.HeaderText == plotName).Index;

        //                DataGridViewRow rowFirst = grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().FirstOrDefault(c => c.Cells[colIndex].OwningColumn.Index == colIndex && c.Cells[colIndex].Tag.ToStr() == "-6632142");
        //                if (rowFirst == null)
        //                {

        //                    Gen_Zone_Backup backupZones = General.GetObject<Gen_Zone_Backup>(c => c.Gen_Zone.ShortName.ToUpper() == plotName.ToUpper() && c.BackupZone1Id != null && c.BackupZone2Id != null);

        //                    if (backupZones != null)
        //                    {
        //                        if (backupZones.BackupZone1Priority.ToBool())
        //                        {
        //                            backupPlot1 = backupZones.Gen_Zone1.ShortName.ToStr().ToUpper();

        //                            colIndex = grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().FirstOrDefault(c => c.HeaderText == backupPlot1).Index;
        //                            rowFirst = grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().FirstOrDefault(c => c.Cells[colIndex].OwningColumn.Index == colIndex && c.Cells[colIndex].Tag.ToStr() == "-6632142");

        //                            if (rowFirst == null)
        //                            {
        //                                backupPlot2 = backupZones.Gen_Zone2.ShortName.ToStr().ToUpper();
        //                                colIndex = grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().FirstOrDefault(c => c.HeaderText == backupPlot2).Index;
        //                                rowFirst = grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().FirstOrDefault(c => c.Cells[colIndex].OwningColumn.Index == colIndex && c.Cells[colIndex].Tag.ToStr() == "-6632142");
        //                            }

        //                        }
        //                        else
        //                        {
        //                            backupPlot2 = backupZones.Gen_Zone2.ShortName.ToStr().ToUpper();

        //                            colIndex = grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().FirstOrDefault(c => c.HeaderText == backupPlot2).Index;
        //                            rowFirst = grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().FirstOrDefault(c => c.Cells[colIndex].OwningColumn.Index == colIndex && c.Cells[colIndex].Tag.ToStr() == "-6632142");

        //                            if (rowFirst == null)
        //                            {
        //                                backupPlot1 = backupZones.Gen_Zone1.ShortName.ToStr().ToUpper();
        //                                colIndex = grdOnPlotDrivers.Columns.OfType<DataGridViewColumn>().FirstOrDefault(c => c.HeaderText == backupPlot1).Index;
        //                                rowFirst = grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().FirstOrDefault(c => c.Cells[colIndex].OwningColumn.Index == colIndex && c.Cells[colIndex].Tag.ToStr() == "-6632142");
        //                            }
        //                        }
        //                    }

        //                }

        //                if (rowFirst != null)
        //                {

        //                    string driverNo = rowFirst.Cells[colIndex].Value.ToStr();

        //                    int driverId = GetDriverIdFromDriverNo(driverNo);


        //                    if (grdPendingJobs.Rows.Count(c => c.Cells["Driver"].Value.ToStr() == driverNo) > 0)
        //                    {
        //                        Booking objPendingBooking = General.GetQueryable<Booking>(c => c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING && c.Id != jobId).OrderByDescending(c => c.Id).FirstOrDefault();

        //                        if (objPendingBooking != null && objPendingBooking.DespatchDateTime != null && DateTime.Now.Subtract(objPendingBooking.DespatchDateTime.Value.AddSeconds(30)).Minutes < (AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt()))
        //                        {

        //                            captionText = "Job Despatch Failed..";

        //                            contentText = "<html><b><span><color=Blue>" + "This Driver already have a Job Offer in Queue" + Environment.NewLine
        //                                               + "You cannot despatch another job to this Driver until "
        //                                              + string.Format("{0:HH:mm:ss}", objPendingBooking.JobOfferDateTime.Value.AddSeconds(30).AddMinutes(AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt()))
        //                                             + "</span></b></html>";


        //                            MethodInvoker mi = new MethodInvoker(delegate()
        //                            {
        //                                CreateAndShowAlert(captionText, contentText, null, null, false, null, "", "");
        //                            });
        //                            this.Invoke(mi);


        //                            return false;


        //                        }
        //                    }

        //                    List<string> errorList = new List<string>();

        //                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId);
        //                    Fleet_Driver drv = General.GetObject<Fleet_Driver>(c => c.Id == driverId);

        //                    frmDesp = new frmDespatchJob(objJob.Id, objJob, drv.Id, drv, true);
        //                    if (frmDesp.OnDespatching(ref errorList))
        //                    {
        //                        frmDesp.DespatchJob();

        //                        frmDesp.Dispose();

        //                        IsReleased = true;
        //                    }
        //                }
        //                else
        //                {
        //                    Gen_Zone z = General.GetObject<Gen_Zone>(c => c.ShortName.ToUpper() == plotName.ToUpper());
        //                    if (z != null)
        //                    {
        //                        //if (z.EnableAutoDespatch.ToBool())
        //                        //{

        //                        //    if (listOfReleaseAutoDespatchJobs == null)
        //                        //        listOfReleaseAutoDespatchJobs = new List<ClsAutoDespatchPlot>();


        //                        //    if (listOfReleaseAutoDespatchJobs.Find(c => c.JobId == jobId) != null)
        //                        //        listOfReleaseAutoDespatchJobs.RemoveAll(c => c.JobId == jobId);


        //                        //    listOfReleaseAutoDespatchJobs.Add(new ClsAutoDespatchPlot { JobId = jobId, PlotName = plotName, BackupPlot1 = backupPlot1, BackupPlot2 = backupPlot2 });
        //                        //}
        //                        if (z.EnableBidding.ToBool())
        //                        {


        //                            BroadCastJobOnDriverBid(jobId, z.BiddingRadius.ToInt(), onSaveandRelease, vehicle, fromAddress);
        //                        }
        //                    }
        //                }
        //            }
        //        }




        //    }
        //    catch (Exception ex)
        //    {


        //    }


        //    return IsReleased;



        //}


        private void BroadCastJobOnDriverBid(long jobId, int biddingRadius, bool onSaveAndRelease, string bookingVehicle, string fromAddress)
        {


           

            GridViewRowInfo row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

            if (row != null || onSaveAndRelease.ToBool())
            {
                //



                string vehicle = string.Empty;

                if (row != null)
                {

                    vehicle = row.Cells["Vehicle"].Value.ToStr().Trim().ToLower();

                }
                else
                {
                    vehicle = bookingVehicle.ToStr().Trim().ToLower();
                }

                //

                int[] arr = grdDriverWaiting.Rows.Where(c => c.Cells["Vehicle"].Value.ToStr().Trim().ToLower() == vehicle &&
                                c.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                .Select(c => c.Cells["DriverId"].Value.ToInt()).ToArray<int>();

                if (arr.Count() > 0)
                {

                    new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.BID);
                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);



                    if (biddingRadius > 0)
                    {

                        string fromVal = string.Empty;

                        if (row != null)
                        {
                            fromVal = row.Cells["From"].Value.ToStr();

                        }
                        else
                        {
                            fromVal = fromAddress.ToStr().ToUpper().Trim();

                        }


                        string jobPostCode = General.GetPostCodeMatch(fromVal);

                        var objCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == jobPostCode);

                        if (objCoord != null)
                        {


                            int[] withinRadiusDrvIds = (from a in General.GetQueryable<Fleet_Driver_Location>(c => arr.Contains(c.DriverId)).Where(c => c.Latitude != 0).AsEnumerable()

                                                        select new
                                                        {
                                                            Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objCoord.Latitude), Convert.ToDouble(objCoord.Longitude))),
                                                            DriverId = a.DriverId

                                                        }).Where(c => c.Distance <= biddingRadius).Select(a => a.DriverId).ToArray<int>();

                            arr = withinRadiusDrvIds;

                        }

                    }



                    Thread smsThread = new Thread(delegate()
                    {
                        if (this.IsDisposed == false)
                        {
                            SendBidMessage(arr, jobId);
                        }
                    });


                    smsThread.Start();

                }
            }
        }

        private void SendBidMessage(int[] driverIds, long jobId)
        {

            try
            {


                foreach (var item in driverIds)
                {


                    if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                    {

                        // For TCP Connection
                        if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                        {
                            General.SendPDAMessage("request pda=" + item + "=" + jobId + "=" + "Bid Alert>>" + "=6");
                        }

                    }
                    else
                    {
                        // For TCP Connection
                        if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                        {
                            General.SendPDAMessage("request pda=" + item + "=" + jobId + "=" + "Bid Alert>>" + "=6");
                        }

                    }

                }
            }
            catch (Exception ex)
            {


            }
        }



  
        void TrackDriverItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                long jobId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }



                rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? General.GetObject<Booking>(c => c.Id == jobId) : null, true, driverId);
                rpt.ShowDialog();
                rpt.Dispose();

                GC.Collect();





            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }


        void ForceLogoutItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                long Id=0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    Id=grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }



                ForceLogoutDriver(Id, driverId,true);             







            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        public void ForceLogoutDriver(long id, int? driverId,bool refreshdata)
        {
            try
            {
                int idleMins=AppVars.objPolicyConfiguration.AutoLogoutInActiveDrvMins.ToInt();

                if (idleMins == 0)
                    idleMins = 1;
              //  else if (idleMins > 1)
                 //   idleMins = idleMins / 2;

 
                if (idleMins==1 && General.GetQueryable<Fleet_Driver_Location>(c => c.DriverId==driverId && c.UpdateDate >= DateTime.Now.AddMinutes(-idleMins)).Count() > 0)
                {
                    MessageBox.Show("You Cannot Logout this Driver! " + Environment.NewLine + "Force Logout Minimum Idle Duration is " + idleMins + " min(s)");
                    return;
                }
                else
                {


                    if (id == 0)
                        id = General.GetObject<Fleet_DriverQueueList>(c => c.Status == true && c.DriverId == driverId).DefaultIfEmpty().Id;


                    if (id > 0)
                    {

                        DriverQueueBO objMaster = new DriverQueueBO();
                        objMaster.GetByPrimaryKey(id);

                        if (objMaster.Current != null)
                        {
                            objMaster.Current.LogoutDateTime = DateTime.Now;
                            objMaster.Current.Status = false;

                            objMaster.Save();


                            General.AddUserLog("Driver {" + objMaster.Current.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + "} is forcefully logout by Controller", 3);


                            if (objMaster.Current.Fleet_Driver.HasPDA.ToBool())
                            {


                                new Thread(delegate()
                                {
                                    General.SendPDAMessage("request force logout=" + objMaster.Current.Fleet_Driver.DriverNo + "=" + driverId);
                                }).Start();

                                //  SendMessage("request force logout=" + objMaster.Current.Fleet_Driver.DriverNo);

                            }

                            if(refreshdata)
                                   RefreshDashBoardDrivers();

                        }
                    }
                }

            }
            catch (Exception ex)
            {
                //ENUtils.ShowMessage(ex.Message);


            }
        }





        void streetViewItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }


                ShowStreetView(driverId);





            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        public void ShowStreetView(int driverId)
        {


            Fleet_Driver_Location objDrvLoc = General.GetObject<Fleet_Driver_Location>(c => c.DriverId == driverId);
            if (objDrvLoc == null)
            {

                ENUtils.ShowMessage("No Location found");

            }
            else
            {
                //  string connString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionStringRouteMap"].ToStr();


                string connString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionStringRouteMap"].ToStr();

                if (!string.IsNullOrEmpty(connString))
                {

                    connString = Application.StartupPath + "\\TreasureRouteMap.exe";
                    //connString = @"C:\Program Files(86)\Eurosoft Tech\Treasure RouteMap Setup\TreasureRouteMap.exe";

                    //if (File.Exists(connString) == false)
                    //{
                    //    connString = @"C:\Program Files\Eurosoft Tech\Treasure RouteMap Setup\TreasureRouteMap.exe";
                    //}

                }

                if (connString.ToStr().Trim().Length > 0 && File.Exists(connString) == true)
                {
                    Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                    if (proc != null)
                    {
                        proc.Kill();
                        proc.CloseMainWindow();
                        proc.Close();

                    }

                    string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");


                    string arg = "frmstreetview" + " " + conn + " " + driverId.ToStr() + " " + objDrvLoc.Id.ToStr();
                    Process.Start(connString, arg);
                }
                else
                {


                    frmStreetView frmStreet = new frmStreetView(driverId, objDrvLoc);

                    frmStreet.StartPosition = FormStartPosition.CenterScreen;
                    frmStreet.MaximizeBox = false;
                    frmStreet.ShowDialog();
                }


            }
        }

        void ForceActionItem_Click(object sender, EventArgs e)
        {

            try
            {

                if (grdOnBoardDriver.CurrentRow != null)
                {


                    int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();





                    // string driverId = grdOnPlotDrivers.CurrentCell.RowInfo.Cells[grdOnPlotDrivers.CurrentColumn.Index].ErrorText.ToStr();

                    if (driverId != 0)
                    {

                        RadMenuItem item = (RadMenuItem)sender;

                        string actionType = "";

                        if (item.Text.StartsWith("Force Arrive"))
                        {

                            actionType = "<<Arrive Job>>";
                        }
                        else if (item.Text.StartsWith("Force POB"))
                        {
                            actionType = "<<POB Job>>";

                        }


                        int statusId = grdOnBoardDriver.CurrentRow.Cells["WorkStatusId"].Value.ToInt();

                        long jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToLong();

                        string msg = "request pda=" + driverId + "=" + jobId + "=" + actionType + jobId + "=11";


                        new Thread(delegate()
                        {
                            General.SendPDAMessage(msg);


                        }).Start();

                        System.Threading.Thread.Sleep(1000);





                        //  new TaxiDataContext().stp_UnBlockDriver(driverId.ToInt(), AppVars.LoginObj.UserName.ToStr());
                        // LoadDriversGrid();

                    }
                }
            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);
            }
        }


        void unBlockViewItem_Click(object sender, EventArgs e)
        {

            try
            {

                MenuItem item = (MenuItem)sender;





                if (item != null && item.Tag.ToStr() != string.Empty)
                {

                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });

                    int rowIndex = arr[0].ToInt();
                    int columnIndex = arr[1].ToInt();



                    string driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToStr();

                    if (!string.IsNullOrEmpty(driverId) && driverId.IsNumeric())
                    {



                        new TaxiDataContext().stp_UnBlockDriver(driverId.ToInt(), AppVars.LoginObj.UserName.ToStr());
                       // LoadDriversGrid();

                        RefreshDashBoardDrivers();
                    }
                }
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        void DriverPositionMoveContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {

                MenuItem item = (MenuItem)sender;

                if (item != null && item.Tag.ToStr().Contains(","))
                {
                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });


                    int rowsCount = grdOnPlotDrivers.Rows.Count;
                    int columnIndex = arr[1].ToInt();
                    int rowIndex = arr[0].ToInt();
                    int driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToInt();

                    int MoveToDriverId = 0;

                    if (item.Text.ToLower() == "move up")
                    {
                        if (rowIndex > 0 && grdOnPlotDrivers.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdOnPlotDrivers.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToInt();

                        }
                    }
                    else if (item.Text.ToLower() == "move down")
                    {
                        if (rowIndex >= 0 && (rowIndex + 1) <= (rowsCount - 1)
                            && grdOnPlotDrivers.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdOnPlotDrivers.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToInt();

                        }

                    }
                    else if (item.Text.ToLower() == "move to top")
                    {
                       
                            MoveToDriverId = grdOnPlotDrivers.Rows[0].Cells[columnIndex].ErrorText.ToInt();

                        

                    }
                  




                    // HideDriverMoveContextMenu(true);



                    if (driverId > 0 && MoveToDriverId > 0)
                    {


                        new TaxiDataContext().stp_SwapDriverRank(driverId, MoveToDriverId, item.Text.ToLower());
                        // LoadPlotsGrid();
                        RefreshPlotDrivers();
                    }
                    else
                    {

                        if (driverId > 0 && item.Text.ToLower() == "logout")
                        {
                            ForceLogoutDriver(0, driverId,true);


                        }

                    }


                }




            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }





        private void HideDriverMoveContextMenu(bool hide)
        {
            if (driverContextMenu.Items.Count(c => c.Text == "Move Up" || c.Text == "Move Down") > 0)
            {

                driverContextMenu.Items["moveupitem"].Visibility = hide ? ElementVisibility.Collapsed : ElementVisibility.Visible;
                driverContextMenu.Items["movedownitem"].Visibility = hide ? ElementVisibility.Collapsed : ElementVisibility.Visible;
            }
        }

        void ViewJobItem_Click(object sender, EventArgs e)
        {
            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int jobId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToInt();

                   
                
                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                     jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToInt();
                   
                }


                if (jobId != 0)
                {
                    ShowBookingForm(jobId, true);

                }

            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }

        void NoShowJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            //try
            //{



            //    long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

            //    long jobId = 0;
            //    using (TaxiDataContext db = new TaxiDataContext())
            //    {
            //        jobId = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().CurrentJobId.ToLong();

            //    }




            //    if (jobId != 0)
            //    {
            //        int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
            //        string driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();

            //        new Thread(delegate()
            //        {
            //            int loopCnt = 1;
            //            while (loopCnt < 3)
            //            {

            //                bool success = General.ReCallBookingWithStatus(jobId.ToLong(), driverId.ToInt(),Enums.BOOKINGSTATUS.NOSHOW,Enums.Driver_WORKINGSTATUS.AVAILABLE);

            //                if (success)
            //                {
            //                    break;

            //                }
            //                else
            //                    loopCnt++;

            //            }
            //        }).Start();



            //        Thread.Sleep(500);


            //        RefreshAllActiveData();


            //        using (TaxiDataContext db = new TaxiDataContext())
            //        {
            //            db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Controller Pressed NO SHOW from Driver (" + driverNo + ")");
            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    ENUtils.ShowMessage(ex.Message);

            //}



            try
            {



                long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                long jobId = 0;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    jobId = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().CurrentJobId.ToLong();
                }


                if (jobId != 0)
                {
                    int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    string driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();

                    new Thread(delegate()
                    {
                        int loopCnt = 1;
                        while (loopCnt < 3)
                        {

                            bool success = General.ReCallBookingWithStatus(jobId.ToLong(), driverId.ToInt(), Enums.BOOKINGSTATUS.NOPICKUP, Enums.Driver_WORKINGSTATUS.AVAILABLE);

                            if (success)
                            {
                                break;

                            }
                            else
                                loopCnt++;

                        }
                    }).Start();



                    Thread.Sleep(500);


                    RefreshAllActiveData();


                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Controller Pressed NO PICKUP from Driver (" + driverNo + ")");
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void RecoverJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
             
               

                long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                 long jobId=0;
                using(TaxiDataContext db=new TaxiDataContext())
                {
                    jobId= db.Fleet_DriverQueueLists.FirstOrDefault(c=>c.Id==Id).DefaultIfEmpty().CurrentJobId.ToLong();

                }


                    
                   
                    if (jobId != 0)
                    {
                        int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                        string driverNo= grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();

                        new Thread(delegate()
                        {
                            int loopCnt = 1;
                            while (loopCnt < 3)
                            {

                                bool success = General.ReCallBooking(jobId, driverId);

                                if (success)
                                {
                                    break;

                                }
                                else
                                    loopCnt++;
                            }
                        }).Start();

                       

                        Thread.Sleep(500);


                         RefreshAllActiveData();
                       

                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Job is Recovered from Driver (" + driverNo + ") by Controller");
                        }
                    }
               
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void ShiftJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {


                string gridName = (sender as RadMenuItem).Tag.ToStr();
                string driverNo = string.Empty;
                long Id = 0;
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdDriverWaiting.CurrentRow.Cells["DriverNo"].Value.ToStr();
                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();
                }

           
            

               
                List<Booking> list = null;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    DateTime loginDateTime = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().LoginDateTime.ToDateTime();

                    if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                    {

                       DateTime?  newloginDateTime = loginDateTime.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                       newloginDateTime = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.LogoutDateTime.Value >= loginDateTime).DefaultIfEmpty().LoginDateTime.ToDateTimeorNull();


                       if (newloginDateTime != null)
                           loginDateTime = newloginDateTime.ToDateTime();
                    
                    }

                    list = db.Bookings.Where(c => c.PickupDateTime >= loginDateTime
                                                  && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                }




                if (list != null)
                {



                    frmDriverJobs frmDrvJobs = new frmDriverJobs(list,driverNo);
                    frmDrvJobs.StartPosition = FormStartPosition.CenterScreen;
                    frmDrvJobs.ShowDialog();
                    frmDrvJobs.Dispose();
                    GC.Collect();
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void ClearJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                //if (DialogResult.Yes == MessageBox.Show("Do you want to clear this job manually ?", "Clear Job", MessageBoxButtons.YesNo))
                //{


                    string gridName = (sender as RadMenuItem).Tag.ToStr();
                    long Id = 0;
                    if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                    {
                        Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();


                    }
                    else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                    {
                        Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                    }



                    if (Id != 0)
                    {

                        new Thread(delegate()
                        {
                            General.ClearDriverCurrentJob(Id);

                        }).Start();


                        System.Threading.Thread.Sleep(1000);

                        RefreshDashBoardDrivers();
                    }
            //    }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }


        void CallItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }



                if (driverId != 0)
                {
                    var objDrv = General.GetObject<Fleet_Driver>(c => c.Id == driverId);
                    if (objDrv != null)
                    {

                        RingBackCall("Call to Driver", objDrv.DriverNo, objDrv.PDAMobileNo);
                    }

                }

            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }


        private void RingBackCall(string title, string name, string phoneNumber)
        {
            new Thread(delegate()
            {
                using (ClsRingBack clsRing = new ClsRingBack())
                {
                    if (!string.IsNullOrEmpty(clsRing.AccountCode))
                    {
                        string msg = clsRing.MakeCall(ClsRingBack.eCallTo.Driver, name, phoneNumber);


                        if (!string.IsNullOrEmpty(msg))
                        {
                            MethodInvoker mi = new MethodInvoker(delegate() { this.RingBackCallNotification(title + " " + name + " (" + phoneNumber + ")", msg); });
                            this.Invoke(mi);

                        }
                    }


                }
            }).Start();


        }



        void grdPendingJobs_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {

                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                {
                    e.Cancel = true;
                    return;

                }

                if (EditFare != null && EditFare.Items.Count > 0)
                    EditFare.Items[1].Visibility = ElementVisibility.Visible;

                if (cell.GridControl.Name == "grdPreBookings")
                {
                    EditFare.Items[20].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[0].Visibility = ElementVisibility.Collapsed;



                    EditFare.Items[2].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[3].Visibility = ElementVisibility.Visible;


                    EditFare.Items[4].Visibility = ElementVisibility.Collapsed;

                   
                    
                     EditFare.Items[5].Visibility = ElementVisibility.Collapsed;

                    
                        EditFare.Items[6].Visibility = ElementVisibility.Collapsed;



                        //if (grdPreBookings.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.SHUTTLE && grdPreBookings.CurrentRow.Cells["GroupId"].Value != null)
                        //{

                        //    EditFare.Items[7].Visibility = ElementVisibility.Visible;

                        //}
                        if (grdPreBookings.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.ONBIDDING)
                        {
                            EditFare.Items[18].Visibility = ElementVisibility.Visible;
                            EditFare.Items[19].Visibility = ElementVisibility.Visible;

                        }
                        else
                        {

                            EditFare.Items[7].Visibility = ElementVisibility.Collapsed;
                      

                            EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[19].Visibility = ElementVisibility.Collapsed;                           

                        }

                        if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() < 5)
                        {

                            EditFare.Items[8].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                            EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[16].Visibility = ElementVisibility.Collapsed;

                        }
                        else
                        {


                            if (grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START
                                  || grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                            {
                                EditFare.Items[8].Visibility = ElementVisibility.Collapsed;
                               
                                
                                EditFare.Items[9].Visibility = ElementVisibility.Visible;
                                EditFare.Items[15].Visibility = ElementVisibility.Visible;




                                if (grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                                    EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                                else
                                    EditFare.Items[3].Visibility = ElementVisibility.Visible;

                            }
                            else
                            {
                                EditFare.Items[9].Visibility = ElementVisibility.Collapsed;
                                EditFare.Items[8].Visibility = ElementVisibility.Visible;

                                EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                            }

                        }


                        EditFare.Items[9].Tag = "grdPreBookings";
                        EditFare.Items[8].Tag = "grdPreBookings";

                        EditFare.Items[15].Tag = "grdPreBookings";
                        EditFare.Items[16].Visibility = ElementVisibility.Collapsed;

                        

                    

                   
                        EditFare.Items[12].Visibility = ElementVisibility.Collapsed;

                        //EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                        //EditFare.Items[14].Visibility = ElementVisibility.Collapsed;



                        if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                        {
                            EditFare.Items[13].Visibility = ElementVisibility.Visible;
                            (EditFare.Items[13] as RadMenuItem).IsChecked = grdPreBookings.CurrentRow.Cells["IsBidding"].Value.ToBool();

                            EditFare.Items[14].Visibility = ElementVisibility.Visible;
                            (EditFare.Items[14] as RadMenuItem).IsChecked = grdPreBookings.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();
                        }

                }
                else if (cell.GridControl.Name == "grdPendingJobs")
                {
                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo
                         &&
                         (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.WAITING ||
                          grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.ONHOLD ||
                          grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOTACCEPTED

                         )
                        )
                        EditFare.Items[3].Visibility = ElementVisibility.Visible;

                    else
                        EditFare.Items[3].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[0].Visibility = ElementVisibility.Visible;
                    EditFare.Items[2].Visibility = ElementVisibility.Visible;
                    EditFare.Items[2].Text = "Cancel Job";

                    if(AppVars.objPolicyConfiguration.EnableGhostJob.ToBool())
                       EditFare.Items[20].Visibility = ElementVisibility.Visible;


                       EditFare.Items[4].Visibility = EnablePDA && AppVars.objPolicyConfiguration.EnableFOJ.ToBool() ? ElementVisibility.Visible : ElementVisibility.Collapsed;

                    
                        // EditFare.Items[3].Visibility = ElementVisibility.Visible;
                        EditFare.Items[5].Visibility = ElementVisibility.Visible;

                      
                        EditFare.Items[6].Visibility = ElementVisibility.Visible;


                        //if (grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.SHUTTLE && grdPendingJobs.CurrentRow.Cells["GroupId"].Value != null)
                        //{

                        //    EditFare.Items[7].Visibility = ElementVisibility.Visible;


                        //}
                        //else
                            if (grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.ONBIDDING)
                        {
                            EditFare.Items[18].Visibility = ElementVisibility.Visible;
                            EditFare.Items[19].Visibility = ElementVisibility.Visible;

                        }
                        else
                        {

                            EditFare.Items[7].Visibility = ElementVisibility.Collapsed;
                     
                            

                            // EditFare.Items[17].Visibility = ElementVisibility.Visible;
                             EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                             EditFare.Items[19].Visibility = ElementVisibility.Collapsed;
          

                        }

                        // EditFare.Items[7].Visibility = ElementVisibility.Collapsed;


                        EditFare.Items[9].Tag = "grdPendingJobs";
                        EditFare.Items[8].Tag = "grdPendingJobs";
                        EditFare.Items[15].Tag = "grdPendingJobs";
                        EditFare.Items[16].Visibility = ElementVisibility.Collapsed;



                       // EditFare.Items["RecoverPreJob"].Visibility = ElementVisibility.Collapsed; 

                        if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START
                           || grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                        {
                            EditFare.Items[8].Visibility = ElementVisibility.Collapsed;

                            if(grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                               EditFare.Items[9].Visibility = ElementVisibility.Visible;
                            else
                                EditFare.Items[9].Visibility = ElementVisibility.Collapsed;



                            EditFare.Items[15].Visibility = ElementVisibility.Visible;

                            if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                                EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                            else
                                EditFare.Items[3].Visibility = ElementVisibility.Visible;


                        //    EditFare.Items["RecoverPreJob"].Visibility = ElementVisibility.Visible; 
                        }
                        else if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                        {
                            //cabsmart.

                          
                            EditFare.Items[0].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[1].Visibility = ElementVisibility.Collapsed;


                            EditFare.Items[2].Text = "Recover FOJ Job";
                            EditFare.Items[2].Visibility = ElementVisibility.Visible;
                            EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[4].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[5].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[6].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[7].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[8].Visibility = ElementVisibility.Collapsed;

                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                            EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[14].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[17].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[19].Visibility = ElementVisibility.Collapsed;


                            EditFare.Items[20].Visibility = ElementVisibility.Collapsed;

                         

                        }

                        else
                        {
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[8].Visibility = ElementVisibility.Visible;

                            EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                        }
                    
                     

                       
                            EditFare.Items[12].Visibility = ElementVisibility.Collapsed;


                            if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                            {
                                EditFare.Items[13].Visibility = ElementVisibility.Visible;
                                (EditFare.Items[13] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsBidding"].Value.ToBool();

                                EditFare.Items[14].Visibility = ElementVisibility.Visible;
                                (EditFare.Items[14] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();
                            }

                                            

                            //if (AppVars.objPolicyConfiguration.EnableBidding.ToBool())
                            //{
                            //    EditFare.Items[13].Visibility = ElementVisibility.Visible;
                            //    (EditFare.Items[13] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsBidding"].Value.ToBool();
                            //}

                            //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool())
                            //{

                            //    EditFare.Items[14].Visibility = ElementVisibility.Visible;
                            //    (EditFare.Items[14] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();

                            //}                       
                   

                }
                else
                {
                    if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo
                       && grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                        EditFare.Items[2].Text = "Recover Job";
                    else
                        EditFare.Items[2].Text = "Cancel Job";

                    EditFare.Items[20].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[0].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[2].Visibility = ElementVisibility.Visible;
                    EditFare.Items[3].Visibility = ElementVisibility.Collapsed;



                    // if (EditFare.Items.Count == 4)
                    EditFare.Items[4].Visibility = ElementVisibility.Collapsed;


                    
                        // EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[5].Visibility = ElementVisibility.Collapsed;

                      
                        EditFare.Items[6].Visibility = ElementVisibility.Collapsed;

                        EditFare.Items[7].Visibility = ElementVisibility.Collapsed;

                    

                        EditFare.Items[8].Visibility = ElementVisibility.Collapsed;

                        if (grdAllJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool())
                        {
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                            if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING &&
                                (DateTime.Now.AddMinutes(5) >= grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime()
                                || grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime() <= DateTime.Now))
                                EditFare.Items[16].Visibility = ElementVisibility.Visible;
                            else
                            {
                                EditFare.Items[16].Visibility = ElementVisibility.Collapsed;
                            }


                        }
                        else
                        {
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                            if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                            {


                                EditFare.Items[16].Visibility = ElementVisibility.Visible;

                            }
                        }

                        EditFare.Items[9].Tag = "grdAllJobs";
                        EditFare.Items[8].Tag = "grdAllJobs";
                        EditFare.Items[15].Tag = "grdAllJobs";

                       
                            if (grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime().AddHours(5) < DateTime.Now)
                                EditFare.Items[12].Visibility = ElementVisibility.Visible;
                            else
                                EditFare.Items[12].Visibility = ElementVisibility.Collapsed;


                            EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[14].Visibility = ElementVisibility.Collapsed;

                            EditFare.Items[15].Visibility = ElementVisibility.Collapsed;

                           
                                EditFare.Items[17].Visibility = ElementVisibility.Collapsed;
                                EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                                EditFare.Items[19].Visibility = ElementVisibility.Collapsed;
                         
                    
                }


                if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() == false)
                {
                    EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[14].Visibility = ElementVisibility.Collapsed;
                }



                EditFare.Tag = cell.GridControl.Name;


                e.ContextMenu = EditFare;



            }
            catch 
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        void EditFareItem1_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;
                int openFrom = 1;
                if (Pg_AllJobs.Item.IsSelected)
                {
                    if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    }
                }
                else if (Pg_PendingJobs.Item.IsSelected)
                {
                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    }
                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    if (grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                    }
                }

                else if (Pg_BookingHistory != null && Pg_BookingHistory.Item.IsSelected)
                {
                    if (grdLister.CurrentRow != null && grdLister.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdLister.CurrentRow.Cells["Id"].Value.ToLong();
                    }
                    openFrom = 2;
                }

                if (jobId > 0)
                {
                    frmEditFare frm = new frmEditFare(jobId, openFrom);
                    frm.ShowDialog();
                    frm.Dispose();

                }
            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }



        void RecoveFOJFromDriverStatustem_Click(object sender, EventArgs e)
        {
            try
            {
               





                int driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();


                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (General.GetQueryable<Booking>(c => c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.FOJ && c.PickupDateTime > (DateTime.Now.AddDays(-1))).Count() == 1)
                    {

                        long JOBID = General.GetObject<Booking>(c => c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.FOJ && c.PickupDateTime > (DateTime.Now.AddDays(-1))).DefaultIfEmpty().Id;


                        if (JOBID > 0)
                        {


                            new Thread(delegate()
                            {
                                ReCallFOJBooking(JOBID, driverId);

                            }).Start();

                            RefreshAllActiveData();
                            // RefreshActiveData();


                            Thread.Sleep(500);
                        }
                    }
                    else
                    {


                        long Id = 0;

                        Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();

                        if (Id != 0)
                        {

                            new Thread(delegate()
                            {
                                General.ClearDriverCurrentJob(Id);

                            }).Start();


                            System.Threading.Thread.Sleep(1000);

                            RefreshDashBoardDrivers();
                        }

                    }

                }



                 

                    //  Booking objFOJ = General.GetObject<Booking>(c => c.Id == grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() && c.DriverId != null);
                


                 



                
            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        private void CancelOption(string text, string tag)
        {
            try
            {
             

                if (tag.Equals("grdpendingjobs"))
                {

                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {


                        if (text == "recover foj job")
                        {

                            int driverId = grdPendingJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                            long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                            string refNo = grdPendingJobs.CurrentRow.Cells["RefNumber"].Value.ToStr();
                            int bookingTypeId = grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                            string mobileNo = grdPendingJobs.CurrentRow.Cells["MobileNo"].Value.ToStr();

                            if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId).Count() > 0)
                            {
                                if (General.GetQueryable<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.CurrentJobId == Id).Count() > 0)
                                {
                                    new Thread(delegate()
                                    {
                                        CancelCurrentBooking(Id, driverId);
                                    }).Start();

                                    RefreshBookingListOnActive();

                                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);


                                    if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                                    {
                                        General.UpdateThirdPartyJobStatus(null, Id, "declined");
                                    }
                                    else
                                    {
                                        string RefNumber = refNo;


                                        if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId == Enums.BOOKING_TYPES.ONLINE && RefNumber.ToStr().Length > 0)
                                        {



                                            //  string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                                            string[] arrRef = RefNumber.ToStr().Trim().Split('/');

                                            refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();



                                            string newRefNo = string.Empty;
                                            for (int i = 0; i < refNo.Length; i++)
                                            {
                                                if (char.IsLetter(refNo[i]))
                                                    newRefNo += refNo[i];
                                            }

                                            if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                                            {
                                                refNo = refNo.Replace(newRefNo, "").Trim();
                                            }


                                            if (refNo.IsNumeric())
                                            {

                                                new Thread(delegate()
                                                {

                                                    General.CancelWebBooking("", refNo);

                                                }).Start();
                                            }
                                        }
                                    }
                                }
                                else if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING).Count() > 0)
                                {
                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        db.stp_CancelBooking(Id, "Job Cancelled from Recent Jobs", AppVars.LoginObj.UserName.ToStr());
                                        // db.stp_BookingLog(BookingId, AppVars.LoginObj.UserName.ToStr(), "Job is Cancelled ! Reason : " + reason);
                                    }

                                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);

                                }
                                else
                                {

                                    new Thread(delegate()
                                    {
                                        ReCallFOJBooking(Id, driverId);

                                    }).Start();

                                    RefreshActiveData();
                                }

                                Thread.Sleep(500);
                            }
                        }
                        else
                        {

                            CancelBooking(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong(), grdPendingJobs.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdPendingJobs.CurrentRow.Cells["MobileNo"].Value.ToStr());

                        }

                    }
                }
                else if (tag.Equals("grdalljobs"))
                {


                    int driverId = grdAllJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                    long Id = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    string refNo = grdAllJobs.CurrentRow.Cells["RefNumber"].Value.ToStr();
                    int bookingTypeId = grdAllJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                    string mobileNo = grdAllJobs.CurrentRow.Cells["MobileNo"].Value.ToStr();
                    //using (TaxiDataContext db = new TaxiDataContext())
                    //{
                    //  Booking objFOJ = General.GetObject<Booking>(c => c.Id == grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() && c.DriverId != null);
                    if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId).Count() > 0)
                    {
                        if (General.GetQueryable<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.CurrentJobId == Id).Count() > 0)
                        {
                            new Thread(delegate()
                            {
                                CancelCurrentBooking(Id, driverId);
                                if (mobileNo.ToStr().Trim().Length >= 9 && AppVars.objPolicyConfiguration.SMSCancelJob.ToStr().Trim().Length > 0)
                                {
                                    try
                                    {
                                        SendSMS(mobileNo, GetMessage(AppVars.objPolicyConfiguration.SMSCancelJob.ToStr(), null, Id), 0);
                                    }
                                    catch
                                    {


                                    }
                                }
                            }).Start();

                            RefreshBookingListOnActive();

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);


                            if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateThirdPartyJobStatus(null, Id, "declined");
                            }
                            else
                            {
                                string RefNumber = refNo;


                                if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId == Enums.BOOKING_TYPES.ONLINE && RefNumber.ToStr().Length > 0)
                                {



                                    //  string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                                    string[] arrRef = RefNumber.ToStr().Trim().Split('/');

                                    refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();



                                    string newRefNo = string.Empty;
                                    for (int i = 0; i < refNo.Length; i++)
                                    {
                                        if (char.IsLetter(refNo[i]))
                                            newRefNo += refNo[i];
                                    }

                                    if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                                    {
                                        refNo = refNo.Replace(newRefNo, "").Trim();
                                    }


                                    if (refNo.IsNumeric())
                                    {

                                        new Thread(delegate()
                                        {

                                            General.CancelWebBooking("", refNo);

                                        }).Start();
                                    }
                                }
                            }
                        }
                        else if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING).Count() > 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.stp_CancelBooking(Id, "Job Cancelled from Recent Jobs", AppVars.LoginObj.UserName.ToStr());
                                // db.stp_BookingLog(BookingId, AppVars.LoginObj.UserName.ToStr(), "Job is Cancelled ! Reason : " + reason);
                            }

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);

                        }
                        else
                        {

                            new Thread(delegate()
                            {
                                ReCallFOJBooking(Id, driverId);

                            }).Start();

                            RefreshAllActiveData();
                            // RefreshActiveData();
                        }

                        Thread.Sleep(500);
                    }
                    else
                    {

                        CancelBooking(grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong(), grdAllJobs.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdAllJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdAllJobs.CurrentRow.Cells["MobileNo"].Value.ToStr());


                    }
                    //}



                    //if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId==Enums.BOOKING_TYPES.ONLINE )
                    //{

                    //    string[] arrRef = refNo.Trim().Split('/');

                    //    refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();

                    //    string newRefNo = string.Empty;
                    //    for (int i = 0; i < refNo.Length; i++)
                    //    {
                    //        if (char.IsLetter(refNo[i]))
                    //            newRefNo += refNo[i];
                    //    }

                    //    if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                    //    {
                    //        refNo = refNo.Replace(newRefNo, "").Trim();
                    //    }

                    //    if (refNo.IsNumeric())
                    //    {

                    //        new Thread(delegate()
                    //        {

                    //            General.CancelWebBooking(mobileNo, refNo);

                    //        }).Start();
                    //    }
                    //}



                }
            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }


        void CancelJobItem_Click(object sender, EventArgs e)
        {
            CancelOption((sender as RadItem).Text.ToLower(), EditFare.Tag.ToStr().ToLower());
        }


        public static bool CancelCurrentBooking(long jobId, int driverId)
        {

            try
            {

                bool rtn = true;

                (new TaxiDataContext()).stp_UpdateJob(jobId, driverId, Enums.BOOKINGSTATUS.CANCELLED, Enums.Driver_WORKINGSTATUS.AVAILABLE, AppVars.objPolicyConfiguration.SinBinTimer.ToInt());


                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2");
                    }


                }
                else
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2");
                    }

                }


                if (AppVars.objPolicyConfiguration.DespatchOfflineJobs.ToBool())
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_SaveOfflineMessage(jobId, driverId, "", AppVars.LoginObj.LoginName.ToStr(), "Cancelled Job>>" + jobId + "=2");
                    }

                }

                return rtn;
            }
            catch
            {

                return false;
                //   ENUtils.ShowMessage(ex.Message);


            }

        }



        public void CancelBooking(long bookingId,string refNo,int bookingTypeId,string mobileNo)
        {

            try
            {



                if (DialogResult.Yes == MessageBox.Show("Are you sure you want to cancel this Booking ?", "Cancel Booking", MessageBoxButtons.YesNo))
                {

                    frmCancelReason frm = new frmCancelReason(bookingId,refNo,bookingTypeId,mobileNo);
                    frm.ShowDialog();
                    frm.Dispose();

                    GC.Collect();
                //    RefreshBookingListOnActive();



                  //  RefreshActiveData();


                }
            }
            catch 
            {


            }


        }






        private void RefreshBookingListOnActive()
        {

            try
            {

                if (HasBookingHistoryTab)
                {
                    RefreshOnActive = true;

                }
                else
                {

                    if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                    {
                        (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive();
                    }
                }

            }
            catch 
            {


            }




        }





        void FOJJobItem_Click(object sender, EventArgs e)
        {
            try
            {

                if (EditFare.Tag != null)
                {


                    if (EditFare.Tag.ToStr() == "grdPendingJobs")
                    {
                        if (AppVars.IsTelephonist)
                        {
                            ENUtils.ShowMessage("Permission Denied");
                            return;
                        }

                        DespatchFOJJob();

                    }

                }
                 

            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        void SendPreJob_Click(object sender, EventArgs e)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                long jobId = 0;
                //long groupId = 0;


                RadMenuItem item = (RadMenuItem)sender;



                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId != 0)
                {

                    //jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                    //groupId = grdPreBookings.CurrentRow.Cells["GroupId"].Value.ToLong();


                    frmDespatchPreBooking frmPreDespatch = new frmDespatchPreBooking(General.GetObject<Booking>(c => c.Id == jobId));
                    frmPreDespatch.ShowDialog();
                    frmPreDespatch.Dispose();
                }
                // DespatchFOJJob();

                //   }




            }
            catch 
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }




        void ResendJob_Click(object sender, EventArgs e)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                long jobId = 0;

                RadMenuItem item = (RadMenuItem)sender;


                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId != 0)
                {


                    frmDespatchPreBooking frmPreDespatch = new frmDespatchPreBooking(General.GetObject<Booking>(c => c.Id == jobId), true);
                    frmPreDespatch.ShowDialog();
                    frmPreDespatch.Dispose();
                }





            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }




        void CopyBooking_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_AllJobs.Item.IsSelected)
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }




                CopyBooking(jobId);




            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void CopyBooking(long jobId)
        {

            if (jobId > 0)
            {

                AppVars.objCopyBooking = General.GetObject<Booking>(c => c.Id == jobId);


            }

        }

        void OnBiddingJob_Click(object sender, EventArgs e)
        {

            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {


                     jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else  if (Pg_PreBookings.Item.IsSelected && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                {


                     jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }


                 

                    if (jobId > 0)
                    {

                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            var objBook = db.Bookings.FirstOrDefault(c => c.Id == jobId);

                            if (objBook != null)
                            {
                                objBook.IsBidding = (sender as RadMenuItem).IsChecked;
                                db.SubmitChanges();

                                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_TODAY_AND_PREBOOKING_DASHBOARD);
                            }
                        }
                    }
               




            }
            catch (Exception ex)
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }


        void OnAutoDespatchJob_Click(object sender, EventArgs e)
        {

            try
            {

                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {


                     jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else  if (Pg_PreBookings.Item.IsSelected && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                {


                     jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }



                    if (jobId > 0)
                    {

                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            var objBook = db.Bookings.FirstOrDefault(c => c.Id == jobId);

                            if (objBook != null)
                            {
                            //   DateTime? pickupDateTime = objBook.PickupDateTime;
                                objBook.AutoDespatch = (sender as RadMenuItem).IsChecked;



                                db.SubmitChanges();

                                //if (pickupDateTime != null && pickupDateTime.Value.ToDate() == DateTime.Now.Date)
                                //{

                                //    new BroadcasterData().BroadCastToAll(RefreshTypes.);
                                //}
                                //else
                                //{
                                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_TODAY_AND_PREBOOKING_DASHBOARD);
                             //   }
                            }
                        }
                    }
                




            }
            catch 
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }



        void ClearJob_Click(object sender, EventArgs e)
        {

            try
            {
                if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
                {


                    long jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();

                    if (jobId > 0)
                    {



                        new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.DISPATCHED);

                        //new Thread(delegate()
                        //{
                        //    General.ClearDriverCurrentJob(jobId);

                        //}).Start();



                        grdAllJobs.RowsChanging -= new GridViewCollectionChangingEventHandler(AllGrid_RowsChanging);

                        grdAllJobs.CurrentRow.Delete();

                        System.Threading.Thread.Sleep(500);



                        grdAllJobs.RowsChanging += new GridViewCollectionChangingEventHandler(AllGrid_RowsChanging);

                    }
                }




            }
            catch
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }



        void SMSJob_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_AllJobs.Item.IsSelected)
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId > 0)
                {
                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId);
                    if (objJob != null)
                    {
                        frmSMSAll frmSMS = new frmSMSAll("", GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), objJob, jobId), (objJob!=null ? objJob.SMSType.ToInt():Enums.SMSACCOUNT_TYPE.MODEMSMS));

                        frmSMS.StartPosition = FormStartPosition.CenterScreen;
                        frmSMS.ShowDialog();

                        Thread.Sleep(500);
                        frmSMS.Dispose();
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void RecallPendingJob_Click(object sender, EventArgs e)
        {
            try
            {

                if (grdAllJobs.CurrentRow == null)
                    return;

              //  RadMenuItem item = (RadMenuItem)sender;

                long jobId = 0;


                jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();


                if (jobId != 0)
                {

                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId);
                    if (objJob != null && objJob.DriverId != null)
                    {
                        int driverId = objJob.DriverId.ToInt(); 

                        int bookingStatusId = objJob.BookingStatusId.ToInt();

                        if (bookingStatusId==Enums.BOOKINGSTATUS.PENDING && driverId != 0 && objJob.DespatchDateTime != null )
                        {
                            DateTime? newAvailableTime = objJob.DespatchDateTime.Value.AddMinutes(1).AddSeconds(5);


                            if (DateTime.Now < newAvailableTime)
                            {
                                ENUtils.ShowMessage("Job is already Offered to other Driver. "+Environment.NewLine
                                +"You cannot Re-Call this job before " + string.Format("{0:HH:mm:ss}", newAvailableTime));
                                return;

                            }

                        }


                        if (driverId != 0 && (bookingStatusId == Enums.BOOKINGSTATUS.POB || bookingStatusId==Enums.BOOKINGSTATUS.STC))
                        {


                            ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + objJob.BookingStatus.DefaultIfEmpty().StatusName.ToStr() + " Status.");
                            return;

                        }
                        else if (driverId != 0 &&
                             (bookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED || bookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)
                             )
                        {


                            if (General.GetQueryable<Booking>(null).Count(c => c.Id == jobId && (c.AcceptedDateTime != null || c.Fleet_Driver != null && c.Fleet_Driver.HasPDA == true)) > 0)
                            {
                                ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + objJob.BookingStatus.DefaultIfEmpty().StatusName.ToStr() + " Status.");
                                return;

                            }

                        }
                        else
                        {

                            //if (objJob.DespatchDateTime != null && objJob.DespatchDateTime.Value.AddMinutes(1) > DateTime.Now)
                            //{
                            //   string time= string.Format("{0:HH:mm:ss}", objPendingBooking.DespatchDateTime.Value.AddSeconds(10).AddMinutes(AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt()))


                            //       ENUtils.ShowMessage("You cannot recall this Job until " + time);
                            //}



                            new Thread(delegate()
                            {
                                int loopCnt = 1;
                                bool success = false;
                                while (loopCnt < 3)
                                {

                                    if (bookingStatusId == Enums.BOOKINGSTATUS.FOJ)
                                    {
                                        success = ReCallFOJBooking(jobId, driverId);
                                    }
                                    else if (bookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                                    {
                                        success = General.ReCallPreBooking(jobId, driverId);

                                    }

                                    else
                                    {

                                        success = General.ReCallBooking(jobId, driverId);
                                    }


                                    if (success)
                                    {
                                        loopCnt++;
                                        using (TaxiDataContext db = new TaxiDataContext())
                                        {
                                            db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Recall Job from Driver (" + objJob.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + ")");
                                        }

                                        break;

                                    }
                                    else
                                        loopCnt++;



                                }
                            }).Start();



                            //new Thread(delegate()
                            //{
                            //    (new TaxiDataContext()).stp_RecallPendingJob(jobId, Enums.BOOKINGSTATUS.WAITING, objJob.DriverId, objJob.Fleet_Driver.DefaultIfEmpty().DriverNo, AppVars.LoginObj.UserName.ToStr());
                            //    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                            //    {

                            //        General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2");
                            //    }

                            //}).Start();

                            Thread.Sleep(500);

                            RefreshAllActiveData();
                        }
                    }
                    else
                    {
                        ENUtils.ShowMessage("You cannot recall this job (Job  not exist)");


                    }
                }




            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }




        void TransferJob_Click(object sender, EventArgs e)
        {
            try
            {

               

                //  RadMenuItem item = (RadMenuItem)sender;

                long jobId = 0;

            

                if (Pg_PendingJobs.Item.IsSelected)
                {

                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else if (Pg_PreBookings.Item.IsSelected)
                {

                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }
                if (jobId != 0)
                {

                    if (General.GetQueryable<Gen_Party>(null).Count() == 0)
                    {
                        if (AppVars.CanTransferJob)
                        {

                            frmPoolJobs frm = new frmPoolJobs(General.GetObject<Booking>(c => c.Id == jobId));
                            frm.ShowDialog();
                        }
                        else
                        {
                            MessageBox.Show("Permission Denied");

                        }
                    }
                    else
                    {

                        frmPoolJobs frm = new frmPoolJobs(General.GetObject<Booking>(c => c.Id == jobId));
                        frm.ShowDialog();
                    }
                }
                //if (jobId != 0)
                //{
                //    using (TaxiDataContext db = new TaxiDataContext())
                //    {

                //        db.stp_TransferJob(jobId, AppVars.objSubCompany.Id);
                //    }

                 
                //}




            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }




        void RecoverPreJob_Click(object sender, EventArgs e)
        {
            try
            {

                RadMenuItem item = (RadMenuItem)sender;

                long jobId = 0;

                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId != 0)
                {

                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId && c.DriverId != null);
                    if (objJob != null)
                    {

                        //if (objJob.NoOfChilds.ToInt() == 1)
                        //{

                            new Thread(delegate()
                            {
                                General.ReCallPreBooking(objJob.Id, objJob.DriverId.ToInt());

                            }).Start();



                            //int? driverId = objJob.DriverId.ToIntorNull();


                            //if (driverId != null)
                            //{

                            //    new Thread(delegate()
                            //    {
                            //        int loopCnt = 1;
                            //        while (loopCnt < 3)
                            //        {

                            //            bool success = General.ReCallBooking(jobId, driverId.ToInt());

                            //            if (success)
                            //            {
                            //                break;

                            //            }
                            //            else
                            //                loopCnt++;

                            //        }
                            //    }).Start();
                            //}

                        //    }
                            //else
                            //{
                            //    int bookingStatusId = objJob.BookingStatusId.ToInt();
                            //    int driverId = objJob.DriverId.ToInt();
                            //    new Thread(delegate()
                            //    {
                            //        int loopCnt = 1;
                            //        bool success = false;
                            //        while (loopCnt < 3)
                            //        {

                            //            if (bookingStatusId == Enums.BOOKINGSTATUS.FOJ )
                            //            {
                            //                success = ReCallFOJBooking(jobId, driverId);
                            //            }
                            //            else if (bookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                            //            {
                            //                success = General.ReCallPreBooking(jobId, driverId);

                            //            }

                            //            else if(bookingStatusId==Enums.BOOKINGSTATUS.PENDING)
                            //            {
                                        

                            //                success = General.ReCallBooking(jobId, driverId);
                            //            }


                            //            if (success)
                            //            {
                            //                loopCnt++;
                            //                using (TaxiDataContext db = new TaxiDataContext())
                            //                {
                            //                    db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "RECOVER PENDING JOB from Driver (" + objJob.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + ")");
                            //                }

                            //                break;

                            //            }
                            //            else
                            //                loopCnt++;



                            //        }
                            //    }).Start();

                            //}




                        Thread.Sleep(500);

                        RefreshTodayAndPreData();
                    }
                }




            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        void GroupJobItem_Click(object sender, EventArgs e)
        {
            //try
            //{


            //    long jobId = 0;
            //    long groupId = 0;
            //    if (EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdPendingJobs.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
            //    }
            //    else if (EditFare.Tag.ToStr() == "grdPreBookings" && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdPreBookings.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
            //    }
            //    else if (EditFare.Tag.ToStr() == "grdAllJobs" && grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdAllJobs.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
            //    }


            //    if (groupId > 0)
            //    {

            //        ViewGroupJobs(groupId, jobId);
            //    }







            //}
            //catch (Exception ex)
            //{
            //    //   ENUtils.ShowMessage(ex.Message);

            //}
        }


        private void ViewGroupJobs(long groupId, long selectedJobId)
        {
            try
            {
                frmViewGroupJobs frmGroupJobs = new frmViewGroupJobs(groupId, selectedJobId);
                frmGroupJobs.StartPosition = FormStartPosition.CenterScreen;
                frmGroupJobs.ShowDialog();


                frmGroupJobs.Dispose();
                frmGroupJobs = null;
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }


        }



        void DespatchSMS_Click(object sender, EventArgs e)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    frmDespatchSMS frmDespSMS = new frmDespatchSMS(General.GetObject<Booking>(c => c.Id == Id));
                    frmDespSMS.StartPosition = FormStartPosition.CenterScreen;
                    frmDespSMS.ShowDialog();
                    frmDespSMS.Dispose();

                }





            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }




        void ForceCompleteJob_Click(object sender, EventArgs e)
        {
            CompleteJob();
        }


        private void CompleteJob()
        {
            try
            {
                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    frmForceCompleteJob frmComp = new frmForceCompleteJob(General.GetObject<Booking>(c => c.Id == Id));
                    frmComp.StartPosition = FormStartPosition.CenterScreen;
                    frmComp.ShowDialog();
                    frmComp.Dispose();

                }





            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }



        void AllocateDriverItem_Click(object sender, EventArgs e)
        {
            AllocateDriver();
        }



        private void AllocateDriver()
        {
            try
            {

                if (EditFare.Tag != null)
                {
                    long Id = 0;
                    int openFrom = 1;

                    if (EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                    }
                    else if (EditFare.Tag.ToStr() == "grdPreBookings" && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                    {

                        Id = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                        openFrom = 2;
                    }

                    if (Id != 0)
                    {

                        frmAllocateDriver frmAllocate = new frmAllocateDriver(Id, openFrom);
                        frmAllocate.StartPosition = FormStartPosition.CenterScreen;
                        frmAllocate.ShowDialog();
                        frmAllocate.Dispose();
                    }

                }


            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }


        //void grdDriver_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        //{
        //    try
        //    {
        //        GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
        //        if (cell == null)
        //            return;

        //        if (cell.GridControl.Name == "grdDriverWaiting")
        //        {
        //            HideDriverMoveContextMenu(true);

        //            if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
        //            {
                      
                       

        //                driverContextMenu.Items[0].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[1].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[2].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[3].Tag = cell.GridControl.Name;


        //                driverContextMenu.Items[2].Visibility = ElementVisibility.Visible;
        //                driverContextMenu.Items[3].Visibility = ElementVisibility.Collapsed;
        //                driverContextMenu.Items[4].Visibility = ElementVisibility.Collapsed;



        //                if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE || cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
        //                {

        //                    driverContextMenu.Items[0].Visibility = ElementVisibility.Collapsed;
        //                    driverContextMenu.Items[1].Visibility = ElementVisibility.Collapsed;
        //                }
        //                else
        //                {
        //                    driverContextMenu.Items[0].Visibility = ElementVisibility.Visible;
        //                    driverContextMenu.Items[1].Visibility = ElementVisibility.Visible;

        //                }
                      
                       


        //                if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
        //                {

        //                    if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
        //                    {
        //                        driverContextMenu.Items[5].Text = "Force Arrive Request";
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Visible;

        //                    }
        //                    else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
        //                    {
        //                        driverContextMenu.Items[5].Text = "Force POB Request";
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Visible;

        //                    }
        //                    else
        //                    {
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Collapsed;
        //                    }

        //                    driverContextMenu.Items[6].Tag = cell.GridControl.Name;
        //                    driverContextMenu.Items[7].Tag = cell.GridControl.Name;
        //                }
        //                else
        //                    driverContextMenu.Items[5].Visibility = ElementVisibility.Collapsed;



        //                e.ContextMenu = driverContextMenu;
        //                return;
        //            }

        //            if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE)
        //            {
        //                e.ContextMenu = firstContextMenu;
        //            }

        //            else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
        //            {
        //                e.ContextMenu = secondContextMenu;
        //            }
        //        }
        //        else if (cell.GridControl.Name == "grdOnBoardDriver")
        //        {
        //            HideDriverMoveContextMenu(true);

        //            if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
        //            {
        //                driverContextMenu.Items[0].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[1].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[2].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[3].Tag = cell.GridControl.Name;

        //                driverContextMenu.Items[0].Visibility = ElementVisibility.Visible;

        //                driverContextMenu.Items[2].Visibility = ElementVisibility.Visible;                       
        //                driverContextMenu.Items[3].Visibility = ElementVisibility.Collapsed;                    
                

        //                driverContextMenu.Items[4].Visibility = ElementVisibility.Collapsed;

                     

        //                driverContextMenu.Items[6].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[7].Tag = cell.GridControl.Name;




        //                if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
        //                {

        //                    if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
        //                    {
        //                        driverContextMenu.Items[5].Text = "Force Arrive Request";
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Visible;

        //                    }
        //                    else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
        //                    {
        //                        driverContextMenu.Items[5].Text = "Force POB Request";
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Visible;

        //                    }
        //                    else
        //                    {
        //                        driverContextMenu.Items[5].Visibility = ElementVisibility.Collapsed;
        //                    }

        //                    driverContextMenu.Items[6].Tag = cell.GridControl.Name;
        //                    driverContextMenu.Items[7].Tag = cell.GridControl.Name;
        //                }
        //                else
        //                    driverContextMenu.Items[5].Visibility = ElementVisibility.Collapsed;



        //                e.ContextMenu = driverContextMenu;

        //            }
        //            else
        //            {
        //                HideDriverMoveContextMenu(true);

                        
        //                driverContextMenu.Items[0].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[1].Tag = cell.GridControl.Name;
        //                driverContextMenu.Items[2].Tag = cell.GridControl.Name;

        //                driverContextMenu.Items[2].Visibility = ElementVisibility.Collapsed;
        //                driverContextMenu.Items[3].Visibility = ElementVisibility.Collapsed;
        //                driverContextMenu.Items[4].Visibility = ElementVisibility.Collapsed;                   

        //                driverContextMenu.Items[5].Visibility = ElementVisibility.Collapsed;

        //                driverContextMenu.Items[6].Tag = cell.GridControl.Name;

        //                e.ContextMenu = driverContextMenu;
        //            }


        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        //   ENUtils.ShowMessage(ex.Message);

        //    }
        //}



        void grdDriver_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;


                driverContextMenu.Items["RecoverFOJ"].Visibility = ElementVisibility.Collapsed;
                if (cell.GridControl.Name == "grdDriverWaiting")
                {
                    HideDriverMoveContextMenu(true);

                    if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
                    {



                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["Call"].Tag = cell.GridControl.Name;


                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["StreetView"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                      


                        if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE || cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
                        {

                            driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Collapsed;
                            driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Collapsed;
                        }
                        else if(cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.FOJ)
                        {

                             driverContextMenu.Items["RecoverFOJ"].Visibility = ElementVisibility.Visible;
                             driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Collapsed;
                        }
                        else
                        {
                            driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                            driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;

                        }




                        if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
                        {

                            if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force Arrive Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Visible;

                            }
                            else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force POB Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Visible;

                            }
                            else
                            {
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                            }


                            driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Visible;
                        }
                        else
                            driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;



                        e.ContextMenu = driverContextMenu;
                        return;
                    }
                    else
                    {
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Collapsed;

                    }

                    if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                    {
                        e.ContextMenu = firstContextMenu;
                    }

                    else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
                    {
                        e.ContextMenu = secondContextMenu;
                    }
                }
                else if (cell.GridControl.Name == "grdOnBoardDriver")
                {
                    HideDriverMoveContextMenu(true);

                    if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
                    {
                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["Call"].Tag = cell.GridControl.Name;




                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Visible;

                        driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;

                        driverContextMenu.Items["StreetView"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;


                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;


                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;




                        if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
                        {

                            if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force Arrive Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Visible;

                            }
                            else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force POB Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Visible;

                            }
                            else
                            {
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                            }

                            driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Visible;
                        }
                        else
                            driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;



                        e.ContextMenu = driverContextMenu;

                    }
                    else
                    {
                        HideDriverMoveContextMenu(true);


                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;

                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["StreetView"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;

                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;

                        e.ContextMenu = driverContextMenu;
                    }


                }
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        void firstContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    UpdateDriverStatus(grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToIntorNull(), Enums.Driver_WORKINGSTATUS.ONBREAK);

                }


            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        private void UpdateDriverStatus(int? driverId, int statusId)
        {

            (new TaxiDataContext()).stp_ChangeDriverStatus(driverId, statusId);

          //          RefreshWaitingDrivers();
            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DASHBOARD_DRIVER);

        }

        void secondContextMenuItem1_Click(object sender, EventArgs e)
        {

            try
            {
                if (grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    UpdateDriverStatus(grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToIntorNull(), Enums.Driver_WORKINGSTATUS.AVAILABLE);
                }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);
            }
        }



        void grdDriver_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                if (e.Row != null && e.Row is GridViewDataRowInfo)
                {
                    ShowMessageForm(e.Row, e.Row.Cells["DriverId"].Value.ToInt());

                }
            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);
            }
        }

        void GridJobs_RowsChanged(object sender, GridViewCollectionChangedEventArgs e)
        {
            if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
            {

                if (e.GridViewTemplate.Caption == "grdPendingJobs")
                {

                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                    //RefreshTodayBookingData();

                }

                else
                {



                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ONLY_DASHBOARD);
                }


            }
        }

        void grdDriver_CellFormatting(object sender, CellFormattingEventArgs e)
        {

            
            try
            {
               

                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {
                    if (e.Column.Name == "DriverNo")
                    {


                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                        if (e.CellElement.BackColor.ToArgb() == -16777216)
                            e.CellElement.ForeColor = Color.White;
                        else
                            e.CellElement.ForeColor = Color.Black;



                        e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }


                    //if (e.Column.Name == "PDA" )
                    //{

                     

                    //    if (e.CellElement.RowInfo.Cells["HasPDA"].Value.ToBool())
                    //    {
                    //        if (e.CellElement.RowInfo.Cells["HasNewMsg"].Tag.ToStr() == "1")
                    //        {
                    //            e.CellElement.BackgroundImage = (Image)Resources.Resource1.pdalightMessage;

                    //        }
                    //        else
                    //        {


                    //            if (e.CellElement.BackgroundImage == null)
                    //                e.CellElement.BackgroundImage = (Image)Resources.Resource1.pdalight_content;


                    //        }
                    //    }
                    //    else
                    //    {
                    //        e.CellElement.BackgroundImage = null;
                    //    }
                    //}
                    
                }
            }
            catch 
            { 
            
            }
        }

        Font font_pob = new Font("Tahoma", 8, FontStyle.Bold);
        void grdOnBoardDriver_CellFormatting(object sender, CellFormattingEventArgs e)
        {

            

            try
            {
             

                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {

                    


                    if (e.Column.Name == "DriverNo")
                    {



                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                        //if (e.CellElement.BackColor.ToArgb() == -65536 || e.CellElement.BackColor.ToArgb() == -16777216 )
                        if (e.CellElement.BackColor.ToArgb() == -16777216 || e.CellElement.BackColor.ToArgb() == -65536)
                        {
                            e.CellElement.ForeColor = Color.White;
                            e.CellElement.Font = font_pob;
                        }
                        else
                            e.CellElement.ForeColor = Color.Black;



                        e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }


                  
                }
            }
            catch 
            { 
            
            }
        }

        void grdPendingJobs_ScreenTipNeeded(object sender, ScreenTipNeededEventArgs e)
        {


            
            GridDataCellElement cell = e.Item as GridDataCellElement;
            if (cell != null && cell.ColumnInfo != null)
            {
                this.ShowScreenTipForCell(cell);
            }
        }



        private void ShowScreenTipForCell(GridDataCellElement cell)
        {
            try
            {



                if (cell.RowInfo is GridViewDataRowInfo == false) return;

              //  AppVars.objPolicyConfiguration.ShowJobDetailScreenPopup

                if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == true && cell.GridControl != null && cell.GridControl.Name == "grdPendingJobs")
                {
                    if (cell.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.ONHOLD)
                    {
                        int id = cell.RowInfo.Cells["Id"].Value.ToInt();

                        Booking obj = General.GetObject<Booking>(c => c.Id == id);

                        if (obj != null && obj.OnHoldReason.ToStr().Trim() != string.Empty)
                        {

                            RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();

                            //screenTip.CaptionLabel.Margin = new Padding(3);




                            string text = "<html><span><b>  " + obj.OnHoldReason.ToStr().Trim() + "</b></span></html>";


                            screenTip.CaptionLabel.Text = text;
                            screenTip.MainTextLabel.Text = string.Empty;
                            screenTip.EnableCustomSize = false;

                            cell.ScreenTip = screenTip;

                        }
                    }
                    else
                    {
                        return;

                    }


                }


                if (AppVars.objPolicyConfiguration.ShowJobDetailScreenPopup.ToBool() == true)
                {

                    GridViewDataRowInfo row = (GridViewDataRowInfo)cell.RowInfo;

                    int id = cell.RowInfo.Cells["Id"].Value.ToInt();

                    Booking obj = General.GetObject<Booking>(c => c.Id == id);



                    if (obj != null)
                    {
                        
                       



                            RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();

                            screenTip.CaptionLabel.Margin = new Padding(3);

                            string via = string.Empty;
                            string notes = string.Empty;


                            if (obj.Booking_ViaLocations.Count > 0)
                            {
                                via = "Via Point : " + string.Join(Environment.NewLine + ",", obj.Booking_ViaLocations.Select(c => c.ViaLocValue.ToStr()).ToArray<string>())
                                                + "<br><br>";

                            }

                            if (obj.Booking_Notes.Count > 0)
                            {
                                int notesCnt = 1;
                                notes = "<br>" + string.Join(Environment.NewLine, obj.Booking_Notes.Select(c => "(" + (notesCnt++).ToStr() + "). " + c.notes.ToStr()).ToArray<string>()) + "<br><br>";

                                if (!string.IsNullOrEmpty(notes))
                                {
                                    notes = notes.Insert(0, "<u>Notes :</u>");

                                }
                            }


                            string autoDespatchText = obj.AutoDespatch.ToBool() && obj.AutoDespatchTime != null && obj.ZoneId != null ? "(AutoDespatch on : " + string.Format("{0:HH:mm}", obj.AutoDespatchTime) + " = " + ((DateTime.Now > obj.AutoDespatchTime) ? DateTime.Now.Subtract(obj.AutoDespatchTime.Value).TotalMinutes.ToInt() : obj.AutoDespatchTime.Value.Subtract(DateTime.Now).TotalMinutes.ToInt()) + " min(s) remaining)" : "";

                            string journeyType = "One Way Journey";


                            if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                journeyType = "One Way";
                            else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                journeyType = "Return Journey";
                            else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                journeyType = "Wait and Return";


                            String text = String.Format("<html><b><span><color=Blue>Ref #  :   {13}<br><b>Vehicle : {0} " + " , Journey Type : " + journeyType + " <br>Pickup Time : {1}  " + autoDespatchText + "<br><br><br>Pickup Point : {2}<br><br>{3}" +
                                                   "Destination  :  {4}<br><br>Fare : £ {5}" +
                                               "<br><br>Customer Name : {6}<br>Telephone No : {7}<br>Mobile No : {8}<br><br>Accounts : {9}" +
                                               "<br>Payment Mode : {10}<br><br>Special Requirement : {11}<br><br>Status : {12}<br><br>" +
                                               notes + "Driver : {14}</span></b>",

                                 row.Cells["Vehicle"].Value, string.Format("{0:dd/MM/yyyy HH:mm}", obj.PickupDateTime), row.Cells["From"].Value, via, row.Cells["To"].Value, row.Cells["Fare"].Value, row.Cells["Passenger"].Value, obj.CustomerPhoneNo.ToStr(), obj.CustomerMobileNo.ToStr(), row.Cells["Account"].Value,
                                 obj.Gen_PaymentType != null ? obj.Gen_PaymentType.PaymentType.ToStr() : "", obj.SpecialRequirements.ToStr(), obj.BookingStatus != null ? obj.BookingStatus.StatusName.ToStr() : "", obj.BookingNo.ToStr(), obj.DriverId == null ? "" : obj.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " + obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr());

                            screenTip.CaptionLabel.Text = text;
                            screenTip.MainTextLabel.Text = string.Empty;
                            screenTip.EnableCustomSize = false;



                            cell.ScreenTip = screenTip;
                        
                    }
                }
            }

            catch
            {

            }
        }

        public void SetFocusOnPendingGrid()
        {

            try
            {
                if (radPageView1.SelectedPage == Pg_PendingJobs)
                {
                    grdPendingJobs.Focus();

                    if (grdPendingJobs.CurrentRow == null && grdPendingJobs.Rows.Count > 0)
                    {
                        grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];

                    }
                }

            }
            catch (Exception ex)
            {
            }
        }

  


        void frmBookingDashBoard_KeyDown(object sender, KeyEventArgs e)
        {
            if (e == null)
                return;
            try
            {
                if (e.Control)
                {
                    ShowFormOnKey(e.KeyCode);

                    if (e.KeyCode == Keys.Up && radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        txtSearchRec.Focus();
                    }
                    else if (e.KeyCode == Keys.Down && radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        grdAllJobs.Focus();

                        if (grdAllJobs.CurrentRow == null && grdAllJobs.Rows.Count > 0)
                        {
                            grdAllJobs.CurrentRow = grdAllJobs.Rows[0];

                        }

                    }
                }

                else
                {

                    if ((e.KeyCode == Keys.End || e.KeyCode == Keys.D) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        DespatchJob();
                    }
                    else if ((e.KeyCode == Keys.G) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        CompleteJob();
                    }
                    else if ((e.KeyCode == Keys.F) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        DespatchFOJJob();
                    }

                    else if ((e.KeyCode == Keys.C) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        CancelOption("","grdpendingjobs");
                    }
                   
                 
                    else if ((e.KeyCode == Keys.A) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        EditFare.Tag = "grdPendingJobs";
                        AllocateDriver();
                    }
                    else if ((e.KeyCode == Keys.A) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {
                        EditFare.Tag ="grdPreBookings";
                        AllocateDriver();
                    }


                    else if ((e.KeyCode == Keys.V) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if(grdPendingJobs.CurrentRow!=null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                             ShowBookingForm(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt(), true);
                    }
                    else if ((e.KeyCode == Keys.V) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {
                        if (grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                        ShowBookingForm(grdPreBookings.CurrentRow.Cells["Id"].Value.ToInt(), true);
                    }


                    else if (e.KeyCode == Keys.U && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        ShowSinBinForm();
                    }
                    else if (e.KeyCode == Keys.O && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        ShowPDAInbox();
                    }
                    else if (e.KeyCode == Keys.M && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        ShowMapInPopup();
                    }
                    else if (e.KeyCode == Keys.Q && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        frmDriverShortcut frm = new frmDriverShortcut();
                        frm.StartPosition = FormStartPosition.CenterScreen;
                        frm.ShowDialog();
                        frm.Dispose();
                    }
                    else if (e.KeyCode == Keys.T && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        frmAttributesFilter frm = new frmAttributesFilter();
                        frm.StartPosition = FormStartPosition.CenterScreen;
                        frm.ShowDialog();
                        frm.Dispose();
                    }

                    else if (e.KeyCode == Keys.Down && radPageView1.SelectedPage == Pg_PreBookings)
                    {

                        grdPreBookings.Focus();

                        if (grdPreBookings.CurrentRow == null && grdPreBookings.Rows.Count > 0)
                        {
                            grdPreBookings.CurrentRow = grdPreBookings.Rows[0];

                        }
                    }
                    // need to recheck
                    else if (e.KeyCode == Keys.Add)
                    {

                        tableLayoutPanel2.ColumnStyles[0].Width = 100;
                        tableLayoutPanel2.ColumnStyles[1].Width = 0;
                        tableLayoutPanel2.ColumnStyles[2].Width = 0;

                        //int max = 0;

                        //foreach (Control control in this.grdOnPlotDrivers.Controls)
                        //{
                        //    if (control is HScrollBar)
                        //    {
                        //        HScrollBar vscroll = (HScrollBar)control;
                        //        if (vscroll.Visible)
                        //            max = (vscroll.Maximum + 40) - grdOnPlotDrivers.Width;

                        //        break;
                        //    }
                        //}


                        //if (max > grdOnPlotDrivers.HorizontalScrollingOffset)
                        //{

                        //    grdOnPlotDrivers.HorizontalScrollingOffset += 20;
                        //}


                       
                    }
                    else if (e.KeyCode == Keys.Subtract)
                    {

                        tableLayoutPanel2.ColumnStyles[0].Width = 66;
                        tableLayoutPanel2.ColumnStyles[1].Width = 18;
                        tableLayoutPanel2.ColumnStyles[2].Width = 16;


                        //if (grdOnPlotDrivers.HorizontalScrollingOffset - 10 < 0)
                        //    grdOnPlotDrivers.HorizontalScrollingOffset = 0;
                        //else
                        //{

                        //    if (grdOnPlotDrivers.HorizontalScrollingOffset - 20 < 0)
                        //        grdOnPlotDrivers.HorizontalScrollingOffset = 0;
                        //    else
                        //        grdOnPlotDrivers.HorizontalScrollingOffset -= 20;
                        //}
                       

                    }
                    else if (e.KeyCode == Keys.F10)
                    {
                        lblNotification.Text = "";

                    }
                }
            }
            catch (Exception ex)
            {


            }
        }


        private void ShowSinBinForm()
        {
            try
            {
                frmSinBin frmSin = new frmSinBin();
                frmSin.StartPosition = FormStartPosition.CenterScreen;
                frmSin.Show();

            }
            catch
            {


            }


        }

        public void ShowFormOnKey(Keys keyCode)
        {
            if (Pg_RecentJobs.Item.IsSelected)
                return;

            try
            {

                if (keyCode == Keys.D)
                {

                    DespatchJob();
                }

                else if (keyCode == Keys.S && radPageView1.SelectedPage != Pg_RecentJobs)
                {
                    radPageView1.SelectedPage = Pg_RecentJobs;
                    txtPickup.Focus();

                }
                else if (keyCode == Keys.B && radPageView1.SelectedPage != Pg_PreBookings)
                {
                    radPageView1.SelectedPage = Pg_PreBookings;
                }
                else if (keyCode == Keys.E && grdPendingJobs.CurrentRow.Cells["Id"].Value != null)
                {
                    int BookingId = 0;

                    if (radPageView1.SelectedPage == Pg_PendingJobs)
                    {
                        BookingId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt();
                    }
                    else if (radPageView1.SelectedPage == Pg_PreBookings)
                    {
                        BookingId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToInt();
                    }
                    else if (radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        BookingId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToInt();
                    }


                    ShowBookingForm(BookingId, true);
                }
            }
            catch (Exception ex)
            {


            }

        }

        void grdDriverWaiting_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                if (name == "btnclearjob")
                {


                    GridViewRowInfo row = gridCell.GridControl.CurrentRow;

                    if (row is GridViewDataRowInfo)
                    {
                        long jobId = row.Cells["Id"].Value.ToLong();
                        //if (DialogResult.Yes == MessageBox.Show("Do you want to clear this job manually ?", "Clear Job", MessageBoxButtons.YesNo))
                        //{
                           

                            new Thread(delegate()
                            {
                                General.ClearDriverCurrentJob(jobId);

                            }).Start();

                            System.Threading.Thread.Sleep(1000);



                            RefreshDashBoardDrivers();

                     //   }
                        // RefreshWaitingAndOnBoardDrivers();
                        //RefreshDriverGrids();

                      
                    }
                }
            }
            catch (Exception ex)
            {


            }

        }



        public void CloseFormOnLogout()
        {

            this.Close();


        }


        void frmBookingDashBoard_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (AppVars.IsLogout == false)
                e.Cancel = true;
            else
            {

                StopJobDueSound();
                timer1.Stop();
                timer_WebBooking.Stop();
                timer_Lic.Stop();
                tmrAlert.Stop();

            }

        }

        void Map_PendingGoogle_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {

            if (frm != null)
                frm.Close();

        }







        void frmBookingDashBoard_Shown(object sender, EventArgs e)
        {
            try
            {


                //   int val = ((btnLostProperty.Location.X + btnLostProperty.Width) * 2) - 10;
                // pnlNotification.Width = val;
                lblNotiX = lblNotification.Location.X;


                timer_WebBooking.Tick += new EventHandler(timer_WebBooking_Tick);

        
                    timer_WebBooking.Interval = (timer_WebBooking.Interval * 60) * AppVars.objPolicyConfiguration.WebBookingFetchInMins.ToInt();

               
                    timer_WebBooking.Start();

                // For Enable WebBooking
                if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool())
                {
                    EnableWebBooking = true;
                    btnWebBooking.Visible = true;

                }




                // For Enable PDA
                if (EnablePDA)
                {

                    btnMessageAllDrivers.Visibility = ElementVisibility.Visible;

                    tableLayoutPanel2.ColumnStyles[0].Width = 66;
                    tableLayoutPanel2.ColumnStyles[1].Width = 18;
                    tableLayoutPanel2.ColumnStyles[2].Width = 16;



                    //for (int i = 0; i < 22; i++)
                    //{
                    //    grdOnPlotDrivers.Rows.Add();
                    //}


                    // grdOnPlotDrivers.RowCount = 20;
                    grdOnPlotDrivers.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 9, FontStyle.Regular);

                    //Color.FromArgb(191, 219, 255);


                    grdOnPlotDrivers.ColumnHeadersDefaultCellStyle.BackColor = Color.AliceBlue;
                    grdOnPlotDrivers.EnableHeadersVisualStyles = false;
                    grdOnPlotDrivers.GridColor = Color.Gainsboro;
                    grdOnPlotDrivers.BringToFront();
                    grdOnPlotDrivers.Font = new Font("Tahoma", 10, FontStyle.Regular);
                    grdOnPlotDrivers.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing;
                    grdOnPlotDrivers.ColumnHeadersHeight = 38;
                    //    grdOnPlotDrivers.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.ColumnHeader;

                    EnableOnBoardDriver(true);
                    // UIRefresh = new UIDelegate(RefreshAllActiveData);
                    // UIRefresh = new UIDelegate(RefreshAll);
                    //UIRefreshDrvs = new UIDelegate(RefreshDrivers);


                    objPanic = new ConditionalFormattingObject();
                    objPanic.ApplyToRow = true;
                    objPanic.RowBackColor = Color.Red;
                    objPanic.ConditionType = ConditionTypes.Equal;
                    objPanic.TValue1 = "Panic";
                    grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList.Add(objPanic);
                    grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList.Add(objPanic);


                    objPanicBlink = new ConditionalFormattingObject();
                    objPanicBlink.ApplyToRow = true;
                    objPanicBlink.RowBackColor = Color.White;
                    objPanicBlink.ConditionType = ConditionTypes.Equal;
                    objPanicBlink.TValue1 = "Panic";





                    grdOnPlotDrivers.CellFormatting += new DataGridViewCellFormattingEventHandler(grdOnPlotDrivers_CellFormatting);
                    //grdOnPlotDrivers.CellFormatting += new CellFormattingEventHandler(grdOnPlotDrivers_CellFormatting);



                  
                 //   LoadDriversGrid();





                    //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool())
                    //{

                    //    StartServiceBroker();


                    //    // LoadAutoDespatchData();

                    //}
                }
                else
                {
                    InitializeMaps();

                    lblOnPlot.Visible = false;
                    grdOnPlotDrivers.Visible = false;

                    bool enableOnBoard = AppVars.objPolicyConfiguration.EnableOnBoardDrivers.ToBool();

                    EnableOnBoardDriver(enableOnBoard);
                    if (!enableOnBoard)
                    {
                        tableLayoutPanel2.ColumnStyles.Remove(tableLayoutPanel2.ColumnStyles[0]);
                        tableLayoutPanel2.ColumnStyles.Remove(tableLayoutPanel2.ColumnStyles[1]);

                    }

                }


                if (HasWebBookingTab)
                {

                    FormatRejectedWebBookingsGrid();
                }





                if (Screen.PrimaryScreen.WorkingArea.Width <= 1280)
                {
                    chkShowAllocatedTodayJobs.Visible = false;
                    optSortTodayDriver.Visible = false;
                    optSortTodayPickup.Visible = false;


                }


                ddlSubCompany.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width -pnlNotification.Location.X - 250, ddlSubCompany.Location.Y);

                CheckAccountJobs();


                var listofDocs = General.GetQueryable<Gen_Syspolicy_DriverDocumentList>(c => c.IsVisible == true);

                foreach (var item in listofDocs)
                {
                    if (item.Id == 1)
                        PHCVehicleDays = item.ExpiryDays.ToInt();

                    else if (item.Id == 2)
                        PHCDriverDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 3)
                        MOTDays = item.ExpiryDays.ToInt();

                    else if (item.Id == 4)
                        InsuranceDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 5)
                        MOT2Days = item.ExpiryDays.ToInt();
                    else if (item.Id == 6)
                        LicenseDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 7)
                        RoadTaxDays = item.ExpiryDays.ToInt();

                }


                //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool())
                //{
                if (AppVars.listUserRights.Count(c => c.functionId == "SHOW RECALL BUTTON") > 0)
                {
                    radPanel9.Visible = false;


                    AddCommandColumn(grdAllJobs, "recall", "RECALL");
                    grdAllJobs.CommandCellClick += new CommandCellClickEventHandler(RecallPendingJob_Click);
                }
             //   }

                int Id = AppVars.LoginObj.LuserId.ToInt();
                var itemMsg = General.GetQueryable<InternalMessaging>(c => c.IsRead == false && c.IsWelcomeMsg == true && (c.ReceiveTo == null || c.ReceiveTo == 0 || c.ReceiveTo == Id))
                                     .OrderByDescending(c => c.AddOn).FirstOrDefault();


                if (itemMsg != null)
                {
                    frmPopupInternalMessage frmPop = new frmPopupInternalMessage(itemMsg.MessageText.ToStr(), true, itemMsg.Id);
                    frmPop.Show();

                }






               
                    btnAirportArrivals.Visible = AppVars.listUserRights.Count(c => c.functionId == "AIRPORT ARRIVALS") > 0;

                    FillDueFilter();



                    if (AppVars.objPolicyConfiguration.BookingInterval.ToInt() > 0)
                    {
                        tmrAutoRefresh = new System.Windows.Forms.Timer();
                        tmrAutoRefresh.Interval = AppVars.objPolicyConfiguration.BookingInterval.ToInt() * 1000;
                        tmrAutoRefresh.Tick += new EventHandler(tmrAutoRefresh_Tick);
                        tmrAutoRefresh.Enabled = true;
                        tmrAutoRefresh.Start();

                    }



                   
                  


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


       

      

        void tmrAutoRefresh_Tick(object sender, EventArgs e)
        {

            RefreshTodayBookingData();

        }


        private int DefaultFilterValue = 0;
        private void FillDueFilter()
        {
            //  radListDataItem1.Selected = true;
            //radListDataItem1.Text = "No Filter";
            //radListDataItem1.TextWrap = true;
            //radListDataItem2.Text = "5 mins";
            //radListDataItem2.TextWrap = true;
            //radListDataItem3.Text = "10 mins";
            //radListDataItem3.TextWrap = true;
            //radListDataItem4.Text = "15 mins";
            //radListDataItem4.TextWrap = true;
            //radListDataItem5.Text = "30 mins";
            //radListDataItem5.TextWrap = true;
            //radListDataItem6.Text = "45 mins";
            //radListDataItem6.TextWrap = true;
            //radListDataItem7.Text = "1 hour";
            //radListDataItem7.TextWrap = true;
            //radListDataItem8.Text = "2 hours";
            //radListDataItem8.TextWrap = true;
            //radListDataItem9.Text = "5 hours";
            //radListDataItem9.TextWrap = true;
            //radListDataItem10.Text = "10 hours";
            //radListDataItem10.TextWrap = true;


            this.ddlShowDue.Items.Add(new RadListDataItem { Text="No Filter",Selected=true, Value=0 });

         
         
            
            
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "5 mins", Selected = true, Value = 5 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "10 mins", Selected = true, Value = 10 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "15 mins", Selected = true, Value = 15 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "30 mins", Selected = true, Value = 30 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "45 mins", Selected = true, Value = 45 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "1 hour", Selected = true, Value = 60 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "2 hours", Selected = true, Value = 120 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "5 hours", Selected = true, Value = 300 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "10 hours", Selected = true, Value = 600 });



            try
            {
                if (File.Exists(Application.StartupPath + "\\Configuration.xml"))
                {

                    XmlDocument d = new XmlDocument();
                    d.Load(Application.StartupPath + "\\Configuration.xml");

                    if (d.GetElementsByTagName("DEFAULTBOOKINGFILTER").Count > 0)
                    {

                        DefaultFilterValue = d.GetElementsByTagName("DEFAULTBOOKINGFILTER")[0].InnerText.ToInt();                       
                    }
                }

                if (DefaultFilterValue > 0)
                {
                    var item = this.ddlShowDue.Items.FirstOrDefault(c => c.Value.ToInt() == DefaultFilterValue);
                    if (item != null)
                    {
                        item.Selected = true;

                    }

                }
            }
            catch
            {


            }

        }


        private void CheckAccountJobs()
        {
            AccJobsShowNotifyDay = AppVars.objPolicyConfiguration.AccJobsShowNotificationDay.ToStr().Trim();

            if (!string.IsNullOrEmpty(AccJobsShowNotifyDay))
            {


                if (AccJobsShowNotifyDay.Contains(","))
                {
                    string[] arr = AccJobsShowNotifyDay.Split(new char[] { ',' });

                    if (arr.Count() == 2)
                    {
                        AccJobsShowNotifyDay = arr[0].ToStr();

                        DateTime dt = DateTime.Parse(arr[1].ToStr());

                        if (dt < DateTime.Now.Date)
                        {

                            frmAccJobsReminder frmAcc = new frmAccJobsReminder();
                            frmAcc.Show();
                        }
                    }
                }

                else if (AccJobsShowNotifyDay == DateTime.Now.DayOfWeek.ToStr())
                {

                    frmAccJobsReminder frmAcc = new frmAccJobsReminder();
                    frmAcc.Show();
                }
            }

        }


        void grdOnPlotDrivers_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {




                //         e.CellStyle.BackColor = Color.Yellow;




                //   e.CellElement.DrawFill = false;
                //  e.CellElement.BorderColor = Color.Black;

                if (e.ColumnIndex != -1)
                {


                    if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null && grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag != null && grdOnPlotDrivers.Columns[e.ColumnIndex].Name != "SIN BIN")
                    {

                        e.CellStyle.BackColor = Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());

                        //  e.CellElement.NumberOfColors = 1;
                        //   e.CellElement.BackColor = Color.FromArgb(e.Row.Cells[e.Column.Name].Tag.ToInt());


                        if (e.CellStyle.BackColor.ToArgb() == -65536)
                        {

                            e.CellStyle.ForeColor = Color.White;
                            e.CellStyle.Font = newFont;
                            e.FormattingApplied = true;
                        }
                        else
                        {
                            e.CellStyle.ForeColor = Color.Black;
                            e.CellStyle.Font = regularFont;
                            e.FormattingApplied = true;

                        }
                    }




                    else if (grdOnPlotDrivers.Columns[e.ColumnIndex].Name == "SIN BIN")
                    {





                        e.CellStyle.BackColor = Color.FromArgb(17, 17, 17);
                        e.CellStyle.ForeColor = Color.White;




                        //  e.FormattingApplied = true;


                    }



                }

            }
            catch
            {


            }
        }










        #region AutoDespatch Activity


        //private void LoadAutoDespatchData()
        //{
        //    var query = AppVars.BLData.GetQueryable<booking_AutoDespatch>(c => c.Despatched == false && c.Alert == true);

        //    command = AppVars.BLData.GetCommand(query);
        //    this.Grid = new RadGridView();

        //    PopulateAutoDespatchData();
        //}



   
        List<ClsAutoDespatchPlot> listofSuccessAutoDespatch = null;
        List<Gen_Coordinate> listofCoordinates = null;
    



        private void OnSuccessAutoDespatchJob(Booking job, Fleet_Driver objDrvInfo, ref List<string> listofErrors, string despatchReason)
        {

            frmDespatchJob frm = new frmDespatchJob(job.Id, General.GetObject<Booking>(c => c.Id == job.Id), objDrvInfo.Id.ToIntorNull(), objDrvInfo, true, despatchReason);

            if (frm.OnDespatching(ref listofErrors))
            {
                frm.DespatchJob();
                captionText = "Job No : " + job.BookingNo.ToStr() + " AutoDespatch Successfully";

                contentText = "Driver : " + objDrvInfo.DriverNo + " - " + objDrvInfo.DriverName;
                contentText += Environment.NewLine + "Pickup Date-Time : "
                                                                  + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime);


                contentText += Environment.NewLine + "Pickup Point : " + job.FromAddress;
                contentImage = null;
                alertSound = System.Media.SystemSounds.Beep;

                MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null); });
                this.Invoke(mi);


            }


        }


        private void OnSuccessAutoDespatchJobWithFOJ(Booking job, Fleet_Driver objDrvInfo, ref List<string> listofErrors, string despatchReason,bool isfoj)
        {

            frmDespatchJob frm = new frmDespatchJob(job.Id, General.GetObject<Booking>(c => c.Id == job.Id), objDrvInfo.Id.ToIntorNull(), objDrvInfo, true, despatchReason);

            frm.IsFOJ = isfoj;
            if (frm.OnDespatching(ref listofErrors))
            {
              
                frm.DespatchJob();
                captionText = "Job No : " + job.BookingNo.ToStr() + " AutoDespatch Successfully";

                contentText = "Driver : " + objDrvInfo.DriverNo + " - " + objDrvInfo.DriverName;
                contentText += Environment.NewLine + "Pickup Date-Time : "
                                                                  + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime);


                contentText += Environment.NewLine + "Pickup Point : " + job.FromAddress;
                contentImage = null;
                alertSound = System.Media.SystemSounds.Beep;

                MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null); });
                this.Invoke(mi);


            }


        }


        private void OnSuccessAutoDespatchJob(Booking job, Fleet_Driver objDrvInfo, ref List<string> listofErrors)
        {

            frmDespatchJob frm = new frmDespatchJob(job.Id, General.GetObject<Booking>(c => c.Id == job.Id), objDrvInfo.Id.ToIntorNull(), objDrvInfo, true);

            if (frm.OnDespatching(ref listofErrors))
            {
                frm.DespatchJob();
                captionText = "Job No : " + job.BookingNo.ToStr() + " AutoDespatch Successfully";

                contentText = "Driver : " + objDrvInfo.DriverNo + " - " + objDrvInfo.DriverName;
                contentText += Environment.NewLine + "Pickup Date-Time : "
                                                                  + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime);


                contentText += Environment.NewLine + "Pickup Point : " + job.FromAddress;
                contentImage = null;
                alertSound = System.Media.SystemSounds.Beep;

                MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null); });
                this.Invoke(mi);


            }


        }


        private void OnFailedAutoDespatchJob(Booking job)
        {
            //    BookingBO objDespatchFailedBooking = new BookingBO();
            //   objDespatchFailedBooking.GetByPrimaryKey(job.Id);
            // if (objDespatchFailedBooking.Current != null &&
            //    objDespatchFailedBooking.Current.booking_AutoDespatches.Count > 0 && objDespatchFailedBooking.Current.booking_AutoDespatches[0].Alert == true)
            // {
            //     objDespatchFailedBooking.Current.booking_AutoDespatches[0].Alert = false;
            //     objDespatchFailedBooking.Current.booking_AutoDespatches[0].Despatched = false;

            //      objDespatchFailedBooking.CheckCustomerValidation = false;
            //     objDespatchFailedBooking.CheckDataValidation = false;
            //     objDespatchFailedBooking.Save();


            //   IsUpdate = true;



            //if (objDespatchFailedBooking.Current.ZoneId != null
            //    || (objDespatchFailedBooking.Current.ZoneId == null && !string.IsNullOrEmpty(General.GetPostCodeMatch(objDespatchFailedBooking.Current.FromAddress.ToStr().ToUpper()))))
            //{

            captionText = "AUTODISPATCH NO DRIVER AVAILABLE";

            //contentText = "No Driver Available...." + Environment.NewLine;
            contentText = "Job # : " + job.BookingNo.ToStr() + Environment.NewLine;
            contentText += "Pickup Point # : " + job.FromAddress + Environment.NewLine;
            contentText += "Pickup Time : " + string.Format("{0:dd/MM HH:mm}", job.PickupDateTime) + Environment.NewLine;


            alertSound = System.Media.SystemSounds.Hand;
            contentImage = Resources.Resource1.time;

            MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null); });
            this.Invoke(mi);
            //  }
            // }


        }



        private void PutJobOnBidding(int[] driverIds, long jobId)
        {

            Thread smsThread = new Thread(delegate()
            {
                if (this.IsDisposed == false)
                {
                    SendBidMessage(driverIds, jobId);
                }
            });

            smsThread.Priority = ThreadPriority.Highest;

            smsThread.Start();
           

        }


        #endregion





        private void EnableOnBoardDriver(bool enable)
        {
            if (enable == false)
            {
                return;
            }

            pnlDriverOnBoard.Visible = true;
            AddClearJobColumn(grdOnBoardDriver);
            grdOnBoardDriver.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
            grdOnBoardDriver.AllowAutoSizeColumns = true;

        }

















        public void ShowAlertMessage(string message)
        {
            try
            {
             //   IsUpdating = true;


                string notifyMsg = string.Empty;
                string[] values = message.Split(new string[] { ">>" }, StringSplitOptions.None);

                if (message.StartsWith("message>>"))
                {

                    int senderId = values[1].ToInt();

                    captionText = "Message Received from " + values[2].ToStr();
                    alertSound = System.Media.SystemSounds.Question;
                    contentText = "<html><b><span><color=Blue>" + values[3].ToStr() + "</span></b></html>";
                    contentImage = Resources.Resource1.message;


                    if (AppVars.objPolicyConfiguration.PDANotificationSound.ToBool())
                    {
                        PlaySoundNotification("Message2.wav", false);
                    }
                    //    sp  System.Windows.Forms.Application.StartupPath + "\\sound\\auth.wav"


                    if (DisablePopupNotifications)
                    {
                        MethodInvoker mi = new MethodInvoker(delegate()
                        {
                            this.ShowAlert(captionText, contentText, contentImage, alertSound
                            , true, values[3], senderId.ToStr(), values[2].ToStr());
                          
                        });
                        this.Invoke(mi);

                    }
                    else
                    {

                        MethodInvoker mi = new MethodInvoker(delegate()
                        {
                            this.CreateAndShowMessageAlert(captionText, contentText, contentImage, alertSound
                            , true, values[3], senderId.ToStr(), values[2].ToStr());
                            AddNotifyMessage(values[2].ToStr() + ": " + values[3].ToStr());
                        });
                        this.Invoke(mi);
                    }

                    SetSMSBlinking(Color.Orange);



                    GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);


                    if (row != null)
                    {
                        row.Cells["HasNewMsg"].Tag = "1";
                    }
                    else
                    {
                        row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);
                        if (row != null)
                        {
                            row.Cells["HasNewMsg"].Tag = "1";

                        }
                    }
                    return;
                }
                if (message.StartsWith("customer message>>"))
                {


                    captionText = "Message Received from Customer (" + values[1].ToStr() + ")";

                    contentText = "<html><b><span><color=Blue>" + values[3].ToStr() + "</span></b></html>";


                    if (values[2].ToStr().ToLower() == "confirmed")
                    {
                        contentImage = Resources.Resource1.acceptJob;
                    }
                    else
                    {
                        contentImage = (Image)Resources.Resource1.rejectJob;

                    }

                    if (AppVars.objPolicyConfiguration.SMSNotificationSound.ToBool())
                    {
                        PlaySoundNotification("Message1.wav", false);
                    }




                    MethodInvoker mi = new MethodInvoker(delegate()
                    {
                        this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound
                        , true, values[3], values[2].ToStr(), values[2].ToStr());
                        AddNotifyMessage(values[2].ToStr() + ":" + values[3].ToStr().Replace("\r\n", ":"));
                    });
                    this.Invoke(mi);


                    //   SetSMSBlinking(Color.Orange);



                    //GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);


                    //if (row != null)
                    //{
                    //    row.Cells["HasNewMsg"].Tag = "1";
                    //}
                    //else
                    //{
                    //    row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);
                    //    if (row != null)
                    //    {
                    //        row.Cells["HasNewMsg"].Tag = "1";

                    //    }
                    //}
                    return;
                }
                else if (message.StartsWith("login>>") || message.StartsWith("logout>>"))
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                    }
                    else
                    {
                        RefreshDashBoardDrivers();
                    }


                    if (values[0] == "logout" && message.EndsWith("(OverBreak)") == false)
                        return;




                    if (message.StartsWith("login>>"))
                    {

                        notifyMsg = values[2].ToStr() + " LOGIN";

                        captionText = "LOGIN";

                        alertSound = System.Media.SystemSounds.Question;
                        contentText = "<html> <b><span style=font-size:medium><color=Blue>Driver " + values[2].ToStr() + " is Login</span></b></html>";

                        contentImage = Resources.Resource1.login;



                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {

                            using (SpeechSynthesizer speech = new SpeechSynthesizer())
                            {
                                speech.Rate = -5;
                                speech.Speak("Driver " + values[2].ToStr() + " Login");
                            }
                        }

                    }
                    else if (message.StartsWith("logout>>") && message.EndsWith("(OverBreak)"))
                    {

                        notifyMsg = values[2].ToStr() + " AUTO LOGOUT(OVERBREAK)";

                        captionText = "DRV " + values[2].ToStr() + " AUTO LOGOUT";

                        alertSound = System.Media.SystemSounds.Question;
                        contentText = "<html> <b><span style=font-size:medium><color=Blue>Driver " + values[2].ToStr() + " is Auto Logout (OverTime Break) </span></b></html>";

                        contentImage = null;

                    }

                    MethodInvoker inv = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, "", "", ""); AddNotifyMessage(notifyMsg); });

                    this.Invoke(inv);

                    return;

                }

                else if (message.StartsWith("logout auth>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(ShowLogoutAuthForm), message, "");


                    }
                    else
                    {
                        ShowLogoutAuthForm(message, "");


                    }


                    return;


                }
                else if (message.StartsWith("changed driver status"))
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                        Thread.Sleep(1000);
                        this.BeginInvoke(new UIDelegate(PanicMode));
                    }
                    else
                    {
                        RefreshDashBoardDrivers();
                        Thread.Sleep(1000);
                        PanicMode();
                    }



                    return;

                }
                else if (message.StartsWith("app verification code"))
                {

                    if (IsServer)
                    {

                        if (!string.IsNullOrEmpty(values[1].ToStr()))
                        {

                            new Thread(delegate()
                            {
                                SendVerificationCode(values[1].ToStr().Replace("\a", "").Trim(), values[2].ToStr().Trim(), values[3].ToStr().Trim());
                            }).Start();
                        }
                    }

                    return;

                }
                else if (message.StartsWith("prejob action>>"))
                {

                    long jobId = values[1].ToLong();
                    int driverId = values[2].ToInt();
                    int jobStatusId = values[3].ToInt();



                    Booking job = General.GetObject<Booking>(c => c.Id == jobId);


                    if (job == null)
                        return;


                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));
                    }
                    else
                    {

                        RefreshTodayAndPreData();
                    }



                    if (jobStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                    {

                        contentImage = (Image)Resources.Resource1.acceptJob;
                        alertSound = System.Media.SystemSounds.Asterisk;

                        notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + "PENDING START";

                        captionText = "Pre-Job # " + job.BookingNo + " is Accepted by Driver '" + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                 job.Fleet_Driver.DefaultIfEmpty().DriverName + "'";

                        contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";




                        SendDriverConfirmationEmail();


                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.REJECTED)
                    {

                        contentImage = (Image)Resources.Resource1.rejectJob;
                        alertSound = System.Media.SystemSounds.Asterisk;

                        notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + "REJECTED";

                        captionText = "Pre-Job # " + job.BookingNo + " is Rejected by Driver '" + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                 job.Fleet_Driver.DefaultIfEmpty().DriverName + "'";

                        contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";

                    }

                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOSHOW)
                    {
                        contentImage = (Image)Resources.Resource1.rejectJob1;

                        alertSound = System.Media.SystemSounds.Asterisk;

                        notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + " RECOVER JOB";
                        captionText = "Job # " + job.BookingNo + " is Recovered";
                        contentImage = (Image)Resources.Resource1.rejectJob;

                        contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + Environment.NewLine;
                        contentText += "Driver : " + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                   job.Fleet_Driver.DefaultIfEmpty().DriverName + "'" +
                                                 "</span></b></html>";
                    }



                    MethodInvoker invokerPre = new MethodInvoker(delegate()
                    {

                        this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);
                        AddNotifyMessage(notifyMsg);

                    });

                    this.Invoke(invokerPre);

                    return;



                }

                else if (message.StartsWith("action>>"))
                {

                    long jobId = values[1].ToLong();
                    int driverId = values[2].ToInt();
                    int jobStatusId = values[3].ToInt();

                    string bookingNo = string.Empty;
                    string driverNo = string.Empty;
                    string fromAddress = string.Empty;
                    string toAddress = string.Empty;
                    string mobileNo = string.Empty;
                    string pickupTime = string.Empty;
                    int bookingTypeId = 0;

                    GridViewRowInfo row = null;
                    row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                    if (row == null)
                        row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                    if (row == null)
                    {
                      

                        Booking job = General.GetObject<Booking>(c => c.Id == jobId);
                      

                        if (job == null)
                            return;
                        else
                        {
                            bookingNo = job.BookingNo.ToStr().Trim();
                             driverNo =job.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr().Trim();
                             fromAddress =job.FromAddress.ToStr().Trim();
                             toAddress =job.ToAddress.ToStr().Trim();
                             mobileNo = job.CustomerMobileNo.ToStr().Trim();
                             pickupTime =job.PickupDateTime.ToStr();
                             bookingTypeId = job.BookingTypeId.ToInt();

                        }
                    }
                    else
                    {

                         bookingNo = row.Cells["RefNumber"].Value.ToStr();
                         driverNo = row.Cells["Driver"].Value.ToStr();

                         if (driverNo.Contains("-"))
                         {
                             driverNo = driverNo.Substring(0, driverNo.IndexOf("-"));

                         }

                         fromAddress = row.Cells["From"].Value.ToStr();
                         toAddress = row.Cells["To"].Value.ToStr();
                         mobileNo = row.Cells["MobileNo"].Value.ToStr();
                         pickupTime = row.Cells["Time"].Value.ToStr();
                         bookingTypeId = row.Cells["BookingTypeId"].Value.ToInt();

                    }
               


                    if (worker.IsBusy == false)
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(RefreshAllActiveData));
                        }

                        else
                        {
                            RefreshAllActiveData();
                        }
                    }
                    else
                    {

                        try
                        {
                            worker.CancelAsync();


                            if (worker.IsBusy)
                                Thread.Sleep(700);

                            //if (worker.IsBusy == false)
                            //{
                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UIDelegate(RefreshAllActiveData));
                            }

                            else
                            {
                                RefreshAllActiveData();
                            }


                         //   File.AppendAllText("broadcastJobBusyWorkerfixed.txt", DateTime.Now.ToStr() + ":" + message + Environment.NewLine);

                            //}
                            //else
                            //{


                            //    File.AppendAllText("broadcastJobBusyWorker.txt", DateTime.Now.ToStr() + ":" + message+Environment.NewLine);
                            //}
                        }
                        catch
                        {
                          //  File.AppendAllText("broadcastJobBusyWorkercatch.txt", DateTime.Now.ToStr() + ":" + message + Environment.NewLine);

                        }

                    }

               





                    if (jobStatusId == Enums.BOOKINGSTATUS.ONROUTE)
                    {

                        notifyMsg = driverNo + "ONROUTE";

                        captionText = "Job # " + bookingNo + " is Accepted by Driver '" + driverNo;


                        contentImage = (Image)Resources.Resource1.acceptJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";


                        if (IsServer)
                        {

                            long onlineBookingId = 0;

                            if (AppVars.objPolicyConfiguration.EnablePassengerText.ToBool())
                            {


                            
                                Booking job = General.GetObject<Booking>(c => c.Id == jobId);

                                if (job != null && job.JobCode.ToStr().Trim().Length==0)
                                {
                                    onlineBookingId = job.OnlineBookingId.ToLong();
                                    if (job.CustomerMobileNo.ToStr().Trim() != string.Empty && job.DisablePassengerSMS.ToBool() == false)
                                    {

                                        if (AppVars.objPolicyConfiguration.EnablePdaDespatchSms.ToBool() && AppVars.objPolicyConfiguration.SendPdaDespatchSmsOnAcceptJob.ToBool())
                                        {

                                            string driverMobileNo = General.GetObject<Fleet_Driver>(c => c.Id == job.DriverId).DefaultIfEmpty().MobileNo.ToStr().Trim();

                                            if (driverMobileNo.ToStr().Length > 0)
                                            {

                                                // ADDED ON 20/APRIL/2016 ON REQUEST OF COMMERCIAL CARS => DISABLE CUSTOMER TEXT FOR PARTICULAR ACCOUNT JOBS
                                                if (job.CompanyId != null && job.Gen_Company.DisableCustomerText.ToBool())
                                                {

                                                    new Thread(delegate()
                                                    {
                                                        SendSMS(driverMobileNo, GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), job, jobId), job.SMSType.ToInt());

                                                    }).Start();
                                                }
                                                else
                                                {

                                                    new Thread(delegate()
                                                    {

                                                        SendSMSDrvAndPassenger(job.CustomerMobileNo.ToStr().Trim(), GetMessage(AppVars.objPolicyConfiguration.DespatchTextForCustomer.ToStr(), job, jobId), driverMobileNo, GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), job, jobId), job.SMSType.ToInt());
                                                    }).Start();
                                                }
                                            }
                                        }
                                        else
                                        {

                                            // ADDED ON 20/APRIL/2016 ON REQUEST OF COMMERCIAL CARS => DISABLE CUSTOMER TEXT FOR PARTICULAR ACCOUNT JOBS
                                            if (job.CompanyId == null || job.Gen_Company.DisableCustomerText.ToBool() == false)
                                            {

                                                new Thread(delegate()
                                                {
                                                    SendSMS(job.CustomerMobileNo.ToStr().Trim(), GetMessage(AppVars.objPolicyConfiguration.DespatchTextForCustomer.ToStr(), job, jobId), job.SMSType.ToInt());

                                                }).Start();
                                            }
                                        }


                                    }
                                    else
                                    {
                                        if (AppVars.objPolicyConfiguration.EnablePdaDespatchSms.ToBool() && AppVars.objPolicyConfiguration.SendPdaDespatchSmsOnAcceptJob.ToBool())
                                        {

                                            string driverMobileNo = General.GetObject<Fleet_Driver>(c => c.Id == job.DriverId).DefaultIfEmpty().MobileNo.ToStr().Trim();

                                            if (driverMobileNo.ToStr().Length > 0)
                                            {
                                                new Thread(delegate()
                                                {
                                                    SendSMS(driverMobileNo, GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), job, jobId), job.SMSType.ToInt());

                                                }).Start();
                                            }
                                        }

                                    }

                                }
                            }
                            else
                            {


                                if (AppVars.objPolicyConfiguration.EnablePdaDespatchSms.ToBool() && AppVars.objPolicyConfiguration.SendPdaDespatchSmsOnAcceptJob.ToBool())
                                {
                                    Booking job = General.GetObject<Booking>(c => c.Id == jobId);

                                    if (job != null && job.JobCode.ToStr().Trim().Length == 0)
                                    {
                                        string driverMobileNo = General.GetObject<Fleet_Driver>(c => c.Id == job.DriverId).DefaultIfEmpty().MobileNo.ToStr().Trim();

                                        if (driverMobileNo.ToStr().Length > 0)
                                        {


                                            new Thread(delegate()
                                            {
                                                SendSMS(driverMobileNo, GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), job, jobId),job.SMSType.ToInt());

                                            }).Start();
                                        }
                                    }
                                }
                            }

                            // Only For oNline BOOKING
                            if (bookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                            {
                                UpdateOnlineAppBookingStatus(onlineBookingId, bookingNo, "OnRoute," + driverId + "," + driverNo);
                            }
                            else if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateThirdPartyJobStatus(null, jobId, "onroute");                               
                            }
                        }
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.ARRIVED)
                    {

                        notifyMsg = driverNo + "ARRIVED";

                        captionText = "DRIVER ARRIVED";
                        contentImage = (Image)Resources.Resource1.arrived;

                        contentText = "<html><b><span><color=Blue>Driver '" + driverNo +
                                                   " is Arrived on " + fromAddress + "</span></b></html>";
                        alertSound = System.Media.SystemSounds.Asterisk;


                        if (IsServer)
                        {
                            long onlineBookingId = 0;
                            if (AppVars.objPolicyConfiguration.EnableArrivalBookingText.ToBool())
                            {

                                Booking job = General.GetObject<Booking>(c => c.Id == jobId);

                                if (job != null && job.JobCode.ToStr().Trim().Length == 0)
                                {
                                    onlineBookingId = job.OnlineBookingId.ToLong();
                                    if (!string.IsNullOrEmpty(job.CustomerMobileNo))
                                    {
                                        // ADDED ON 20/APRIL/2016 ON REQUEST OF COMMERCIAL CARS => DISABLE ARRIVAL TEXT FOR PARTICULAR ACCOUNT JOBS
                                        if (job.CompanyId == null || job.Gen_Company.DisableArrivalText.ToBool() == false)
                                        {

                                            string arrivalText = string.Empty;

                                            if (job.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                            {
                                                arrivalText = AppVars.objPolicyConfiguration.ArrivalAirportBookingText.ToStr().Trim();
                                            }
                                            else
                                            {
                                                arrivalText = AppVars.objPolicyConfiguration.ArrivalBookingText.ToStr().Trim();
                                            }

                                            if (!string.IsNullOrEmpty(arrivalText))
                                            {

                                                new Thread(delegate()
                                                {
                                                    SendSMS(job.CustomerMobileNo.ToStr().Trim(), GetMessage(arrivalText, job, jobId), job.SMSType.ToInt());
                                                }).Start();
                                            }
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(job.CustomerPhoneNo.ToStr().Trim()))
                                    {

                                        if (job.CompanyId == null || job.Gen_Company.DisableArrivalText.ToBool() == false)
                                        {

                                            string arrivalText = string.Empty;

                                            if (job.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                            {
                                                arrivalText = AppVars.objPolicyConfiguration.ArrivalAirportBookingText.ToStr().Trim();
                                            }
                                            else
                                            {
                                                arrivalText = AppVars.objPolicyConfiguration.ArrivalBookingText.ToStr().Trim();
                                            }

                                            if (!string.IsNullOrEmpty(arrivalText))
                                            {

                                                new Thread(delegate()
                                                {
                                                    SendSMS(job.CustomerPhoneNo.ToStr().Trim(), GetMessage(arrivalText, job, jobId), job.SMSType.ToInt());
                                                }).Start();
                                            }
                                        }



                                       // RingBackCall("Arrived Call to Customer", job.CustomerName.ToStr(), job.CustomerPhoneNo.ToStr().Trim());

                                    }
                                }




                            }

                            // Only For oNline BOOKING
                            if (bookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                            {
                                UpdateOnlineAppBookingStatus(onlineBookingId, bookingNo, "Arrived," + driverId + "," + driverNo);
                            }
                            else if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateThirdPartyJobStatus(null, jobId, "arrived");
                            }
                        }
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.ARRIVED_GHOST)
                    {


                       
                            notifyMsg = driverNo + "STARTING GHOST JOB";

                            captionText = "Driver '" + driverNo + "' is Starting Ghost Job";
                            contentText = 
                            contentText = "<html><b><span><color=Blue> Job Ref # " + bookingNo  + Environment.NewLine;
                            contentText += "Destination : " + toAddress;
                            contentText += "Driver : " + driverNo +
                                         "</span></b></html>";
                            alertSound = System.Media.SystemSounds.Hand;
                            contentImage = Resources.Resource1.acceptJob;

                      
                       
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.POB)
                    {


                        if (bookingTypeId == Enums.BOOKING_TYPES.ONROAD)
                        {

                            notifyMsg = driverNo + "FLAG DOWN";

                            captionText = "Driver '" + driverNo + "' Pressed Flag Down";
                            contentText = "Destination : " + toAddress;

                            alertSound = System.Media.SystemSounds.Hand;
                            contentImage = Resources.Resource1.FlagDown;

                        }
                        else
                        {
                            notifyMsg = driverNo + "POB";

                            captionText = "Job # " + bookingNo + " is Passenger On Board";

                            contentImage = (Image)Resources.Resource1.pob;

                            alertSound = System.Media.SystemSounds.Asterisk;
                            contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                            contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                            contentText += "Driver : " + driverNo +
                                         "</span></b></html>";


                            if (IsServer)
                            {

                                if (bookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                                {

                                    long onlineBookingId = 0;

                                    if (bookingNo.Contains("/") == false)
                                    {
                                        onlineBookingId = General.GetObject<Booking>(c => c.Id == jobId).DefaultIfEmpty().OnlineBookingId.ToLong();

                                    }

                                    // Only For oNline BOOKING
                                    UpdateOnlineAppBookingStatus(onlineBookingId, bookingNo, "Completed," + driverId + "," + driverNo);


                                }
                                else if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                                {
                                    General.UpdateThirdPartyJobStatus(null, jobId, "pob");
                                }
                            }
                        }
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.STC)
                    {
                        notifyMsg = driverNo + "STC";

                        captionText = "Job # " + bookingNo + " is Soon To Clear";
                        contentImage = (Image)Resources.Resource1.stc;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + toAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";


                        if (IsServer)
                        {
                            if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateThirdPartyJobStatus(null, jobId, "pob");
                            }
                        }

                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.DISPATCHED)
                    {

                        notifyMsg = driverNo + "CLEAR";

                        captionText = "Job # " + bookingNo + " is Completed";
                        contentImage = (Image)Resources.Resource1.clear;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + toAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";


                        if (IsServer)
                        {

                            if(!string.IsNullOrEmpty(AppVars.objPolicyConfiguration.DespatchTextForPDA.ToStr().Trim()))
                            {

                                new Thread(delegate()
                                {
                                    Booking job = General.GetObject<Booking>(c => c.Id == jobId);
                                    if (job != null)
                                    {

                                        SendSMS(mobileNo, GetMessage(AppVars.objPolicyConfiguration.DespatchTextForPDA.ToStr().Trim(), job, jobId), job.SMSType.ToInt());
                                    }
                                }).Start();
                            }



                            if (AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                            {
                                new Thread(delegate()
                                {

                                    JATEmail.SendBookingCompletionEmail(General.GetObject<Booking>(c => c.Id == jobId));
                                }).Start();

                            }


                            if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateThirdPartyJobStatus(null, jobId, "completed");
                            }



                        }
                    }

                    else if (jobStatusId == Enums.BOOKINGSTATUS.FOJ)
                    {


                        notifyMsg = driverNo + "FOJ ACCEPT";

                        captionText = "Follow-On-Job is Accepted by Driver " + driverNo;


                        contentImage = (Image)Resources.Resource1.acceptJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";



                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.REJECTED)
                    {

                        notifyMsg = driverNo + "REJECTED";

                        captionText = "Job # " + bookingNo + " is Rejected by Driver " + driverNo;

                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";

                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOSHOW)
                    {

                        notifyMsg = driverNo + "NO SHOW";
                        captionText = "Job # " + bookingNo + " No Show";
                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOPICKUP)
                    {


                        notifyMsg = driverNo + "NP";

                        captionText = "Job # " + bookingNo + " No Pickup";
                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";
                    }

                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                    {
                        notifyMsg = driverNo + "NOT ACCEPTED";

                        captionText = "Job # " + bookingNo + " is not accepted by Driver " + driverNo;

                        contentImage = (Image)Resources.Resource1.timeout;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";
                    }
                }
                else if (message.StartsWith("auth>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(ShowJobAuthForm), message, "");

                    }
                    else
                    {
                        ShowJobAuthForm(message, "");
                    }




                    return;


                }

                //else if (message.StartsWith("broadcast auth job>>"))
                //{

                //    if (values[1].ToStr() != Environment.MachineName)
                //    {
                //        frmAuth = new frmAuthorization(values[2].ToLong(), values[3].ToInt(), values[4].ToInt(), values[5].ToInt());
                //        frmAuth.ShowDialog();

                //        frmAuth.Dispose();
                //        frmAuth = null;

                //        RefreshAllDashBoard();

                //       // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DASHBOARD);

                //        new BroadcasterData().BroadCastToAll("**broadcast close auth job>>" + Environment.MachineName);
                //    }                   

                //    return;                  
                //}

                else if (message.StartsWith("broadcast close auth job>>"))
                {


                    if (values[1].ToStr() != Environment.MachineName)
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(CloseJobAuthorizationForm));
                        }
                        else
                        {
                            CloseJobAuthorizationForm();

                        }
                    }

                    return;
                }

                else if (message.StartsWith("authorize app booking>>"))
                {
                    if (values.Count() > 2)
                    {


                        long Ids = values[3].ToLong();

                        if (Ids > 0)
                        {
                         //   int defaultclientid = values[1].ToInt();
                            string via = string.Empty;
                            List<Booking> listofFetch = new List<Booking>();


                            var booking = General.GetObject<Booking>(c => c.Id == Ids);

                            if (booking != null)
                            {

                               
                                via = string.Empty;

                                if (booking.Booking_ViaLocations.Count > 0)
                                {
                                    int cnt = 1;
                                    via = string.Join("\r\n", booking.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue.ToStr()).ToArray<string>());
                                }


                                listofFetch.Add(new Booking

                                {
                                    Id = booking.Id,
                                    BookingNo = booking.BookingNo,
                                    CustomerName = booking.CustomerName,
                                    CustomerPhoneNo = booking.CustomerPhoneNo,
                                    CustomerMobileNo = booking.CustomerMobileNo,
                                    CustomerEmail = booking.CustomerEmail,
                                    FromAddress = booking.FromAddress,

                                    ToAddress = booking.ToAddress,
                                    PickupDateTime = booking.PickupDateTime,
                                    BookingTypeId = booking.BookingTypeId,
                                    AddBy = 0,
                                    FromDoorNo = booking.FromDoorNo,
                                    FromStreet = booking.FromStreet,
                                    DistanceString = via,
                                    FareRate = booking.FareRate,
                                    EditLog = "1",
                                    OnlineBookingId=booking.OnlineBookingId,
                                    CompanyId=booking.CompanyId,
                                    CompanyCreditCardDetails=booking.Gen_Company.DefaultIfEmpty().CompanyName,
                                    IsQuotation=true, 
                                    DriverWaitingMins=booking.Gen_Company.DefaultIfEmpty().SysGenId
                                });

                               
                            }


                            if (listofFetch.Count > 0)
                            {

                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), listofFetch);


                                }
                                else
                                {
                                    ShowOnlineBookingsPopup(listofFetch);

                                }
                            }
                        }
                    }

                    return;
                }               

                else if (message.StartsWith("cancelled webbooking>>"))
                {

                    long jobId = values[3].ToLong();
                    string cancelReason = values[4].ToStr();

            

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIOnlineBookingMultiDelegate(ShowCancelBookingPopup), jobId,null);


                    }
                    else
                    {
                        ShowCancelBookingPopup(jobId, null);

                    }


                    return;

                }

                else if (message.StartsWith("update webbooking>>"))
                {

                    if (values.Count() > 2)
                    {


                        long jobId = values[3].ToLong();

                        if (jobId > 0)
                        {
                            //   int defaultclientid = values[1].ToInt();


                            if (jobId == 0)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegate(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));


                                }
                                else
                                {
                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
                                }

                            }
                            else
                            {
                                if (this.InvokeRequired)
                                    this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, null);

                                else
                                    AddNewWebBooking(jobId, null);


                            }
                        }
                    }

                    return;

                  

                }

                else if (message.StartsWith("authorize web>>"))
                {
                    //if (values.Count() > 2)
                    //{


                    if (values.Count() > 2 && values[2] != Environment.MachineName)
                    {

                        if (HasWebBookingTab)
                        {

                            long jobId = values[3].ToLong();
                            if (jobId == 0)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegate(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));


                                }
                                else
                                {
                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
                                }

                            }
                            else
                            {
                                if (this.InvokeRequired)
                                    this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, null);

                                else
                                    AddNewWebBooking(jobId, null);


                            }




                        }
                        else
                        {


                            long[] Ids = values.Skip(3).Select(c => c.ToLong()).ToArray<long>();

                            if (Ids.Count() > 0)
                            {




                                try
                                {


                                    int defaultclientid = values[1].ToInt();
                                    string via = string.Empty;
                                    List<Booking> listofFetch = new List<Booking>();

                                    foreach (var a in General.GetQueryable<Booking>(c => Ids.Contains(c.Id)))
                                    {
                                        via = string.Empty;

                                        if (a.Booking_ViaLocations.Count > 0)
                                        {
                                            int cnt = 1;
                                            via = string.Join("\r\n", a.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue.ToStr()).ToArray<string>());


                                        }


                                        listofFetch.Add(new Booking

                                        {
                                            Id = a.Id,
                                            BookingNo = a.BookingNo,
                                            CustomerName = a.CustomerName,
                                            CustomerPhoneNo = a.CustomerPhoneNo,
                                            CustomerMobileNo = a.CustomerMobileNo,
                                            CustomerEmail = a.CustomerEmail,
                                            FromAddress = a.FromAddress,

                                            ToAddress = a.ToAddress,
                                            PickupDateTime = a.PickupDateTime,
                                            BookingTypeId = a.BookingTypeId,
                                            AddBy = defaultclientid,
                                            FromDoorNo = a.FromDoorNo,
                                            FromStreet = a.FromStreet,
                                            DistanceString = via,
                                            FareRate = a.FareRate,
                                            EditLog = "1",


                                            CancelReason = a.Gen_PaymentType.PaymentType.ToStr(),
                                            BoundType = a.Fleet_VehicleType.VehicleType.ToStr().ToProperCase(),

                                            OnlineBookingId = a.OnlineBookingId,
                                            CompanyId = a.CompanyId,
                                            IsCompanyWise = a.IsCompanyWise,
                                            CompanyCreditCardDetails = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().CompanyName : "",
                                            IsQuotation =a.CompanyId != null ? true : false,
                                            DriverWaitingMins = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().SysGenId : null




                                        });

                                    }



                                  //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs.txt", DateTime.Now + ", ids:" + Ids.ToStr() + Environment.NewLine);

                               


                                if (listofFetch.Count > 0)
                                {

                                    if (this.InvokeRequired)
                                    {
                                        this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), listofFetch);
                                    }
                                    else
                                    {
                                        ShowOnlineBookingsPopup(listofFetch);
                                    }
                                }



                                }
                                catch (Exception ex)
                                {
                                  //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs_exception.txt", DateTime.Now + ", ids:" + Ids.ToStr() + "," + ex.Message + Environment.NewLine);

                                }

                            }
                        }
                    }

                    return;
                }


                else if (message.StartsWith("close authorize web>>"))
                {


                    //if (values.Count() == 2 && values[1] != Environment.MachineName)
                    //{


                    if (HasWebBookingTab)
                    {
                        // if (worker.IsBusy == false)
                        //  {

                        if (values.Count() == 3 && values[1] != Environment.MachineName)
                        {
                            if (values[2].ToStr() == "accept")
                            {

                                if (this.InvokeRequired)
                                {

                                    this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));
                                  
                                }
                                else
                                {
                                    RefreshTodayAndPreData();
                                   

                                }

                                InitializeOnlineBookingWorker(values[2].ToStr());
                            }
                            else
                            {
                                //if (this.InvokeRequired)
                                //{
                                //    this.BeginInvoke(new UIDelegate(PopulateDeclinedWebBookings));

                                //}
                                //else
                                //{
                                //    PopulateDeclinedWebBookings();
                                //}

                                InitializeOnlineBookingWorker(values[2].ToStr());

                            }

                        }
                        //    }

                    }
                    else
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(CloseWebAuthorizeForm));
                        }
                        else
                        {
                            CloseWebAuthorizeForm();

                        }
                    }


                    //  }

                    return;


                }

                else if (message.StartsWith("pending accept web>>"))
                {


                    if (values[1] != Environment.MachineName)
                    {


                        if (HasWebBookingTab)
                        {
                            //if (this.InvokeRequired)
                            //{
                            //    this.BeginInvoke(new UIDelegate(PopulateWebBookingsGrid));
                            //}
                            //else
                            //{

                            //    PopulateWebBookingsGrid();

                            //}
                            InitializeOnlineBookingWorker(values[2].ToStr());
                        }
                    }

                    return;

                }



                else if (message.StartsWith("broadcast close logout auth>>"))
                {


                    if (values[1].ToStr() != Environment.MachineName)
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(CloseLogoutAuthorizationForm));
                        }
                        else
                        {
                            CloseLogoutAuthorizationForm();

                        }
                    }

                    return;
                }


                else if (message.StartsWith("voice request>>"))
                {


                    if (IsServer)
                    {
                        int driverId = values[1].ToInt();

                        var objDrv = General.GetObject<Fleet_Driver>(c => c.Id == driverId);

                        if (objDrv != null)
                        {


                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UIParameterizedDelegate(ShowVoiceRequest), objDrv.DriverNo, objDrv.PDAMobileNo.ToStr().Trim());
                            }
                            else
                            {

                                ShowVoiceRequest(objDrv.DriverNo, objDrv.PDAMobileNo.ToStr().Trim());
                            }



                            MethodInvoker invokerM = new MethodInvoker(delegate()
                            {

                                AddNotifyMessage(objDrv.DriverNo + " VR");
                            });

                            this.Invoke(invokerM);
                        }

                    }
                    
                    return;
                }

                else if (message.StartsWith("dropoffzone"))
                {

                    Booking job = General.GetObject<Booking>(c => c.Id == values[2].ToLong());


                    if (job == null)
                        return;



                    notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + " DropOff Plot : " + job.Gen_Zone.DefaultIfEmpty().ZoneName;

                    captionText = job.Fleet_Driver.DefaultIfEmpty().DriverNo + " DropOff Plot : " + job.Gen_Zone.DefaultIfEmpty().ZoneName;


                    contentImage = (Image)Resources.Resource1.clear;

                    alertSound = System.Media.SystemSounds.Asterisk;
                    contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                    contentText += "Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                    }
                    else
                    {
                        RefreshDashBoardDrivers();
                    }


                }
                else if (message.StartsWith("changeaddress"))
                {


                    if (values.Count() == 5)
                    {


                        notifyMsg = "Drv " + values[3].ToStr() + " Change Destination";

                        captionText = notifyMsg;

                        contentImage = (Image)Resources.Resource1.clear;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + values[4].ToStr() + "</span></b></html>";
                        // contentText += "Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                        }
                        else
                        {
                            RefreshDashBoardDrivers();
                        }
                    }
                }

                else if (message.StartsWith("job received>>"))
                {


                    captionText = "Job has been Received to Driver " + values[1].ToStr();
                    alertSound = System.Media.SystemSounds.Question;
                    contentText = "<html><b><span><color=Blue>Pickup Point : " + values[2] + Environment.NewLine;
                    contentText += "Destination : " + values[3] + "</span></b></html>";
                    contentImage = (Image)Resources.Resource1.receive;



                }

                else if (message.StartsWith("driver bid>>"))
                {



                    var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == values[1].ToLong());

                    if (row != null)
                    {
                        string driverNo = string.Empty;


                        string refNo = row.Cells["RefNumber"].Value.ToStr();


                        var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                        if (driverRow != null)
                        {
                            driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                        }
                        else
                        {
                            driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                            if (driverRow != null)
                            {
                                driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                            }


                        }

                        if (!string.IsNullOrEmpty(driverNo))
                        {
                            

                            RefreshActiveData();

                            captionText = "Driver No '" + driverNo + "' is Bidding on Job " + refNo;
                            alertSound = System.Media.SystemSounds.Beep;
                            contentText = "<html><b><span><color=Blue>Pickup Point : " + row.Cells["From"].Value.ToStr() + Environment.NewLine;
                            contentText += "Pickup Time : " + row.Cells["Time"].Value.ToStr() + "</span></b></html>";

                            contentImage = (Image)Resources.Resource1.bid3;
                        }
                    }
                    else
                    {
                        return;

                    }


                }

                else if (message.StartsWith("onbid despatch>>"))
                {



                    var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == values[1].ToLong());

                    if (row != null)
                    {


                        string driverNo = string.Empty;




                        var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                        if (driverRow != null)
                        {
                            driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                        }
                        else
                        {
                            driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                            if (driverRow != null)
                            {
                                driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                            }


                        }

                        if (!string.IsNullOrEmpty(driverNo))
                        {
                            
                            RefreshActiveData();


                            string msg = values[3].ToStr() + " " + driverNo;
                            string refNo = row.Cells["RefNumber"].Value.ToStr() + " at " + row.Cells["Time"].Value.ToStr();


                            captionText = msg;
                            alertSound = System.Media.SystemSounds.Beep;
                            contentText = "<html><b><span><color=Blue>Pickup Point : " + row.Cells["From"].Value.ToStr() + Environment.NewLine;
                            contentText += "Details : " + refNo + "</span></b></html>";

                            contentImage = (Image)Resources.Resource1.bid3;
                        }
                    }


                }

                else if (message.StartsWith("driver price bid>>"))
                {

                    string driverNo = values[3].ToStr();
                    string refNo = values[4].ToStr();
                    decimal rate = values[5].ToDecimal();



                    notifyMsg = string.Empty;

                    captionText = "Driver " + driverNo + " Bidding";
                    alertSound = System.Media.SystemSounds.Beep;
                    contentText = "<html><b><span><color=Blue>Job Ref # : " + refNo + Environment.NewLine;
                    contentText += "Bid : £" + rate + "</span></b></html>";

                    contentImage = (Image)Resources.Resource1.bid3;

                    //notifyMsg = "Drv " + driverNo + " Bid ";                  

                    RefreshBiddingJobsData();

                }



                if (DisablePopupNotifications)
                {
                    if (AppVars.objPolicyConfiguration.JobActionsNotification.ToBool())
                    {
                        if (captionText == "DRIVER ARRIVED" || captionText.Contains("is Accepted"))
                        {

                            MethodInvoker invoker = new MethodInvoker(delegate()
                            {

                                this.ShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);


                            });

                            this.Invoke(invoker);
                        }
                    }


                }
                else
                {

                    //for (int i = 0; i < 100000; i++)
                    //{







                        this.Invoke((MethodInvoker)delegate
                         {
                             UpdateNotifications(notifyMsg, captionText, contentText, contentImage, alertSound, false, null, null, null);
                          
                         });

                        //MethodInvoker invoker = new MethodInvoker(delegate()
                        //{
                        //    UpdateNotifications();

                        //    //this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);
                        //    //AddNotifyMessage(notifyMsg);

                        //});

                        //this.Invoke(invoker);


                  // }
                }

              //  IsUpdating = false;
            }
            catch (Exception ex)
            {

              //  IsUpdating = false;
            }

        }


        private void UpdateNotifications(string msg, string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);
            AddNotifyMessage(msg);

        }

       

        private void SendVerificationCode(string mobileNo, string UDID, string deviceInfo)
        {

            Random c = new Random();
            string code = c.Next(1000, 9999).ToStr();

            if (UDID.Length > 36)
                UDID = UDID.Substring(0, 35);

            new TaxiDataContext().stp_RegisteringApp(deviceInfo, UDID, code.ToInt(), mobileNo);

            SendSMS(mobileNo, "Your " + AppVars.objSubCompany.CompanyName.ToStr() + " App Verification code is :" + code,Enums.SMSACCOUNT_TYPE.MODEMSMS);
        }


        private void ShowLogoutAuthForm(string msg, string msg2)
        {

            if (chkShowAuthorization.Checked)
            {


                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);

                frmDriverLogoutAuthorization frmlogAuth = new frmDriverLogoutAuthorization(values[1].ToInt(), values[2].ToStr());
                //  frmAuth.ShowDialog();
              //  frmlogAuth.StartPosition = FormStartPosition.CenterScreen;
                frmlogAuth.Show();
            }
            //RefreshData();

        }


        private void ShowJobAuthForm(string msg, string msg2)
        {
            if (chkShowAuthorization.Checked)
            {
                try
                {




                    string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);

                    frmAuth = new frmAuthorization(values[1].ToLong(), values[2].ToInt(), values[3].ToInt(), values[4].ToInt());
                    //  frmAuth.ShowDialog();
                  //  frmAuth.StartPosition = FormStartPosition.Manual;
                    frmAuth.Show();
                }
                catch (Exception ex)
                {


                }
            }
          

        }


        private void RefreshAllDashBoard()
        {
            if (this.InvokeRequired)
            {

                this.BeginInvoke(new UIDelegate(RefreshData));
            }
            else
            {

                RefreshData();
            }



        }



        private void CloseJobAuthorizationForm()
        {

            if ( frmAuth != null)
            {
                frmAuth.Close();
                frmAuth.Dispose();
                frmAuth = null;


                RefreshData();
            }

        }


        private void CloseLogoutAuthorizationForm()
        {
            frmDriverLogoutAuthorization frmLog = ((frmDriverLogoutAuthorization)System.Windows.Forms.Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmDriverLogoutAuthorization"));




            if (frmLog != null)
            {
                frmLog.Close();



                RefreshDashBoardDrivers();

                //LoadDriversGrid();

            }
        }




        private void CloseWebAuthorizeForm()
        {
            try
            {

                frmFetchedOnlineBookingsPopup frmFetchPopup = (frmFetchedOnlineBookingsPopup)Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmFetchedOnlineBookingsPopup");

                if (frmFetchPopup != null)
                {

                    frmFetchPopup.IsAttachClosing = false;
                    frmFetchPopup.Close();
                    frmFetchPopup.Dispose();
                    frmFetchPopup = null;


                    RefreshTodayAndPreData();
                }
            }
            catch (Exception ex)
            {


            }
        }





        private void ShowVoiceRequest(string name, string phoneNumber)
        {
            try
            {





                frmVoiceRequest frmVoice = new frmVoiceRequest(name, phoneNumber);
                frmVoice.StartPosition = FormStartPosition.CenterScreen;
                frmVoice.Show();
            }
            catch (Exception ex)
            {


            }

        }



        private void UpdateOnlineAppBookingStatus(long onlineJobId, string refNo, string status)
        {
            try
            {

                if (onlineJobId == 0)
                {

                    refNo = refNo.Split('/')[1];

                    string newRefNo = string.Empty;
                    for (int i = 0; i < refNo.Length; i++)
                    {
                        if (char.IsLetter(refNo[i]))
                            newRefNo += refNo[i];
                    }


                    refNo = refNo.Replace(newRefNo, "").Trim();
                    onlineJobId = refNo.ToLong();
                }


                if (AppVars.objPolicyConfiguration.PDANewWeekMessageByDay.ToStr().Trim().ToLower() == "old")
                {
                    status += "," + AppVars.objPolicyConfiguration.ListenerIP.ToStr().Trim();
                    new WebDataClassesDataContext().spUpdateBookingFromApp(null, onlineJobId, status);
                }
                else
                {

                    new DataClassesOnlineVehicleDataContext().SP_UpdateAppBookingStatus(null, onlineJobId, status);
                  
                }

            }
            catch (Exception ex)
            {


            }
        }

        private string GetMessage(string message, Booking objBooking, long jobId)
        {
            try
            {


                string msg = message;

                object propertyValue = string.Empty;
                foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                {


                    switch (tag.TagObjectName)
                    {
                        case "booking":

                            if (objBooking == null)
                                objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objBooking.GetType().GetProperty(val[0]).GetValue(objBooking, null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(tag.ConditionNotNull) && objBooking.GetType().GetProperty(tag.ConditionNotNull) != null)
                                {

                                    if (tag.ConditionNotNull.ToStr() == "BabySeats" && tag.TagPropertyValue.ToStr() == "BabySeats")
                                    {
                                        propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking, null);

                                        if (!string.IsNullOrEmpty(propertyValue.ToStr().Trim()) && propertyValue.ToStr().Contains("<<<"))
                                        {
                                            string[] arr = propertyValue.ToStr().Split(new string[] { "<<<" }, StringSplitOptions.None);

                                            propertyValue = "B Seat 1 : " + arr[0].ToStr() + Environment.NewLine + "B Seat 2 : " + arr[1].ToStr();

                                        }

                                    }
                                    else if (objBooking.GetType().GetProperty(tag.ConditionNotNull).GetValue(objBooking, null) != null)
                                    {
                                        propertyValue = tag.ConditionNotNullReplacedValue.ToStr();
                                    }                                

                                }
                                else
                                {

                                    if (tag.ExpressionValue.ToStr().Trim().Length > 0)
                                    {
                                        try
                                        {
                                            char[] splitArr = new char[] { ',' };
                                            char[] splitArr2 = new char[] { '|' };
                                            string[] val = tag.ExpressionValue.Split(splitArr);

                                            string replaceMessage = val[0].ToStr();
                                            int? expressionApplied = null;
                                            foreach (var item in val.Where(c=>c.EndsWith("|replacemessage")==false))
                                            {
                                                var str = item.Split(splitArr2);

                                                if (objBooking.GetType().GetProperty(str[0]) != null)
                                                {
                                                    if (objBooking.GetType().GetProperty(str[0]).GetValue(objBooking, null).ToStr() == str[1])
                                                    {
                                                        if (expressionApplied == null)
                                                            expressionApplied = 1;
                                                    }
                                                    else
                                                        expressionApplied = null;

                                                }
                                            }

                                            if (expressionApplied != null && expressionApplied == 1)
                                            {
                                                var replacearr = replaceMessage.Split(splitArr2);

                                                msg = msg.Replace(replacearr[0], replacearr[1]);
                                            }
                                            else
                                            {
                                                propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);
                                            }
                                        }
                                        catch
                                        {
                                            propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);

                                        }

                                    }
                                    else
                                    {

                                        propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);
                                    }



                                }
                            }


                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking, null);
                            }
                            break;


                        case "Booking_ViaLocations":
                            if (tag.TagPropertyValue == "ViaLocValue")
                            {


                                string[] VilLocs = null;
                                int cnt = 1;
                                VilLocs = objBooking.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                if (VilLocs.Count() > 0)
                                {

                                    string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                    propertyValue = Locations;
                                }
                                else
                                    propertyValue = string.Empty;

                            }
                            break;


                        case "driver":


                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(val[0]).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }

                            else
                            {
                                propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }

                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }
                            break;


                        case "Fleet_Driver_Image":


                            
                            


                            if (!string.IsNullOrEmpty(tag.TagPropertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                if (objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Images.Count > 0)
                                {
                                    string linkId = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Images[0].PhotoLinkId.ToStr();

                                    if (linkId.ToStr().Length == 0)
                                        propertyValue = " ";
                                    else
                                    {
                                       // propertyValue = "http://cabtreasure.co.uk/drv.aspx?ref=" + objBooking.BookingNo.ToStr() + ":" + linkId;
                                        if (tag.TagMemberValue.ToStr().Trim().ToLower() == "<trackdrv>")
                                        {
                                            string encrypt = Cryptography.Encrypt(objBooking.BookingNo.ToStr() + ":" + linkId + ":" + AppVars.objPolicyConfiguration.ListenerIP.ToStr().Trim() + ":" + objBooking.Id, "softeuroconnskey", true);
                                            propertyValue = "http://cabtreasure.co.uk/tck.aspx?q=" + encrypt;

                                        }
                                        else
                                        {

                                            propertyValue = "http://cabtreasure.co.uk/drv.aspx?ref=" + objBooking.BookingNo.ToStr() + ":" + linkId;
                                        }
                                    }
                                }
                                else
                                    propertyValue = " ";

                               
                          //      propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }
                            break;


                        case "Fleet_Driver_Documents":



                            if (!string.IsNullOrEmpty(tag.TagPropertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {

                                if (tag.TagPropertyValue.Contains("PHC Vehicle"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.PCOVehicle)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();
                                                  

                                }
                                else if (tag.TagPropertyValue.Contains("PHC Driver"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.PCODriver)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();


                                }
                                else if (tag.TagPropertyValue.Contains("License"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.LICENSE)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();


                                }
                                else if (tag.TagPropertyValue.Contains("Insurance"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.Insurance)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();

                                }
                                else if (tag.TagPropertyValue.Contains("MOT"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.MOT)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();

                                }



                            }
                            break;



                        default:
                            if (objBooking.SubcompanyId == null)
                                propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);
                            else
                                propertyValue = objBooking.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking.Gen_SubCompany, null);

                            break;

                    }




                    msg = msg.Replace(tag.TagMemberValue,
                        tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                }


                return msg.Replace("\n\n", "\n");
            }
            catch (Exception ex)
            {
                // ENUtils.ShowMessage(ex.Message);
                return "";
            }
        }


        private void SendSMS(string mobileNo, string message,int smsType)
        {
          

            string rtnMsg = string.Empty;
            EuroSMS objSMS = new EuroSMS();
            objSMS.Message = message;
            objSMS.BookingSMSAccountType = smsType;

            string mobNo = mobileNo;


            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS.ToNumber = mobNo.Trim();

           

            objSMS.Send(ref rtnMsg);

          


        }


        private void SendSMSDrvAndPassenger(string passengerMobileNo, string Passengermessage,string driverMobileNo,string driverMsg,int smsType)
        {
            

            string rtnMsg = string.Empty;
            EuroSMS objSMS = new EuroSMS();
            objSMS.Message = Passengermessage;
            objSMS.BookingSMSAccountType = smsType;

            string mobNo = passengerMobileNo;


            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS.ToNumber = mobNo.Trim();
            objSMS.Send(ref rtnMsg);



            if(AppVars.enableSMSService==false)
               System.Threading.Thread.Sleep(5000);


            EuroSMS objSMS2 = new EuroSMS();
            objSMS2.Message = driverMsg;

            mobNo = driverMobileNo;

            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS2.ToNumber = mobNo.Trim();
            objSMS2.Send(ref rtnMsg);

        }



        void muteoptionItem_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                if (item.Text.ToLower() == "mute")
                {
                    item.Text = "Un-mute";
                    sp.Stop();
                }
                else
                {
                    item.Text = "Mute";
                    sp.PlayLooping();
                }
            }
            catch
            {

            }
        }



        void optionItem_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == item.Name.ToInt());
                if (row == null)
                    row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == item.Name.ToInt());

                ShowMessageForm(row, item.Name.ToInt());



                if (item.Tag != null && item.Tag is RadDesktopAlert)
                {
                    (item.Tag as RadDesktopAlert).AutoClose=true;
                    (item.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                    (item.Tag as RadDesktopAlert).Hide();
                    (item.Tag as RadDesktopAlert).Dispose();



                }
            }
            catch
            {

            }
        }

        void optionItemClose_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                if (item.Tag != null && item.Tag is RadDesktopAlert)
                {
                    (item.Tag as RadDesktopAlert).AutoClose = true;
                    (item.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                    (item.Tag as RadDesktopAlert).Hide();
                    (item.Tag as RadDesktopAlert).Dispose();
                }
            }
            catch
            {

            }
        }



        private void ShowMessageForm(GridViewRowInfo row, int driverId)
        {
            try
            {

                if (row != null)
                {
                    row.Cells["HasNewMsg"].Tag = null;
                }

                var list = System.Windows.Forms.Application.OpenForms.OfType<Form>().Where(c => c.Name == "frmMessages").ToList();
                foreach (var form in list)
                {
                    form.Close();

                }

                frmMessages frm = new frmMessages(driverId);
                frm.StartPosition = FormStartPosition.CenterScreen;
                frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }




        private bool IsPanicMode = false;
        private void PanicMode()
        {

            try
            {

                if (grdDriverWaiting.Rows.Any(c => c.Cells["IsPanic"].Value.ToStr() == "Panic")
                || grdOnBoardDriver.Rows.Any(a => a.Cells["IsPanic"].Value.ToStr() == "Panic"))
                {


                    GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["IsPanic"].Value.ToStr() == "Panic");

                    int panicDriverId = 0;

                    if (row != null)
                    {


                        panicDriverId = row.Cells["DriverId"].Value.ToInt();

                    }



                    if (panicDriverId == 0)
                    {
                        row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["IsPanic"].Value.ToStr() == "Panic");


                        if (row != null)
                        {
                            panicDriverId = row.Cells["DriverId"].Value.ToInt();

                        }
                    }



                    frmPanicAlert alert = Application.OpenForms["frmPanicAlert"] as frmPanicAlert;
                    if (alert != null)
                    {
                        alert.DriverId = panicDriverId;
                        alert.WindowState = FormWindowState.Normal;
                        alert.BringToFront();
                        //  alert.Activate();
                    }
                    else
                    {
                        alert = new frmPanicAlert();
                        // if (IsAlert == false)
                        // {
                        // IsAlert = true;
                        alert.DriverId = panicDriverId;
                        alert.StartPosition = FormStartPosition.CenterScreen;
                        alert.BringToFront();
                        alert.Show();
                        // }
                    }

                    IsPanicMode = true;

                }

                else
                {
                    frmPanicAlert alert = Application.OpenForms["frmPanicAlert"] as frmPanicAlert;
                    if (alert != null)
                    {
                        alert.Close();


                    }


                    IsPanicMode = false;


                }
            }
            catch (Exception ex)
            {


            }

        }

     


        private void InitializeMaps()
        {
            if (Map_PendingGoogle != null)
                return;

            this.Map_PendingGoogle = new System.Windows.Forms.WebBrowser();

            this.pnlOnPlotDrivers.Controls.Add(this.Map_PendingGoogle);


            // 
            // Map_PendingGoogle
            // 
            this.Map_PendingGoogle.Dock = System.Windows.Forms.DockStyle.Fill;
            this.Map_PendingGoogle.Location = new System.Drawing.Point(0, 0);
            this.Map_PendingGoogle.MinimumSize = new System.Drawing.Size(20, 20);
            this.Map_PendingGoogle.Name = "Map_PendingGoogle";
            this.Map_PendingGoogle.Size = new System.Drawing.Size(580, 250);
            this.Map_PendingGoogle.TabIndex = 11;
            this.Map_PendingGoogle.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.Map_PendingGoogle_PreviewKeyDown);
            this.Map_PendingGoogle.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(this.Map_PendingGoogle_DocumentCompleted);


            Map_PendingGoogle.BringToFront();


            string defaultLocation = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();

            if (!string.IsNullOrEmpty(AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim()))
                defaultLocation = General.GetPostCodeMatch(AppVars.objPolicyConfiguration.BaseAddress.ToStr().ToUpper());



            if (string.IsNullOrEmpty(defaultLocation))
            {
                defaultLocation = AppVars.objPolicyConfiguration.BaseAddress.ToStr().ToUpper();


            }
            else
                defaultLocation += ", UK";

            string url = "<html><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></head><body><iframe" +
                                    " width=\"960\"" +
                                    " height=\"710\"" +
                                    " \frameborder=\"0\" style=\"border:0;margin-left:-10;margin-top:-10;margin-right:-10\"" +
                                    " src=\"https://www.google.com/maps/embed/v1/directions?key=AIzaSyAFkZHqTas4EKYEEsk8J3aQh0zQJ-tsWmY&origin=" +
                                     defaultLocation + "&destination=" + defaultLocation + "&avoid=tolls|highways" + "\">" +
                                  "</iframe></body></html>";

            // string url = "http://maps.google.com/?output=embed&q=" + defaultLocation;


            Map_PendingGoogle.DocumentText = url;


            Map_PendingGoogle.ScriptErrorsSuppressed = true;

        }





        private void AddDeleteColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.BestFit();

            col.Name = "btnDelete";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Delete";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

        }


        private void AddCommandColumn(RadGridView grid, string colName, string caption)
        {

            if (grid.Columns.Contains(colName))
                return;


            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 60;

            col.Name = colName;
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = caption;
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

        }



        private void grid_CommandCellClick(object sender, EventArgs e)
        {
            try
            {

                GridCommandCellElement gridCell = (GridCommandCellElement)sender;

                
                    if (gridCell.ColumnInfo.Name == "btnDelete")
                    {
                        string caption = gridCell.GridControl.Name.ToLower().Contains("quotation") ? "Quotation" : "Booking";

                        if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete a " + caption + " ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                        {
                            RadGridView grid = gridCell.GridControl;
                            if(grid.CurrentRow!=null)
                            {
                                 grid.CurrentRow.Delete();
                            }
                        }
                    }
                    else if (gridCell.ColumnInfo.Name == "ColEdit")
                    {
                        ViewDetailForm(gridCell.GridControl.CurrentRow);


                    }
                    else if (gridCell.ColumnInfo.Name == "btnCancel")
                    {
                        long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                        if (jobId != 0)
                        {
                            string refNo = gridCell.GridControl.CurrentRow.Cells["RefNumber"].Value.ToStr();
                            int BookingTypeId = gridCell.GridControl.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                            string mobileNo = gridCell.GridControl.CurrentRow.Cells["MobileNo"].Value.ToStr();



                            CancelBooking(jobId,refNo,BookingTypeId,mobileNo);

                        }

                    }
                    else if (gridCell.ColumnInfo.Name == "btnJDespatch")
                    {
                        long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                        if (jobId != 0)
                        {
                            OnDespatch(jobId);

                        }

                    }

                    else if (gridCell.ColumnInfo.Name == "btnConfirm")
                    {

                        long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                        if (jobId != 0)
                        {

                            General.ConfirmQuotation(jobId);                         

                            RefreshActiveData();

                            grdQuotations.RowsChanging -= new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                            grdQuotations.RowsChanged -= new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);

                            gridCell.GridControl.CurrentRow.Delete();


                            grdQuotations.RowsChanging += new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                            grdQuotations.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                        }


                    }
                
                
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }


        //public void LoadDriverWaitingGrid()
        //{
        //    try
        //    {


        //        //FOJDRIVER

        //      //  int rowIndex = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Index : -1;

        //        var list1 = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true &&
        //                               (a.DriverWorkStatusId == null || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
        //                                || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.FOJ
        //                                           || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONBREAK
                                                  

        //                                           ));



        //        var query = from a in list1
        //                    orderby a.QueueDateTime
        //                    // orderby a.QueueNo
        //                    select new
        //                    {
        //                        Id = a.Id,
        //                        DriverId = a.DriverId,
        //                        DriverNo = a.Fleet_Driver.DriverNo,
        //                        Name = a.Fleet_Driver.DriverName,
        //                        Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //                        CurrentJobId = a.CurrentJobId,

        //                        //  OnJob = a.CurrentJobId != null ? a.CurrentDestinationPostCode : "",
        //                        OnJob = a.CurrentDestinationPostCode != string.Empty ? a.CurrentDestinationPostCode : "",
        //                        LoginDate = a.LoginDateTime,
        //                        WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //                        IsPanic = a.IsPanic == null || a.IsPanic == true ? "Panic" : "CalmDown",
        //                        PDA = "",
        //                        HasPDA = true,
        //                        BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //                        HasNewMsg = "",
        //                        a.LoginFrom,

        //                    };


        //        grdDriverWaiting.DataSource = query.ToList();

        //     //   grdDriverWaiting.CurrentRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Index == rowIndex);


        //        UpdateDriversCounter();
        //        UpdateDriverWaitingSince();
        //    }
        //    catch (Exception ex)
        //    {


        //    }
        //}


        //public void LoadDriverOnBoardGrid()
        //{
        //    try
        //    {

        //      //  int rowIndex = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Index : -1;

        //        var list1 = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
        //               && (a.DriverWorkStatusId != null &&
        //               (a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE
        //               || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
        //               || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ARRIVED
        //               || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONROUTE)));


        //        var query = from a in list1
        //                    orderby a.QueueDateTime
        //                    // orderby a.QueueNo
        //                    select new
        //                    {
        //                        Id = a.Id,
        //                        DriverId = a.DriverId,
        //                        DriverNo = a.Fleet_Driver.DriverNo,// b.DriverNo,
        //                        Name = a.Fleet_Driver.DriverName,// b.DriverName,
        //                        Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //                        //  OnJob = a.CurrentJobId != null ? a.CurrentDestinationPostCode : "",
        //                        CurrentJobId = a.CurrentJobId,

        //                        OnJob = a.CurrentJobId != null ? a.Booking.ToAddress : "",
        //                        // OnJob = a.CurrentDestinationPostCode != string.Empty ? a.CurrentDestinationPostCode : "",
        //                        WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //                        IsPanic = a.IsPanic == true ? "Panic" : "CalmDown",
        //                        PDA = "",
        //                        HasPDA = a.Fleet_Driver.HasPDA,
        //                        BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //                        HasNewMsg = "",
        //                        a.LoginFrom,

        //                    };


        //        grdOnBoardDriver.DataSource = query.ToList();

        //     //   grdOnBoardDriver.CurrentRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Index == rowIndex);



        //        FormatOnBoardGrid();


        //        UpdateDriversCounter();
        //    }
        //    catch
        //    {


        //    }

        //}


     

        private void UpdateDriversCounter()
        {
            try
            {
                lblOnPlot.Text = "Drivers OnPlot ( Online Drivers : " + (grdDriverWaiting.Rows.Count.ToInt() + grdOnBoardDriver.Rows.Count.ToInt()) + " , Available : " + grdDriverWaiting.Rows.Count + " , OnJob : " + grdOnBoardDriver.Rows.Count + ")";

                label3.Text = "Drivers OnBoard - (" + grdOnBoardDriver.Rows.Count + ")";
                lblDriverWaiting.Text = "Drivers Waiting - (" + grdDriverWaiting.Rows.Count + ")";
            }
            catch
            {


            }
        }

       



        //public void LoadPlotsGrid()
        //{


        //    try
        //    {

        //        var list = new TaxiDataContext().stp_GetDriverPlots(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();



        //        var colList = list.Where(c => c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

        //        colList = colList.Union(list.Where(c => c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

        //        DataGridViewTextBoxColumn[] cols = (from a in colList

        //                                            select new DataGridViewTextBoxColumn
        //                                            {

        //                                                Name = a.ShortName,
        //                                                HeaderText = a.ShortName,
        //                                                SortMode = DataGridViewColumnSortMode.NotSortable,
        //                                                FillWeight = 100,
        //                                                Resizable = DataGridViewTriState.False,
        //                                                Width = a.ShortName.Length > 7 ? 80 : 60
        //                                            }).Distinct().ToArray<DataGridViewTextBoxColumn>();




        //        if (grdOnPlotDrivers.Columns.Count > 0)
        //        {
        //            if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
        //            {
        //                grdOnPlotDrivers.Columns.Clear();
        //                grdOnPlotDrivers.Columns.AddRange(cols);


        //            }
        //        }
        //        else
        //        {

        //            grdOnPlotDrivers.Columns.AddRange(cols);
        //        }




        //        if (grdOnPlotDrivers.Columns.Count > 0 && grdOnPlotDrivers.Rows.Count <= 1)
        //        {

        //            for (int i = 0; i < 22; i++)
        //            {
        //                grdOnPlotDrivers.Rows.Add();
        //            }

        //        }





        //        var drvList = (from a in list
        //                       orderby a.orderno, a.plotdate
        //                       where a.driverworkstatusid != null
        //                       select a).ToList();

        //        int cnt = 0;
        //        string tempZoneName = string.Empty;



        //        foreach (var data in drvList)
        //        {

        //            if (data.ShortName != tempZoneName)
        //                cnt = 0;

        //            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;
        //            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;
        //            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

        //            cnt++;

        //            tempZoneName = data.ShortName;

        //        }




        //        if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
        //            grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

        //        grdOnPlotDrivers.CurrentCell = null;

        //        grdOnPlotDrivers.Refresh();


        //    }
        //    catch (Exception ex)
        //    {


        //    }



        //}





        //private void ReInitializeDriverPlotsGrid()
        //{
        //    try
        //    {

        //        grdOnPlotDrivers.Dispose();
        //        pnlOnPlotDrivers.Controls.Remove(grdOnPlotDrivers);

        //        this.grdOnPlotDrivers = new UI.MyGridView();
        //        ((System.ComponentModel.ISupportInitialize)(this.grdOnPlotDrivers)).BeginInit();
        //        ((System.ComponentModel.ISupportInitialize)(this.grdOnPlotDrivers.MasterTemplate)).BeginInit();

        //        this.pnlOnPlotDrivers.Controls.Add(this.grdOnPlotDrivers);

        //        this.grdOnPlotDrivers.AutoCellFormatting = false;
        //        this.grdOnPlotDrivers.Dock = System.Windows.Forms.DockStyle.Fill;
        //        this.grdOnPlotDrivers.EnableCheckInCheckOut = false;
        //        this.grdOnPlotDrivers.HeaderRowBackColor = System.Drawing.Color.SteelBlue;
        //        this.grdOnPlotDrivers.HeaderRowBorderColor = System.Drawing.Color.DarkSlateBlue;
        //        this.grdOnPlotDrivers.Location = new System.Drawing.Point(0, 0);

        //        this.grdOnPlotDrivers.MasterTemplate.AllowAddNewRow = false;
        //        this.grdOnPlotDrivers.MasterTemplate.ShowRowHeaderColumn = false;
        //        this.grdOnPlotDrivers.Name = "grdOnPlotDrivers";
        //        this.grdOnPlotDrivers.PKFieldColumnName = "";
        //        this.grdOnPlotDrivers.ShowGroupPanel = false;
        //        this.grdOnPlotDrivers.ShowImageOnActionButton = true;
        //        this.grdOnPlotDrivers.Size = new System.Drawing.Size(580, 250);
        //        this.grdOnPlotDrivers.TabIndex = 9;
        //        this.grdOnPlotDrivers.Text = "myGridView4";

        //        this.grdOnPlotDrivers.Visible = true;
        //        ((System.ComponentModel.ISupportInitialize)(this.grdOnPlotDrivers.MasterTemplate)).EndInit();
        //        ((System.ComponentModel.ISupportInitialize)(this.grdOnPlotDrivers)).EndInit();



        //        grdOnPlotDrivers.RowCount = 20;
        //        grdOnPlotDrivers.BringToFront();
        //        grdOnPlotDrivers.Font = new Font("Tahoma", 10, FontStyle.Regular);



        //        LoadPlotsGrid();
        //    }
        //    catch (Exception ex)
        //    {


        //    }
        //}





        public void LoadDriversGrid()
        {
            try
            {
                DateTime nowDate = DateTime.Now;

                var list = new TaxiDataContext().stp_GetDashboardDrivers(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();


                //var driverDataList = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
                //  && (a.Fleet_Driver.SubcompanyId == AppVars.DefaultDriverSubCompanyId || AppVars.DefaultDriverSubCompanyId == 0)).Distinct().ToList();



                var query = (from a in list
                             where (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                    || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONBREAK
                                                    || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.FOJ

                                                    || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SINBIN
                                                    )

                             orderby a.QueueDateTime

                             select new
                             {
                                  Id = a.DriverLoginId,
                                  DriverId = a.driverid,
                                  DriverNo = a.driverno,// b.DriverNo,
                                  Name = a.DriverName,// b.DriverName,
                                  Vehicle = a.VehicleType,
                                  CurrentJobId = a.CurrentJobId,
                                  OnJob = a.OnJob,
                                  LoginDate = a.LoginDateTime,
                                  //  OnJob =  a.CurrentDestinationPostCode ,
                                  WorkStatusId =a.driverworkstatusid,
                                  IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                  PDA = "",
                                  HasPDA = a.HasPDA,
                                  BgColor = a.backgroundcolor,
                                  HasNewMsg = "",
                                  a.LoginFrom,
                                  a.ZoneName,
                                  WaitSinceDate = a.WaitSinceOn,
                                 // WaitSinceOn = a.WaitSinceOn != null ? Convert.ToInt32(nowDate.Subtract(a.WaitSinceOn.Value).TotalMinutes) + " mins" : "0 min",
                              //    a.ZoneName
                             }).Distinct().ToList();


                grdDriverWaiting.DataSource = query;


             //   grdDriverWaiting.CurrentRow = null;
              //  grdDriverWaiting.HideSelection = true;


                var query2 = (from a in list
                              where (
                                (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
                             a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
                              || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ARRIVED
                              || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONROUTE))
                              orderby a.QueueDateTime

                              select new
                              {
                                  Id = a.DriverLoginId,
                                  DriverId = a.driverid,
                                  DriverNo = a.driverno,// b.DriverNo,
                                  Name = a.DriverName,// b.DriverName,
                                  Vehicle = a.VehicleType,
                                  CurrentJobId = a.CurrentJobId,
                                  OnJob = a.OnJob,
                                  //  OnJob =  a.CurrentDestinationPostCode ,
                                  WorkStatusId =a.driverworkstatusid,
                                  IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                  PDA = "",
                                  HasPDA = a.HasPDA,
                                  BgColor = a.backgroundcolor,
                                  HasNewMsg = "",
                                  a.LoginFrom
                              }).ToList();


                grdOnBoardDriver.DataSource = query2;
            //    grdOnBoardDriver.HideSelection = true;
             //   grdOnBoardDriver.CurrentRow = null;

                FormatOnBoardGrid();

               // LoadPlotsGrid();


                //Plot grid
               


                var colList = list.Where(c =>c.ShortName!="" && c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

                colList = colList.Union(list.Where(c => c.ShortName != "" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                DataGridViewTextBoxColumn[] cols = (from a in colList

                                                    select new DataGridViewTextBoxColumn
                                                    {

                                                        Name = a.ShortName,
                                                        HeaderText = a.ShortName,
                                                        SortMode = DataGridViewColumnSortMode.NotSortable,
                                                        FillWeight = 100,
                                                        Resizable = DataGridViewTriState.False,
                                                        Width = a.ShortName.Length > 7 ? 80 : 60
                                                    }).Distinct().ToArray<DataGridViewTextBoxColumn>();




                if (grdOnPlotDrivers.Columns.Count > 0)
                {
                    if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                    {
                        grdOnPlotDrivers.Columns.Clear();
                        grdOnPlotDrivers.Columns.AddRange(cols);


                    }
                }
                else
                {

                    grdOnPlotDrivers.Columns.AddRange(cols);
                }




                if (grdOnPlotDrivers.Columns.Count > 0 && grdOnPlotDrivers.Rows.Count <= 1)
                {

                    for (int i = 0; i < 22; i++)
                    {
                        grdOnPlotDrivers.Rows.Add();
                    }

                }





                var drvList = (from a in list
                               orderby a.orderno, a.plotdate
                               where a.driverworkstatusid != null && a.ShortName != ""
                               select a).ToList();

                int cnt = 0;
                string tempZoneName = string.Empty;



                foreach (var data in drvList)
                {

                    if (data.ShortName != tempZoneName)
                        cnt = 0;

                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                    cnt++;

                    tempZoneName = data.ShortName;

                }




                if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
                    grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

                grdOnPlotDrivers.CurrentCell = null;

                grdOnPlotDrivers.Refresh();
                //


                UpdateDriversCounter();
                UpdateDriverWaitingSince();
            }
            catch (Exception ex)
            {


            }
        }


        public void ShowBookingAdvanceStats()
        {
            if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            {

                frmBookingStats frmStats = new frmBookingStats(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());
                frmStats.StartPosition = FormStartPosition.CenterScreen;
                frmStats.ShowDialog();
                frmStats.Dispose();
            }
        }


        List<UM_Form_UserDefinedSetting> listofSearchTabSettings = null;
        private bool ShowPendingJobOnRecentTab=false;

        System.Windows.Forms.Timer tmrAutoRefresh = null;
        List<Gen_Location> listofAirports = null;

        void frmBookingsList_Load(object sender, EventArgs e)
        {


            try
            {

                try
                {
                    this.InitializeForm("frmBooking");
                }
                catch
                {


                }


               
                LoadDriversGrid();
        
                GridViewTextBoxColumn colWS = new GridViewTextBoxColumn();
                colWS.HeaderText = "W/S";
                colWS.Width = 35;
                colWS.Name = "WaitSinceOn";
                grdDriverWaiting.Columns.Add(colWS);


                AddClearJobColumn(grdDriverWaiting);
                grdDriverWaiting.ShowFilteringRow = false;

                chkShowAuthorization.Checked = true;
                grdDriverWaiting.Columns["btnClearJob"].IsVisible = !EnablePDA;
                grdDriverWaiting.Columns["BgColor"].IsVisible = false;
                grdDriverWaiting.Columns["HasPDA"].IsVisible = false;
                grdDriverWaiting.Columns["PDA"].IsVisible = false;
                grdDriverWaiting.Columns["IsPanic"].IsVisible = false;
                grdDriverWaiting.Columns["WorkStatusId"].IsVisible = false;
                grdDriverWaiting.Columns["LoginDate"].IsVisible = false;
                grdDriverWaiting.Columns["DriverId"].IsVisible = false;
                grdDriverWaiting.Columns["Id"].IsVisible = false;
                grdDriverWaiting.Columns["Name"].IsVisible = false;
                grdDriverWaiting.Columns["HasNewMsg"].IsVisible = false;

                grdDriverWaiting.Columns["DriverNo"].HeaderText = "No";
             //   grdDriverWaiting.Columns["PDA"].HeaderText = "";
                grdDriverWaiting.Columns["LoginFrom"].IsVisible = false;
                grdDriverWaiting.Columns["CurrentJobId"].IsVisible = false;
                grdDriverWaiting.Columns["WaitSinceDate"].IsVisible = false;

                grdDriverWaiting.Columns["WaitSinceOn"].HeaderText = "W/S";
                grdDriverWaiting.Columns["ZoneName"].HeaderText = "Plot";
                grdDriverWaiting.Columns["ZoneName"].Width = 35;
              //  grdDriverWaiting.Columns["ZoneName"].HeaderText = "Plot";
                UpdateDriverWaitingSince();


                grdOnBoardDriver.ShowFilteringRow = false;
                grdOnBoardDriver.Columns["CurrentJobId"].IsVisible = false;
                grdOnBoardDriver.Columns["HasNewMsg"].IsVisible = false;
                grdOnBoardDriver.Columns["BgColor"].IsVisible = false;
                grdOnBoardDriver.Columns["IsPanic"].IsVisible = false;
                grdOnBoardDriver.Columns["WorkStatusId"].IsVisible = false;
                grdOnBoardDriver.Columns["DriverId"].IsVisible = false;
                grdOnBoardDriver.Columns["Id"].IsVisible = false;
                grdOnBoardDriver.Columns["Name"].IsVisible = false;
                grdOnBoardDriver.Columns["HasPDA"].IsVisible = false;

                grdOnBoardDriver.Columns["DriverNo"].HeaderText = "No";
             //   grdOnBoardDriver.Columns["PDA"].HeaderText = "";

                grdOnBoardDriver.Columns["LoginFrom"].IsVisible = false;


                FormatOnBoardGrid();


                if (!EnablePDA)
                {
                    grdDriverWaiting.Columns["btnClearJob"].IsVisible = false;
                    grdDriverWaiting.Columns["Vehicle"].Width = 60;
                    grdDriverWaiting.Columns["DriverNo"].Width = 40;
                    grdDriverWaiting.Columns["OnJob"].Width = 70;
                    grdDriverWaiting.Columns["PDA"].Width = 30;
                }
                else
                {
                    grdDriverWaiting.Columns["Vehicle"].HeaderText = "Veh";
                    grdDriverWaiting.Columns["Vehicle"].Width = 30;
                    grdDriverWaiting.Columns["DriverNo"].Width = 30;
                    grdDriverWaiting.Columns["OnJob"].IsVisible = false;

                    grdDriverWaiting.Columns["WaitSinceOn"].Width = 35;
                  //  grdDriverWaiting.Columns["ZoneName"].IsVisible = false;
                 

                }


                if (this.CanDelete)
                {
                    GridViewCheckBoxColumn col = new GridViewCheckBoxColumn();
                    col.Width = 40;
                    col.AutoSizeMode = BestFitColumnMode.None;
                    col.HeaderText = "";
                    col.Name = "Check";
                    grdPendingJobs.Columns.Add(col);

                    try
                    {
                        btnDeleteSelected.Visible = true;
                    }
                    catch
                    {


                    }
                }

                if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW PRE-BOOKING REPORT") > 0)
                {
                    if (grdPreBookings.Columns.Contains("Check") == false)
                    {
                        GridViewCheckBoxColumn col = new GridViewCheckBoxColumn();
                        col.Width = 40;
                        col.AutoSizeMode = BestFitColumnMode.None;
                        col.HeaderText = "";
                        col.Name = "Check";
                       // col.IsPinned = true;
                        col.ReadOnly = false;
                        grdPreBookings.Columns.Add(col);
                    }
                }
                else
                {
                    btnPrintSelected.Visible = false;
                    grdPreBookings.AllowEditRow = false;
                }

                DaysInTodayBooking = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt();


                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    UI.GridFunctions.SetFilter(grdQuotations);
                    grdQuotations.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);

                    grdQuotations.ShowGroupPanel = false;
                    grdQuotations.ShowRowHeaderColumn = false;
                    grdQuotations.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;

                    grdQuotations.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                    grdQuotations.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                    grdQuotations.RowsChanging += new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                    chkQuotation.Visible = true;
                }
                else
                {
                    radPageView1.Pages[5].Item.Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                }


                //if (AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool() == true)
                //{


                //    ddlShowDue.SelectedIndex = 0;
                //    ddlShowDue.SelectedItem = ddlShowDue.Items[0];
                //    maxTopDues = 300;
                //}

                EnableAutoDespatchMode = AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool();
                EnableBiddingMode = AppVars.objPolicyConfiguration.EnableBidding.ToBool();
                ShowPendingJobOnRecentTab = AppVars.objPolicyConfiguration.ShowPendingJobsOnRecentTab.ToBool();


              

                PopulateData();

                AddCommandColumn(grdPendingJobs, "btnJDespatch", "Dispatch");

                if (AppVars.IsTelephonist)
                {
                    grdPendingJobs.Columns["btnJDespatch"].IsVisible = false;
                    btnDespatchJob.Visible = false;
                }

                if (this.CanDelete)
                {
                    AddDeleteColumn(grdPendingJobs);
                    AddDeleteColumn(grdPreBookings);
                    AddDeleteColumn(grdAllJobs);

                    grdPendingJobs.Columns["btnDelete"].Width = 60;
                }


                if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "QUOTATION DELETE") > 0)
                {
                    AddDeleteColumn(grdQuotations);

                }

                UI.GridFunctions.SetFilter(grdAllJobs);
                UI.GridFunctions.SetFilter(grdPreBookings);
                UI.GridFunctions.SetFilter(grdPendingJobs);

                grdPendingJobs.CurrentRow = null;
                grdPendingJobs.AllowEditRow = true;
                grdPreBookings.AllowEditRow = true;

                grdPendingJobs.MasterTemplate.Caption = "grdPendingJobs";
                grdPreBookings.MasterTemplate.Caption = "grdPreBookings";
                grdAllJobs.MasterTemplate.Caption = "grdAllJobs";



                var hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();

                listofSearchTabSettings = hiddenColumnsList.Where(c => c.FormTab == "search").ToList();

                hiddenColumnsList.RemoveAll(c => c.FormTab == "search");
                // Today's Booking Grid Hide Columns


                hiddenColumnsList = hiddenColumnsList.OrderBy(c => c.GridColMoveTo).ToList();

                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {



                    if (grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdPendingJobs.Columns.Move(grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }

                }

                grdPendingJobs.Columns["Due"].IsVisible = false; 
                grdPendingJobs.Columns["JourneyTypeId"].IsVisible = false; 
                grdPendingJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdPendingJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdPendingJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdPendingJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPendingJobs.Columns["HasNotesImg"].HeaderText = "";
                grdPendingJobs.Columns["Driver"].HeaderText = "Drv";
                grdPendingJobs.Columns["Account"].HeaderText = "A/C";

                grdPendingJobs.Columns["From"].HeaderText = "Pickup Point";
                grdPendingJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdPendingJobs.Columns["ToPostCode"].HeaderText = "Area";

                grdPendingJobs.Columns["To"].HeaderText = "Destination";
                grdPendingJobs.Columns["Pax"].HeaderText = "No of Pas";



                grdPendingJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdPendingJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdPendingJobs.Columns["Fare"].HeaderText = "Fare(£)";
                grdPendingJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdPendingJobs.Columns["PReference"].HeaderText = "P Reference";
                grdPendingJobs.Columns["GroupId"].HeaderText = "Token #";



                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";



                GridViewTextBoxColumn colTimeLeft = new GridViewTextBoxColumn();
                colTimeLeft.HeaderText = "T/L";
                colTimeLeft.Name = "TimeLeft";
                colTimeLeft.Width = 30;
                colTimeLeft.ReadOnly = true;
              //  colTimeLeft.IsVisible = false;
                grdPendingJobs.Columns.Add(colTimeLeft);
                grdPendingJobs.Columns.Move(grdPendingJobs.Columns[colTimeLeft.Name].Index, 0);

                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {

                    if (grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {
                        grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdPreBookings.Columns.Move(grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }
                }


                grdPreBookings.Columns["Due"].IsVisible = false; 
                grdPreBookings.Columns["JourneyTypeId"].IsVisible = false; 
                grdPreBookings.Columns["HasNotesImg"].HeaderText = "";
                grdPreBookings.Columns["BookingDateTime"].HeaderText = "Booking Date";

                grdPreBookings.Columns["PickUpDate"].HeaderText = "Date";
                (grdPreBookings.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdPreBookings.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                grdPreBookings.Columns["UpdateBy"].HeaderText = "Update By";
                grdPreBookings.Columns["Driver"].HeaderText = "Drv";
                grdPreBookings.Columns["RefNumber"].HeaderText = "Ref #";
                grdPreBookings.Columns["From"].HeaderText = "Pickup Point";
                grdPreBookings.Columns["To"].HeaderText = "Destination";
                grdPreBookings.Columns["Pax"].HeaderText = "No of Pas";


                grdPreBookings.Columns["FromPostCode"].HeaderText = "Area";
                grdPreBookings.Columns["ToPostCode"].HeaderText = "Area";

                grdPreBookings.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPreBookings.Columns["Account"].HeaderText = "A/C";
                grdPreBookings.Columns["Vehicle"].HeaderText = "Veh";
                grdPreBookings.Columns["MobileNo"].HeaderText = "Tel. No";
                grdPreBookings.Columns["PReference"].HeaderText = "P Reference";
                grdPreBookings.Columns["GroupId"].HeaderText = "Token #";

                grdPreBookings.Columns["Driver"].Width = 70;
                grdPreBookings.Columns["Time"].Width = 50;
                grdPreBookings.Columns["BookingDateTime"].Width = 120;
                grdPreBookings.Columns["PickUpDate"].Width = 50;
                grdPreBookings.Columns["Plot"].Width = 50;
                grdPreBookings.Columns["UpdateBy"].Width = 50;
                grdPreBookings.Columns["Status"].Width = 40;
                grdPreBookings.Columns["Driver"].Width = 40;
                grdPreBookings.Columns["RefNumber"].Width = 90;
                grdPreBookings.Columns["Fare"].Width = 50;
                grdPreBookings.Columns["SpecialReq"].Width = 80;


                grdPendingJobs.Columns["Vehicle"].Width = 40;

                grdPreBookings.Columns["Passenger"].Width = 60;
                grdPreBookings.Columns["MobileNo"].Width = 90;
                grdPreBookings.Columns["From"].Width = 160;
                grdPreBookings.Columns["To"].Width = 150;
                grdPreBookings.Columns["Pax"].Width = 50;
                grdPreBookings.Columns["PaymentMethod"].Width = 60;
                grdPreBookings.Columns["Account"].Width = 60;

                grdPreBookings.Columns["FromPostCode"].Width = 80;
                grdPreBookings.Columns["ToPostCode"].Width = 80;

                grdPreBookings.Columns["Pickup"].Width = 155;
                grdPreBookings.Columns["GoingTo"].Width = 155;

                grdPreBookings.Columns["PReference"].Width = 70;
                grdPreBookings.Columns["GroupId"].Width = 60;

                //  grdPreBookings.Columns.Move(grdPreBookings.Columns["Passenger"].Index, 16);
                //  grdPreBookings.Columns.Move(grdPreBookings.Columns["MobileNo"].Index, 32);

                //



                // All Jobs Grid Settings

                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {
                    if (grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdAllJobs.Columns.Move(grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }
                }



                grdAllJobs.Columns["Due"].IsVisible = false; 
                grdAllJobs.Columns["JourneyTypeId"].IsVisible = false; 
                grdAllJobs.Columns["HasNotesImg"].HeaderText = "";
                grdAllJobs.Columns["Driver"].HeaderText = "Drv";
                grdAllJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdAllJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdAllJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdAllJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdAllJobs.Columns["From"].HeaderText = "Pickup Point";
                grdAllJobs.Columns["To"].HeaderText = "Destination";
                grdAllJobs.Columns["Pax"].HeaderText = "No of Pas";
                grdAllJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdAllJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdAllJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdAllJobs.Columns["ToPostCode"].HeaderText = "Area";
                grdAllJobs.Columns["PReference"].HeaderText = "P Reference";
                grdAllJobs.Columns["GroupId"].HeaderText = "Token #";


                (grdAllJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdAllJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                //  grdAllJobs.Columns.Move(grdAllJobs.Columns["Passenger"].Index, 16);
                //  grdAllJobs.Columns.Move(grdAllJobs.Columns["MobileNo"].Index, 32);

                FormatRecentJobsGrid();

                ClearSearchByDateFilter();

                grdRecentJobs.ShowRowHeaderColumn = false;

                UI.GridFunctions.SetFilter(grdRecentJobs);
                //
                grdRecentJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdRecentJobs_ContextMenuOpening);



                timer1.Start();
                timer1.Tick += new EventHandler(timer1_Tick);


                ddlColumns.Items.Add("Reference");
                ddlColumns.Items.Add("Passenger");
                ddlColumns.Items.Add("Telephone No");
                ddlColumns.Items.Add("Mobile No");

                ddlColumns.SelectedIndex = 0;

                InitializeWorker();


                //if (AppVars.listUserRights.Count(c => c.formName == "frmDriverRentPay") > 0)
                //{
                //    btnRentPay.Visible = true;
                //    btnRentPay.Click += new EventHandler(btnRentPay_Click);
                //}



                bookingEngineType = AppVars.objPolicyConfiguration.PDANewWeekMessageByDay.ToStr().ToLower().Trim();



                if (enableBiddingTab)
                {
                    grdBiddingJobs.CellDoubleClick += new GridViewCellEventHandler(grdBiddingJobs_CellDoubleClick);
                    grdBiddingJobs.Font = oldFont;
                    grdBiddingJobs.AllowAddNewRow = false;
                    grdBiddingJobs.AllowEditRow = false;
                    grdBiddingJobs.AllowDeleteRow = false;
                    grdBiddingJobs.ShowGroupPanel = false;


                    grdBiddingJobs.Columns["Id"].IsVisible = false;
                    grdBiddingJobs.Columns["BookingStatusId"].IsVisible = false;
                    grdBiddingJobs.Columns["IsBidding"].IsVisible = false;
                    grdBiddingJobs.Columns["Vehicle"].IsVisible = false;
                    grdBiddingJobs.Columns["Drv"].IsVisible = false;

                    grdBiddingJobs.Columns["AutoDespatch"].IsVisible = false;
                    grdBiddingJobs.Columns["DriverId"].IsVisible = false;
                    grdBiddingJobs.Columns["Status"].IsVisible = false;


                    grdBiddingJobs.Columns["RefNo"].HeaderText = "Ref No";
                    grdBiddingJobs.Columns["Account"].HeaderText = "A/C";
                    grdBiddingJobs.Columns["Pickup"].HeaderText = "Pickup Point";
                    grdBiddingJobs.Columns["PickupDateTime"].HeaderText = "Pickup Date-Time";
                    grdBiddingJobs.Columns["TotalBids"].HeaderText = "Total Bids";
                    grdBiddingJobs.Columns["LowestBid"].HeaderText = "Lowest Bid";

                    grdBiddingJobs.Columns["RefNo"].Width = 80;

                    grdBiddingJobs.Columns["Pickup"].Width = 230;
                    grdBiddingJobs.Columns["Destination"].Width = 230;
                    grdBiddingJobs.Columns["Account"].Width = 100;
                    grdBiddingJobs.Columns["PickupDateTime"].Width = 140;
                    grdBiddingJobs.Columns["TotalBids"].Width = 100;
                    grdBiddingJobs.Columns["LowestBid"].Width = 90;
                    grdBiddingJobs.Columns["Status"].Width = 80;
                    grdBiddingJobs.Columns["Fare"].Width = 80;
                    grdBiddingJobs.Columns["Vehicle"].Width = 80;
                    grdBiddingJobs.Columns["Passenger"].Width = 90;


                    AddCommandColumn(grdBiddingJobs, "btnshowbids", "Show Bids");

                    grdBiddingJobs.CommandCellClick += new CommandCellClickEventHandler(grdBiddingJobs_CommandCellClick);

                }

                if(desktopAlert!=null)
                  desktopAlert.Popup.Click += new EventHandler(Popup_Click);


                if (AppVars.ShowAllBookings.ToBool())
                {
                    ddlSubCompany.Visible = true;
                    foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName }).ToList())
                    {
                        ddlSubCompany.Items.Add(new RadListDataItem { Text = item.CompanyName, Value = item.BackgroundColor });
                    }

                    if (ddlSubCompany.Items.Count == 1)
                        ddlSubCompany.Visible = false;
                    else
                    {
                        ddlSubCompany.Items.Insert(0, new RadListDataItem { Text = "Show All Bookings", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });
                        ddlSubCompany.SelectedIndex = 0;
                      //  ddlSubCompany.DropDownStyle = RadDropDownStyle.DropDownList;
                        ddlSubCompany.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompany_SelectedIndexChanged);
                    }
                }




                if (AppVars.listUserRights != null && AppVars.listUserRights.Count(c => c.functionId == "DISABLE BOOKING STATS") > 0)
                {
                    Pg_DrvBookingStats.Item.Visibility = ElementVisibility.Collapsed;

                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

      
        void ddlSubCompany_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor == null)
            {
                grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();
                //   grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.v
            }

            int index = ddlSubCompany.SelectedIndex;

            if (index == -1 || index==0)
            {
                grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;

                grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = null;
            }
            else
            {
                if (ddlSubCompany.Items[index].Value != null && ddlSubCompany.Items[index].Value.ToInt()!=0)
                {


                    grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsEqualTo;

                    grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = ddlSubCompany.Items[index].Value.ToInt();
                }
            }
        }

       

        void grdRecentJobs_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            if (searchJobContextMenu == null)
            {
                searchJobContextMenu = new RadDropDownMenu();


                RadMenuItem item = new RadMenuItem("Copy Booking");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(CopySearchBooking_Click);
                searchJobContextMenu.Items.Add(item);



                item = new RadMenuItem("View Booking");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(ViewSearchBooking_Click);
                searchJobContextMenu.Items.Add(item);


                item = new RadMenuItem("Complete Job");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(ForceCompleteSearchJob_Click);
                searchJobContextMenu.Items.Add(item);

            }

            if(grdRecentJobs.CurrentRow!=null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
            {

                if (grdRecentJobs.CurrentRow.Cells["Status"].Value.ToStr().ToLower() == "no pickup"
                    || grdRecentJobs.CurrentRow.Cells["Status"].Value.ToStr().ToLower() == "no fare")
                {

                    searchJobContextMenu.Items[2].Visibility = ElementVisibility.Visible;
                }
                else
                {
                    searchJobContextMenu.Items[2].Visibility = ElementVisibility.Collapsed;


                }

            }


            e.ContextMenu = searchJobContextMenu;
        }

        string pwd = string.Empty;
        void ForceCompleteSearchJob_Click(object sender, EventArgs e)
        {
            try
            {



                if (grdRecentJobs.CurrentRow != null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (DialogResult.Yes == MessageBox.Show("Are you sure ?", "", MessageBoxButtons.YesNo))
                    {

                        if (pwd != "euro1234euro")
                        {

                            frmLockingPwd frmUnLock = new frmLockingPwd();
                            frmUnLock.ShowDialog();

                            if (string.IsNullOrEmpty(frmUnLock.ReturnValue1))
                                return;
                            else
                                pwd = frmUnLock.ReturnValue1;


                            frmUnLock.Dispose();
                        }

                        if (pwd.ToStr().Trim().ToLower() == "euro1234euro")
                        {


                            long Id = grdRecentJobs.CurrentRow.Cells["Id"].Value.ToLong();


                            frmForceCompleteJob frmComp = new frmForceCompleteJob(General.GetObject<Booking>(c => c.Id == Id));
                            frmComp.StartPosition = FormStartPosition.CenterScreen;
                            frmComp.ShowDialog();
                            frmComp.Dispose();
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        void CopySearchBooking_Click(object sender, EventArgs e)
        {

            try
            {

                if (grdRecentJobs.CurrentRow != null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
                {

                    CopyBooking(grdRecentJobs.CurrentRow.Cells["Id"].Value.ToLong());
                }
            }
            catch (Exception ex)
            {



            }
        }

        void ViewSearchBooking_Click(object sender, EventArgs e)
        {
            ViewDetailForm(grdRecentJobs.CurrentRow);

        }




        void grdBiddingJobs_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            ViewDetailForm(e.Row);
        }

        void btnRentPay_Click(object sender, EventArgs e)
        {
            try
            {
                frmDriverRentPay frmRentpay = new frmDriverRentPay();
                frmRentpay.StartPosition = FormStartPosition.CenterScreen;
                frmRentpay.ShowDialog();




            }
            catch
            {


            }
        }



        private void FormatOnBoardGrid()
        {

            if (grdOnBoardDriver.Columns.Count > 0)
            {
                grdOnBoardDriver.Columns["Vehicle"].IsVisible = false;
                grdOnBoardDriver.Columns["PDA"].IsVisible = false;

              

                grdOnBoardDriver.Columns["DriverNo"].Width = 40;
                grdOnBoardDriver.Columns["OnJob"].Width = 150;

                if (grdOnBoardDriver.Columns.Contains("btnClearJob"))
                    grdOnBoardDriver.Columns["btnClearJob"].Width = 20;

            }
        }


        private void FormatRecentJobsGrid()
        {

            grdAllJobs.Columns["HasNotesImg"].Width = 30;

            grdAllJobs.Columns["Driver"].Width = 70;

        //    grdAllJobs.Columns["BookingDateTime"].Width = 120;
            grdAllJobs.Columns["PickUpDate"].Width = 50;
            grdAllJobs.Columns["Time"].Width = 50;
            grdAllJobs.Columns["UpdateBy"].Width = 50;


            grdAllJobs.Columns["FromPostCode"].Width = 80;
            grdAllJobs.Columns["ToPostCode"].Width = 80;

            grdAllJobs.Columns["Status"].Width = 60;

            grdAllJobs.Columns["RefNumber"].Width = 90;
            grdAllJobs.Columns["Fare"].Width = 50;
            grdAllJobs.Columns["Vehicle"].Width = 50;

            grdAllJobs.Columns["Passenger"].Width = 60;
            grdAllJobs.Columns["MobileNo"].Width = 90;
            grdAllJobs.Columns["From"].Width = 170;
            grdAllJobs.Columns["To"].Width = 150;
            grdAllJobs.Columns["Pax"].Width = 50;

            grdAllJobs.Columns["Pickup"].Width = 155;
            grdAllJobs.Columns["GoingTo"].Width = 155;

            grdAllJobs.Columns["PReference"].Width = 70;

            grdAllJobs.Columns["Account"].HeaderText = "A/C";
            grdAllJobs.Columns["Account"].Width = 60;

            grdAllJobs.Columns["GroupId"].Width = 60;

            grdAllJobs.Columns["SpecialReq"].Width = 80;

            if (this.CanDelete)
                grdAllJobs.Columns["btnDelete"].Width = 60;


          
           

            //
        }


        private void dragDropService_PreviewDragStart(object sender, PreviewDragStartEventArgs e)
        {

            e.CanStart = true;
        }
        void dragDropService_PreviewDragHint(object sender, PreviewDragHintEventArgs e)
        {
            try
            {
                GridDataRowElement dataRowElement = e.DragInstance as GridDataRowElement;
                if (dataRowElement != null && dataRowElement.ViewTemplate.MasterTemplate.SelectedRows.Count > 1)
                {
                    //  e = new Bitmap(this.imageList1.Images[6]);
                    e.UseDefaultHint = true;


                }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage("Error in Drag Preview Hint ");

            }

        }

        private int GetTargetRowIndex(GridDataRowElement row, Point dropLocation)
        {
            // row.BackColor = Color.LightBlue;
            int halfHeight = row.Size.Height / 2;
            int index = row.RowInfo.Index;
            if (dropLocation.Y > halfHeight)
            {
                index++;
            }
            return index;
        }

        private void MoveRows(RadGridView targetGrid, RadGridView dragGrid, GridViewRowInfo dragRow, int index)
        {

            if (index < 0)
                return;

            try
            {
                if (index > targetGrid.RowCount - 1)
                    index = targetGrid.RowCount - 1;

                if (dragRow != null)
                {

                    if (index >= 0)
                    {

                        //if (dragGrid.Name == "grdOnBoardDriver")
                        //{

                        //    General.ShowDespatchFOJForm(grdPendingJobs.Rows[index].Cells["Id"].Value.ToLong(), dragRow.Cells["DriverId"].Value.ToIntorNull());

                        //}
                        //else
                        //{

                            General.ShowDespatchForm(grdPendingJobs.Rows[index].Cells["Id"].Value.ToLong(), dragRow.Cells["DriverId"].Value.ToIntorNull());
                     //   }
                    }

                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Error on Moving Rows");

            }

        }


        void dragDropService_PreviewDragDrop(object sender, RadDropEventArgs e)
        {
            try
            {
                GridDataRowElement rowElement = e.DragInstance as GridDataRowElement;
                if (rowElement == null && e.HitTarget != null && e.HitTarget is GridDataRowElement)
                {
                    return;
                }
                RadItem dropTarget = e.HitTarget as RadItem;
                RadGridView targetGrid = dropTarget.ElementTree.Control as RadGridView;
                if (targetGrid == null || targetGrid.Name != "grdPendingJobs")
                {
                    e.Handled = true;
                    return;

                }

                RadGridView dragGrid = rowElement.ElementTree.Control as RadGridView;
                if (targetGrid != dragGrid && dragGrid.SelectedRows.Count > 0)
                {
                    e.Handled = true;

                    GridDataRowElement dropTargetRow = dropTarget as GridDataRowElement;

                    int index = dropTargetRow != null ? this.GetTargetRowIndex(dropTargetRow, e.DropLocation) : targetGrid.RowCount;
                    this.MoveRows(targetGrid, dragGrid, dragGrid.SelectedRows[0], index);
                }
            }
            catch (Exception ex)
            {
                e.Handled = true;
            }
        }

        void dragDropService_PreviewDragOver(object sender, RadDragOverEventArgs e)
        {
            try
            {
                if (e.DragInstance is GridDataRowElement)
                {
                    if ((e.HitTarget is GridDataRowElement || e.HitTarget is GridTableElement || e.HitTarget is GridSummaryRowElement))
                    {


                        if ((e.HitTarget is GridDataRowElement && (e.HitTarget as GridDataRowElement).GridControl.Name != "grdDriverWaiting" && (e.HitTarget as GridDataRowElement).GridControl.Name != "grdOnBoardDriver")
                            || (e.HitTarget is GridTableElement && (e.HitTarget as GridTableElement).GridViewElement.Name != "grdDriverWaiting" && (e.HitTarget as GridTableElement).GridViewElement.Name != "grdOnBoardDriver")
                              || (e.HitTarget is GridSummaryRowElement && (e.HitTarget as GridSummaryRowElement).GridControl.Name != "grdDriverWaiting" && (e.HitTarget as GridSummaryRowElement).GridControl.Name != "grdOnBoardDriver"))
                        {



                            e.CanDrop = (e.HitTarget is GridDataRowElement || e.HitTarget is GridTableElement || e.HitTarget is GridSummaryRowElement);

                            if (e.CanDrop && e.HitTarget is GridDataRowElement)
                            {
                                grdPendingJobs.CurrentRow = (e.HitTarget as GridDataRowElement).RowInfo;
                                grdPendingJobs.Focus();
                                //if(grdPendingJobs.TableElement.VScrollBar.Value>0 && grdPendingJobs.TableElement.VScrollBar.Value<grdPendingJobs.VerticalScroll.Maximum)
                                //    grdPendingJobs.TableElement.VScrollBar.Value += 1;
                                //   grdPendingJobs.VerticalScroll.Value =
                                //   grdPendingJobs.TableElement.VScrollBar.Value = grdPendingJobs.VerticalScroll.Maximum;
                                //    grdPendingJobs.=grdPendingJobs.VerticalScroll.Value
                            }


                        }

                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        Font font_pooljob = new Font("Tahoma", 8, FontStyle.Regular);

        private void FormatJobPoolsGrid()
        {
            try
            {
                grdJobsPool.Font = font_pooljob;

                if (grdJobsPool.Columns.Contains("btnDelete"))
                grdJobsPool.Columns["btnDelete"].Width = 60;                                       
               
                grdJobsPool.Columns["PickupDateTemp"].IsVisible = false;
                (grdJobsPool.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdJobsPool.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                grdJobsPool.Columns["PickUpDate"].Width = 70;
                grdJobsPool.Columns["PickUpDate"].HeaderText = "Date";

                grdJobsPool.Columns["Time"].Width = 45;
                grdJobsPool.Columns["Time"].HeaderText = "Time";

                //grdJobsPool.Columns["FromLocTypeId"].IsVisible = false;
                //grdJobsPool.Columns["ToLocTypeId"].IsVisible = false;

                grdJobsPool.Columns["Id"].IsVisible = false;

                //if (grdJobsPool.Columns.Contains("btnConfirm"))
                //{
                //    grdJobsPool.Columns["btnConfirm"].Width = 60;
                //}
                //else
                //{

                //    AddCommandColumn(grdQuotations, "btnConfirm", "Confirm");

                //}

                grdJobsPool.Columns["OfferPrice"].HeaderText = "Offer Price";
                grdJobsPool.Columns["OfferPrice"].Width = 63;

                grdJobsPool.Columns["Notes"].HeaderText = "Notes";
                grdJobsPool.Columns["Status"].HeaderText = "Status";
                grdJobsPool.Columns["AcceptedBy"].HeaderText = "Accepted By";
                grdJobsPool.Columns["DriverNo"].HeaderText = "DriverNo";
                grdJobsPool.Columns["SendMessage"].HeaderText = "Send Message/ Call Driver";

                grdJobsPool.Columns["Status"].Width = 70;
                grdJobsPool.Columns["DriverNo"].Width = 65;
                grdJobsPool.Columns["Notes"].Width = 90;
                grdJobsPool.Columns["AcceptedBy"].Width = 80;
                grdJobsPool.Columns["SendMessage"].Width = 95;

                grdJobsPool.Columns["RefNumber"].HeaderText = "Ref #";
                grdJobsPool.Columns["RefNumber"].Width = 50;

                grdJobsPool.Columns["UpdateBy"].Width = 100;
                grdJobsPool.Columns["UpdateBy"].HeaderText = "Update By";

                grdJobsPool.Columns["Fare"].HeaderText = "Fare(£)";
                grdJobsPool.Columns["Fare"].Width = 50;
                grdJobsPool.Columns["Vehicle"].Width = 80;

                grdJobsPool.Columns["Passenger"].Width = 80;
                
                grdJobsPool.Columns["Account"].Width = 80;
                grdJobsPool.Columns["Account"].HeaderText = "A/C";

                grdJobsPool.Columns["From"].HeaderText = "Pickup Point";
                grdJobsPool.Columns["To"].HeaderText = "Destination";
                grdJobsPool.Columns["From"].Width = 120;
                grdJobsPool.Columns["To"].Width = 120;
                grdJobsPool.Columns["UpdateBy"].Width = 70;
                //grdJobsPool.Columns["BackgroundColor"].IsVisible = false;
                //grdJobsPool.Columns["TextColor"].IsVisible = false;


                grdJobsPool.AllowEditRow = true;


            }
            catch
            {


            }

        }

        private void FormatQuotationsGrid()
        {
            try
            {


                if (grdQuotations.Columns.Contains("btnDelete"))
                    grdQuotations.Columns["btnDelete"].Width = 60;


                grdQuotations.Columns["PickUpDate"].Width = 70;
                grdQuotations.Columns["PickUpDate"].HeaderText = "Pickup Date";
                grdQuotations.Columns["Time"].Width = 45;



                grdQuotations.Columns["PickupDateTemp"].IsVisible = false;
                (grdQuotations.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdQuotations.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";


                grdQuotations.Columns["FromLocTypeId"].IsVisible = false;
                grdQuotations.Columns["ToLocTypeId"].IsVisible = false;


                grdQuotations.Columns["Id"].IsVisible = false;

                if (grdQuotations.Columns.Contains("btnConfirm"))
                {
                    grdQuotations.Columns["btnConfirm"].Width = 60;
                }
                else
                {

                    AddCommandColumn(grdQuotations, "btnConfirm", "Confirm");

                }

                grdQuotations.Columns["RefNumber"].HeaderText = "Ref #";
                grdQuotations.Columns["RefNumber"].Width = 45;

                grdQuotations.Columns["UpdateBy"].Width = 60;
                grdQuotations.Columns["UpdateBy"].HeaderText = "Update By";

                grdQuotations.Columns["Fare"].HeaderText = "Fare(£)";
                grdQuotations.Columns["Fare"].Width = 50;
                grdQuotations.Columns["Vehicle"].Width = 60;

                grdQuotations.Columns["Passenger"].Width = 60;
                grdQuotations.Columns["From"].Width = 150;
                grdQuotations.Columns["To"].Width = 150;

                grdQuotations.Columns["Account"].Width = 60;
                grdQuotations.Columns["Account"].HeaderText = "A/C";

                grdQuotations.Columns["From"].HeaderText = "Pickup Point";
                grdQuotations.Columns["To"].HeaderText = "Destination";


                grdQuotations.Columns["BackgroundColor"].IsVisible = false;
                grdQuotations.Columns["TextColor"].IsVisible = false;


                grdQuotations.AllowEditRow = true;


            }
            catch
            {


            }

        }



        private void FormatTodaysBookingGrid()
        {
            try
            {




                if (grdPendingJobs.Columns.Contains("Check"))
                {
                    (grdPendingJobs.Columns["Check"] as GridViewCheckBoxColumn).Width = 35;

                    if (grdPendingJobs.Columns.Contains("btnDelete"))
                        grdPendingJobs.Columns["btnDelete"].Width = 60;
                }


                if (!grdPendingJobs.Enabled)
                    grdPendingJobs.Enabled = true;


                //if (grdPendingJobs.Columns.Contains("btnJDespatch"))
                //{
                //    grdPendingJobs.Columns["btnJDespatch"].Width = 60;
                //}

                grdPendingJobs.Columns["BookingDateTime"].Width = 110;
                grdPendingJobs.Columns["PickUpDate"].Width = 40;
                grdPendingJobs.Columns["Time"].Width = 45;

                if (grdPendingJobs.Columns.Contains("TimeLeft"))
                {
                    grdPendingJobs.Columns["TimeLeft"].Width = 30;
                }

                grdPendingJobs.Columns["Status"].Width = 50;

                grdPendingJobs.Columns["RefNumber"].Width = 90;
                grdPendingJobs.Columns["Plot"].Width = 50;

                grdPendingJobs.Columns["PaymentMethod"].Width = 60;
                grdPendingJobs.Columns["UpdateBy"].Width = 50;

                grdPendingJobs.Columns["Fare"].Width = 50;
                grdPendingJobs.Columns["Vehicle"].Width = 40;

                grdPendingJobs.Columns["Passenger"].Width = 60;
                grdPendingJobs.Columns["MobileNo"].Width = 95;

                grdPendingJobs.Columns["Pickup"].Width = 150;
                grdPendingJobs.Columns["GoingTo"].Width = 150;

                grdPendingJobs.Columns["FromPostCode"].Width = 80;
                grdPendingJobs.Columns["ToPostCode"].Width = 80;

                grdPendingJobs.Columns["From"].Width = 180;
                grdPendingJobs.Columns["To"].Width = 150;
                grdPendingJobs.Columns["Pax"].Width = 50;

                grdPendingJobs.Columns["Account"].Width = 60;


                grdPendingJobs.Columns["Driver"].Width = 60;


                grdPendingJobs.Columns["HasNotesImg"].Width = 25;

                grdPendingJobs.Columns["GroupId"].Width = 60;



                grdPendingJobs.AllowEditRow = true;

                if (grdPendingJobs.Columns.Contains("btnJDespatch"))
                {
                    grdPendingJobs.Columns["btnJDespatch"].Width = 60;
                }


                grdPendingJobs.Columns["PReference"].Width = 70;
                grdPendingJobs.Columns["SpecialReq"].Width = 80;
                Pg_PendingJobs.Text = "Today\'s Booking(" + grdPendingJobs.Rows.Count+")";


            }
            catch
            {


            }

        }

        RadDesktopAlert desktopAlert = new Telerik.WinControls.UI.RadDesktopAlert();

        private void CreateAndShowAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            if (DisablePopupNotifications)
                return;
           

            desktopAlert.AutoCloseDelay = 5;
            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;

            desktopAlert.ButtonItems.Clear();
            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            // desktopAlert.roo



            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;

            if (HasOptionButton)
            {
                desktopAlert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();
                bt.Tag = body;
                bt.Name = senderId;
                bt.ToolTipText = senderName;

                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";

                desktopAlert.ButtonItems.Add(bt);
            }
            else
            {

                desktopAlert.FixedSize = new Size(370, 120);

            }

            desktopAlert.Show();

            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;


        }


        private void CreateAndShowMessageAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            if (DisablePopupNotifications)
                return;


            RadDesktopAlert alert = new Telerik.WinControls.UI.RadDesktopAlert();
            alert.AutoCloseDelay = 300;
            alert.AutoClose = true;
            alert.FadeAnimationSpeed = 1;
            alert.FadeAnimationType = FadeAnimationType.None;
            alert.Popup.AlertElement.Opacity = 100;
            alert.PopupAnimation = false;
            alert.ShowCloseButton = true;
          
            alert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            

            alert.ShowOptionsButton = false;
            alert.ShowPinButton = false;

            if (HasOptionButton)
            {
                alert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();

                bt.Tag = alert;
                bt.Name = senderId;
                bt.ToolTipText = senderName;
                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";
                alert.ButtonItems.Add(bt);


                RadButtonElement bt2 = new RadButtonElement();
                bt2.Tag = alert;
                bt2.Name = senderId;
                bt2.ToolTipText = senderName;
                bt2.Click += new EventHandler(optionItemClose_Click);
                bt2.Text = "Close";
                alert.ButtonItems.Add(bt2);

            }
            else
            {

                alert.FixedSize = new Size(370, 120);

            }

            alert.Show();

            alert.CaptionText = caption;
            alert.ContentText = content;
            alert.ContentImage = contentImg;


        }

        private void ShowAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            if (DisablePopupNotifications)
                return;


            desktopAlert.AutoCloseDelay = 5;
            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;

            desktopAlert.ButtonItems.Clear();
            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            // desktopAlert.roo



            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;

            if (HasOptionButton)
            {
                desktopAlert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();
                bt.Tag = body;
                bt.Name = senderId;
                bt.ToolTipText = senderName;

                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";

                desktopAlert.ButtonItems.Add(bt);
            }
            else
            {

                desktopAlert.FixedSize = new Size(370, 120);

            }

            desktopAlert.Show();

            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;


        }

        void Popup_Click(object sender, EventArgs e)
        {
            desktopAlert.Popup.ClosePopup(RadPopupCloseReason.Mouse);
        }


        private void RingBackCallNotification(string caption, string content)
        {
            try
            {
                if (DisablePopupNotifications)
                    return;

                RadDesktopAlert ringAlert = new Telerik.WinControls.UI.RadDesktopAlert();


                ringAlert.AutoCloseDelay = 8;
                ringAlert.FadeAnimationSpeed = 1;
                ringAlert.FadeAnimationType = FadeAnimationType.None;


                ringAlert.Popup.AlertElement.Opacity = 100;
                ringAlert.PopupAnimation = false;


                ringAlert.ShowOptionsButton = false;
                ringAlert.ShowPinButton = false;

                ringAlert.FixedSize = new Size(300, 100);

                ringAlert.CaptionText = caption;
                ringAlert.ContentText = content;
                //  ringAlert.ContentImage = contentImg;



                ringAlert.Show();


            }
            catch (Exception ex)
            {


            }

        }





        private void SetSMSBlinking(Color clr)
        {

            var child = btnSMS.RootElement.Children[0];
            ActionButtonElement elem = (ActionButtonElement)child.Children[1].Children[1];
            FillPrimitive fill = (FillPrimitive)elem.Children[0];
            fill.BackColor = clr;
            fill.BackColor2 = clr;
            fill.BackColor3 = clr;
            fill.BackColor3 = clr;

            btnSMS.BackColor = clr;
        }

        void btShowInbox_Click(object sender, EventArgs e)
        {

            ShowInboxMessages("Inbox");

        }


        public void ShowInboxMessages(string messageType)
        {

            try
            {

                if (frmInbox == null || frmInbox.IsDisposed)
                    frmInbox = new frmSMSReply();

                frmInbox.StartPosition = FormStartPosition.CenterScreen;
                frmInbox.MessageType = messageType;
                frmInbox.Show();
                frmInbox.BringToFront();


                ResetSMSBlinking();
            }
            catch (Exception ex)
            {


            }
        }




        private void ResetSMSBlinking()
        {

            var child = btnSMS.RootElement.Children[0];
            ActionButtonElement elem = (ActionButtonElement)child.Children[1].Children[1];
            FillPrimitive fill = (FillPrimitive)elem.Children[0];
            fill.BackColor = Color.FromArgb(232, 241, 252);
            fill.BackColor2 = Color.FromArgb(233, 241, 252);
            fill.BackColor3 = Color.FromArgb(211, 226, 244);
            fill.BackColor3 = Color.FromArgb(231, 240, 251);

            btnSMS.BackColor = Color.White;
        }


        private void CreateAndShowCustomerMsgAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {


            desktopAlert.AutoCloseDelay = 6;


            desktopAlert.ButtonItems.Clear();

            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;

            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;


            desktopAlert.FixedSize = new Size(300, 110);

            RadButtonElement bt = new RadButtonElement();
            bt.Tag = body;
            bt.Name = senderId;
            bt.ToolTipText = senderName;


            bt.Click += new EventHandler(btShowInbox_Click);
            bt.Text = "View Details";
            bt.Font = new Font("Arial", 10, FontStyle.Bold);

            desktopAlert.ButtonItems.Add(bt);



            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;
            desktopAlert.Show();

            SetSMSBlinking(Color.Orange);


        }

        void desktopAlert_Closed(object sender, RadPopupClosedEventArgs args)
        {

        }

        void desktopAlert_Disposing(object sender, EventArgs e)
        {

        }


        private void ShowBiddingAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, long jobId, int? driverId)
        {

            if (DisablePopupNotifications)
                return;

            RadDesktopAlert desktopAlert = new Telerik.WinControls.UI.RadDesktopAlert();
            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;
            //   desktopAlert.SoundToPlay = sound;
            //  desktopAlert.PlaySound = true;
            desktopAlert.FixedSize = new Size(370, 160);

            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            desktopAlert.Popup.AlertElement.Opacity = 100;


            RadButtonElement biddingAccept = new RadButtonElement();
            biddingAccept.Tag = jobId;
            biddingAccept.Name = driverId.ToStr();
            biddingAccept.BorderElement.Width = 2;
            biddingAccept.BorderElement.BottomColor = Color.Black;
            biddingAccept.BorderElement.BoxStyle = BorderBoxStyle.SingleBorder;
            biddingAccept.Click += new EventHandler(biddingAccept_Click);
            biddingAccept.Text = "Accept and Despatch";
            desktopAlert.ButtonItems.Add(biddingAccept);


            RadButtonElement biddingReject = new RadButtonElement();
            biddingReject.Tag = jobId;
            biddingReject.Name = driverId.ToStr();

            biddingReject.BorderElement.Width = 2;
            biddingReject.BorderElement.BottomColor = Color.Black;
            biddingReject.BorderElement.BoxStyle = BorderBoxStyle.SingleBorder;
            biddingReject.Click += new EventHandler(biddingReject_Click);
            biddingReject.Text = "Reject";
            desktopAlert.ButtonItems.Add(biddingReject);


            desktopAlert.Show();
        }

        void biddingAccept_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement obj = (RadButtonElement)sender;

                if (obj != null && obj.Tag != null)
                {
                    General.SP_SaveBid(obj.Tag.ToLong(), obj.Name.ToIntorNull(), 0, 2);

                    General.ShowDespatchForm(obj.Tag.ToLong(), obj.Name.ToIntorNull());

                    //  PDAClass.UpdateBiddingStatus(obj.Tag.ToLong(), obj.Name.ToInt(), true);
                }
            }
            catch
            {


            }

        }


        void biddingReject_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement obj = (RadButtonElement)sender;

                if (obj != null && obj.Tag != null)
                {
                    General.SP_SaveBid(obj.Tag.ToLong(), obj.Name.ToIntorNull(), 0, 3);
                    //  PDAClass.UpdateBiddingStatus(obj.Tag.ToLong(), obj.Name.ToInt(), true);

                }
            }
            catch
            {


            }

        }




        //private void LoadDriverBookingStats()
        //{

        //    try
        //    {
        //        if (DriverChart == null)
        //        {
        //            this.DriverChart = new System.Windows.Forms.DataVisualization.Charting.Chart();
        //            ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).BeginInit();
        //            this.splitContainer1.Panel2.Controls.Add(this.DriverChart);

        //            // 
        //            // DriverChart
        //            // 
        //            this.DriverChart.Location = new System.Drawing.Point(0, 0);
        //            this.DriverChart.Name = "DriverChart";
        //            this.DriverChart.Size = new System.Drawing.Size(300, 300);
        //            this.DriverChart.TabIndex = 0;

        //            ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).EndInit();
        //        }
        //        if (DriverChart.ChartAreas.Count == 0)
        //        {

        //            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
        //            System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
        //            System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series();
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint1 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 20);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint2 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 50);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint3 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint4 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint5 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint6 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint7 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint8 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint9 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint10 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint11 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint12 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);


        //            // 
        //            // DriverChart
        //            // 
        //            this.DriverChart.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkUpwardDiagonal;
        //            this.DriverChart.BorderlineDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;
        //            this.DriverChart.BorderlineWidth = 5;
        //            this.DriverChart.BorderSkin.BackColor = System.Drawing.Color.SteelBlue;
        //            this.DriverChart.BorderSkin.SkinStyle = System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin4;
        //            chartArea1.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Shingle;
        //            chartArea1.Name = "ChartArea1";
        //            this.DriverChart.ChartAreas.Add(chartArea1);
        //            this.DriverChart.Dock = System.Windows.Forms.DockStyle.Fill;
        //            legend1.Name = "Legend1";
        //            this.DriverChart.Legends.Add(legend1);
        //            this.DriverChart.Location = new System.Drawing.Point(0, 0);
        //            this.DriverChart.Name = "DriverChart";
        //            series1.ChartArea = "ChartArea1";
        //            series1.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar;
        //            series1.CustomProperties = "BarLabelStyle=Left";
        //            series1.Font = new System.Drawing.Font("Tahoma", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        //            series1.IsXValueIndexed = true;
        //            series1.Legend = "Legend1";
        //            series1.Name = "Series1";
        //            dataPoint1.AxisLabel = "Danish";
        //            dataPoint1.CustomProperties = "DrawingStyle=Emboss, BarLabelStyle=Outside";
        //            dataPoint1.Font = new System.Drawing.Font("Tahoma", 7F);
        //            dataPoint1.IsValueShownAsLabel = false;
        //            dataPoint1.IsVisibleInLegend = true;
        //            dataPoint1.Label = "danish";
        //            dataPoint1.LabelAngle = 0;
        //            dataPoint1.LabelBorderDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Dash;
        //            dataPoint1.LabelBorderWidth = 1;
        //            dataPoint1.LabelFormat = "";
        //            dataPoint1.LegendText = "ali";
        //            dataPoint2.AxisLabel = "Naveed";
        //            dataPoint2.Label = "";
        //            dataPoint2.LabelFormat = "";
        //            dataPoint2.LegendText = "ali";
        //            series1.Points.Add(dataPoint1);
        //            series1.Points.Add(dataPoint2);
        //            series1.Points.Add(dataPoint3);
        //            series1.Points.Add(dataPoint4);
        //            series1.Points.Add(dataPoint5);
        //            series1.Points.Add(dataPoint6);
        //            series1.Points.Add(dataPoint7);
        //            series1.Points.Add(dataPoint8);
        //            series1.Points.Add(dataPoint9);
        //            series1.Points.Add(dataPoint10);
        //            series1.Points.Add(dataPoint11);
        //            series1.Points.Add(dataPoint12);
        //            this.DriverChart.Series.Add(series1);
        //            this.DriverChart.Size = new System.Drawing.Size(711, 656);
        //            this.DriverChart.TabIndex = 0;
        //            this.DriverChart.Text = "chart1";
        //        }

        //        bool loginWise = false;

        //        if (optDriverWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
        //        {
        //            fromDate = null;
        //            tillDate = null;
        //            loginWise = true;
        //        }

        //        var resultList = new TaxiDataContext().stp_DriverStats(fromDate, tillDate, loginWise).ToList();

        //        grdStats.DataSource = resultList;

        //        DriverChart.Series[0].Points.Clear();

        //        foreach (var obj in resultList.Where(c => c.Earned > 0))
        //        {

        //            System.Windows.Forms.DataVisualization.Charting.DataPoint point = new System.Windows.Forms.DataVisualization.Charting.DataPoint();
        //            point.Label = obj.DriverNo;
        //            point.AxisLabel = obj.DriverNo;
        //            point.LabelForeColor = Color.Navy;
        //            point.LabelToolTip = obj.DriverName;
        //            point.YValues[0] = (double)obj.Earned;
        //            point.SetCustomProperty("BarLabelStyle", "Outside");


        //            if ((obj.DriverNo.IsNumeric()))
        //            {
        //                point.XValue = Convert.ToDouble(obj.DriverNo);
        //            }
        //            DriverChart.Series[0].Points.Add(point);

        //        }


        //        grdStats.Columns["DriverId"].IsVisible = false;
        //        grdStats.Columns["DriverNo"].HeaderText = "No";

        //        grdStats.Columns["DriverName"].Width = 130;
        //        grdStats.Columns["DriverName"].HeaderText = "Driver Name";

        //        grdStats.Columns["JobsDone"].HeaderText = "Jobs Done";

        //        grdStats.Columns["JobsDone"].Width = 80;
        //        grdStats.Columns["Earned"].Width = 80;
        //        grdStats.Columns["Earned"].HeaderText = "Earned (£)";

        //        grdStats.Columns["WaitingSince"].Width = 150;
        //        grdStats.Columns["WaitingSince"].HeaderText = "Waiting Since";


        //        grdStats.ReadOnly = true;

        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}


        private void LoadDriverBookingStats()
        {

            try
            {
                if (DriverChart == null)
                {
                    this.DriverChart = new System.Windows.Forms.DataVisualization.Charting.Chart();
                    ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).BeginInit();
                    this.splitContainer1.Panel2.Controls.Add(this.DriverChart);

                    this.DriverChart.Location = new System.Drawing.Point(0, 0);
                    this.DriverChart.Name = "DriverChart";
                    this.DriverChart.Size = new System.Drawing.Size(300, 300);
                    this.DriverChart.TabIndex = 0;

                    ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).EndInit();
                }
                System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
                System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
                System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series();
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint1 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 20);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint2 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 50);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint3 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint4 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint5 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint6 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint7 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint8 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint9 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint10 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint11 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
                System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint12 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);


                if (DriverChart.ChartAreas.Count == 0)
                {



                    this.DriverChart.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkUpwardDiagonal;
                    this.DriverChart.BorderlineDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;
                    this.DriverChart.BorderlineWidth = 2;
                    this.DriverChart.BorderSkin.BackColor = System.Drawing.Color.SteelBlue;
                    this.DriverChart.BorderSkin.SkinStyle = System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin4;
                    chartArea1.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Shingle;
                    chartArea1.Name = "ChartArea1";
                    this.DriverChart.ChartAreas.Add(chartArea1);
                    this.DriverChart.Dock = System.Windows.Forms.DockStyle.Fill;
                    legend1.Name = "Legend1";
                    this.DriverChart.Legends.Add(legend1);
                    this.DriverChart.Location = new System.Drawing.Point(0, 0);
                    this.DriverChart.Name = "DriverChart";
                    series1.ChartArea = "ChartArea1";
                    series1.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar;
                    series1.CustomProperties = "BarLabelStyle=Left";
                    series1.Font = new System.Drawing.Font("Tahoma", 3F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    series1.IsXValueIndexed = true;
                    series1.Legend = "Legend1";
                    series1.IsVisibleInLegend = false;



                    dataPoint1.AxisLabel = "Danish";
                    dataPoint1.CustomProperties = "DrawingStyle=Emboss, BarLabelStyle=Outside";
                    dataPoint1.Font = new System.Drawing.Font("Tahoma", 7F);
                    dataPoint1.IsValueShownAsLabel = true;
                    dataPoint1.IsVisibleInLegend = false;
                    dataPoint1.Label = "danish";
                    dataPoint1.LabelAngle = 0;
                    dataPoint1.LabelBorderDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;
                    dataPoint1.LabelBorderWidth = 1;
                    dataPoint1.LabelFormat = "";
                    dataPoint1.LegendText = "ali";

                    dataPoint2.AxisLabel = "Naveed";
                    dataPoint2.Label = "";
                    dataPoint2.LabelFormat = "";
                    dataPoint2.LegendText = "ali";
                    series1.Points.Add(dataPoint1);
                    series1.Points.Add(dataPoint2);
                    series1.Points.Add(dataPoint3);
                    series1.Points.Add(dataPoint4);
                    series1.Points.Add(dataPoint5);
                    series1.Points.Add(dataPoint6);
                    series1.Points.Add(dataPoint7);
                    series1.Points.Add(dataPoint8);
                    series1.Points.Add(dataPoint9);
                    series1.Points.Add(dataPoint10);
                    series1.Points.Add(dataPoint11);
                    series1.Points.Add(dataPoint12);

                    this.DriverChart.Series.Add(series1);
                    this.DriverChart.Size = new System.Drawing.Size(711, 656);
                    this.DriverChart.TabIndex = 0;
                    this.DriverChart.Text = "chart1";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.Title = "Driver";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.TitleFont = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                    this.DriverChart.ChartAreas["ChartArea1"].AxisY.Title = "Earned";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisY.TitleFont = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.LabelStyle.Enabled = false;
                    DriverChart.ChartAreas["ChartArea1"].AxisX.MajorGrid.LineWidth = 0;
                    DriverChart.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;


                }

                bool loginWise = false;

                if (optDriverWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
                {
                    fromDate = null;
                    tillDate = null;
                    loginWise = true;
                }

                var resultList = new TaxiDataContext().stp_DriverStats(fromDate, tillDate, loginWise).ToList();

                grdStats.DataSource = resultList;

                DriverChart.Series[0].Points.Clear();

                foreach (var obj in resultList.Where(c => c.Earned > 0))
                {

                    System.Windows.Forms.DataVisualization.Charting.DataPoint point = new System.Windows.Forms.DataVisualization.Charting.DataPoint();
                    point.Label = obj.DriverNo;

                    point.AxisLabel = obj.DriverNo;
                    point.LabelForeColor = Color.Black;

                    point.LabelToolTip = obj.DriverName;
                    point.Font = new System.Drawing.Font("Tahoma", 12F);
                    point.SetCustomProperty("BarLabelStyle", "Outside");
                    point.YValues[0] = (double)obj.Earned;

                    if ((obj.DriverNo.IsNumeric()))
                    {

                        point.XValue = Convert.ToDouble(obj.DriverNo);
                        DriverChart.Series[0].Points.Add(point);
                    }

                }


                grdStats.Columns["DriverId"].IsVisible = false;
                grdStats.Columns["DriverNo"].HeaderText = "No";

                grdStats.Columns["DriverName"].Width = 130;
                grdStats.Columns["DriverName"].HeaderText = "Driver Name";

                grdStats.Columns["JobsDone"].HeaderText = "Jobs Done";

                grdStats.Columns["JobsDone"].Width = 80;
                grdStats.Columns["Earned"].Width = 80;
                grdStats.Columns["Earned"].HeaderText = "Earned (£)";

                grdStats.Columns["WaitingSince"].Width = 150;
                grdStats.Columns["WaitingSince"].HeaderText = "Waiting Since";


                grdStats.ReadOnly = true;

            }
            catch (Exception ex)
            {

            }
        }

        private DateTime? GetLoginDate(ref DateTime? loginDate, int? driverId)
        {
            DateTime? rtn = null;
            GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == driverId);
            if (row != null)
                rtn = row.Cells["LoginDate"].Value.ToDateTime();

            return rtn;
        }

        private void AddAssignJobColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 60;

            col.Name = "btnAssignJob";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Assign Job";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

        }

        private void AddClearJobColumn(RadGridView grid)
        {



            GridViewCommandColumn col = new GridViewCommandColumn();

            col.AutoSizeMode = BestFitColumnMode.DisplayedDataCells;
            col.Name = "btnClearJob";
            col.UseDefaultText = true;
            //  col.ImageLayout = System.Windows.Forms.ImageLayout.Center;

            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
           

            if (grid.Name == "grdOnBoardDriver")
            {
                col.IsVisible = false;
                col.DefaultText = "C";
                col.Width = 20;
            }
            else
            {

                col.DefaultText = "Clear";
                col.Width = 50;

            }


            grid.Columns.Add(col);

        }

        //    bool IsAlert = false;
        bool IsExpiring = false;
        int cnt = 0;


        frmJobDueAlert frmJobDue = null;
        private bool ZeroTimeRefresh = false;

      

        int dueCnt = 0;
        int prevDueCnt = 0;
        void timer1_Tick(object sender, EventArgs e)
        {


            if (AppVars.IsLogout || (worker != null && worker.IsBusy))
                return;



            try
            {

               

                dueCnt = 0;
                now = DateTime.Now;

                IsExpiring = false;
                cnt = 0;







                foreach (var item in grdPendingJobs.Rows)
                {


                    if (!grdPendingJobs.Enabled || (worker != null && worker.IsBusy))
                        break;


                    if (grdPendingJobs.Columns["TimeLeft"].IsVisible)
                    {
                        item.Cells["TimeLeft"].Value = Math.Ceiling(item.Cells["PickupDateTemp"].Value.ToDateTime().Subtract(now).TotalMinutes).ToInt();
                        item.Cells["TimeLeft"].Style.BackColor = Color.White;
                    }

                    if (item.Cells["PickupDateTemp"].Value.ToDateTime() > now)
                    {



                        if (item.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT && item.Cells["Plot"].Value.ToStr() == "")
                            cnt = listofLocationExpiry.Count(c =>c.LocationId!=null && c.Gen_Location.PostCode == item.Cells["FromPostCode"].Value.ToStr() && item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(c.ExpiryMins.ToInt()));
                        else
                        {

                            if (AutoBookingDueAlert == false)
                            {

                                cnt = listofLocationExpiry.Where(c => c.LocationId == null).Count(c => item.Cells["FromPostCode"].Value.ToStr().StartsWith(c.LocationPostCode) && item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(c.ExpiryMins.ToInt()));

                                if (cnt == 0 && listofLocationExpiry.Count(c => c.LocationId == null && item.Cells["FromPostCode"].Value.ToStr().StartsWith(c.LocationPostCode)) == 0)
                                {

                                    if (item.Cells["Due"].Value != null)
                                    {
                                        if ((item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(item.Cells["Due"].Value.ToDateTime().TimeOfDay.TotalMinutes)))
                                            cnt = 1;
                                    }
                                    else if (item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt()))
                                        cnt = 1;

                                }
                            }
                            else
                            {

                                if (item.Cells["MilesFromBase"].Value.ToDecimal() > 0)
                                {
                                    int mins = (AvgFirstBookingExpMins + ((item.Cells["MilesFromBase"].Value.ToDecimal() - 1) * EachAdditoinalBookingExpMins)).ToInt();

                                    if (item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(mins))
                                    {
                                        cnt = 1;
                                    }
                                    else
                                        cnt = 0;

                                }
                                else
                                {


                                    if (item.Cells["PickupDateTemp"].Value.ToDateTime() <= now.AddMinutes(AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt()))
                                        cnt = 1;
                                    else
                                        cnt = 0;


                                }

                            }

                        }

                        if (cnt > 0)
                        {
                            IsExpiring = true;


                        }




                        if (grdPendingJobs.Columns["TimeLeft"].IsVisible)
                        {

                            item.Cells["TimeLeft"].Style.ForeColor = Color.Green;
                            item.Cells["TimeLeft"].Style.CustomizeFill = true;
                        }


                        if (cnt == 0 || item.Cells["Passenger"].Style.BackColor == Color.Yellow)
                        {



                            if (item.Cells["Passenger"].Style.BackColor == Color.Yellow)
                            {


                                if (item.Cells["Plot"].ColumnInfo.IsVisible)
                                {

                                    item.Cells["Plot"].Style.BackColor = Color.White;
                                    item.Cells["Plot"].Style.CustomizeFill = false;
                                    item.Cells["Plot"].Style.DrawFill = false;
                                    item.Cells["Plot"].Style.Reset();

                                }





                                item.Cells["Time"].Style.BackColor = Color.White;
                                item.Cells["Time"].Style.CustomizeFill = false;
                                item.Cells["Time"].Style.DrawFill = false;
                                item.Cells["Time"].Style.Reset();

                                item.Cells["Passenger"].Style.BackColor = Color.White;
                                item.Cells["Passenger"].Style.CustomizeFill = false;
                                item.Cells["Passenger"].Style.DrawFill = false;
                                item.Cells["Passenger"].Style.Reset();


                                item.Cells["To"].Style.BackColor = Color.White;
                                item.Cells["To"].Style.CustomizeFill = false;
                                item.Cells["To"].Style.DrawFill = false;
                                item.Cells["To"].Style.Reset();


                                if (item.Cells["From"].ColumnInfo.IsVisible)
                                {

                                    item.Cells["From"].Style.BackColor = Color.White;
                                    item.Cells["From"].Style.CustomizeFill = false;
                                    item.Cells["From"].Style.DrawFill = false;
                                    item.Cells["From"].Style.Reset();

                                }

                                item.Cells["MobileNo"].Style.BackColor = Color.White;
                                item.Cells["MobileNo"].Style.CustomizeFill = false;
                                item.Cells["MobileNo"].Style.DrawFill = false;
                                item.Cells["MobileNo"].Style.Reset();

                                item.Cells["FromPostCode"].Style.BackColor = Color.White;
                                item.Cells["FromPostCode"].Style.CustomizeFill = false;
                                item.Cells["FromPostCode"].Style.DrawFill = false;
                                item.Cells["FromPostCode"].Style.Reset();



                                item.Cells["ToPostCode"].Style.BackColor = Color.White;
                                item.Cells["ToPostCode"].Style.CustomizeFill = false;
                                item.Cells["ToPostCode"].Style.DrawFill = false;
                                item.Cells["ToPostCode"].Style.Reset();



                                item.Cells["Driver"].Style.BackColor = Color.White;
                                item.Cells["Driver"].Style.CustomizeFill = false;
                                item.Cells["Driver"].Style.DrawFill = false;
                                item.Cells["Driver"].Style.Reset();



                                item.Cells["UpdateBy"].Style.BackColor = Color.White;
                                item.Cells["UpdateBy"].Style.CustomizeFill = false;
                                item.Cells["UpdateBy"].Style.DrawFill = false;
                                item.Cells["UpdateBy"].Style.Reset();



                                item.Cells["Fare"].Style.BackColor = Color.White;
                                item.Cells["Fare"].Style.CustomizeFill = false;
                                item.Cells["Fare"].Style.DrawFill = false;
                                item.Cells["Fare"].Style.Reset();
                            }

                        }
                        else
                        {



                            item.Cells["Plot"].Style.BackColor = Color.Yellow;
                            item.Cells["Plot"].Style.CustomizeFill = true;




                            item.Cells["Time"].Style.BackColor = Color.Yellow;
                            item.Cells["Time"].Style.CustomizeFill = true;


                            item.Cells["Passenger"].Style.BackColor = Color.Yellow;
                            item.Cells["Passenger"].Style.CustomizeFill = true;





                            item.Cells["To"].Style.BackColor = Color.Yellow;
                            item.Cells["To"].Style.CustomizeFill = true;


                            item.Cells["From"].Style.BackColor = Color.Yellow;
                            item.Cells["From"].Style.CustomizeFill = true;

                            item.Cells["MobileNo"].Style.BackColor = Color.Yellow;
                            item.Cells["MobileNo"].Style.CustomizeFill = true;


                            item.Cells["FromPostCode"].Style.BackColor = Color.Yellow;
                            item.Cells["FromPostCode"].Style.CustomizeFill = true;

                            item.Cells["ToPostCode"].Style.BackColor = Color.Yellow;
                            item.Cells["ToPostCode"].Style.CustomizeFill = true;




                            item.Cells["Driver"].Style.BackColor = Color.Yellow;
                            item.Cells["Driver"].Style.CustomizeFill = true;


                            item.Cells["UpdateBy"].Style.BackColor = Color.Yellow;
                            item.Cells["UpdateBy"].Style.CustomizeFill = true;




                            item.Cells["Fare"].Style.BackColor = Color.Yellow;
                            item.Cells["Fare"].Style.CustomizeFill = true;

                            dueCnt++;
                        }
                    }
                    else
                    {


                        if (grdPendingJobs.Columns["TimeLeft"].IsVisible)
                        {

                            item.Cells["TimeLeft"].Style.ForeColor = Color.Red;
                            item.Cells["TimeLeft"].Style.CustomizeFill = true;
                        }




                        item.Cells["UpdateBy"].Style.BackColor = Color.LightPink;
                        item.Cells["UpdateBy"].Style.CustomizeFill = true;

                        item.Cells["Driver"].Style.BackColor = Color.LightPink;
                        item.Cells["Driver"].Style.CustomizeFill = true;

                        item.Cells["To"].Style.BackColor = Color.LightPink;
                        item.Cells["To"].Style.CustomizeFill = true;

                        item.Cells["From"].Style.BackColor = Color.LightPink;
                        item.Cells["From"].Style.CustomizeFill = true;

                        item.Cells["MobileNo"].Style.BackColor = Color.LightPink;
                        item.Cells["MobileNo"].Style.CustomizeFill = true;


                        item.Cells["FromPostCode"].Style.BackColor = Color.LightPink;
                        item.Cells["FromPostCode"].Style.CustomizeFill = true;

                        item.Cells["ToPostCode"].Style.BackColor = Color.LightPink;
                        item.Cells["ToPostCode"].Style.CustomizeFill = true;



                        item.Cells["Passenger"].Style.BackColor = Color.LightPink;
                        item.Cells["Passenger"].Style.CustomizeFill = true;

                        item.Cells["Time"].Style.BackColor = Color.LightPink;
                        item.Cells["Time"].Style.CustomizeFill = true;



                        item.Cells["Plot"].Style.BackColor = Color.LightPink;
                        item.Cells["Plot"].Style.CustomizeFill = true;


                        item.Cells["Fare"].Style.BackColor = Color.LightPink;
                        item.Cells["Fare"].Style.CustomizeFill = true;


                        IsExpiring = true;

                        dueCnt++;
                    }


                }

              
               


                if (BookingAlertMins > 0)
                {
                    if (IsExpiring && grdPendingJobs.Rows.Count(c => c.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.PENDING
                             && c.Cells["BookingDateTime"].Value.ToDateTime().AddMinutes(5) < DateTime.Now) > 0)
                    {



                        if ((frmJobDue == null || frmJobDue.IsDisposed))
                        {
                            if (frmJobDue == null || frmJobDue.IsDisposed)
                            {

                                if (AppVars.JobDueAlertLastStopped == null || DateTime.Now > AppVars.JobDueAlertLastStopped)
                                {
                                    AppVars.JobDueAlertLastStopped = null;

                                    frmJobDue = new frmJobDueAlert();
                                    frmJobDue.Show();
                                }
                            }
                        }

                    }
                    else
                    {

                        StopJobDueSound();
                    }

                }


                if (ZeroTimeRefresh == false && string.Format("{0:hh:mm tt}", DateTime.Now) == "12:00 AM" && grdPreBookings.Rows.Count > 0)
                {
                    //if (now.TimeOfDay=TimeSpan.Zero string.Format("{0:hh:mm tt}", DateTime.Now) == "12:00 AM" && grdPreBookings.Rows.Count > 0)
                    //{
                    ZeroTimeRefresh = true;
                    //   PopulateData();
                    RefreshTodayAndPreData();

                }

                if (this.IsLicenseExpired)
                {


                    this.IsLicenseExpired = false;

                    frmLicenseKey frmLicense = new frmLicenseKey();
                    frmLicense.ShowDialog();

                    AppVars.frmMDI.CloseApplication();
                }


                if (CanReadSMS)
                {

                    if (btnSMS.BackColor == Color.Orange)
                    {

                        SetSMSBlinking(Color.AliceBlue);
                    }
                    else if (btnSMS.BackColor == Color.AliceBlue)
                    {

                        SetSMSBlinking(Color.Orange);
                    }


                    ////.............................................. Read all SMS ....................................................
                    //Thread th = new Thread(new ThreadStart(ReadSMS));
                    //th.Start();


                }




                if (EnablePDA)
                {




                    if (IsPanicMode)
                    {
                        if (grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] == objPanic)
                        {
                            grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;


                            grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;
                        }
                        else
                        {
                            grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanic;
                            grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanic;

                        }
                    }
                    else
                    {
                        if (grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] == objPanic)
                        {
                            grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;
                           grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;

                        }

                    }



                    if (IsExpiring)
                    {

                        if (dueCnt > 0)
                            //&& dueCnt != prevDueCnt)
                        {
                            prevDueCnt = dueCnt;

                            AutoDespatchActivity();

                        }

                    }
                    else
                    {
                        prevDueCnt = 0;
                        if (listofDrvRadius.Count > 0)
                        {
                            listofDrvRadius.Clear();

                        }

                    }        


                }


                //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                //  && grdPendingJobs.Rows.Count > 0 && grdPendingJobs.Rows.Count(c => c.Cells["Plot"].Value.ToStr() != "") > 0)
                //{

                //    thread_AutoDespatch = new Thread(new ThreadStart(PerformAutoDespatchActivity));
                //    thread_AutoDespatch.IsBackground = true;
                //    thread_AutoDespatch.Start();
                //}



                if (HasWebBookingTab)
                {


                    if (Pg_NewWebBookings.Tag != null)
                    {

                        if (Pg_NewWebBookings.Item.BackColor == Color.Orange)
                        {
                            Pg_NewWebBookings.Item.NumberOfColors = 1;
                            Pg_NewWebBookings.Item.BackColor = Color.FromName("ffe9f0f9");

                            Pg_NewWebBookings.Item.DrawFill = true;

                        }
                        else if (Pg_NewWebBookings.Item.BackColor == Color.FromName("ffe9f0f9"))
                        {


                            Pg_NewWebBookings.Item.NumberOfColors = 1;
                            Pg_NewWebBookings.Item.BackColor = Color.Orange;
                            Pg_NewWebBookings.Item.DrawFill = true;
                        }
                    }
                    else
                    {
                        Pg_NewWebBookings.Item.BackColor = Color.FromName("ffbfdbff");
                        Pg_NewWebBookings.Item.DrawFill = false;
                    }


                }





                if (!string.IsNullOrEmpty(updatemessage) || lblNotification.Text.Length > 0)
                {





                    if (lblNotification.Text.Equals(">>"))
                        lblNotification.Text = string.Empty;


                    if (updatemessage.Length > 0)
                    {

                        IsNotification = true;
                        lblNotification.Visible = true;

                        radLabel1.Text = "";
                        radLabel1.BackColor = Color.Red;

                        lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
                        xpos = 0;
                        ypos = 0;

                        if (string.IsNullOrEmpty(lblNotification.Text))
                            lblNotification.Text = updatemessage;

                        else
                            lblNotification.Text = updatemessage + " >> " + lblNotification.Text;


                        updatemessage = string.Empty;

                    }

                    foreach (Match m in new Regex(@"[0-9]{1,2}:[0-9]{1,2}").Matches(lblNotification.Text))
                    {
                        if (m.Success)
                        {
                            //if (DateTime.Now.Subtract(DateTime.Now.Date + TimeSpan.Parse(m.Value)).TotalMinutes >= 3)
                            //{
                            //    int idx = lblNotification.Text.Substring(0, m.Index + m.Length).LastIndexOf(">>");

                            //    if (idx == -1)
                            //        idx = 0;
                            //    else if (idx > 0)
                            //        idx--;

                            //    lblNotification.Text = lblNotification.Text.Remove(idx, (m.Index + m.Length) - idx).Trim();
                            //    break;
                            //}


                            notificationHideMins = DateTime.Now.TimeOfDay.Subtract(TimeSpan.Parse(m.Value)).TotalMinutes;


                            if (notificationHideMins < 0 || notificationHideMins >= 3)
                            {
                                int idx = lblNotification.Text.Substring(0, m.Index + m.Length).LastIndexOf(">>");

                                if (idx == -1)
                                    idx = 0;
                                else if (idx > 0)
                                    idx--;

                                lblNotification.Text = lblNotification.Text.Remove(idx, (m.Index + m.Length) - idx).Trim();
                                break;
                            }

                        }
                    }

                }
                else
                {
                    IsNotification = false;
                    radLabel1.BackColor = Color.Coral;
                    radLabel1.Text = "Today's Booking";

                }

                      
               

            }
            catch
            {

            }

        }





        double notificationHideMins = 0;

     //   TripletSetting objTripletSetting = null;

        long[] jobIds = null;

        //public void GetTripletObject()
        //{
        //    try
        //    {
        //        using (TaxiDataContext db = new TaxiDataContext())
        //        {

        //            objTripletSetting = db.TripletSettings.FirstOrDefault();
        //        }
        //    }
        //    catch
        //    {


        //    }


        //}

        private void OnSuccessAutoDespatchJobWithCompleteJobSMS(Booking job, Fleet_Driver objDrvInfo, ref List<string> listofErrors, string despatchReason)
        {



            if (AutoDespatchingWithCompleteJobSMS(job, job.Id, objDrvInfo.Id, objDrvInfo))
            {
                captionText = despatchReason;
                // captionText = "Job No : " + job.BookingNo.ToStr() + " AutoDespatch Successfully";

                contentText = "Driver : " + objDrvInfo.DriverNo + " - " + objDrvInfo.DriverName;
                contentText += Environment.NewLine + "Pickup Date-Time : "
                                                                  + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime);


                contentText += Environment.NewLine + "Pickup Point : " + job.FromAddress;
                contentImage = null;
                alertSound = System.Media.SystemSounds.Beep;

                MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null); });
                this.Invoke(mi);


            }


        }


        public bool AutoDespatchingWithCompleteJobSMS(Booking objBooking, long JobId, int driverId, Fleet_Driver ObjDriver)
        {







            try
            {

                if (ObjDriver != null && objBooking != null)
                {

                    string customerMobileNo = objBooking.CustomerMobileNo.ToStr().Trim();
                    // For testing Purpose
                    //  customerMobileNo = "03323755646"; 
                    //


                    string smsError2 = string.Empty;
                    EuroSMS objSMS = new EuroSMS();

                    objSMS.ToNumber = ObjDriver.MobileNo.ToStr().Trim();
                    objSMS.Message = GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), objBooking, JobId);

                    if (objSMS.Message.ToStr().Length > 0)
                    {

                        objSMS.Send(ref smsError2);


                    }


                    // IsSuccess2 = objSMS.Send(ref smsError2);

                    // Send To Customer
                    if (AppVars.objPolicyConfiguration.EnablePassengerText.ToBool() && objBooking.DisablePassengerSMS.ToBool() == false)
                    {

                        if (!string.IsNullOrEmpty(customerMobileNo))
                        {

                            objSMS.ToNumber = customerMobileNo;
                            objSMS.Message = GetMessage(AppVars.objPolicyConfiguration.DespatchTextForCustomer.ToStr(), objBooking, JobId);

                            if (objSMS.Message.ToStr().Length > 0)
                            {

                                objSMS.Send(ref smsError2);


                            }
                        }
                    }
                }



                (new TaxiDataContext()).stp_DespatchedJobWithLogReason(JobId, driverId, ObjDriver.DriverNo.ToStr(), false, false, false, true, AppVars.LoginObj.LoginName.ToStr(), Enums.BOOKINGSTATUS.DISPATCHED, false, "PRE-ALLOCATED");

                //if (chkCompleteJob.Checked == false)
                //{

                //  bool autoDespatch = objBooking.AutoDespatch.ToBool();
                //if ((!this.IsAutoDespatchActivity || !autoDespatch))
                //{






                //    Fleet_DriverQueueList driverCurrent = General.GetQueryable<Fleet_DriverQueueList>(c => c.Status == true && c.DriverId == driverId)
                //                                                       .OrderByDescending(c => c.Id).FirstOrDefault();

                //    if (driverCurrent != null)
                //    {

                //        General.OnDespatchUpdateDriverQueue(driverCurrent.Id, objBooking.Id, General.GetPostCodeMatch(objBooking.ToAddress.ToStr().Trim()));
                //        RefreshBookingList();

                //    }                       



                //    //RadDesktopAlert alert = new RadDesktopAlert();
                //    //alert.AutoCloseDelay = 5;
                //    //alert.FadeAnimationType = FadeAnimationType.None;

                //    //alert.CaptionText = "Job No : " + objBooking.BookingNo.ToStr() + " Despatch Successfully";
                //    //alert.ContentText = "Driver : " + ObjDriver.DriverName;

                //    //alert.ContentText += Environment.NewLine + "Pickup Date-Time : "
                //    //                                        + string.Format("{0:dd/MM/yyyy hh:mm tt}", objBooking.PickupDateTime);

                //    //alert.Show();

                //}

                // }


                return true;

            }
            catch
            {

                return false;

            }
        }

        private List<string> listofAllocatedAuthDrvsJobIDs = null;


        private bool IsPerformingAutoDespatchActivity = false;
        int jobTimeOutInterval = 0;
        private void PerformAutoDespatchActivity2(object o)
        {

            try
            {


                if (IsPerformingAutoDespatchActivity)
                {
                    try
                    {
                        File.AppendAllText("autodespatchlog.txt", DateTime.Now.ToStr() + ": performing autodespatch" + Environment.NewLine);

                    }
                    catch
                    {


                    }

                    return;
                }
                //    Console.WriteLine(thread_AutoDespatch.Name);

                IsPerformingAutoDespatchActivity = true;

                bool IsUpdated = false;
                bool checkAllocatedDrv = false;

                int autoDespatchType = AppVars.objPolicyConfiguration.AutoDespatchType.ToInt();

                if (autoDespatchType == 0)
                    return;


                if (jobTimeOutInterval == 0)
                {

                    if (AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt() >= 20)
                    {
                        jobTimeOutInterval = AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt();

                    }
                    else
                        jobTimeOutInterval = 115;

                }

                using (TaxiDataContext db = new TaxiDataContext())
                {


                    //if (objTripletSetting == null)
                    //{
                    //    objTripletSetting = db.TripletSettings.FirstOrDefault();
                    //}



                    if (listofCoordinates == null)
                        listofCoordinates = db.Gen_Coordinates.ToList();


                    var bookings = (from b in db.GetTable<Booking>().Where(c => jobIds.Contains(c.Id)
                        //     && (c.ZoneId != null || (c.FromPostCode != null && c.FromPostCode.Contains(" ")))
                                                                && (c.PickupDateTime >= DateTime.Now.AddMinutes(-60))


                                                                && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || c.BookingStatusId == Enums.BOOKINGSTATUS.ONHOLD
                                                                 || c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || c.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                                                 || c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || c.BookingStatusId == Enums.BOOKINGSTATUS.NOSHOW
                                                                 || c.BookingStatusId==Enums.BOOKINGSTATUS.BID)
                                                                 && ((c.AutoDespatch != null && c.AutoDespatch == true) || (c.IsBidding != null && c.IsBidding == true)))

                                    // orderby b.PickupDateTime ascending
                                    select b).ToList();



                    if (AppVars.objPolicyConfiguration.AutoDespatchPriorityForAccJobs.ToBool())
                    {

                        var list0 = bookings.Where(c => c.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT).OrderBy(c => c.BookingDate).ToList();

                        var list1 = bookings.Where(c => c.CompanyId != null && c.FromLocTypeId != Enums.LOCATION_TYPES.AIRPORT).OrderBy(c => c.BookingDate).ToList();

                        var list2 = bookings.Where(c => c.CompanyId == null && c.FromLocTypeId != Enums.LOCATION_TYPES.AIRPORT).OrderBy(c => c.PickupDateTime).ToList();


                        bookings = list0.Union(list1).Union(list2).ToList();
                    }
                    else
                    {

                        var list0 = bookings.Where(c => c.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT).OrderBy(c => c.BookingDate).ToList();


                        var list1 = bookings.Where(c => c.FromLocTypeId != Enums.LOCATION_TYPES.AIRPORT).OrderBy(c => c.PickupDateTime).ToList();


                        bookings = list0.Union(list1).ToList();

                    }


                    if (bookings.Count > 0)
                    {
                        double fojRadius = Convert.ToDouble(AppVars.objPolicyConfiguration.AutoDespatchFOJRadius);
                        double nearestDrvWithinRadius = Convert.ToDouble(AppVars.objPolicyConfiguration.AutoDespatchNearestDrvRadius);
                        int longestWaitingMins = AppVars.objPolicyConfiguration.AutoDespatchLongestWaitingMins.ToInt();


                        if (listofSuccessAutoDespatch == null)
                            listofSuccessAutoDespatch = new List<ClsAutoDespatchPlot>();
                        else
                            listofSuccessAutoDespatch.Clear();






                        //  DateTime minUpdateDate = DateTime.Now.AddMinutes(-2);


                        var listofDrvs = (from a in db.GetTable<Fleet_DriverQueueList>().Where(c => c.Status == true && (c.DriverWorkStatusId != Enums.Driver_WORKINGSTATUS.ONBREAK && c.DriverWorkStatusId != Enums.Driver_WORKINGSTATUS.SINBIN))
                                          join b in db.GetTable<Fleet_Driver_Location>().Where(c => c.Latitude != 0
                                              //     && c.UpdateDate >= minUpdateDate
                                              )
                                                  on a.DriverId equals b.DriverId
                                          select new
                                          {
                                              DriverId = a.DriverId,
                                              DriverInfo = a.Fleet_Driver,
                                              DriverLocation = b.LocationName,
                                              ZoneId = b.ZoneId,
                                              PlotDateTime = b.PlotDate,
                                              StatusId = a.DriverWorkStatusId,
                                              Latitude = b.Latitude,
                                              Longitude = b.Longitude,
                                              EstTime = b.EstimatedTimeLeft,
                                              WaitSince = a.WaitSinceOn,
                                              JobClearingZoneId = a.CurrentJobId != null ? a.Booking.DropOffZoneId : null
                                          }).ToList();

                        if (listofDrvs.Count > 0)
                        {


                            if (listofAllocatedAuthDrvsJobIDs != null)
                                listofAllocatedAuthDrvsJobIDs.Clear();


                            List<string> listofErrors = new List<string>();

                            int nearestRadius = AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToInt();


                            checkAllocatedDrv = false;
                            foreach (var job in bookings)
                            {
                              

                                if (job.ZoneId == null && autoDespatchType == Enums.AUTODESPATCH_TYPES.TOP_STANDING_QUEUE) // AutoDespatch Rule 1 :- Top Standing in Plot Queue
                                    continue;


                                if (job.ZoneId != null && job.Gen_Zone1.DefaultIfEmpty().EnableAutoDespatch.ToBool() == false)
                                    continue;




                                if (AppVars.objPolicyConfiguration.AutoDespatchAllJobs.ToBool() == false)
                                {
                                    if (job.DeadMileage.ToDecimal() > nearestRadius)
                                        continue;

                                }

                                if (job.DespatchDateTime != null && job.DespatchDateTime.Value.AddSeconds(jobTimeOutInterval) > DateTime.Now && job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                                    continue;

                                if (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.ONHOLD && job.OnHoldDateTime != null)
                                {

                                    if (job.OnHoldDateTime.ToDateTime().AddMinutes(job.OnHoldWaitingMins.ToInt()) > DateTime.Now)
                                        continue;

                                }
                                

                             


                                var pendingDrvs = General.GetQueryable<Booking>(null).Where(c => c.DriverId != null && c.DespatchDateTime != null
                                                                 &&
                                                                 (
                                                                         (
                                                                               (c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || c.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                                                                              && c.DespatchDateTime.Value.AddSeconds(jobTimeOutInterval) > DateTime.Now
                                                                         )

                                                                    ||
                                                                         (
                                                                               (c.BookingStatusId == Enums.BOOKINGSTATUS.FOJ && c.DespatchDateTime.Value.AddDays(1) > DateTime.Now)
                                                                         )


                                                                )
                                                                )
                                                                .Select(c => c.DriverId).Distinct().ToArray<int?>();


                                if (pendingDrvs.Count() > 0)
                                {
                                    foreach (var item in pendingDrvs)
                                    {
                                        listofDrvs.RemoveAll(c => c.DriverId == item);
                                    }

                                }
                                else
                                {
                                    listofDrvs.RemoveAll(c => listofSuccessAutoDespatch.Find(a => a.DriverId == c.DriverId) != null);

                                }



                                if (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING && job.DriverId != null && job.DespatchDateTime.Value.AddSeconds(jobTimeOutInterval) < DateTime.Now)
                                {

                                    if (listofDrvs.Count > 1 && listofDrvs.Count(c=>c.DriverId==job.DriverId) >0)
                                    {

                                        int rtn = 0;
                                        using (TaxiDataContext dbX = new TaxiDataContext())
                                        {

                                            rtn = dbX.ExecuteQuery<int>("stp_UpdateJobStatusWithDriver {0}, {1}, {2}", job.Id, 100, job.DriverId).FirstOrDefault();
                                        }


                                        if (rtn == 1)
                                        {

                                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);

                                        }

                                        continue; 
                                    }
                                }





                                int? RejectedJobDriverId = null;

                                //if (job.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || job.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED)
                                //{
                                //    int rejectRetry = AppVars.objPolicyConfiguration.NoResponseRetry.ToInt();

                                //    if (rejectRetry > 0)
                                //    {

                                //        int driverRejectCount = General.GetQueryable<Fleet_Driver_RejectJob>(c => c.BookingId == job.Id && c.DriverId == job.DriverId).Count();

                                //        if (driverRejectCount > rejectRetry)
                                //        {
                                //            RejectedJobDriverId = job.DriverId;


                                //            if (RejectedJobDriverId != null)
                                //            {
                                //                listofDrvs.RemoveAll(c => c.DriverId == RejectedJobDriverId);
                                //            }
                                //        }
                                //    }
                                
                                //}
                                if ((job.BookingStatusId == Enums.BOOKINGSTATUS.WAITING && job.DriverId != null) || job.BookingStatusId==Enums.BOOKINGSTATUS.NOSHOW || job.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || job.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED)
                                {
                                    int rejectRetry = AppVars.objPolicyConfiguration.NoResponseRetry.ToInt();

                                    if (rejectRetry > 0)
                                    {

                                        int driverRejectCount = General.GetQueryable<Fleet_Driver_RejectJob>(c => c.BookingId == job.Id && c.DriverId == job.DriverId).Count();

                                        if (driverRejectCount > rejectRetry)
                                        {
                                            RejectedJobDriverId = job.DriverId;


                                            if (RejectedJobDriverId != null)
                                            {
                                                listofDrvs.RemoveAll(c => c.DriverId == RejectedJobDriverId);
                                            }
                                        }



                                    }
                                    else
                                    {
                                        int driverRejectCount = General.GetQueryable<Fleet_Driver_RejectJob>(c => c.BookingId == job.Id && c.DriverId == job.DriverId).Count();


                                        RejectedJobDriverId = job.DriverId;
                                        if (driverRejectCount > 0 && RejectedJobDriverId != null)
                                        {
                                            listofDrvs.RemoveAll(c => c.DriverId == RejectedJobDriverId);
                                        }

                                    }

                                }


                                var listofJobAvailableDrvs = listofDrvs.Where(c => c.DriverId == 0).ToList();
                                string vehAttributes = job.Fleet_VehicleType.DefaultIfEmpty().AttributeValues.ToStr().Trim();

                                if (vehAttributes.Length > 0)
                                {
                                    listofJobAvailableDrvs = listofDrvs.Where(c => vehAttributes.Contains("," + c.DriverInfo.VehicleTypeId.ToStr() + ",")).ToList();
                                }
                                else
                                {

                                   // DRIVER ATTRIBUTES  WHC,YYY

                                   // JOB ATTRIBUTES ,TST,WHC,

                                    string jobAttributes = job.AttributeValues.ToStr().Trim();
                                    if (jobAttributes.Length > 0)
                                    {
                                        listofJobAvailableDrvs = listofDrvs.Where(c => jobAttributes.Contains("," + c.DriverInfo.AttributeValues.ToStr() + ",")).ToList();
                                    }
                                    else
                                    {

                                        listofJobAvailableDrvs = listofDrvs.Where(c => c.DriverInfo.Fleet_VehicleType.NoofPassengers >= job.Fleet_VehicleType.NoofPassengers).ToList();
                                    }
                                }


                                if (listofJobAvailableDrvs.Count == 0)
                                    continue;




                                if ((EnableAutoDespatchMode == false || job.AutoDespatch.ToBool() == false) && job.IsBidding.ToBool()   
                                    && AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() > 0)
                                {
                                    if (job.FareRate.ToDecimal() == 0 || job.FareRate.ToDecimal() > AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt())
                                        continue;

                                    if (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.BID)
                                        continue;

                                    Gen_Coordinate objJobCoord = null;

                                    if (job.FromPostCode.ToStr().Trim().Length > 0 && job.FromPostCode.ToStr().Trim().Contains(" "))
                                    {
                                        objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == job.FromPostCode);

                                        // Check for nearest driver
                                        if (objJobCoord == null)
                                        {
                                            var oo = GetDistance.PostCodeToLongLat(job.FromPostCode.ToStr().Trim().ToUpper(), "GB");

                                            if (oo != null)
                                            {

                                                objJobCoord = new Gen_Coordinate();
                                                objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                objJobCoord.Latitude = oo.Value.Latitude;
                                                objJobCoord.Longitude = oo.Value.Longitude;
                                            }
                                        }



                                        if (objJobCoord == null)
                                        {

                                            if (AppVars.objPolicyConfiguration.EnablePOI.ToBool())
                                            {
                                                try
                                                {

                                                    using (TaxiDataContext dbC = new TaxiDataContext())
                                                    {

                                                        var objClsCoord = dbC.stp_GetCoordinatesByRoadLevelData(null, job.FromPostCode.ToStr().Trim().ToUpper()).FirstOrDefault();
                                                        //var objClsCoord = dbC.ExecuteQuery(typeof(ClsCoord), "exec stp_GetCoordFromPAF 'HA2 0DU'", job.FromPostCode.ToStr().Trim().ToUpper());

                                                        if (objClsCoord != null)
                                                        {
                                                            objJobCoord = new Gen_Coordinate();
                                                            objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                            objJobCoord.Latitude = objClsCoord.Latitude;
                                                            objJobCoord.Longitude = objClsCoord.Longitude;

                                                        }
                                                    }
                                                }
                                                catch
                                                {


                                                }
                                            }
                                        }
                                    }


                                    int biddingRadius = job.ZoneId != null ? job.Gen_Zone1.BiddingRadius.ToInt() : 1000;
                                    if (biddingRadius <= 0)
                                        biddingRadius = 1000;

                                    int jobPax = job.Fleet_VehicleType.DefaultIfEmpty().NoofPassengers.ToInt();

                                    var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c =>
                                        //  c.DriverInfo.EnableBidding == true &&
                                        //c.DriverInfo.VehicleTypeId == job.VehicleTypeId
                                        // c.DriverInfo.Fleet_VehicleType.NoofPassengers >= jobPax

                                                                            //&&
                                                                                    (
                                                                                     c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                                     ||
                                                                                     (AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToDecimal() > 0
                                                                              && (c.StatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE
                                                                              || c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR

                                                                                         )

                                                                                      )
                                                                                  )
                                                                                  )


                                                                   select new
                                                                   {
                                                                       a,
                                                                       Distance = objJobCoord != null ? (new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                           , Convert.ToDouble(objJobCoord.Longitude)))) : 0.00
                                                                   }).Where(c => c.Distance <= biddingRadius);




                                    int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();


                                    if (driverIds.Count() > 0)
                                    {

                                        PutJobOnBidding(driverIds, job.Id);
                                        IsUpdated = true;
                                        new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                    }

                                    continue;
                                }
                                else
                                {
                                    if ((AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool() == false && EnableAutoDespatchMode == false))
                                        continue;

                                }



                                // Remove allocated driver of other jobs in this job
                                foreach (var book in bookings.Where(c => c.Id != job.Id && c.DriverId != null && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || c.BookingStatusId == Enums.BOOKINGSTATUS.ONHOLD)))
                                {
                                    listofJobAvailableDrvs.RemoveAll(c => c.DriverId == book.DriverId);

                                }


                                // Remove pending and notaccepted driver of other jobs in this job
                                foreach (var book in bookings.Where(c => c.Id != job.Id && c.DriverId != null && (c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING)))
                                {
                                    listofJobAvailableDrvs.RemoveAll(c => c.DriverId == book.DriverId);


                                }



                                // Remove Triplet JobDone Drivers
                                //if (objTripletSetting != null && objTripletSetting.ShiftType.ToInt() == 1 && objTripletSetting.JobPrice.ToDecimal() > 0 && job.FareRate.ToDecimal() >= objTripletSetting.JobPrice.ToDecimal())
                                //{
                                //    List<int?> listofTripletDrvs = new List<int?>();
                                //    foreach (var item in listofJobAvailableDrvs)
                                //    {
                                //        if (db.stp_IsTripletJobDoneByDriver(item.DriverId).FirstOrDefault().Column1.ToInt() == 1)
                                //        {
                                //            listofTripletDrvs.Add(item.DriverId);

                                //        }
                                //    }


                                //    if (listofTripletDrvs.Count < listofJobAvailableDrvs.Count(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE))
                                //    {

                                //        foreach (var item in listofTripletDrvs)
                                //        {
                                //            listofJobAvailableDrvs.RemoveAll(c => c.DriverId == item);
                                //        }
                                //    }
                                //}



                                //




                                // Check for Pre-Allocated Driver First

                                if (AppVars.objPolicyConfiguration.AutoDespatchPriorityForAllocatedDrv.ToBool() && job.AutoDespatch.ToBool() && (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING || job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING || job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOTACCEPTED)
                                    && job.DriverId != null && job.IsConfirmedDriver.ToBool())
                                {

                                    var objTopDrvInQueueAllocated = (from a in listofJobAvailableDrvs
                                                                     where a.DriverId == job.DriverId

                                                                     select new
                                                                     {
                                                                         a,
                                                                         //  Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),
                                                                         a.WaitSince
                                                                     }).FirstOrDefault();


                                    if (objTopDrvInQueueAllocated != null)
                                    {
                                        checkAllocatedDrv = true;

                                        if (objTopDrvInQueueAllocated.a.DriverInfo.HasPDA.ToBool() == false)
                                        {

                                            listofErrors.Clear();
                                            OnSuccessAutoDespatchJobWithCompleteJobSMS(job, objTopDrvInQueueAllocated.a.DriverInfo, ref listofErrors, "Job Auto Despatched to Pre-Allocated Drv '" + objTopDrvInQueueAllocated.a.DriverInfo.DriverNo.ToStr() + "' ");
                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueueAllocated.a.DriverId, JobId = job.Id });

                                            IsUpdated = true;
                                            continue;
                                        }
                                        else
                                        {

                                            if (objTopDrvInQueueAllocated.a.StatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                            {
                                                OnSuccessAutoDespatchJob(job, objTopDrvInQueueAllocated.a.DriverInfo, ref listofErrors, "Job Auto Despatched to Allocated Drv '" + objTopDrvInQueueAllocated.a.DriverInfo.DriverNo + "'");
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueueAllocated.a.DriverId, JobId = job.Id });
                                                IsUpdated = true;
                                            }
                                            else if (objTopDrvInQueueAllocated.a.StatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)
                                            {

                                                OnSuccessAutoDespatchJobWithFOJ(job, objTopDrvInQueueAllocated.a.DriverInfo, ref listofErrors, "Job Auto Despatched to Allocated Drv '" + objTopDrvInQueueAllocated.a.DriverInfo.DriverNo + "'", true);
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueueAllocated.a.DriverId, JobId = job.Id });
                                                IsUpdated = true;

                                            }


                                            continue;
                                        }

                                        // objNearestDrv = AllocatedDriver;

                                        // despatchReason = "Job Auto Despatched to Allocated Drv '" + AllocatedDriver.a.DriverInfo.DriverNo + "'";
                                    }
                                    else
                                    {
                                        // if allocated driver not found, then put job onhold and manual despatch and disable bidding on it.

                                        //string onHoldReason = "Job was ONHOLD on " + string.Format("{0:dd/MM/yyyy HH:mm}", DateTime.Now) + " when AutoDespatch, because Allocated Drv '" + job.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + "' was not found";
                                        //db.stp_AllocatedDriverNotFound("", job.Id, Enums.BOOKINGSTATUS.ONHOLD, false, false, onHoldReason);

                                        if (job.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.NOTACCEPTED)
                                        {

                                            if (listofAllocatedAuthDrvsJobIDs == null)
                                                listofAllocatedAuthDrvsJobIDs = new List<string>();


                                            listofAllocatedAuthDrvsJobIDs.Add(job.Id.ToStr());
                                        }
                                        continue;
                                    }
                                }

                                //


                                if (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {

                                    if (job.PriceBiddingExpiryDate == null)
                                        continue;

                                    if (job.PriceBiddingExpiryDate != null && job.PriceBiddingExpiryDate.Value.AddSeconds(10) > DateTime.Now)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            if (job.PriceBiddingExpiryDate != null && job.PriceBiddingExpiryDate.Value.AddSeconds(10) <= DateTime.Now
                                                && (job.Booking_Biddings.Count == 0 || job.Booking_Biddings.OrderByDescending(c => c.BiddingDateTime).FirstOrDefault(c => c.BiddingDateTime.Value.AddSeconds(10) < DateTime.Now) != null))
                                            {

                                                if (job.Booking_Biddings.Count > 0
                                                    && job.Booking_Biddings.OrderByDescending(c => c.BiddingDateTime).FirstOrDefault(c => c.BiddingDateTime.Value.AddSeconds(10) > DateTime.Now) != null)
                                                {
                                                    continue;

                                                }


                                            }
                                        }
                                        catch
                                        {


                                        }
                                    }
                                }
                             




                                if (autoDespatchType == Enums.AUTODESPATCH_TYPES.TOP_STANDING_QUEUE) // AutoDespatch Rule 1 :- Top Standing in Plot Queue
                                {
                                    listofJobAvailableDrvs = listofJobAvailableDrvs.Where(c => c.ZoneId != null).ToList();

                             

                                    var objTopDrvInQueue = listofJobAvailableDrvs.Where(c => (job.ZoneId != null && c.ZoneId == job.ZoneId) && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                                               .OrderBy(c => c.PlotDateTime).FirstOrDefault();


                                    if (AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt() > 0)
                                    {

                                        if (objTopDrvInQueue.DriverInfo.DriverCategory.ToInt() != AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                        {
                                            var highPriorityDriver = listofJobAvailableDrvs.Where(c => (job.ZoneId != null && c.ZoneId == job.ZoneId) && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                               .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                            if (highPriorityDriver != null)
                                            {
                                                objTopDrvInQueue = highPriorityDriver;
                                            }
                                            else
                                            {

                                                string reason = string.Empty;
                                                if (job.ZoneId != null && job.AutoDespatch.ToBool())
                                                {

                                                    //   var backupZones = zonesList.FirstOrDefault(c => c.Id == job.ZoneId).Gen_Zone_Backups;
                                                    var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                                    if (backupZones != null)
                                                    {

                                                        if (backupZones.BackupZone1Id != null && backupZones.BackupZone1Priority.ToBool())
                                                        {

                                                            highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone1Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                             .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                            if (highPriorityDriver != null)
                                                                reason = "Top Standing Drv of Job 1st Backup Plot";
                                                        }

                                                        if (highPriorityDriver == null && backupZones.BackupZone2Id != null)
                                                        {


                                                            highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone2Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                              .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                            if (highPriorityDriver != null)
                                                                reason = "Top Standing Drv of Job 2nd Backup Plot";
                                                        }


                                                        if (highPriorityDriver == null && backupZones.BackupZone3Id != null)
                                                        {


                                                            highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone3Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                              .OrderBy(c => c.PlotDateTime).FirstOrDefault();


                                                            if (highPriorityDriver != null)
                                                                reason = "Top Standing Drv of Job 3rd Backup Plot";
                                                        }

                                                        if (highPriorityDriver == null && backupZones.BackupZone4Id != null)
                                                        {


                                                            highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone4Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                              .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                            if (highPriorityDriver != null)
                                                                reason = "Top Standing Drv of Job 4th Backup Plot";
                                                        }
                                                    }

                                                }


                                                if (highPriorityDriver != null && job.AutoDespatch.ToBool())
                                                {


                                                    long rtnId = 0;
                                                    using (TaxiDataContext dbX = new TaxiDataContext())
                                                    {
                                                        rtnId = db.stp_IsJobAvailableForDriver(highPriorityDriver.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                    }

                                                    if (rtnId > 0)
                                                    {

                                                        OnSuccessAutoDespatchJob(job, highPriorityDriver.DriverInfo, ref listofErrors, reason);
                                                        listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = highPriorityDriver.DriverId, JobId = job.Id });
                                                        IsUpdated = true;
                                                    }

                                                    continue;

                                                }

                                            }
                                        }
                                    }

                                    // If Top Standing Available Driver exist
                                    if (objTopDrvInQueue != null && job.AutoDespatch.ToBool())
                                    {
                                        long rtnId = 0;
                                        using (TaxiDataContext dbX = new TaxiDataContext())
                                        {
                                            rtnId = db.stp_IsJobAvailableForDriver(objTopDrvInQueue.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                        }


                                        if (rtnId > 0)
                                        {
                                            listofErrors.Clear();

                                            OnSuccessAutoDespatchJob(job, objTopDrvInQueue.DriverInfo, ref listofErrors, "Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' of Job Plot");
                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueue.DriverId, JobId = job.Id });
                                            IsUpdated = true;
                                        }

                                    }
                                    else
                                    {
                                        // Top Standing Driver not exist

                                        // Check Driver in Backup Plots (Sub Rule 1)
                                        string reason = string.Empty;
                                        if (job.ZoneId != null && job.AutoDespatch.ToBool())
                                        {

                                            //   var backupZones = zonesList.FirstOrDefault(c => c.Id == job.ZoneId).Gen_Zone_Backups;
                                            var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                            if (backupZones != null)
                                            {

                                                if (backupZones.BackupZone1Id != null && backupZones.BackupZone1Priority.ToBool())
                                                {

                                                    objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone1Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                     .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                    if (objTopDrvInQueue != null)
                                                        reason = "Top Standing Drv of Job 1st Backup Plot";
                                                }

                                                if (objTopDrvInQueue == null && backupZones.BackupZone2Id != null)
                                                {


                                                    objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone2Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                      .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                    if (objTopDrvInQueue != null)
                                                        reason = "Top Standing Drv of Job 2nd Backup Plot";
                                                }


                                                if (objTopDrvInQueue == null && backupZones.BackupZone3Id != null)
                                                {


                                                    objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone3Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                      .OrderBy(c => c.PlotDateTime).FirstOrDefault();


                                                    if (objTopDrvInQueue != null)
                                                        reason = "Top Standing Drv of Job 3rd Backup Plot";
                                                }

                                                if (objTopDrvInQueue == null && backupZones.BackupZone4Id != null)
                                                {


                                                    objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone4Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                      .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                    if (objTopDrvInQueue != null)
                                                        reason = "Top Standing Drv of Job 4th Backup Plot";
                                                }
                                            }

                                        }



                                     


                                        if (objTopDrvInQueue != null && job.AutoDespatch.ToBool())
                                        {


                                            long rtnId = 0;
                                            using (TaxiDataContext dbX = new TaxiDataContext())
                                            {
                                                rtnId = db.stp_IsJobAvailableForDriver(objTopDrvInQueue.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                            }

                                            if (rtnId > 0)
                                            {

                                                OnSuccessAutoDespatchJob(job, objTopDrvInQueue.DriverInfo, ref listofErrors, reason);
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueue.DriverId, JobId = job.Id });
                                                IsUpdated = true;
                                            }

                                        }
                                        else
                                        {

                                            //if (objTopDrvInQueue == null && job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.STC && job.DropOffZoneId != null)
                                            //{

                                            //    objTopDrvInQueue = listofJobAvailableDrvs.Where(c => (job.DropOffZoneId != null && c.ZoneId == job.DropOffZoneId) && c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)
                                            //                                               .OrderBy(c => c.PlotDateTime).FirstOrDefault();




                                            //}



                                            if ( job.IsBidding.ToBool() && job.BookingStatusId.ToInt()!=Enums.BOOKINGSTATUS.BID && job.Gen_Zone1.EnableBidding.ToBool()
                                                && (AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() == 0 || (job.FareRate.ToDecimal() <= AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt()))
                                                        )
                                            {

                                                int biddingRadius = job.Gen_Zone1.BiddingRadius.ToInt();
                                                if (biddingRadius <= 0)
                                                    biddingRadius = 1000;

                                                string jobPostCode = job.FromPostCode.ToStr();
                                                if (jobPostCode.Contains(" ") == false)
                                                {
                                                    try
                                                    {
                                                        jobPostCode = General.GetPostCodeMatch(job.FromAddress.ToStr());
                                                    }
                                                    catch
                                                    {

                                                    }

                                                }



                                                Gen_Coordinate objJobCoord = null;
                                                if (jobPostCode.ToStr().Trim().Length == 0)
                                                {
                                                    try
                                                    {
                                                        using (TaxiDataContext dbX = new TaxiDataContext())
                                                        {
                                                            db.CommandTimeout = 3;
                                                            var coordJob = dbX.stp_getCoordinatesByAddress(job.FromAddress.ToStr().ToUpper().Trim(), "").ToList().FirstOrDefault();


                                                            if (coordJob != null)
                                                            {
                                                                objJobCoord = new Gen_Coordinate();
                                                                objJobCoord.Latitude = coordJob.Latitude;
                                                                objJobCoord.Longitude = coordJob.Longtiude;

                                                            }
                                                        }
                                                    }
                                                    catch
                                                    {


                                                    }


                                                }
                                                else
                                                {

                                                  objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == jobPostCode);
                                                }



                                              

                                                if (objJobCoord != null)
                                                {

                                                    int jobPax = 0;

                                                  if(vehAttributes.ToStr().Trim().Length==0)
                                                         jobPax= job.Fleet_VehicleType.DefaultIfEmpty().NoofPassengers.ToInt();

                                                    var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c =>
                                                        //  c.DriverInfo.EnableBidding == true &&
                                                        //c.DriverInfo.VehicleTypeId == job.VehicleTypeId
                                                                                     ( vehAttributes!="" || (c.DriverInfo.Fleet_VehicleType.NoofPassengers >= jobPax) )

                                                                                            &&
                                                                                                    (
                                                                                                     c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE

                                                                                                     || ((c.StatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE || c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)

                                                                                                                 && AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToInt() > 0
                                                                                                                 && AppVars.objPolicyConfiguration.EnableFOJ.ToBool()
                                                                                                            )
                                                                                                    )
                                                                                                  )


                                                                                   select new
                                                                                   {
                                                                                       a,
                                                                                       Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                                           , Convert.ToDouble(objJobCoord.Longitude)))
                                                                                   }).Where(c => c.Distance <= biddingRadius);




                                                    int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();


                                                    if (driverIds.Count() > 0)
                                                    {

                                                        PutJobOnBidding(driverIds, job.Id);
                                                        IsUpdated = true;
                                                        new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                    }
                                                }
                                            }


                                            else // No Driver is Availble for a Job
                                            {

                                                if (job.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.BID)
                                                {

                                                    OnFailedAutoDespatchJob(job);
                                                }
                                                else if (job.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.BID)
                                                {
                                                    try
                                                    {
                                                        new TaxiDataContext().ExecuteQuery<int>("update booking set pricebiddingexpirydate='" +string.Format("{0:yyyy/MM/dd HH:mm:ss}",DateTime.Now) + "' where id=" + job.Id);
                                                    }
                                                    catch
                                                    {


                                                    }
                                                }
                                            }
                                        }
                                    }
                                }



                                else if (autoDespatchType == Enums.AUTODESPATCH_TYPES.TOP_STANDING_QUEUE_NEAREST_DRIVER) // AutoDespatch Rule 2 :- Top Standing in Plot Queue with nearest driver
                                {
                                    try
                                    {

                                      //  var objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.DriverId == 0).FirstOrDefault();

                                        var objTopDrvInQueue = listofJobAvailableDrvs.Where(c => (job.ZoneId != null && c.ZoneId == job.ZoneId) && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                             .OrderBy(c => c.PlotDateTime)
                                                                             .FirstOrDefault();

                                        if (AppVars.objPolicyConfiguration.DefaultClientId == "cA$tle_A$$oc!Ate$_wm_l!m!ted")
                                        {
                                            objTopDrvInQueue = null;
                                        }


                                        if (AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt() > 0)
                                        {

                                            if (objTopDrvInQueue == null
                                                || (objTopDrvInQueue != null && objTopDrvInQueue.DriverInfo.DriverCategory.ToInt() != AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt()))
                                            {



                                                var highPriorityDriver = listofJobAvailableDrvs.Where(c => (job.ZoneId != null && c.ZoneId == job.ZoneId) && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                                   .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                if (highPriorityDriver != null)
                                                {
                                                    objTopDrvInQueue = highPriorityDriver;
                                                }
                                                else
                                                {

                                                    string reason = string.Empty;
                                                    if (job.ZoneId != null && job.AutoDespatch.ToBool())
                                                    {

                                                        //   var backupZones = zonesList.FirstOrDefault(c => c.Id == job.ZoneId).Gen_Zone_Backups;
                                                        var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                                        if (backupZones != null)
                                                        {

                                                            if (backupZones.BackupZone1Id != null && backupZones.BackupZone1Priority.ToBool())
                                                            {

                                                                highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone1Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                 .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                                if (highPriorityDriver != null)
                                                                    reason = "Top Standing Drv of Job 1st Backup Plot";
                                                            }

                                                            if (highPriorityDriver == null && backupZones.BackupZone2Id != null)
                                                            {


                                                                highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone2Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                  .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                                if (highPriorityDriver != null)
                                                                    reason = "Top Standing Drv of Job 2nd Backup Plot";
                                                            }


                                                            if (highPriorityDriver == null && backupZones.BackupZone3Id != null)
                                                            {


                                                                highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone3Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                  .OrderBy(c => c.PlotDateTime).FirstOrDefault();


                                                                if (highPriorityDriver != null)
                                                                    reason = "Top Standing Drv of Job 3rd Backup Plot";
                                                            }

                                                            if (highPriorityDriver == null && backupZones.BackupZone4Id != null)
                                                            {


                                                                highPriorityDriver = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone4Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                                  .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                                if (highPriorityDriver != null)
                                                                    reason = "Top Standing Drv of Job 4th Backup Plot";
                                                            }
                                                        }

                                                    }


                                                    if (highPriorityDriver != null && job.AutoDespatch.ToBool())
                                                    {


                                                        long rtnId = 0;
                                                        using (TaxiDataContext dbX = new TaxiDataContext())
                                                        {
                                                            rtnId = db.stp_IsJobAvailableForDriver(highPriorityDriver.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                        }

                                                        if (rtnId > 0)
                                                        {

                                                            OnSuccessAutoDespatchJob(job, highPriorityDriver.DriverInfo, ref listofErrors, reason);
                                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = highPriorityDriver.DriverId, JobId = job.Id });
                                                            IsUpdated = true;
                                                        }

                                                        continue;
                                                    }
                                                }
                                            }
                                        }




                                        // If Top Standing Available Driver exist
                                        if (objTopDrvInQueue != null && job.AutoDespatch.ToBool())
                                        {
                                            long rtnId = 0;
                                            using (TaxiDataContext dbX = new TaxiDataContext())
                                            {
                                                rtnId = db.stp_IsJobAvailableForDriver(objTopDrvInQueue.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                            }


                                            if (rtnId > 0)
                                            {


                                                listofErrors.Clear();
                                                OnSuccessAutoDespatchJob(job, objTopDrvInQueue.DriverInfo, ref listofErrors, "Job Auto Despatched to the Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' ");
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueue.DriverId, JobId = job.Id });

                                                IsUpdated = true;
                                            }

                                        }
                                        else
                                        {
                                            // Top Standing Driver not exist

                                            // Check Driver in Backup Plots (Sub Rule 1)
                                            // var backupZones = zonesList.FirstOrDefault(c => c.Id == job.ZoneId).Gen_Zone_Backups;
                                            string reason = string.Empty;
                                            if (AppVars.objPolicyConfiguration.DefaultClientId != "cA$tle_A$$oc!Ate$_wm_l!m!ted" && job.ZoneId != null && job.AutoDespatch.ToBool())
                                            {

                                                var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                                if (backupZones != null)
                                                {

                                                    if (backupZones.BackupZone1Id != null && backupZones.BackupZone1Priority.ToBool())
                                                    {

                                                        objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone1Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                         .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                        if (objTopDrvInQueue != null)
                                                            reason = "Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' of Job 1st Backup Plot";
                                                    }

                                                    if (objTopDrvInQueue == null && backupZones.BackupZone2Id != null)
                                                    {


                                                        objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone2Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                          .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                        if (objTopDrvInQueue != null)
                                                            reason = "Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' of Job 2nd Backup Plot";
                                                    }


                                                    if (objTopDrvInQueue == null && backupZones.BackupZone3Id != null)
                                                    {


                                                        objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone3Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                          .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                        if (objTopDrvInQueue != null)
                                                            reason = "Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' of Job 3rd Backup Plot";
                                                    }

                                                    if (objTopDrvInQueue == null && backupZones.BackupZone4Id != null)
                                                    {


                                                        objTopDrvInQueue = listofJobAvailableDrvs.Where(c => c.ZoneId == backupZones.BackupZone4Id && c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                                                                          .OrderBy(c => c.PlotDateTime).FirstOrDefault();

                                                        if (objTopDrvInQueue != null)
                                                            reason = "Top Standing Drv '" + objTopDrvInQueue.DriverInfo.DriverNo.ToStr() + "' of Job 4th Backup Plot";
                                                    }
                                                }
                                            }


                                            if (objTopDrvInQueue != null && job.AutoDespatch.ToBool())
                                            {

                                                long rtnId = 0;
                                                using (TaxiDataContext dbX = new TaxiDataContext())
                                                {
                                                    rtnId = db.stp_IsJobAvailableForDriver(objTopDrvInQueue.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                }

                                                if (rtnId > 0)
                                                {

                                                    OnSuccessAutoDespatchJob(job, objTopDrvInQueue.DriverInfo, ref listofErrors, reason);
                                                    listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = objTopDrvInQueue.DriverId, JobId = job.Id });

                                                    IsUpdated = true;
                                                }
                                            }
                                            else
                                            {
                                                Gen_Coordinate objJobCoord = null;

                                                if (job.FromPostCode.ToStr().Trim().Length == 0 || job.FromPostCode.ToStr().Trim().Contains(" ") == false)
                                                {


                                                    string postcode = string.Empty;
                                                    try
                                                    {
                                                        postcode = General.GetPostCodeMatch(job.FromAddress.ToStr().ToUpper().Trim());
                                                    }
                                                    catch
                                                    {


                                                    }


                                                    if (postcode.ToStr().Trim().Length > 0)
                                                        objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == postcode);

                                                    // Check for nearest driver
                                                    //if (objJobCoord == null)
                                                    //{
                                                    //    var oo = GetDistance.PostCodeToLongLat(job.FromPostCode.ToStr().Trim().ToUpper(), "GB");

                                                    //    if (oo != null)
                                                    //    {

                                                    //        objJobCoord = new Gen_Coordinate();
                                                    //        objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                    //        objJobCoord.Latitude = oo.Value.Latitude;
                                                    //        objJobCoord.Longitude = oo.Value.Longitude;
                                                    //    }
                                                    //}

                                                }

                                                if (objJobCoord != null || (job.FromPostCode.ToStr().Trim().Length > 0 && job.FromPostCode.ToStr().Trim().Contains(" ")))
                                                {

                                                    if (objJobCoord == null)
                                                    {
                                                        objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == job.FromPostCode);

                                                        // Check for nearest driver
                                                        if (objJobCoord == null)
                                                        {
                                                            var oo = GetDistance.PostCodeToLongLat(job.FromPostCode.ToStr().Trim().ToUpper(), "GB");

                                                            if (oo != null)
                                                            {

                                                                objJobCoord = new Gen_Coordinate();
                                                                objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                                objJobCoord.Latitude = oo.Value.Latitude;
                                                                objJobCoord.Longitude = oo.Value.Longitude;
                                                            }
                                                        }
                                                    }



                                                    if (objJobCoord == null)
                                                    {

                                                        if (AppVars.objPolicyConfiguration.EnablePOI.ToBool())
                                                        {
                                                            try
                                                            {

                                                                using (TaxiDataContext dbC = new TaxiDataContext())
                                                                {

                                                                    var objClsCoord = dbC.stp_GetCoordinatesByRoadLevelData(null, job.FromPostCode.ToStr().Trim().ToUpper()).FirstOrDefault();
                                                                    //var objClsCoord = dbC.ExecuteQuery(typeof(ClsCoord), "exec stp_GetCoordFromPAF 'HA2 0DU'", job.FromPostCode.ToStr().Trim().ToUpper());

                                                                    if (objClsCoord != null)
                                                                    {
                                                                        objJobCoord = new Gen_Coordinate();
                                                                        objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                                        objJobCoord.Latitude = objClsCoord.Latitude;
                                                                        objJobCoord.Longitude = objClsCoord.Longitude;

                                                                    }
                                                                }
                                                            }
                                                            catch
                                                            {


                                                            }
                                                        }
                                                    }
                                                }

                                                if (objJobCoord != null)
                                                {



                                                    var otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == 50)
                                                                              select new
                                                                              {

                                                                                  a,
                                                                                  Distance = default(double),
                                                                              }).FirstOrDefault();


                                                    if (AppVars.objPolicyConfiguration.DefaultClientId == "cA$tle_A$$oc!Ate$_wm_l!m!ted" || longestWaitingMins > 0)
                                                    {



                                                        if (nearestDrvWithinRadius > 0)
                                                        {

                                                            var fullnearestlist = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                                      && c.WaitSince != null)
                                                                                   select new
                                                                                   {

                                                                                       a,
                                                                                       Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),


                                                                                   })
                                                                              .Where(c => c.Distance <= nearestDrvWithinRadius).OrderBy(c => c.a.WaitSince).ToList();

                                                            //otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                            //                            && c.WaitSince != null)
                                                            //                      select new
                                                            //                      {

                                                            //                          a,
                                                            //                          Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),


                                                            //                      })
                                                            //                    .Where(c => c.Distance <= nearestDrvWithinRadius).OrderBy(c => c.a.WaitSince).FirstOrDefault();

                                                            double dist1 = 0.0;
                                                            foreach (var item in fullnearestlist)
                                                            {
                                                                dist1 = item.Distance;

                                                                if (dist1 > 0.3)
                                                                {

                                                                    var dist = GetNearestDriverRadiusOnline(item.a.Latitude, item.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);

                                                                    if (dist == 0)
                                                                        dist = dist1;

                                                                    if (dist > 0)
                                                                    {
                                                                        if (dist <= nearestDrvWithinRadius)
                                                                        {
                                                                            otherNearestDriver = item;
                                                                            reason = "Job Auto Despatched to Nearest(" +Math.Round(dist1,2) + " mi)";
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    otherNearestDriver = item;
                                                                    reason = "Job Auto Despatched to Nearest(" + Math.Round(dist1, 2) + " mi)";
                                                                    break;

                                                                }                                                        
     
                                                            }


                                                            //if (otherNearestDriver == null)
                                                            //{

                                                              
                                                            //    foreach (var item in fullnearestlist.Where(c => c.Distance >= (nearestDrvWithinRadius / 2)).OrderBy(c => c.a.WaitSince).ToList())
                                                            //    {
                                                            //        dist1 = item.Distance;

                                                            //        if (dist1 > 0.3)
                                                            //        {

                                                            //            var dist = GetNearestDriverRadiusOnline(item.a.Latitude, item.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);

                                                            //            if (dist == 0)
                                                            //                dist = dist1;

                                                            //            if (dist > 0)
                                                            //            {
                                                            //                if (dist <= nearestDrvWithinRadius)
                                                            //                {
                                                            //                    otherNearestDriver = item;
                                                            //                    reason = "Job Auto Despatched to Nearest(" + dist1 + " mi)";
                                                            //                    break;
                                                            //                }
                                                            //            }
                                                            //        }
                                                            //        else
                                                            //        {
                                                            //            otherNearestDriver = item;
                                                            //            reason = "Job Auto Despatched to Nearest(" + dist1 + " mi)";
                                                            //            break;

                                                            //        }

                                                            //    }



                                                            //}

                                                        }
                                                        else
                                                        {
                                                            otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                                     && c.WaitSince != null)
                                                                                  select new
                                                                                  {
                                                                                      a,
                                                                                      Distance = default(double),

                                                                                  }).OrderBy(c => c.a.WaitSince).FirstOrDefault();


                                                            double distance = 0.00;
                                                            if (otherNearestDriver != null)
                                                            {
                                                                distance = otherNearestDriver.Distance;

                                                                if (otherNearestDriver.Distance > 0.2)
                                                                {

                                                                    var dist = GetNearestDriverRadiusOnline(otherNearestDriver.a.Latitude, otherNearestDriver.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);


                                                                    if (dist > 0)
                                                                    {
                                                                        if (dist > nearestDrvWithinRadius)
                                                                        {
                                                                            otherNearestDriver = null;
                                                                        }
                                                                        else
                                                                        {
                                                                            distance = dist;

                                                                        }
                                                                    }
                                                                }

                                                            }


                                                        }


                                                     

                                                        if (otherNearestDriver != null) // ADD OR CONDITION TO GET DRIVER DISTANCE FROM JOB FROM MAP POINT.
                                                        {
                                                            string waitSince = string.Empty;

                                                            try
                                                            {


                                                                if (otherNearestDriver.a.StatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && otherNearestDriver.a.WaitSince.ToStr() != string.Empty)
                                                                {

                                                                    waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(otherNearestDriver.a.WaitSince.Value));
                                                                    waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                                                                    if (waitSince.StartsWith("00"))
                                                                        waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                                                                    else if (waitSince.StartsWith("0"))
                                                                        waitSince = waitSince.Remove(0, 1);

                                                                    if (waitSince.Contains(":"))
                                                                        waitSince = waitSince.Replace(":", " hour(s) ").Trim();


                                                                    waitSince = "Wait Since : " + waitSince;
                                                                }


                                                            }
                                                            catch
                                                            {

                                                            }


                                                            if (nearestDrvWithinRadius > 0)
                                                            {
                                                                reason+=" Longest Waiting Drv - " + waitSince;
                                                            //    reason = "Job Auto Despatched to Nearest(" + distance + " mi) Longest Waiting Drv - " + waitSince;
                                                            }
                                                            else
                                                            {

                                                                reason = "Longest Waiting Drv - " + waitSince;
                                                            }
                                                        }




                                                    }
                                                    else
                                                    {
                                                        if (nearestDrvWithinRadius > 0)
                                                        {


                                                            otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)

                                                                                  select new
                                                                                  {
                                                                                      a,
                                                                                      Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                  }).Where(c => c.Distance < nearestDrvWithinRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                            if (otherNearestDriver != null && AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt() > 0)
                                                            {

                                                                if (otherNearestDriver.a.DriverInfo.DriverCategory.ToInt() != AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                {
                                                                    var objNearestHighPriorityDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())

                                                                                                        select new
                                                                                                        {
                                                                                                            a,
                                                                                                            Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                                        }).Where(c => c.Distance < nearestDrvWithinRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                                    if (objNearestHighPriorityDriver != null)
                                                                    {

                                                                        otherNearestDriver = objNearestHighPriorityDriver;

                                                                    }

                                                                }
                                                            }




                                                            double distance = 0.00;
                                                            if (otherNearestDriver != null)
                                                            {
                                                                distance = otherNearestDriver.Distance;

                                                                if (otherNearestDriver.Distance > 0.2)
                                                                {

                                                                    var dist = GetNearestDriverRadiusOnline(otherNearestDriver.a.Latitude, otherNearestDriver.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);


                                                                    if (dist > 0)
                                                                    {
                                                                        if (dist > nearestDrvWithinRadius)
                                                                        {
                                                                            otherNearestDriver = null;
                                                                        }
                                                                        else
                                                                        {
                                                                            distance = dist;

                                                                        }
                                                                    }
                                                                }

                                                            }


                                                            if (otherNearestDriver != null)
                                                            {
                                                                reason = "nearest Available Drv '" + otherNearestDriver.a.DriverInfo.DriverNo.ToStr() + "' "
                                                                          + Math.Round(distance, 2) + " miles away from Pickup";
                                                            }
                                                        }
                                                    }




                                                    if (otherNearestDriver == null && AppVars.objPolicyConfiguration.EnableFOJ.ToBool())
                                                    {

                                                        //if (nearestDrvWithinRadius == 0)
                                                        //    nearestDrvWithinRadius = 20;

                                                        try
                                                        {

                                                            //db.GetTable<Booking>().Count(a => a.BookingStatusId == Enums.BOOKINGSTATUS.FOJ
                                                            //       && a.DriverId != null && (a.DriverId == otherNearestDriver.a.DriverId)
                                                            //       && (a.PickupDateTime > DateTime.Now.AddDays(-1))) > 0)


                                                            //if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "JJTaxis")
                                                            //{


                                                            //    if (AppVars.objPolicyConfiguration.FOJLimit.ToInt() > 0)
                                                            //    {
                                                            //        int?[] FOJDrivers = db.stp_GetFOJDriversWithLimit(AppVars.objPolicyConfiguration.FOJLimit.ToInt()).Select(c => c.DriverId).ToArray<int?>();

                                                            //        foreach (var item in FOJDrivers)
                                                            //        {
                                                            //            listofJobAvailableDrvs.RemoveAll(c => c.DriverId == item);
                                                            //        }
                                                            //    }

                                                            //    otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                                            //                                                          (( c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)
                                                            //                                                             && (c.JobClearingZoneId != null && job.ZoneId == c.JobClearingZoneId)
                                                            //                                                            ))
                                                            //                          select new
                                                            //                          {
                                                            //                              a,
                                                            //                              Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                            //                          }).Where(c => c.Distance < fojRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                            //    if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                                            //    {

                                                            //        long rtnId = 0;
                                                            //        using (TaxiDataContext dbX = new TaxiDataContext())
                                                            //        {
                                                            //            rtnId = db.stp_IsJobAvailableForDriver(objTopDrvInQueue.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                            //        }

                                                            //        if (rtnId > 0)
                                                            //        {

                                                            //            listofErrors.Clear();
                                                            //            OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "FOJ Job Auto Despatched to nearest Drv clearing in Job Plot  "
                                                            //                          + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup", true);
                                                            //            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                            //            IsUpdated = true;
                                                            //            continue;
                                                            //        }
                                                            //    }
                                                            //}
                                                            //else
                                                            //{


                                                            if (AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToDecimal() > 0)
                                                            {

                                                                if (AppVars.objPolicyConfiguration.FOJLimit.ToInt() > 0)
                                                                {
                                                                    int?[] FOJDrivers = db.stp_GetFOJDriversWithLimit(AppVars.objPolicyConfiguration.FOJLimit.ToInt()).Select(c => c.DriverId).ToArray<int?>();

                                                                    foreach (var item in FOJDrivers)
                                                                    {
                                                                        listofJobAvailableDrvs.RemoveAll(c => c.DriverId == item);
                                                                    }
                                                                }

                                                                otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                                                                                                      (
                                                                                      c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)

                                                                                     )
                                                                                      select new
                                                                                      {
                                                                                          a,
                                                                                          Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                      }).Where(c => c.Distance < fojRadius).OrderBy(c => c.Distance).FirstOrDefault();



                                                                if (otherNearestDriver != null && AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt() > 0)
                                                                {

                                                                    if (otherNearestDriver.a.DriverInfo.DriverCategory.ToInt() != AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority.ToInt())
                                                                    {
                                                                        var objNearestHighPriorityDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                                                                                                                         (
                                                                                                         c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR && c.DriverInfo.DriverCategory == AppVars.objPolicyConfiguration.AutoDespatchDriverCategoryPriority)

                                                                                                        )
                                                                                                            select new
                                                                                                            {
                                                                                                                a,
                                                                                                                Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                                            }).Where(c => c.Distance < fojRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                                        if (objNearestHighPriorityDriver != null)
                                                                        {

                                                                            otherNearestDriver = objNearestHighPriorityDriver;

                                                                        }

                                                                    }
                                                                }


                                                                double distance = 0.00;
                                                                if (otherNearestDriver != null && otherNearestDriver.Distance > 0.2)
                                                                {
                                                                    distance = otherNearestDriver.Distance;

                                                                    var dist = GetNearestDriverRadiusOnline(otherNearestDriver.a.Latitude, otherNearestDriver.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);

                                                                    if (dist > 0)
                                                                    {
                                                                        if (dist > fojRadius)
                                                                        {
                                                                            otherNearestDriver = null;
                                                                        }
                                                                        else
                                                                        {
                                                                            distance = dist;

                                                                        }
                                                                    }
                                                                }

                                                                if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                                                {

                                                                    listofErrors.Clear();
                                                                    OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "FOJ Job Auto Despatched to nearest STC Drv  "
                                                                                  + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup", true);
                                                                    listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                                    IsUpdated = true;
                                                                    continue;
                                                                }
                                                            }
                                                            //  }
                                                        }
                                                        catch
                                                        {


                                                        }


                                                    }


                                                    if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                                    {

                                                        long rtnId = 0;
                                                        using (TaxiDataContext dbX = new TaxiDataContext())
                                                        {
                                                            rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                        }

                                                        if (rtnId > 0)
                                                        {


                                                            if (reason.ToStr().Trim().Length == 0)
                                                                reason = "Job Auto Despatched " + otherNearestDriver.a.DriverInfo.DriverNo.ToStr();

                                                            listofErrors.Clear();
                                                            OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, reason, false);
                                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                            IsUpdated = true;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        // Put Bidding Sub Rule 3
                                                        if (job.IsBidding.ToBool() && (job.ZoneId == null || job.Gen_Zone1.EnableBidding.ToBool())
                                                            && (AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() == 0 || (job.FareRate.ToDecimal() > 0 && job.FareRate.ToDecimal() <= AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt()))
                                                            )
                                                        {

                                                            int biddingRadius = job.ZoneId == null ? 1000 : job.Gen_Zone1.BiddingRadius.ToInt();
                                                            if (biddingRadius <= 0)
                                                                biddingRadius = 1000;


                                                            if (EnableBiddingMode)
                                                            {


                                                                //if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "JJTaxis")
                                                                //{

                                                                int jobPax = job.Fleet_VehicleType.DefaultIfEmpty().NoofPassengers.ToInt();

                                                                var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c =>
                                                                    //  c.DriverInfo.EnableBidding == true &&
                                                                    //c.DriverInfo.VehicleTypeId == job.VehicleTypeId
                                                                    //           c.DriverInfo.Fleet_VehicleType.NoofPassengers >= jobPax

                                                                                                      //  &&
                                                                                                                (
                                                                                                                 c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                                                                    //       ||
                                                                                                                    //       (AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToDecimal() > 0
                                                                                                                    //&& (c.StatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE
                                                                                                                    //|| c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR

                                                                                                          //           )

                                                                                                          //        )
                                                                                                              )
                                                                                                              )


                                                                                               select new
                                                                                               {
                                                                                                   a,
                                                                                                   Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                                                       , Convert.ToDouble(objJobCoord.Longitude)))
                                                                                               }).Where(c => c.Distance <= biddingRadius);




                                                                int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();


                                                                if (driverIds.Count() > 0)
                                                                {

                                                                    PutJobOnBidding(driverIds, job.Id);
                                                                    IsUpdated = true;
                                                                    new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                                }
                                                                // }
                                                                //else
                                                                //{

                                                                //    if (job.ZoneId != null)
                                                                //    {

                                                                //        var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c =>
                                                                //                                              c.DriverInfo.EnableBidding == true &&
                                                                //                                                  //c.DriverInfo.VehicleTypeId == job.VehicleTypeId
                                                                //                                                  //       c.DriverInfo.Fleet_VehicleType.NoofPassengers >= jobPax

                                                                //                                              //  &&
                                                                //                                                        (
                                                                //                                                         c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                //                                                  || c.StatusId == Enums.Driver_WORKINGSTATUS.ONROUTE
                                                                //                                                  || c.StatusId == Enums.Driver_WORKINGSTATUS.ARRIVED
                                                                //                                                  || c.StatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE
                                                                //                                                  || c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR

                                                                //                                                         )


                                                                //                                                      )


                                                                //                                       select new
                                                                //                                       {
                                                                //                                           a,
                                                                //                                           Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                //                                               , Convert.ToDouble(objJobCoord.Longitude)))
                                                                //                                       }).Where(c => c.Distance <= biddingRadius);




                                                                //        int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();


                                                                //        if (driverIds.Count() > 0)
                                                                //        {

                                                                //            PutJobOnBidding(driverIds, job.Id);
                                                                //            IsUpdated = true;
                                                                //            new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                                //        }
                                                                //    }

                                                                //}
                                                            }
                                                        }

                                                        else
                                                        {

                                                            OnFailedAutoDespatchJob(job);
                                                        }
                                                    }
                                                }

                                                // end bid


                                            }


                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        try
                                        {

                                            File.AppendAllText(Application.StartupPath + "\\autodespcatchlog.txt", DateTime.Now.ToStr() + ": " + ex.Message + Environment.NewLine);
                                        }
                                        catch
                                        {





                                        }
                                    }
                                }

                                else if (autoDespatchType == Enums.AUTODESPATCH_TYPES.NEAREST_DRIVER) // AutoDespatch Rule 3 :-  nearest driver
                                {

                                    if (job.AutoDespatch.ToBool() && AppVars.objPolicyConfiguration.AutoDespatchLongestWaitingMins.ToInt() > 0)
                                    {

                                        var longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null

                                                                   ).OrderBy(c => c.WaitSince)).FirstOrDefault();


                                        if (longestWaitingDriver != null)
                                        {
                                            string reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince);


                                            if (longestWaitingDriver != null)
                                            {

                                                OnSuccessAutoDespatchJob(job, longestWaitingDriver.DriverInfo, ref listofErrors, reason);
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = longestWaitingDriver.DriverId, JobId = job.Id });

                                                IsUpdated = true;
                                                continue;
                                            }

                                        }




                                    }


                                    Gen_Coordinate objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == job.FromPostCode);

                                    // Check for nearest driver
                                    if (objJobCoord == null)
                                    {
                                        var oo = GetDistance.PostCodeToLongLat(job.FromPostCode.ToStr().Trim().ToUpper(), "GB");

                                        if (oo != null)
                                        {

                                            objJobCoord = new Gen_Coordinate();
                                            objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                            objJobCoord.Latitude = oo.Value.Latitude;
                                            objJobCoord.Longitude = oo.Value.Longitude;
                                        }
                                    }


                                    if (objJobCoord == null)
                                    {

                                        if (AppVars.objPolicyConfiguration.EnablePOI.ToBool())
                                        {
                                            try
                                            {

                                                using (TaxiDataContext dbC = new TaxiDataContext())
                                                {

                                                    var objClsCoord = dbC.stp_GetCoordinatesByRoadLevelData(null, job.FromPostCode.ToStr().Trim().ToUpper()).FirstOrDefault();
                                                    //var objClsCoord = dbC.ExecuteQuery(typeof(ClsCoord), "exec stp_GetCoordFromPAF 'HA2 0DU'", job.FromPostCode.ToStr().Trim().ToUpper());

                                                    if (objClsCoord != null)
                                                    {
                                                        objJobCoord = new Gen_Coordinate();
                                                        objJobCoord.PostCode = job.FromPostCode.ToStr().Trim().ToUpper();
                                                        objJobCoord.Latitude = objClsCoord.Latitude;
                                                        objJobCoord.Longitude = objClsCoord.Longitude;

                                                    }
                                                }
                                            }
                                            catch
                                            {


                                            }
                                        }
                                    }



                                    // Check Driver in Backup Plots (Sub Rule 1)
                                    if (objJobCoord != null)
                                    {



                                        // Step 1 => Find nearest available driver within (3 nearestDrvWithinRadius) miles from job
                                        var otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)

                                                                  select new
                                                                  {
                                                                      a,
                                                                      Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                  }).Where(c => c.Distance < nearestDrvWithinRadius).OrderBy(c => c.Distance).FirstOrDefault();

                                        if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                        {

                                            long rtnId = 0;
                                            using (TaxiDataContext dbX = new TaxiDataContext())
                                            {
                                                rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                            }

                                            if (rtnId > 0)
                                            {


                                                listofErrors.Clear();
                                                OnSuccessAutoDespatchJob(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "Job Auto Despatched to nearest Drv '" + otherNearestDriver.a.DriverInfo.DriverNo.ToStr() + "' "
                                                              + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup");
                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                IsUpdated = true;
                                            }
                                        }
                                        else
                                        {

                                            if (AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToDecimal() > 0)
                                            {

                                                if (AppVars.objPolicyConfiguration.FOJLimit.ToInt() > 0)
                                                {
                                                    int?[] FOJDrivers = db.stp_GetFOJDriversWithLimit(AppVars.objPolicyConfiguration.FOJLimit.ToInt()).Select(c => c.DriverId).ToArray<int?>();

                                                    foreach (var item in FOJDrivers)
                                                    {
                                                        listofJobAvailableDrvs.RemoveAll(c => c.DriverId == item);
                                                    }
                                                }

                                                otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                                                                                      (
                                                                      c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)

                                                                     )
                                                                      select new
                                                                      {
                                                                          a,
                                                                          Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                      }).Where(c => c.Distance < fojRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                                {
                                                    long rtnId = 0;
                                                    using (TaxiDataContext dbX = new TaxiDataContext())
                                                    {
                                                        rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                    }

                                                    if (rtnId > 0)
                                                    {

                                                        listofErrors.Clear();
                                                        OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "FOJ Job Auto Despatched to nearest STC Drv  "
                                                                      + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup", true);
                                                        listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                        IsUpdated = true;
                                                        continue;
                                                    }
                                                }
                                            }



                                            if (otherNearestDriver == null)
                                            {

                                                // Put Bidding Sub Rule 3
                                                if (EnableBiddingMode && job.IsBidding.ToBool() && (job.ZoneId == null || job.Gen_Zone1.EnableBidding.ToBool())
                                                    && (AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() == 0 || (job.FareRate.ToDecimal() <= AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt()))
                                                    )
                                                {

                                                    int biddingRadius = job.ZoneId != null ? job.Gen_Zone1.BiddingRadius.ToInt() : 1000;
                                                    if (biddingRadius <= 0)
                                                        biddingRadius = 1000;


                                                    int jobPax = job.Fleet_VehicleType.DefaultIfEmpty().NoofPassengers.ToInt();

                                                    var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c =>
                                                        //  c.DriverInfo.EnableBidding == true &&
                                                        //c.DriverInfo.VehicleTypeId == job.VehicleTypeId
                                                                                                c.DriverInfo.Fleet_VehicleType.NoofPassengers >= jobPax

                                                                                            &&
                                                                                                    (
                                                                                                     c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                                                     ||
                                                                                                     (AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToDecimal() > 0
                                                                                              && (c.StatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE
                                                                                              || c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR

                                                                                                         )

                                                                                                      )
                                                                                                  )
                                                                                                  )


                                                                                   select new
                                                                                   {
                                                                                       a,
                                                                                       Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                                           , Convert.ToDouble(objJobCoord.Longitude)))
                                                                                   }).Where(c => c.Distance <= biddingRadius);




                                                    int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();


                                                    if (driverIds.Count() > 0)
                                                    {

                                                        PutJobOnBidding(driverIds, job.Id);
                                                        IsUpdated = true;
                                                        new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                    }
                                                }

                                                else
                                                {

                                                    OnFailedAutoDespatchJob(job);
                                                }
                                            }

                                        }

                                    }
                                }

                                else if (autoDespatchType == Enums.AUTODESPATCH_TYPES.LONGEST_WAITING_QUEUE) // AutoDespatch Rule 4:-  Longest Waiting Driver in Queue
                                {

                                    Gen_Coordinate objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == job.FromPostCode);


                                    string reason = string.Empty;
                                    // Check Driver in Backup Plots (Sub Rule 1)

                                    if (objJobCoord != null)
                                    {
                                        //  var objJobZone = zonesList.FirstOrDefault(c => c.Id == job.ZoneId);
                                        var objJobZone = job.Gen_Zone1.DefaultIfEmpty();

                                        var longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null
                                                                           && c.ZoneId != null && c.ZoneId == objJobZone.Id
                                                                        ).OrderBy(c => c.WaitSince)).FirstOrDefault();


                                        if (longestWaitingDriver != null)
                                        {
                                            reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince) + " of Job Plot";
                                        }

                                        else
                                        {


                                            if (job.ZoneId != null && job.AutoDespatch.ToBool())
                                            {

                                                var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                                if (backupZones != null)
                                                {

                                                    if (backupZones.BackupZone1Id != null && backupZones.BackupZone1Priority.ToBool())
                                                    {
                                                        longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null

                                                                                                         && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone1Id)
                                                                                                      ).OrderBy(c => c.WaitSince)).FirstOrDefault();





                                                        if (longestWaitingDriver != null)
                                                            reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince) + " of Job 1st Backup Plot";

                                                    }

                                                    if (longestWaitingDriver == null && backupZones.BackupZone2Id != null)
                                                    {


                                                        longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null

                                                                                                               && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone2Id)
                                                                                                            ).OrderBy(c => c.WaitSince)).FirstOrDefault();

                                                        if (longestWaitingDriver != null)
                                                            reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince) + " of Job 2nd Backup Plot";

                                                    }


                                                    if (longestWaitingDriver == null && backupZones.BackupZone3Id != null)
                                                    {


                                                        longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null

                                                                                                          && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone3Id)
                                                                                                       ).OrderBy(c => c.WaitSince)).FirstOrDefault();

                                                        if (longestWaitingDriver != null)
                                                            reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince) + " of Job 3rd Backup Plot";

                                                    }

                                                    if (longestWaitingDriver == null && backupZones.BackupZone4Id != null)
                                                    {


                                                        longestWaitingDriver = (listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null

                                                                                                            && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone4Id)
                                                                                                         ).OrderBy(c => c.WaitSince)).FirstOrDefault();

                                                        if (longestWaitingDriver != null)
                                                            reason = "Longest Waiting Drv '" + longestWaitingDriver.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.WaitSince) + " of Job 4th Backup Plot";

                                                    }
                                                }
                                            }

                                        }

                                        if (longestWaitingDriver == null)
                                        {

                                            var otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == 50)
                                                                      select new
                                                                      {

                                                                          a,
                                                                          Distance = default(double),
                                                                      }).FirstOrDefault();





                                            if (nearestDrvWithinRadius > 0)
                                            {


                                                otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                            && c.WaitSince != null)
                                                                      select new
                                                                      {

                                                                          a,
                                                                          Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),


                                                                      })
                                                                    .Where(c => c.Distance <= nearestDrvWithinRadius).OrderBy(c => c.a.WaitSince).FirstOrDefault();


                                                reason = "nearest Longest Waiting Drv - ";

                                            }
                                            else
                                            {
                                                otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                                         && c.WaitSince != null)
                                                                      select new
                                                                      {
                                                                          a,
                                                                          Distance = default(double),

                                                                      }).OrderBy(c => c.a.WaitSince).FirstOrDefault();

                                                reason = "Longest waiting Drv - ";


                                            }

                                            if (otherNearestDriver != null) // ADD OR CONDITION TO GET DRIVER DISTANCE FROM JOB FROM MAP POINT.
                                            {
                                                string waitSince = string.Empty;

                                                try
                                                {

                                                    if (otherNearestDriver.a.StatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && otherNearestDriver.a.WaitSince.ToStr() != string.Empty)
                                                    {
                                                        waitSince = GetTimeDifferenceInHourAndMin(otherNearestDriver.a.WaitSince.Value);
                                                        waitSince = "Wait Since : " + waitSince;
                                                    }

                                                }
                                                catch
                                                {

                                                }

                                                reason += waitSince;

                                            }



                                            if (otherNearestDriver != null)
                                            {


                                                long rtnId = 0;
                                                using (TaxiDataContext dbX = new TaxiDataContext())
                                                {
                                                    rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                }

                                                if (rtnId > 0)
                                                {

                                                    OnSuccessAutoDespatchJob(job, otherNearestDriver.a.DriverInfo, ref listofErrors, reason);
                                                    listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                    IsUpdated = true;


                                                }
                                                continue;
                                            }
                                            else
                                            {



                                                if (AppVars.objPolicyConfiguration.EnableFOJ.ToBool() && job.ZoneId != null && AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToInt() > 0)
                                                {

                                                    if (nearestDrvWithinRadius == 0)
                                                        nearestDrvWithinRadius = 2;

                                                    try
                                                    {
                                                        otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                                                                                              ((c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)

                                                                                                                    && (job.ZoneId == c.ZoneId)
                                                                                                                 ))
                                                                              select new
                                                                              {
                                                                                  a,
                                                                                  Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                              }).OrderBy(c => c.Distance).FirstOrDefault();

                                                        if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                                        {
                                                            long rtnId = 0;
                                                            using (TaxiDataContext dbX = new TaxiDataContext())
                                                            {
                                                                rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                                            }

                                                            if (rtnId > 0)
                                                            {

                                                                listofErrors.Clear();
                                                                OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "FOJ Job Auto Despatched to nearest Drv clearing in Job Plot '" + otherNearestDriver.a.DriverInfo.DriverNo.ToStr() + "' "
                                                                              + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup", true);
                                                                listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                                                IsUpdated = true;
                                                            }
                                                            continue;
                                                        }
                                                    }
                                                    catch
                                                    {


                                                    }
                                                }


                                            }

                                        }






                                        if (longestWaitingDriver != null)
                                        {

                                            OnSuccessAutoDespatchJob(job, longestWaitingDriver.DriverInfo, ref listofErrors, reason);
                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = longestWaitingDriver.DriverId, JobId = job.Id });

                                            IsUpdated = true;

                                        }
                                        else
                                        {
                                            if (EnableBiddingMode)
                                            {

                                                if (objJobZone.EnableBidding.ToBool())
                                                {

                                                    int biddingRadius = objJobZone.BiddingRadius.ToInt();
                                                    if (biddingRadius <= 0)
                                                        biddingRadius = 1000;



                                                    var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)

                                                                                   select new
                                                                                   {
                                                                                       a,
                                                                                       Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                                           , Convert.ToDouble(objJobCoord.Longitude)))
                                                                                   }).Where(c => c.Distance <= biddingRadius);




                                                    int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();

                                                    PutJobOnBidding(driverIds, job.Id);
                                                    IsUpdated = true;
                                                    new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                }
                                                else
                                                {
                                                    OnFailedAutoDespatchJob(job);
                                                }
                                            }
                                        }

                                    }




                                }


                                else if (autoDespatchType == Enums.AUTODESPATCH_TYPES.TOP_STANDING_QUEUE_NEAREST_DRIVER) // AutoDespatch Rule 5:-  Longest Waiting Driver in Queue
                                {

                                    Gen_Coordinate objJobCoord = listofCoordinates.FirstOrDefault(c => c.PostCode == job.FromPostCode);


                                    string reason = string.Empty;
                                    // Check Driver in Backup Plots (Sub Rule 1)

                                    if (objJobCoord != null)
                                    {

                                        var objJobZone = job.Gen_Zone1.DefaultIfEmpty();

                                        var longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && c.WaitSince != null
                                                                           && c.ZoneId != null && c.ZoneId == objJobZone.Id)

                                                                    select new
                                                                    {

                                                                        a,
                                                                        Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),


                                                                    })
                                                                    .Where(c => c.Distance <= nearestDrvWithinRadius).OrderBy(c => c.a.WaitSince)

                                                                        .OrderBy(c => c.a.WaitSince).FirstOrDefault();

                                        double distance = 0.00;
                                        if (longestWaitingDriver != null)
                                        {
                                            distance = longestWaitingDriver.Distance;

                                            if (longestWaitingDriver.Distance > 0.2)
                                            {

                                                var dist = GetNearestDriverRadiusOnline(longestWaitingDriver.a.Latitude, longestWaitingDriver.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);


                                                if (dist > 0)
                                                {
                                                    if (dist > nearestDrvWithinRadius)
                                                    {
                                                        longestWaitingDriver = null;
                                                    }
                                                    else
                                                    {
                                                        distance = dist;

                                                    }
                                                }
                                            }
                                        }






                                        if (longestWaitingDriver != null)
                                        {
                                            reason = "Longest and nearest[" + Math.Round(distance, 2) + " mi]" + " Waiting Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + "' " + GetTimeDifferenceInHourAndMin(longestWaitingDriver.a.WaitSince) + " of Job Plot";
                                        }

                                        else
                                        {

                                            if (nearestDrvWithinRadius > 0)
                                            {


                                                longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)

                                                                        select new
                                                                        {
                                                                            a,
                                                                            Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                        }).Where(c => c.Distance < nearestDrvWithinRadius).OrderBy(c => c.Distance).FirstOrDefault();


                                                distance = 0.00;
                                                if (longestWaitingDriver != null)
                                                {
                                                    distance = longestWaitingDriver.Distance;

                                                    if (longestWaitingDriver.Distance > 0.2)
                                                    {

                                                        var dist = GetNearestDriverRadiusOnline(longestWaitingDriver.a.Latitude, longestWaitingDriver.a.Longitude, objJobCoord.Latitude, objJobCoord.Longitude);


                                                        if (dist > 0)
                                                        {
                                                            if (dist > nearestDrvWithinRadius)
                                                            {
                                                                longestWaitingDriver = null;
                                                            }
                                                            else
                                                            {
                                                                distance = dist;

                                                            }
                                                        }
                                                    }
                                                }



                                                if (longestWaitingDriver != null)
                                                {
                                                    reason = "nearest Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + "' "
                                                              + Math.Round(distance, 2) + " miles away from Pickup";
                                                }
                                                else
                                                {
                                                    longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && (c.ZoneId != null && c.ZoneId == job.ZoneId))

                                                                            select new
                                                                            {
                                                                                a,
                                                                                Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                            }).OrderBy(c => c.Distance).FirstOrDefault();


                                                }

                                            }



                                            if (longestWaitingDriver == null && job.ZoneId != null && job.AutoDespatch.ToBool())
                                            {

                                                var backupZones = job.Gen_Zone1.DefaultIfEmpty().Gen_Zone_Backups.DefaultIfEmpty();


                                                if (backupZones != null)
                                                {

                                                    if (backupZones.BackupZone1Id != null)
                                                    {
                                                        longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone1Id))

                                                                                select new
                                                                                {
                                                                                    a,
                                                                                    Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                }).OrderBy(c => c.Distance).FirstOrDefault();





                                                        if (longestWaitingDriver != null)
                                                            reason = "Nearest Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + " of Job 1st Backup Plot";

                                                    }

                                                    if (longestWaitingDriver == null && backupZones.BackupZone2Id != null)
                                                    {


                                                        longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone2Id))

                                                                                select new
                                                                                {
                                                                                    a,
                                                                                    Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                }).OrderBy(c => c.Distance).FirstOrDefault();





                                                        if (longestWaitingDriver != null)
                                                            reason = "Nearest Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + " of Job 2nd Backup Plot";
                                                    }


                                                    if (longestWaitingDriver == null && backupZones.BackupZone3Id != null)
                                                    {


                                                        longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone3Id))

                                                                                select new
                                                                                {
                                                                                    a,
                                                                                    Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                }).OrderBy(c => c.Distance).FirstOrDefault();





                                                        if (longestWaitingDriver != null)
                                                            reason = "Nearest Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + " of Job 3rd Backup Plot";
                                                    }

                                                    if (longestWaitingDriver == null && backupZones.BackupZone4Id != null)
                                                    {


                                                        longestWaitingDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE && (c.ZoneId != null && c.ZoneId == backupZones.BackupZone4Id))

                                                                                select new
                                                                                {
                                                                                    a,
                                                                                    Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                                                                }).OrderBy(c => c.Distance).FirstOrDefault();



                                                        if (longestWaitingDriver != null)
                                                            reason = "Nearest Drv '" + longestWaitingDriver.a.DriverInfo.DriverNo.ToStr() + " of Job 4th Backup Plot";
                                                    }
                                                }
                                            }

                                        }

                                        //if (longestWaitingDriver == null)
                                        //{

                                        //    var otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == 50)
                                        //                              select new
                                        //                              {

                                        //                                  a,
                                        //                                  Distance = default(double),
                                        //                              }).FirstOrDefault();





                                        //    if (nearestDrvWithinRadius > 0)
                                        //    {


                                        //        otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                        //                                    && c.WaitSince != null)
                                        //                              select new
                                        //                              {

                                        //                                  a,
                                        //                                  Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude))),


                                        //                              })
                                        //                            .Where(c => c.Distance <= nearestDrvWithinRadius).OrderBy(c => c.a.WaitSince).FirstOrDefault();


                                        //        reason = "nearest Longest Waiting Drv - ";

                                        //    }
                                        //    else
                                        //    {
                                        //        otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                        //                                 && c.WaitSince != null)
                                        //                              select new
                                        //                              {
                                        //                                  a,
                                        //                                  Distance = default(double),

                                        //                              }).OrderBy(c => c.a.WaitSince).FirstOrDefault();

                                        //        reason = "Longest waiting Drv - ";


                                        //    }

                                        //    if (otherNearestDriver != null) // ADD OR CONDITION TO GET DRIVER DISTANCE FROM JOB FROM MAP POINT.
                                        //    {
                                        //        string waitSince = string.Empty;

                                        //        try
                                        //        {

                                        //            if (otherNearestDriver.a.StatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && otherNearestDriver.a.WaitSince.ToStr() != string.Empty)
                                        //            {
                                        //                waitSince = GetTimeDifferenceInHourAndMin(otherNearestDriver.a.WaitSince.Value);
                                        //                waitSince = "Wait Since : " + waitSince;
                                        //            }

                                        //        }
                                        //        catch
                                        //        {

                                        //        }

                                        //        reason += waitSince;

                                        //    }



                                        //    if (otherNearestDriver != null)
                                        //    {


                                        //        long rtnId = 0;
                                        //        using (TaxiDataContext dbX = new TaxiDataContext())
                                        //        {
                                        //            rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                        //        }

                                        //        if (rtnId > 0)
                                        //        {

                                        //            OnSuccessAutoDespatchJob(job, otherNearestDriver.a.DriverInfo, ref listofErrors, reason);
                                        //            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                        //            IsUpdated = true;


                                        //        }
                                        //        continue;
                                        //    }
                                        //    else
                                        //    {



                                        //        if (AppVars.objPolicyConfiguration.EnableFOJ.ToBool() && job.ZoneId != null && AppVars.objPolicyConfiguration.AutoDespatchFOJRadius.ToInt() > 0)
                                        //        {

                                        //            if (nearestDrvWithinRadius == 0)
                                        //                nearestDrvWithinRadius = 2;

                                        //            try
                                        //            {
                                        //                otherNearestDriver = (from a in listofJobAvailableDrvs.Where(c =>
                                        //                                                                      ((c.StatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)

                                        //                                                                            && (job.ZoneId == c.ZoneId)
                                        //                                                                         ))
                                        //                                      select new
                                        //                                      {
                                        //                                          a,
                                        //                                          Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude), Convert.ToDouble(objJobCoord.Longitude)))

                                        //                                      }).OrderBy(c => c.Distance).FirstOrDefault();

                                        //                if (otherNearestDriver != null && job.AutoDespatch.ToBool())
                                        //                {
                                        //                    long rtnId = 0;
                                        //                    using (TaxiDataContext dbX = new TaxiDataContext())
                                        //                    {
                                        //                        rtnId = db.stp_IsJobAvailableForDriver(otherNearestDriver.a.DriverId, job.Id).FirstOrDefault().DefaultIfEmpty().Id;

                                        //                    }

                                        //                    if (rtnId > 0)
                                        //                    {

                                        //                        listofErrors.Clear();
                                        //                        OnSuccessAutoDespatchJobWithFOJ(job, otherNearestDriver.a.DriverInfo, ref listofErrors, "FOJ Job Auto Despatched to nearest Drv clearing in Job Plot '" + otherNearestDriver.a.DriverInfo.DriverNo.ToStr() + "' "
                                        //                                      + Math.Round(otherNearestDriver.Distance, 2) + " miles away from Pickup", true);
                                        //                        listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = otherNearestDriver.a.DriverId, JobId = job.Id });

                                        //                        IsUpdated = true;
                                        //                    }
                                        //                    continue;
                                        //                }
                                        //            }
                                        //            catch
                                        //            {


                                        //            }
                                        //        }


                                        //    }

                                        //}






                                        if (longestWaitingDriver != null)
                                        {

                                            OnSuccessAutoDespatchJob(job, longestWaitingDriver.a.DriverInfo, ref listofErrors, reason);
                                            listofSuccessAutoDespatch.Add(new ClsAutoDespatchPlot { DriverId = longestWaitingDriver.a.DriverId, JobId = job.Id });

                                            IsUpdated = true;

                                        }
                                        else
                                        {
                                            if (EnableBiddingMode)
                                            {

                                                if (objJobZone.EnableBidding.ToBool())
                                                {

                                                    int biddingRadius = objJobZone.BiddingRadius.ToInt();
                                                    if (biddingRadius <= 0)
                                                        biddingRadius = 1000;



                                                    var objNearestDrvForBidding = (from a in listofJobAvailableDrvs.Where(c => c.StatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)

                                                                                   select new
                                                                                   {
                                                                                       a,
                                                                                       Distance = new LatLng(a.Latitude, a.Longitude).DistanceMiles(new LatLng(Convert.ToDouble(objJobCoord.Latitude)
                                                                                           , Convert.ToDouble(objJobCoord.Longitude)))
                                                                                   }).Where(c => c.Distance <= biddingRadius);




                                                    int[] driverIds = objNearestDrvForBidding.Select(c => c.a.DriverId.ToInt()).ToArray<int>();

                                                    PutJobOnBidding(driverIds, job.Id);
                                                    IsUpdated = true;
                                                    new TaxiDataContext().stp_UpdateJobStatus(job.Id, Enums.BOOKINGSTATUS.BID);
                                                }
                                                else
                                                {
                                                    OnFailedAutoDespatchJob(job);
                                                }
                                            }
                                            else
                                            {
                                                OnFailedAutoDespatchJob(job);
                                            }
                                        }

                                    }




                                }
                            }
                        }

                    }
                }


                if (IsUpdated)
                {
                    //doneauto
                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                }

                if ((listofAllocatedAuthDrvsJobIDs != null && listofAllocatedAuthDrvsJobIDs.Count > 0) || checkAllocatedDrv == true)
                {
                    new BroadcasterData().BroadCastToAll("**internalmessage>>" + "auth allocateddrvautodespatch" + ">>" + (listofAllocatedAuthDrvsJobIDs != null ? string.Join(",", listofAllocatedAuthDrvsJobIDs.ToArray<string>()) : "") + ">>" + Environment.MachineName.ToLower());


                }
                IsPerformingAutoDespatchActivity = false;

            }

            catch (Exception ex)
            {

                IsPerformingAutoDespatchActivity = false;


                try
                {

                    File.AppendAllText(Application.StartupPath + "\\autdespfullcatch.txt", DateTime.Now.ToStr() + " : " + ex.Message);
                }
                catch
                {


                }
            }

        }

        //void dueAlert_Closing(object sender, RadPopupClosingEventArgs args)
        //{
        //    try
        //    {

        //        sp.Stop();
        //        dueAlert = null;
        //    }
        //    catch
        //    {


        //    }

        //}




        //public void ReadSMS()
        //{
        //    try
        //    {




        //        if (AppVars.comm != null && worker != null && worker.IsBusy == false && AppVars.comm.IsConnected())
        //        {
                  
        //            // Read all SMS messages from the storage
        //            GsmComm.GsmCommunication.DecodedShortMessage message = AppVars.comm.ReadMessages(GsmComm.GsmCommunication.PhoneMessageStatus.ReceivedUnread, GsmComm.GsmCommunication.PhoneStorageType.Sim).FirstOrDefault();
        //            //foreach (GsmComm.GsmCommunication.DecodedShortMessage message in messages)
        //            //{
        //            if(message!=null)
        //            {
        //            //    GsmComm.GsmCommunication.DecodedShortMessage message = messages[0];
                        


        //                if (message.Data is GsmComm.PduConverter.SmsDeliverPdu)
        //                {
        //                    GsmComm.PduConverter.SmsDeliverPdu data = (GsmComm.PduConverter.SmsDeliverPdu)message.Data;

        //                    AppVars.comm.DeleteMessage(message.Index, GsmComm.GsmCommunication.PhoneStorageType.Sim);

        //                    string phone = data.OriginatingAddress.Replace("+44", "0").Replace("+92", "0");

        //                    Customer objCustomer = General.GetQueryable<Customer>(c => c.TelephoneNo == phone || c.MobileNo == phone).OrderByDescending(C => C.Id).FirstOrDefault();

        //                    string name = string.Empty;
        //                    if (objCustomer != null)
        //                    {

        //                        name = objCustomer.Name;

        //                        (new TaxiDataContext()).stp_SaveInboxMessage(objCustomer.Id, AppVars.LoginObj.LuserId.ToInt(), objCustomer.Name + "(" + objCustomer.MobileNo.ToStr() + ")"
        //                            , AppVars.LoginObj.UserName, data.UserDataText, "Inbox", "Customer", DateTime.Now);
        //                    }
        //                    else
        //                    {
        //                        Fleet_Driver drv = General.GetObject<Fleet_Driver>(c => c.MobileNo == phone);
        //                        if (drv != null)
        //                        {
        //                            name = drv.DriverNo + " - " + drv.DriverName;

        //                            (new TaxiDataContext()).stp_SaveInboxMessage(drv.Id, AppVars.LoginObj.LuserId.ToInt(), (drv.DriverNo + "(" + drv.MobileNo + ")")
        //                          , AppVars.LoginObj.UserName, data.UserDataText, "Inbox", "Customer", DateTime.Now);
        //                        }
        //                        else
        //                        {
        //                            (new TaxiDataContext()).stp_SaveInboxMessage(null, AppVars.LoginObj.LuserId.ToInt(), "(" + data.OriginatingAddress + ")"
        //                                     , AppVars.LoginObj.UserName, data.UserDataText, "Inbox", "Unknown", DateTime.Now);

        //                        }
        //                    }


                           

        //                    AppVars.comm.DeleteMessage(message.Index, GsmComm.GsmCommunication.PhoneStorageType.Sim);


        //                    MethodInvoker mi = new MethodInvoker(delegate()
        //                    {
        //                        CreateAndShowCustomerMsgAlert("Message Received : " + name, "<html><b><span><color=Blue>" + data.UserDataText + "</span></b></html>", null, null, false, null, "", "");
        //                    });
        //                    this.Invoke(mi);


        //                    if (AppVars.objPolicyConfiguration.SMSNotificationSound.ToBool())
        //                    {

        //                        PlaySoundNotification("Message1.wav", false);
        //                    }

        //                    GC.Collect();
                            
        //                //    break;
        //                }

        //            }


                 
        //        }



        //    }
        //    catch (Exception ex)
        //    {


        //    }


        //}





   





        public void PopulateSearchJobsList()
        {

            try
            {
                grdRecentJobs.AllowAutoSizeColumns = true;
                grdRecentJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                DateTime? startDate = dtp_recentJob_StartDate.Value.ToDate();
                DateTime? endDate = dtp_RecentJobs_EndDate.Value.ToDate();

                string orderNo = txtOrderNo.Text.Trim();
                string refNo = txtRefNumber.Text.Trim();
                string phoneNo = txtPhoneNo.Text.Trim();
                string mobNo = txtMobileNo.Text.Trim();
                string customerName = ddlCust.Text.Trim();
                string pickUp = txtPickup.Text.Trim().ToLower();
                string via = txtVia.Text.Trim().ToLower();
                string destination = txtDestination.Text.Trim();
                string paymentRef = txtPaymentRef.Text.ToStr().Trim();

                int companyId = ddlCompany.SelectedValue.ToInt();
                int paymentTypeId = ddlPaymentType.SelectedValue.ToInt();
                int statusId = ddlStatus.SelectedValue.ToInt();
                int BookingTypeId = ddlBookingType.SelectedValue.ToInt();
                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();
                int driverId = ddlDriver.SelectedValue.ToInt();

                bool withQuotation = chkQuotation.Checked;

                int searchDateTypeId = ddlSearchDateType.SelectedIndex;
                string tokenNo = txtTokenNo.Text.Trim();



                if (refNo.Length > 0)
                {

                    startDate = null;
                    endDate = null;
                }


                var data1 = AppVars.BLData.GetAll<Booking>(null).OrderByDescending(c => c.PickupDateTime);

                var query = from a in data1
                            where

                            (
                                (searchDateTypeId == 0 && (startDate == null || a.BookingDate.Value.Date >= startDate) && (endDate == null || a.BookingDate.Value.Date <= endDate))

                                || (searchDateTypeId == 1 && (startDate == null || a.PickupDateTime.Value.Date >= startDate) && (endDate == null || a.PickupDateTime.Value.Date <= endDate))
                             )

                              && (companyId == 0 || a.CompanyId == companyId)
                              && (driverId == 0 || a.DriverId == driverId)
                              && (vehicleTypeId == 0 || a.VehicleTypeId == vehicleTypeId)
                              && (paymentTypeId == 0 || a.PaymentTypeId == paymentTypeId)
                              && (statusId == 0 || a.BookingStatusId == statusId)
                              && (BookingTypeId==0 || a.BookingTypeId==BookingTypeId)
                              && (customerName == string.Empty || a.CustomerName.Contains(customerName))
                              && (phoneNo == string.Empty || a.CustomerPhoneNo.Contains(phoneNo))
                              && (mobNo == string.Empty || a.CustomerMobileNo.Contains(mobNo))
                              && (pickUp == string.Empty || a.FromAddress.Contains(pickUp))
                              && (via == string.Empty || a.Booking_ViaLocations.Select(c => c.ViaLocValue).Contains(via))
                              && (destination == string.Empty || a.ToAddress.Contains(destination))
                              && (refNo == string.Empty || a.BookingNo.Contains(refNo))
                              && (orderNo == string.Empty || a.OrderNo == orderNo)
                              && (paymentRef==string.Empty || a.PaymentComments.Contains(paymentRef))
                              && ((withQuotation == false && a.IsQuotation == false) || (withQuotation==true))
                              
                              &&(a.SubcompanyId==  AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId==0)
                              &&( tokenNo==string.Empty || a.JobCode==tokenNo)
                            //         && (subcompany == string.Empty || (a.SubcompanyId!=null && a.Gen_SubCompany.CompanyName.Contains(subcompany)))

                            select new
                            {
                                Id = a.Id,
                                RefNumber = a.BookingNo,
                                BookingDate=a.BookingDate,
                                PickupDate = a.PickupDateTime,
                                Passenger = a.CustomerName,
                                //From = a.FromLocTypeId == Enums.LOCATION_TYPES.ADDRESS || a.FromLocTypeId == Enums.LOCATION_TYPES.BASE ? a.FromAddress : a.FromLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.FromPostCode : a.Gen_Location.LocationName,
                                //To = a.ToLocTypeId == Enums.LOCATION_TYPES.ADDRESS || a.ToLocTypeId == Enums.LOCATION_TYPES.BASE ? a.ToAddress : a.ToLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.ToPostCode : a.Gen_Location1.LocationName,
                                Acc = a.CompanyId != null ? a.Gen_Company.CompanyName : "",
                                OrderNo = a.OrderNo,
                                From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                // From = a.FromLocTypeId == Enums.LOCATION_TYPES.ADDRESS ? a.FromAddress : a.FromLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.FromPostCode : a.Gen_Location.LocationName,
                                // To = a.ToLocTypeId == Enums.LOCATION_TYPES.ADDRESS ? a.ToAddress : a.ToLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.ToPostCode : a.Gen_Location1.LocationName,
                                Fare = a.FareRate,
                                Driver = a.Fleet_Driver.DriverNo,
                                Vehicle = a.Fleet_VehicleType.VehicleType,
                                MobileNo = a.CustomerMobileNo,
                                Status = a.BookingStatus.StatusName,
                                StatusTextColor = a.BookingStatus.TextColor,
                                PaymentRef=a.PaymentComments
                            };


              


                grdRecentJobs.DataSource = query;


                grdRecentJobs.Columns["Id"].IsVisible = false;
                grdRecentJobs.Columns["RefNumber"].Width = 80;
                grdRecentJobs.Columns["Fare"].Width = 70;
                grdRecentJobs.Columns["Vehicle"].Width = 70;

                grdRecentJobs.Columns["Status"].Width = 70;
                grdRecentJobs.Columns["MobileNo"].Width = 100;
                grdRecentJobs.Columns["OrderNo"].Width = 80;
                grdRecentJobs.Columns["Driver"].Width = 60;
                grdRecentJobs.Columns["Acc"].Width = 90;
                grdRecentJobs.Columns["PaymentRef"].Width = 100;
                grdRecentJobs.Columns["PaymentRef"].HeaderText = "Payment Ref";
                grdRecentJobs.Columns["Acc"].HeaderText = "A/C";

            }
            catch (Exception ex)
            {
                //                ENUtils.ShowMessage(ex.Message);

            }
        }






        void grdLister_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            ViewDetailForm(e.Row);


        }

        private void ViewDetailForm(GridViewRowInfo row)
        {
            try
            {

                if (row != null && row is GridViewDataRowInfo)
                {
                    ShowBookingForm(row.Cells["Id"].Value.ToInt(), true);
                }
                else
                {
                    ENUtils.ShowMessage("Please select a record");
                }
            }
            catch (Exception ex)
            {


            }
        }




        void Grid_RowsChanging(object sender, GridViewCollectionChangingEventArgs e)
        {
            try
            {
                if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
                {
                    if ((worker != null && worker.IsBusy == false))
                    {
                        timer1.Stop();

                        grdPendingJobs.Enabled = false;

                        //new Thread(delegate()
                        //{
                        objMaster = new BookingBO();

                        try
                        {

                            long jobId = e.GridViewTemplate.DataView.CurrentItem.Cells["Id"].Value.ToLong();


                            objMaster.GetByPrimaryKey(jobId);
                            if (objMaster.Current != null)
                            {

                                int bookingStatusId = objMaster.Current.BookingStatusId.ToInt();
                                int driverId = objMaster.Current.DriverId.ToInt();

                                objMaster.DeletedBy = AppVars.LoginObj.UserName.ToStr();
                                objMaster.Delete(objMaster.Current);

                                //


                                if (driverId != 0 && (bookingStatusId == Enums.BOOKINGSTATUS.PENDING_START || bookingStatusId == Enums.BOOKINGSTATUS.PENDING))
                                {

                                    new Thread(delegate()
                                    {
                                        int loopCnt = 1;
                                        bool success = false;
                                        while (loopCnt < 3)
                                        {

                                            if (bookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                                            {
                                                success = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=deletedjobid>>" + jobId + "=2");

                                            }
                                            else
                                            {

                                                success = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=deletedfuturejobid>>" + jobId + "=2");

                                            }


                                            if (success)
                                            {
                                                break;

                                            }
                                            else
                                                loopCnt++;



                                        }
                                    }).Start();



                                    //if (AppVars.objPolicyConfiguration.DespatchOfflineJobs.ToBool())
                                    //{
                                    //    using (TaxiDataContext db = new TaxiDataContext())
                                    //    {
                                    //        db.stp_SaveOfflineMessage(jobId, driverId, "temp", AppVars.LoginObj.LoginName.ToStr(), "deletedfuturejobid>>" + jobId + "=2");
                                    //    }

                                    //}


                                }
                                //


                            }



                        }
                        catch (Exception ex)
                        {
                            if (objMaster.Errors.Count > 0)
                                ENUtils.ShowMessage(objMaster.ShowErrors());
                            else
                            {
                                ENUtils.ShowMessage(ex.Message);

                            }
                            grdPendingJobs.Enabled = true;
                            timer1.Start();
                            e.Cancel = true;

                        }
                        //    }).Start();

                        //          Thread.Sleep(1000);
                    }


                }

            }
            catch (Exception ex)
            {


            }
        }


        void PreGrid_RowsChanging(object sender, GridViewCollectionChangingEventArgs e)
        {
            try
            {

                if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
                {
                    if (grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                    {

                        long jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();



                        objMaster = new BookingBO();

                        try
                        {

                            objMaster.GetByPrimaryKey(jobId);
                            if (objMaster.Current != null)
                            {
                                objMaster.DeletedBy = AppVars.LoginObj.UserName.ToStr();
                                objMaster.Delete(objMaster.Current);
                            }

                        }
                        catch (Exception ex)
                        {
                            if (objMaster.Errors.Count > 0)
                                ENUtils.ShowMessage(objMaster.ShowErrors());
                            else
                            {
                                ENUtils.ShowMessage(ex.Message);

                            }
                            e.Cancel = true;

                        }
                    }

                }
            }
            catch (Exception ex)
            {

            }
        }


        void AllGrid_RowsChanging(object sender, GridViewCollectionChangingEventArgs e)
        {
            try
            {
                if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
                {

                    objMaster = new BookingBO();

                    try
                    {

                        objMaster.GetByPrimaryKey(grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong());
                        if (objMaster.Current != null)
                        {
                            objMaster.DeletedBy = AppVars.LoginObj.UserName.ToStr();
                            objMaster.Delete(objMaster.Current);
                        }


                    }
                    catch (Exception ex)
                    {
                        if (objMaster.Errors.Count > 0)
                            ENUtils.ShowMessage(objMaster.ShowErrors());
                        else
                        {
                            ENUtils.ShowMessage(ex.Message);

                        }
                        e.Cancel = true;

                    }


                }
            }
            catch (Exception ex)
            {


            }
        }





        //public override void RefreshData()
        //{
        //    try
        //    {
        //        LoadDriversGrid();

        //        PopulateData();
        //        //    PopulateDataOnBindingList();

        //    }
        //    catch (Exception ex)
        //    {


        //    }
        //}








        //public void PopulateRequiredData()
        //{
        //    try
        //    {

        //        DateTime? dt = DateTime.Now.ToDateorNull();
        //        DateTime recentDays = dt.Value.AddDays(-1);

        //        var data1 = General.GetQueryable<Booking>(a => a.PickupDateTime.Value.Date >= recentDays && a.IsQuotation == false && (a.SubcompanyId == AppVars.DefaultSubCompanyId || AppVars.DefaultSubCompanyId == 0));
        //        DateTime dtNow = DateTime.Now;

        //        var query = (from a in data1
        //                     select new
        //                     {
        //                         Id = a.Id,
        //                         Plot = a.Gen_Zone1.ShortName,
        //                         //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

        //                         PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
        //                         ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
        //                         : a.PickupDateTime.Value.AddHours(-BookingHours),

        //                         RefNumber = a.BookingNo,
        //                         PickupDateTempAirport = string.Format("{0:" + Convert.ToString(a.FromLocTypeId == 1 || a.ToLocTypeId == 1 ? 1 : 2) + ",dd/MM/yyyy HH:mm}", a.PickupDateTime),
        //                         PickupDateTemp = a.PickupDateTime,
        //                         PickUpDate = string.Format("{0:dd/MM/yyyy}", a.PickupDateTime),
        //                         Time = string.Format("{0:HH:mm}", a.PickupDateTime),

        //                         Passenger = a.CustomerName,

        //                         From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
        //                         To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
        //                         Fare = a.FareRate,
        //                         FromLocTypeId = a.FromLocTypeId,
        //                         ToLocTypeId = a.ToLocTypeId,

        //                         BackgroundColor1 = a.Gen_Company.BackgroundColor,
        //                         TextColor1 = a.Gen_Company.TextColor,

        //                         BackgroundColor = a.Fleet_VehicleType.BackgroundColor,

        //                         TextColor = a.Fleet_VehicleType.TextColor,


        //                         Account = a.Gen_Company.CompanyName,
        //                         Vehicle = a.Fleet_VehicleType.VehicleType,

        //                         UpdateBy = a.AddLog,
        //                         StatusId = a.BookingStatusId,
        //                         Status = a.BookingStatus.StatusName,
        //                         StatusColor = a.BookingStatus.BackgroundColor,
        //                         Driver = a.Fleet_Driver.DriverNo,
        //                         DriverId = a.DriverId,
        //                         IsAutoDespatch = a.AutoDespatch,
        //                         BookingTypeId = a.BookingTypeId,
        //                         HasNotes = a.Booking_Notes.Count,
        //                         HasNotesImg = "",
        //                         SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,
        //                         MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
        //                         BookingBackgroundColor = a.BookingType.BackgroundColor,
        //                         GroupId = a.JobCode,
        //                         BookingDateTime = a.BookingDate,
        //                         //       PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
        //                    //         Direction = a.BoundType,
        //                         FromLocId = a.FromLocId,
        //                         FromPostCode = a.FromPostCode,
        //                         PrePickupDate = a.PickupDateTime.Value.Date,
        //                     }).ToList();




        //        DateTime prevDates = dt.Value.AddDays(-3);
        //        DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);

        //        int rowIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Index : -1;


        //        if (BookingHours > 0)
        //        {

        //            grdPendingJobs.DataSource = query.Where(a => a.PickupDateTemp >= prevDates && a.PlotHour <= dtNow
        //             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
        //                || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
        //                || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
        //                                || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START)).OrderBy(c => c.PickupDateTemp).ToList();
        //        }
        //        else
        //        {
        //            grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
        //                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
        //                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
        //                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START)).OrderBy(c => c.PickupDateTemp).ToList();


        //        }

        //        grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);


        //        FormatTodaysBookingGrid();



        //        // PreBooking

        //        if (BookingHours > 0)
        //        {

        //            grdPreBookings.DataSource = query.Where(a => a.PlotHour > dtNow
        //                                  && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
        //                                  || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
        //                                  || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED))
        //                                       .OrderBy(c => c.PickupDateTemp).ToList();

        //        }


        //        else
        //        {
        //            grdPreBookings.DataSource = query.Where(a => a.PickupDateTemp.Value.Date > dt
        //                                   && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
        //                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
        //                                   || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED))
        //                                        .OrderBy(c => c.PickupDateTemp).ToList();
        //        }


        //        grdPreBookings.MasterTemplate.ExpandAllGroups();




        //        ClearRecentJobFilter();
        //        grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
        //                                               || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
        //                                               || c.StatusId == Enums.BOOKINGSTATUS.FOJ
        //                                               || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).ToList();









        //    }
        //    catch (Exception ex)
        //    {
        //        //   ENUtils.ShowMessage(ex.Message);

        //    }

        //}










        public string GetCurrentBookingByCustomer(string contactNo)
        {
            string rtn = string.Empty;
            try
            {

                if (grdAllJobs.Columns.Contains("MobileNo"))
                {

                    var row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["MobileNo"].Value.ToStr() == contactNo);

                    if (row != null)
                    {
                        string driverNo = row.Cells["Driver"].Value.ToStr();

                        if (driverNo.Contains("-"))
                            driverNo = driverNo.Substring(0, driverNo.IndexOf("-"));



                        rtn = "Ref # : " + row.Cells["RefNumber"].Value.ToStr() + " @ " + row.Cells["Time"].Value.ToStr() +
                                       "\r\n\r\n" + "Pickup : " + row.Cells["From"].Value.ToStr() +
                                       "\r\n\r\n" + "Destination : " + row.Cells["To"].Value.ToStr() +
                                       "\r\n\r\n" + "Driver : " + driverNo + ">>>>" + driverNo
                                       + ">>>>" + row.Cells["Id"].Value.ToLong();


                    }
                }
            }
            catch (Exception ex)
            {


            }

            return rtn;



        }


        public List<Booking> GetWaitingBookingsOfCustomer(string contactNo)
        {
            string rtn = string.Empty;
            List<Booking> listofBookings = new List<Booking>();
            try
            {
                if (grdAllJobs.Columns.Contains("MobileNo"))
                {
                    var rows = grdPendingJobs.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rows.Count > 0)
                    {



                        foreach (var item in rows)
                        {
                            listofBookings.Add(new
                            Booking
                            {
                                Id = item.Cells["Id"].Value.ToLong(),
                                BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                FromAddress = item.Cells["From"].Value.ToStr(),
                                ToAddress = item.Cells["To"].Value.ToStr(),

                            });
                        }

                    }

                    var rowsPre = grdPreBookings.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rows.Count > 0)
                    {

                        foreach (var item in rowsPre)
                        {
                            listofBookings.Add(new
                            Booking
                            {
                                Id = item.Cells["Id"].Value.ToLong(),
                                BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                FromAddress = item.Cells["From"].Value.ToStr(),
                                ToAddress = item.Cells["To"].Value.ToStr(),

                            });
                        }
                    }


                    if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                    {
                        try
                        {

                            var rowsQuo = grdQuotations.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                            if (rowsQuo.Count > 0)
                            {

                                foreach (var item in rowsQuo)
                                {
                                    listofBookings.Add(new
                                    Booking
                                    {
                                        Id = item.Cells["Id"].Value.ToLong(),
                                        BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                        PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                        FromAddress = item.Cells["From"].Value.ToStr(),
                                        ToAddress = item.Cells["To"].Value.ToStr(),
                                        IsQuotation = true
                                    });
                                }
                            }
                        }
                        catch
                        {


                        }
                    }


                    listofBookings = listofBookings.OrderBy(c => c.PickupDateTime).ToList();
                }
            }
            catch (Exception ex)
            {


            }

            return listofBookings;
        }

        int BookingHours = 0;
        public override void PopulateData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);

                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();

                // live
                var data1 = General.GetQueryable<Booking>(a =>( a.PickupDateTime.Value.Date >= recentDays && a.PickupDateTime.Value.Date <= prebookingdays)
                    && (a.BookingStatusId != Enums.BOOKINGSTATUS.DISPATCHED && a.BookingStatusId != Enums.BOOKINGSTATUS.CANCELLED)
                    && a.IsQuotation == false && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0));
                DateTime dtNow = DateTime.Now;

                var query = (from a in data1
                             select new
                             {
                                 Id = a.Id,
                                 Plot = a.Gen_Zone1.ShortName,

                                 PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                 ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                 : a.PickupDateTime.Value.AddHours(-BookingHours),

                                 RefNumber = a.BookingNo,
                                 BookingDateTime = a.BookingDate,
                                 PickupDateTemp = a.PickupDateTime,
                                 PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                 Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                 Passenger = a.CustomerName,
                                 MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-"+a.FromStreet+" "+ a.FromAddress : a.FromAddress,
                                 Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromOther : a.FromOther,
                                 FromPostCode = a.FromPostCode,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                 ToPostCode = a.ToPostCode,

                                 Fare = a.FareRate,
                                 Pax=a.NoofPassengers,
                                 PaymentMethod = a.Gen_PaymentType.PaymentType,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,

                                 BackgroundColor = a.Fleet_VehicleType.BackgroundColor,

                                 TextColor = a.Fleet_VehicleType.TextColor,

                                 Account = a.Gen_Company.CompanyName,
                                 PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",

                                 Vehicle = a.Fleet_VehicleType.VehicleType,

                                 UpdateBy = a.AddLog,
                                 SpecialReq=a.SpecialRequirements,
                                 StatusId = a.BookingStatusId,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 Driver =a.DriverId!=null ? a.Fleet_Driver.DriverNo + "-"+a.BookingStatus.StatusName:"",                                
                                 DriverId = a.DriverId,
                                 IsAutoDespatch = a.AutoDespatch,
                                 BookingTypeId = a.BookingTypeId,
                                 HasNotes = a.Booking_Notes.Count,
                                 HasNotesImg = "",
                                 SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                 BookingBackgroundColor = a.BookingType.BackgroundColor,
                                 GroupId = a.JobCode,                               
                                 FromLocId = a.FromLocId,
                                 PrePickupDate = a.PickupDateTime.Value.Date,
                                 BabySeats = a.BabySeats,
                               //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                               //  ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,
                                // FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                // ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                 IsConfirmedDriver = a.IsConfirmedDriver,
                                 MilesFromBase = a.ExtraMile,
                                 IsBidding = a.IsBidding,
                                 DeadMileage = a.DeadMileage,
                                 a.DespatchDateTime,
                                 a.JourneyTypeId,
                                 Due = a.ZoneId != null? a.Gen_Zone1.JobDueTime:null
                               
                             }).ToList();


                DateTime prevDates = dt.Value.AddDays(-3);
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);

                //  int rowIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Index : -1;

                int val = grdPendingJobs.TableElement.VScrollBar.Value;

                if (BookingHours > 0)
                {
                    
                        grdPendingJobs.DataSource = query.Where(a => a.PickupDateTemp >= prevDates && a.PlotHour <= dtNow
                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                           || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                           || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                           || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId==Enums.BOOKINGSTATUS.FOJ))
                                           .OrderBy(c => c.PickupDateTemp).ToList();
                   
                }
                else
                {

                      
                            grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                      && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                         || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                          || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                          .OrderBy(c => c.PickupDateTemp).ToList();
                        
                                      
                }
           

                grdPendingJobs.TableElement.VScrollBar.Value = val;
                //   grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);
                

                FormatTodaysBookingGrid();               


                // PreBooking


                val = grdPreBookings.TableElement.VScrollBar.Value;


                if (BookingHours > 0)
                {

                    grdPreBookings.DataSource = query.Where(a => a.PlotHour > dtNow
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                          || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                          || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW ))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    grdPreBookings.DataSource = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                           || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                .OrderBy(c => c.PickupDateTemp).ToList();
                }


                //NEEDTOCHECK
                // grdPreBookings.MasterTemplate.ExpandAllGroups();

                grdPreBookings.TableElement.VScrollBar.Value = val;
                this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";


                ClearRecentJobFilter();




                if (ShowPendingJobOnRecentTab)
                {

                    grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                           || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                           || c.StatusId == Enums.BOOKINGSTATUS.FOJ || c.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                           || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                }
                else
                {

                    if (EnableGhostJob)
                    {

                        grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                             || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                            
                                                             || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                    }
                    else
                    {

                       




                            grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                       
                    }

                }


                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";


                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    PopulateQuotationsGrid();
                }



                SetPriceBiddingJobs();

                PopulatePriceBiddingGrid();


            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }


        private void SetPriceBiddingJobs()
        {
            if (enableBiddingTab)
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    listofBiddingJobs = db.stp_GetPriceBiddingJobs().ToList();
                }
            }
        }


        private void PopulatePriceBiddingGrid()
        {
            if (enableBiddingTab)
            {
                grdBiddingJobs.DataSource = listofBiddingJobs;
            }
        }


        private void RefreshPriceBiddingGrid()
        {
            if (enableBiddingTab)
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    listofBiddingJobs = db.stp_GetPriceBiddingJobs().ToList();
                }


                grdBiddingJobs.DataSource = listofBiddingJobs;
            }
        }


        private void PopulateQuotationsGrid()
        {
            try
            {

                DateTime? nowDate = DateTime.Now.Date;
                DateTime? fromDate = dtpFromDatePreBook.Value.ToDateorNull();
                DateTime? tillDate = dtpToDatePreBook.Value.ToDateorNull();

                if (fromDate != null && fromDate < nowDate)
                    fromDate = nowDate;


                var quotation = (from a in AppVars.BLData.GetAll<Booking>(a => a.IsQuotation == true
                                            && (fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                                             && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)).OrderByDescending(c => c.PickupDateTime)

                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     PickupDateTemp = a.PickupDateTime,
                                     PickUpDate = string.Format("{0:dd/MM/yyyy}", a.PickupDateTime),
                                     Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                     Passenger = a.CustomerName,
                                     MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,
                                     Account = a.Gen_Company != null ? a.Gen_Company.CompanyName : "",
                                     BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                     TextColor = a.Fleet_VehicleType.TextColor,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     UpdateBy = a.AddLog,


                                 }).ToList();


                //grdQuotations.b();

                grdQuotations.DataSource = quotation;
                //grdAllJobs.EndEdit();

                FormatQuotationsGrid();
            }
            catch (Exception ex)
            {


            }
        }


        private void PopulateJobsPool()
        {
            try
            {

                //DateTime? nowDate = DateTime.Now.Date;
                DateTime? fromDate = dtpFromJobsPool.Value.ToDateorNull();
                DateTime? tillDate = dtpTillJobsPool.Value.ToDateorNull();

                //if (fromDate != null && fromDate < nowDate)
                //    fromDate = nowDate;

                var jobpool = (from a in AppVars.BLData.GetAll<Booking>(a => a.BookingStatusId == 21
                                            && (fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                                             && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)).OrderByDescending(c => c.PickupDateTime)


                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     PickupDateTemp = a.PickupDateTime,
                                     PickUpDate = string.Format("{0:dd/MM/yyyy}", a.PickupDateTime),
                                     Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Account = a.Gen_Company != null ? a.Gen_Company.CompanyName : "",
                                     Notes = a.NotesString,
                                     OfferPrice= a.FareRate,
                                     Status = a.BookingStatus.StatusName,
                                     AcceptedBy = "",
                                     DriverNo = a.DriverId>0?a.Fleet_Driver.DriverNo:"",
                                     SendMessage = a.SpecialRequirements,
                                     UpdateBy = a.EditLog,

                                 }).ToList();
                                               
                grdJobsPool.DataSource = jobpool;

                FormatJobPoolsGrid();
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }



        private void radPageView1_SelectedPageChanging(object sender, RadPageViewCancelEventArgs e)
        {
            try
            {


                if (e.Page.Name == "Pg_RecentJobs" && IsRecentJob_TabbedOpened == false)
                {
                    if (ddlSearchDateType.Items.Count == 0)
                    {

                        Telerik.WinControls.UI.RadListDataItem radListDataItem3 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem4 = new Telerik.WinControls.UI.RadListDataItem();


                        radListDataItem3.Selected = false;
                        radListDataItem3.Text = "Booking Date";
                        radListDataItem3.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                        radListDataItem3.TextWrap = true;
                        radListDataItem4.Text = "Pickup Date";
                        radListDataItem4.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                        radListDataItem4.TextWrap = true;
                        radListDataItem4.Selected = true;
                        this.ddlSearchDateType.Items.Add(radListDataItem3);
                        this.ddlSearchDateType.Items.Add(radListDataItem4);

                  
                    }

                    grdRecentJobs.Font = new Font("Tahoma", 9, FontStyle.Regular);
                  //  ComboFunctions.FillDriverCombo(ddlDriver);
                   
                    //  ComboFunctions.FillCustomerCombo(ddlCust);
                    


                    ddlCust.AutoCompleteMode = AutoCompleteMode.Suggest;
                    ddlCust.DataSource = AppVars.BLData.GetAll<Customer>().Select(c => c.Name).Distinct().OrderBy(c => c).ToArray<string>();
                    ddlCust.SelectedIndex = -1;

                    ComboFunctions.FillPaymentTypeCombo(ddlPaymentType);
                    ComboFunctions.FillBookingStatusCombo(ddlStatus);
                    ComboFunctions.FillBookingTypeCombo(ddlBookingType);
                    IsRecentJob_TabbedOpened = true;

                    grdRecentJobs.ViewCellFormatting += new CellFormattingEventHandler(grdRecentJobs_ViewCellFormatting);

                    grdRecentJobs.EnableFiltering = true; ;
                    grdRecentJobs.ShowFilteringRow = true;

                 

                }


                else if (e.Page.Name == "Pg_DrvBookingStats" && IsStats_TabbedOpened == false)
                {
                    grdStats.ShowGroupPanel = false;
                    // grdStats.AutoCellFormatting = false;
                    grdStats.AllowAddNewRow = false;
                    grdStats.ShowRowHeaderColumn = false;

                    LoadDriverBookingStats();

                    //  IsStats_TabbedOpened = true;
                }

                else if (e.Page.Name == "Pg_AllJobs")
                {

                    if (ddlBookingStatus.Items.Count == 0)
                    {


                        Telerik.WinControls.UI.RadListDataItem radListDataItem5 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem6 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem7 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem8 = new Telerik.WinControls.UI.RadListDataItem();



                        radListDataItem5.Text = "Waiting & OnGoing";
                        radListDataItem5.TextWrap = true;
                        radListDataItem6.Text = "Waiting";
                        radListDataItem6.TextWrap = true;
                       
                        radListDataItem7.Text = "Ongoing";
                        radListDataItem7.TextWrap = true;
                        radListDataItem8.Text = "All";
                        radListDataItem8.TextWrap = true;
                        this.ddlBookingStatus.Items.Add(radListDataItem5);
                        this.ddlBookingStatus.Items.Add(radListDataItem6);
                        this.ddlBookingStatus.Items.Add(radListDataItem7);
                        this.ddlBookingStatus.Items.Add(radListDataItem8);


                        //if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() == 0)
                        //{
                            radListDataItem7.Selected = true;
                            this.ddlBookingStatus.Tag = 2;
                        //}
                        //else
                        //{
                        //    radListDataItem5.Selected = true;
                        //    this.ddlBookingStatus.Tag = 0;

                        //}

                    }


                    if (ddlRecentColumn.Items.Count == 0)
                    {
                        Telerik.WinControls.UI.RadListDataItem radListDataItem9 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem10 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem11 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem12 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem16 = new Telerik.WinControls.UI.RadListDataItem();


                       
                            radListDataItem9.Selected = true;
                        
                      
                        radListDataItem9.Text = "Refrence No";
                        radListDataItem9.TextWrap = true;
                        radListDataItem10.Text = "Driver";
                        radListDataItem10.TextWrap = true;
                        radListDataItem11.Text = "PickUp Point";
                        radListDataItem11.TextWrap = true;
                        radListDataItem12.Text = "Destination";
                        radListDataItem12.TextWrap = true;
                        radListDataItem16.Text = "Passenger";
                        radListDataItem16.TextWrap = true;
                        this.ddlRecentColumn.Items.Add(radListDataItem9);
                        this.ddlRecentColumn.Items.Add(radListDataItem10);
                        this.ddlRecentColumn.Items.Add(radListDataItem11);
                        this.ddlRecentColumn.Items.Add(radListDataItem12);
                        this.ddlRecentColumn.Items.Add(radListDataItem16);
                    }
                }
                else if (e.Page.Name == "Pg_BookingHistory" && Pg_BookingHistory != null)
                {


                    if (ddlColumnBookingHistory.Items.Count == 0)
                    {



                        lockCompletedBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK COMPLETED BOOKING") > 0;
                        lockCancelledBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK CANCELLED BOOKING") > 0;
                        lockNoFareBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK NOFARE BOOKING") > 0;


                        ddlColumnBookingHistory.Items.Add("Reference");
                        ddlColumnBookingHistory.Items.Add("Passenger");
                        ddlColumnBookingHistory.Items.Add("Telephone No");
                        ddlColumnBookingHistory.Items.Add("Mobile No");
                        ddlColumnBookingHistory.Items.Add("Pickup Point");
                        ddlColumnBookingHistory.Items.Add("Destination");

                        ddlColumnBookingHistory.Items.Add("Vehicle");
                        ddlColumnBookingHistory.Items.Add("Driver");
                        ddlColumnBookingHistory.Items.Add("Status");
                        ddlColumnBookingHistory.Items.Add("SubCompany");
                        ddlColumnBookingHistory.SelectedIndex = 0;


                        RefreshBookingList();


                    }



                    else
                    {


                        if (this.RefreshOnActive)
                        {
                            this.RefreshOnActive = false;
                            RefreshBookingList();

                        }


                    }


                }
                else if (e.Page.Name == "Pg_PreBookings" && UpdateRequiredPreBooking)
                {
                    RefreshUpdatePreBookingGrid();

                }
                else if (e.Page.Name == "pg_JobsPool")
                {
                    PopulateJobsPool();
                }
            }
            catch (Exception ex)
            {


            }
        }

        void grdRecentJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridDataCellElement)
            {


                if (e.Column.Name == "Status")
                {


                    if (e.Row.Cells["StatusTextColor"].Value != null)
                    {

                        e.CellElement.Font = newFont;
                        e.CellElement.NumberOfColors = 1;

                        e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["StatusTextColor"].Value.ToInt());

                        e.CellElement.DrawFill = true;
                    }
                    else
                    {

                        e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                        e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                        e.CellElement.DrawFill = false;

                    }






                }
                else
                {

                    e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                    e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                    e.CellElement.DrawFill = false;

                }

            }
        }


        private bool RefreshOnActive = false;


        private void radButton9_Click(object sender, EventArgs e)
        {
            // RefreshSearchAllJobsData();
            PopulateSearchJobsList();


            if (listofSearchTabSettings != null)
            {

                for (int i = 0; i < listofSearchTabSettings.Count; i++)
                {
                    if (grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName] != null)
                    {
                        grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName].IsVisible = listofSearchTabSettings[i].IsVisible.ToBool();


                        if (listofSearchTabSettings[i].GridColMoveTo != null)
                        {
                            grdRecentJobs.Columns.Move(grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName].Index, listofSearchTabSettings[i].GridColMoveTo.ToInt());
                        }
                    }

                }

                listofSearchTabSettings = null;


            }


        }

        private void btnNewJob_Click(object sender, EventArgs e)
        {
            General.ShowBookingForm(false);
        }








        private void btnEditJob_Click(object sender, EventArgs e)
        {
            if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            {
                ShowBookingForm(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt(), true);

            }

        }

        private void ShowBookingForm(int id, bool showOnDialog)
        {
            General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);


        }

        private void ShowBookingWebForm(long id)
        {
            // General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);


            try
            {


                frmBooking frm = new frmBooking(1);
                frm.PickBookingTypeId = Enums.BOOKING_TYPES.WEB;
                if (id != 0)
                {
                    frm.OnDisplayRecord(id);
                }
                frm.ControlBox = true;
                frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm.MaximizeBox = false;

                //if (showOnDialog)
                //{
                frm.ShowDialog();
                //}
                //else
                //    frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void btnDespatchJob_Click(object sender, EventArgs e)
        {

            DespatchJob();

        }

        private void btnDespatchGhostJob_Click(object sender, EventArgs e)
        {

            DespatchGhostJob();

        }



        public void DespatchFOJJob()
        {
            try
            {



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    //if (grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool() && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //   && !string.IsNullOrEmpty(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()))
                    //{




                    //if (IsAutoDespatch && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //    && !string.IsNullOrEmpty(dragRow.Cells["Plot"].Value.ToStr()))

                    //if ((grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool()
                    //                           && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //                          && !string.IsNullOrEmpty(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()))

                    //                          &&
                    //                         (General.GetQueryable<Gen_Zone>(c => c.ZoneName == grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()
                    //                                && (c.EnableAutoDespatch != null && c.EnableAutoDespatch == true)).Count() > 0)
                    //                          )
                    //{

                    //    if (DialogResult.No == MessageBox.Show("This is a AutoDespatch Job" + Environment.NewLine + "Do you want to Despatch it Manually ? ", "AutoDespatch Job", MessageBoxButtons.YesNo))
                    //        return;

                    //}


                    OnDespatchFOJ(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());

                    // RefreshDriverGrids();

                }
            }
            catch (Exception ex)
            {


            }

        }



        public void DespatchJob()
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    //if ((grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool() && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //                           && !string.IsNullOrEmpty(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()))

                    //                           &&
                    //                          (General.GetQueryable<Gen_Zone>(c => c.ZoneName == grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()
                    //                                 && (c.EnableAutoDespatch != null && c.EnableAutoDespatch == true)).Count() > 0)
                    //                           )
                    //{

                    //    if (DialogResult.No == MessageBox.Show("This is a AutoDespatch Job" + Environment.NewLine + "Do you want to Despatch it Manually ? ", "AutoDespatch Job", MessageBoxButtons.YesNo))
                    //        return;
                    //}

                    OnDespatch(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());

                    // RefreshDriverGrids();

                }
            }
            catch (Exception ex)
            {


            }

        }


        public void DespatchGhostJob()
        {
            try
            {



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    long jobId=grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                
                    ShowGhostDespatchForm(General.GetObject<Booking>(c => c.Id == jobId));

                    // RefreshDriverGrids();

                }
            }
            catch (Exception ex)
            {


            }

        }


        private void OnDespatch(long jobId)
        {
            ShowDespatchForm(General.GetObject<Booking>(c => c.Id == jobId));


        }


        public void ShowDespatchForm(Booking obj)
        {
            try
            {
                bool rtn = false;

                frmDespatchJob frm = new frmDespatchJob(obj);

                frm.ShowDialog();



                if (frm.SmsThread != null)
                    frm.SmsThread.Start();

                rtn = frm.SuccessDespatched;

                frm.Dispose();

                GC.Collect();

            }
            catch (Exception ex)
            {


            }

        }


        public void ShowGhostDespatchForm(Booking obj)
        {
            try
            {
                bool rtn = false;

                frmDespatchGhostJob frm = new frmDespatchGhostJob(obj);

                frm.ShowDialog();
             

                rtn = frm.SuccessDespatched;

                frm.Dispose();

                GC.Collect();

            }
            catch (Exception ex)
            {


            }

        }


        private void OnDespatchFOJ(long jobId)
        {
            General.ShowDespatchFOJForm(General.GetObject<Booking>(c => c.Id == jobId));
        }

        private System.Threading.Thread mapThread;

        private void btnShowMap_Click(object sender, EventArgs e)
        {
            ShowMapInPopup();

        }


        private void ShowMapInPopup()
        {

            try
            {


                if (EnablePDA && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    Booking objBook = General.GetObject<Booking>(c => c.Id == id);


                    string pickup = objBook.FromAddress.ToStr();
                    string[] via = objBook.Booking_ViaLocations.Select(c => c.ViaLocValue.ToStr()).ToArray<string>();
                    string destination = objBook.ToAddress.ToStr();




                    string viaStr = "**";

                    if (via != null && via.Count() > 0)
                    {
                        viaStr = string.Join(">>>", via);

                        viaStr = viaStr.Replace(" ", "**").Trim();

                    }


                    //string connString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionStringRouteMap"].ToStr();

                    //if (string.IsNullOrEmpty(connString))
                    //{
                    //    connString = @"C:\Program Files(86)\Eurosoft Tech\Treasure RouteMap Setup\TreasureRouteMap.exe";

                    //    if (File.Exists(connString) == false)
                    //    {
                    //        connString = @"C:\Program Files\Eurosoft Tech\Treasure RouteMap Setup\TreasureRouteMap.exe";
                    //    }

                    //}




                    string connString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionStringRouteMap"].ToStr();

                    if (!string.IsNullOrEmpty(connString))
                    {

                        connString = Application.StartupPath + "\\TreasureRouteMap.exe";


                    }







                    if (connString.ToStr().Trim().Length > 0 && File.Exists(connString) == true)
                    {
                        Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                        if (proc != null)
                        {
                            proc.Kill();
                            proc.CloseMainWindow();
                            proc.Close();

                            proc.Dispose();

                            GC.Collect();

                        }

                        string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");


                        string arg = "frmmap" + " " + conn + " " + pickup.Replace(" ", "**") + " " + viaStr.Replace(" ", "**") + " " + destination.Replace(" ", "**");
                        Process.Start(connString, arg);



                    }

                    else
                    {


                        frmMap frm = new frmMap(pickup, via, destination);
                        frm.ShowDialog();
                    }



                }

                else
                {

                    mapThread = new System.Threading.Thread(new ThreadStart(ShowMap));
                    mapThread.IsBackground = true;
                    mapThread.Start();
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void ShowMap()
        {
            try
            {
                if (grdPendingJobs.CurrentRow == null)
                    return;


                ShowJobInMap(grdPendingJobs.CurrentRow);

            }
            catch
            {


            }
        }

        private void ShowProgressBar()
        {

            frm = new frmLoading();
            frm.ControlBox = false;
            frm.FormBorderStyle = FormBorderStyle.None;
            frm.ShowInTaskbar = false;

            frm.StartPosition = FormStartPosition.CenterScreen;
            frm.Size = new Size(204, 82);
            frm.Show();

        }

        private void ShowJobInMap(GridViewRowInfo row)
        {

            if (row != null && row is GridViewDataRowInfo)
            {


                if (this.InvokeRequired)
                {
                    UIDelegate d = new UIDelegate(ShowProgressBar);
                    this.BeginInvoke(d);
                }
                else
                {
                    ShowProgressBar();

                }


                long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                Booking objBook = General.GetObject<Booking>(c => c.Id == id);

                string pickup = objBook.FromAddress.ToStr();
                string[] via = objBook.Booking_ViaLocations.Select(c => c.ViaLocValue.ToStr()).ToArray<string>();
                string destination = objBook.ToAddress.ToStr();
                General.ShowGoogleMap_RouteDirections(Map_PendingGoogle, pickup, via, destination);


                mapThread.Abort();





            }


        }







        private void btnHideMap_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {
            try
            {
                if (args.NewValue == Telerik.WinControls.Enumerations.ToggleState.Off)
                {
                    tableLayoutPanel1.RowStyles[0].Height = 0;
                    tableLayoutPanel1.RowStyles[1].Height = 100;
                    btnHideMap.Text = "Show Drivers";
                }
                else
                {
                    btnHideMap.Text = "Hide Drivers";

                    tableLayoutPanel1.RowStyles[0].Height = 40;
                    tableLayoutPanel1.RowStyles[1].Height = 60;

                }
            }
            catch (Exception ex)
            {

            }
        }



        bool UpdateRequiredPreBooking = false;



        private void grdDriverWaiting_ToolTipTextNeeded(object sender, ToolTipTextNeededEventArgs e)
        {


            try
            {
                if (sender is GridDataCellElement)
                {
                    GridDataCellElement cell = (GridDataCellElement)sender;


                    GridViewRowInfo row = cell.RowElement.RowInfo;
                    Fleet_DriverQueueList obj = null;

                    if (row != null && row is GridViewDataRowInfo)
                    {
                        long id;

                        string plot = string.Empty;
                        if (cell.GridControl.Name.ToLower() == "grdonplotdrivers")
                        {

                            int driverId = row.Cells[cell.ColumnIndex].ErrorText.ToInt();
                            if (driverId > 0)
                            {
                                obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                            }
                        }
                        else
                        {
                            id = row.Cells["Id"].Value.ToLong();

                            obj = General.GetObject<Fleet_DriverQueueList>(c => c.Id == id);
                        }

                      

                        if (obj != null)
                        {
                            string vehicleNo = obj.FleetMasterId != null ? obj.Fleet_Master.Fleet_VehicleType.VehicleType + " - " + obj.Fleet_Master.Plateno.ToStr() : "";



                            if((obj.CurrentJobId != null && (obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.DriverWorkStatusId.ToInt()!=Enums.Driver_WORKINGSTATUS.ONBREAK) ))
                            {
                                string journeyType = "";

                              
                                    if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                        journeyType = "(One Way Journey)";
                                    else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                        journeyType = "(Return Journey)";
                                    else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                        journeyType = "(Wait and Return Journey)";

                                    string lastGPSContact = string.Empty;
                                    if (obj.DriverId != null && obj.Fleet_Driver.HasPDA.ToBool() && obj.Fleet_Driver.Fleet_Driver_Locations.Count > 0)
                                    {
                                        lastGPSContact = " , Last GPS Contact : " + string.Format("{0:dd-MMM HH:mm}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().UpdateDate.ToDateTime());

                                    }

                                   e.ToolTipText = "Driver : " + obj.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() +  " - " +obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr()

                                                 + Environment.NewLine + "Status : " + obj.Fleet_DriverWorkingStatus.DefaultIfEmpty().WorkStatus.ToStr() + lastGPSContact+
                                                  (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")
                                             
                                                + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + Environment.NewLine + "On Job:" + journeyType + Environment.NewLine + " Pickup : "
                                                                    + obj.Booking.FromAddress + Environment.NewLine + " Destination : " + obj.Booking.ToAddress : "")
                                                + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.Booking.DropOffZoneId != null ? Environment.NewLine + "DropOff Plot : " + obj.Booking.Gen_Zone.ZoneName + "(" + obj.Booking.Gen_Zone.DefaultIfEmpty().ShortName.ToStr() + ")" : "")
                                                  + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE  ? Environment.NewLine + " Pickup Date/Time : "+ string.Format("{0:dd/MM/yyyy HH:mm}",  obj.Booking.PickupDateTime)  : "")

                                                + Environment.NewLine + "Vehicle : " + obj.Fleet_Driver.DefaultIfEmpty().Fleet_VehicleType.VehicleType.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleNo.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleColor.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleMake.ToStr();

                                              



                            }
                            else
                            {
                                  DateTime? loginDateTime = null;



                            loginDateTime = obj.LoginDateTime;
                            int driverType = obj.Fleet_Driver.DefaultIfEmpty().DriverTypeId.ToInt();


                            int? driverId = obj.DriverId.ToIntorNull();



                            DateTime newLoginDateTime = loginDateTime.ToDateTime();

                            if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                            {

                                newLoginDateTime = loginDateTime.Value.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                                loginDateTime = General.GetObject<Fleet_DriverQueueList>(c => c.LogoutDateTime.Value > newLoginDateTime).DefaultIfEmpty().LoginDateTime;
                            }


                            if (loginDateTime == null)
                                loginDateTime = obj.LoginDateTime;

                            //var list = from a in General.GetQueryable<Booking>(c => (c.PickupDateTime != null && c.PickupDateTime >= lastShiftLogout) && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                            //                      && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED && c.Fleet_Driver.DriverTypeId == driverType)



                            var list = from a in General.GetQueryable<Booking>(c => (c.PickupDateTime != null && c.PickupDateTime >= loginDateTime) && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                                                          && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED && c.Fleet_Driver.DriverTypeId == driverType)


                                       select new
                                       {

                                           FareRate = a.TotalCharges
                                       };



                            string waitSince = string.Empty;

                            if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                            {
                                waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(obj.WaitSinceOn.Value));
                                waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                                if (waitSince.StartsWith("00"))
                                    waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                                else if (waitSince.StartsWith("0"))
                                    waitSince = waitSince.Remove(0, 1);

                                if (waitSince.Contains(":"))
                                    waitSince = waitSince.Replace(":", " hour(s) ").Trim();


                                waitSince = Environment.NewLine + "Wait Since : " + waitSince;


                            }


                            //string journeyType = "";

                            //if (obj.CurrentJobId != null)
                            //{
                            //    if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                            //        journeyType = "(One Way Journey)";
                            //    else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                            //        journeyType = "(Return Journey)";
                            //    else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            //        journeyType = "(Wait and Return Journey)";
                            //}



                            int totalMins = DateTime.Now.Subtract(loginDateTime.Value).Minutes;
                            decimal AvgEarning = 0.00m;


                            decimal totalEarning = list.Sum(c => c.FareRate).ToDecimal();
                            string earn = string.Format("{0:c}", totalEarning).Substring(1);
                            string lastGPSContact = string.Empty;
                            string sinbinTill = string.Empty;

                            if (obj.DriverId != null && obj.Fleet_Driver.HasPDA.ToBool() && obj.Fleet_Driver.Fleet_Driver_Locations.Count > 0)
                            {
                                lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().UpdateDate.ToDateTime());


                                if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SINBIN)
                                {
                                    sinbinTill =  " - till : " + string.Format("{0:HH:mm:ss}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().SinBinTillOn.ToDateTime());
                                }

                            }


                         


                            if (totalMins > 0)
                                AvgEarning = Math.Round((totalEarning / totalMins), 2);

                            e.ToolTipText = "Driver No : " + obj.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr()
                                                + Environment.NewLine +
                                                 "Name : " + obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr() + Environment.NewLine
                                                 + plot


                                                    + "Jobs Done : " + list.Count()
                                                + Environment.NewLine + "Total Earned : £ " + earn
                                                 + Environment.NewLine + "Avg earning per hour  : £ " + AvgEarning
                                                + Environment.NewLine + "Status : " + obj.Fleet_DriverWorkingStatus.DefaultIfEmpty().WorkStatus.ToStr() + sinbinTill
                                                + lastGPSContact
                                                + (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")
                                                + Environment.NewLine + "Login Since : " + loginDateTime + " ("+obj.LoginFrom.ToStr()+")"
                   
                                                + Environment.NewLine + "Vehicle : " + obj.Fleet_Driver.DefaultIfEmpty().Fleet_VehicleType.VehicleType.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleNo.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleColor.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleMake.ToStr()

                                                + waitSince;
                            }

                        }
               




                    }
                }
            }
            catch (Exception ex)
            {


            }
        }





        private void btnPreview_Click(object sender, EventArgs e)
        {

            this.fromDate = dtpStatsFromDate.Value.ToDateTimeorNull();
            this.tillDate = dtpStatsTillDate.Value.ToDateTimeorNull();
            LoadDriverBookingStats();

        }

        private void optMonthWise_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            if (optMonthWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                dtpStatsFromDate.CustomFormat = "dd/MM/yyyy HH:mm";
                dtpStatsTillDate.CustomFormat = "dd/MM/yyyy HH:mm";


                dtpStatsFromDate.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                dtpStatsTillDate.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.LastDayOfMonthValue());
                pnlMonthWise.Enabled = true;
            }
            else if (optToday.ToggleState == ToggleState.On)
            {
                dtpStatsFromDate.CustomFormat = "HH:mm";
                dtpStatsTillDate.CustomFormat = "HH:mm";

                dtpStatsFromDate.Value = DateTime.Now.Date;

                dtpStatsTillDate.Value = DateTime.Now;
                pnlMonthWise.Enabled = true;


            }
            else
            {
                pnlMonthWise.Enabled = false;

            }

        }

        private void Map_PendingGoogle_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (Keycalled == true)
            {
                Keycalled = false;
                return;

            }

            ShowFormOnKey(e.KeyCode);
            Keycalled = true;
        }




        private void btnShowTodaysBooking_Click(object sender, EventArgs e)
        {
            frmTodaysBooking frm = new frmTodaysBooking();
            frm.StartPosition = FormStartPosition.CenterScreen;
            frm.Show();
        }

        private void btnPrintJob_Click(object sender, EventArgs e)
        {
            Print();
        }


        public override void Print()
        {

            try
            {

                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                    //Stopwatch st = new Stopwatch();
                    //st.Start();

                    //var list1 = General.GetQueryable<Vu_BookingBase>(c => c.Id == id || c.MasterJobId == id).ToList();


                    //st.Stop();

                    //var val = st.ElapsedTicks;
                    //Console.WriteLine(val);

                   // TaxiDataContext db = new TaxiDataContext();
                   //  var list=       db.Vu_BookingDetails.Where(c => c.Id == id).ToList();

                    List<Vu_BookingDetail> list = null; 
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        list=db.Vu_BookingDetails.Where(c => c.Id == id || c.MasterJobId == id).ToList();


                    }

                 //   var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == id || c.MasterJobId == id).ToList();

                    UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                    rptfrmJobDetails frm = null;
                    rptfrmJobDetails2 frm2 = null;
                    rptfrmJobDetails3 frm3 = null;
                    rptfrmJobDetails4 frm4 = null;
                    if (objReport != null)
                    {
                        switch (objReport.TemplateValue)
                        {
                            case "rptfrmJobDetails":
                                frm = new rptfrmJobDetails();
                                frm.DataSource = list;
                                frm.GenerateReport();

                                break;


                            case "rptfrmJobDetails2":
                                frm2 = new rptfrmJobDetails2();
                                frm2.DataSource = list;
                                frm2.GenerateReport();

                                break;

                            case "rptfrmJobDetails3":
                                frm3 = new rptfrmJobDetails3();
                                frm3.DataSource = list;
                                frm3.GenerateReport();

                                break;


                            case "rptfrmJobDetails4":
                                frm4 = new rptfrmJobDetails4();
                                frm4.DataSource = list;
                                frm4.GenerateReport();

                                break;
                        }


                        DockWindow doc = UI.MainMenuForm.MainMenuFrm.GetDockByName(objReport.TemplateValue + "1");

                        if (doc != null)
                        {
                            doc.Close();
                        }

                      
                        if (frm != null)
                        {
                            frm.FormBorderStyle = FormBorderStyle.FixedSingle;
                            frm.Size = new Size(1024, 900);
                            frm.ControlBox = true;
                            frm.MaximizeBox = true;
                            frm.MinimizeBox = true;
                            frm.ShowDialog();

                            frm.Dispose();
                        }
                        else if (frm2 != null)
                        {
                            frm2.FormBorderStyle = FormBorderStyle.FixedSingle;
                            frm2.Size = new Size(1024, 900);
                            frm2.ControlBox = true;
                            frm2.MaximizeBox = true;
                            frm2.MinimizeBox = true;
                            frm2.ShowDialog();

                            frm2.Dispose();


                        }
                        else if (frm3 != null)
                        {
                            frm3.FormBorderStyle = FormBorderStyle.FixedSingle;
                            frm3.Size = new Size(1024, 900);
                            frm3.ControlBox = true;
                            frm3.MaximizeBox = true;
                            frm3.MinimizeBox = true;
                            frm3.ShowDialog();

                            frm3.Dispose();


                        }

                        else if (frm4 != null)
                        {
                            frm4.FormBorderStyle = FormBorderStyle.FixedSingle;
                            frm4.Size = new Size(1024, 900);
                            frm4.ControlBox = true;
                            frm4.MaximizeBox = true;
                            frm4.MinimizeBox = true;
                            frm4.ShowDialog();

                            frm4.Dispose();


                        }


                    }
                }
            }
            catch (Exception ex)
            {


            }

        }

        private void btnHideBooking_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {
            HideBookings(args.NewValue);
        }


        private void HideBookings(ToggleState toggle)
        {

            if (toggle == Telerik.WinControls.Enumerations.ToggleState.Off)
            {
                tableLayoutPanel1.RowStyles[0].Height = 100;
                tableLayoutPanel1.RowStyles[1].Height = 0;
                btnHideBooking.Text = "Show Booking";
            }
            else
            {
                btnHideBooking.Text = "Hide Booking";

                tableLayoutPanel1.RowStyles[0].Height = 40;
                tableLayoutPanel1.RowStyles[1].Height = 60;

            }

        }

        public void SetFullScreen()
        {
            tableLayoutPanel1.RowStyles[0].Height = 45;
            tableLayoutPanel1.RowStyles[1].Height = 55;

        }

        public void SetNormalScreen()
        {
            tableLayoutPanel1.RowStyles[0].Height = 40;
            tableLayoutPanel1.RowStyles[1].Height = 60;


        }


        private void btnDeleteSelected_Click(object sender, EventArgs e)
        {
            try
            {

                if (grdPendingJobs.CurrentRow != null)
                    grdPendingJobs.CurrentRow = null;

                if (grdPendingJobs.Rows.Where(c => c.Cells["Check"].Value.ToBool()).Count() == 0) return;
                if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete Selected Booking(s) ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                {

                    foreach (GridViewRowInfo row in grdPendingJobs.Rows.Where(c => c.Cells["Check"].Value.ToBool()))
                    {
                        objMaster = new BookingBO();

                        objMaster.GetByPrimaryKey(row.Cells["Id"].Value.ToInt());
                        if (objMaster.Current != null)
                        {
                            objMaster.DeletedBy = AppVars.LoginObj.UserName.ToStr();
                            objMaster.Delete(objMaster.Current);
                        }
                    }


                   // RefreshRequiredData

                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                    // PopulateData();
                }
            }
            catch (Exception ex)
            {
                if (objMaster.Errors.Count > 0)
                    ENUtils.ShowMessage(objMaster.ShowErrors());
                else
                {
                    ENUtils.ShowMessage(ex.Message);

                }


            }
        }


        frmWebBookingAlert frmWebAlert = null;
        private bool IsMutedWebPopup = false;
        private void AddWebBookingNotify(RadGridView grid, RadPageViewPage page)
        {
            if (page == null)
                return;

            int rowCnt = grid.Rows.Count;


            if (DisableWebBookingPopup == false && page.Name == "Pg_NewWebBookings")
            {
                if (frmWebAlert != null)
                {
                    IsMutedWebPopup = frmWebAlert.IsMute;

                    frmWebAlert.Close();
                    frmWebAlert = null;
                }
            }

            if (rowCnt == 0)
            {
                page.Image = null;

                if (grid.Name == "grdWebBookingsNew")
                {
                    page.Tag = null;
                }


            }
            else
            {

                if (DisableWebBookingPopup == false)
                {
                    if (page.Name == "Pg_NewWebBookings")
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(ShowWebAlert));


                        }
                        else
                        {
                            ShowWebAlert();

                        }

                    }
                }


                if (rowCnt == 1)
                {

                    page.Image = global::Taxi_AppMain.Properties.Resources.one;
                }
                else if (rowCnt == 2)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.two;

                }
                else if (rowCnt == 3)
                {

                    page.Image = global::Taxi_AppMain.Properties.Resources.three;
                }
                else if (rowCnt == 4)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.four;

                }
                else if (rowCnt == 5)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.five;

                }
                else if (rowCnt > 5)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.fiveplus;
                }
            }



        }

        private void ShowWebAlert()
        {
            try
            {
                int rowCnt = grdWebBookingsNew.Rows.Count;


                if (frmWebAlert == null || frmWebAlert.IsDisposed)
                {
                    frmWebAlert = new frmWebBookingAlert(rowCnt.ToStr() + " new WebBooking(s) are Waiting");
                    frmWebAlert.FormClosed += new FormClosedEventHandler(frmWebAlert_FormClosed);
                    frmWebAlert.SetMuted(IsMutedWebPopup);
                    frmWebAlert.Show();

                }
                else
                {
                    if (frmWebAlert != null && frmWebAlert.IsDisposed == false)
                    {
                        frmWebAlert.SetMessage(rowCnt.ToStr() + " new WebBooking(s) are Waiting");
                        frmWebAlert.SetMuted(IsMutedWebPopup);
                        frmWebAlert.Visible = true;
                        frmWebAlert.Show();
                    }

                }
            }
            catch (Exception ex)
            {

            }
        }

        void frmWebAlert_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {


                IsMutedWebPopup = ((frmWebBookingAlert)(sender)).IsMuted();

            }
            catch (Exception ex)
            {


            }
        }


        private void timer_WebBooking_Tick(object sender, EventArgs e)
        {
            try
            {


                //General.StopTimer(timer_PDA);




                if (EnableWebBooking && IsServer)
                {
                    string msg = string.Empty;


                    if (bookingEngineType == "old")
                    {

                        th_WebBooking = new Thread(delegate()
                        {
                            using (FetchWebBookings obj = new FetchWebBookings())
                            {
                                obj.HasWebBookingTab = this.HasWebBookingTab;

                                if (obj.Fetch(ref msg))
                                {

                                    if (HasWebBookingTab)
                                    {
                                        if (!string.IsNullOrEmpty(obj.CaptionText))
                                        {

                                            if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                            {



                                                long jobId = 0;
                                                if (obj.ListofFetechedJobs.Count == 1)
                                                {
                                                    jobId = obj.ListofFetechedJobs.FirstOrDefault().Id;

                                                    if (this.InvokeRequired)
                                                        this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, obj.ListofFetechedJobs.FirstOrDefault());

                                                    else
                                                        AddNewWebBooking(jobId, obj.ListofFetechedJobs.FirstOrDefault());


                                                }
                                                else
                                                {
                                                    if (this.InvokeRequired)
                                                    {

                                                        this.BeginInvoke(new UIOnlineBookingDelegate(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));

                                                    }
                                                    else
                                                    {
                                                        PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));

                                                    }
                                                }

                                                //   string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                BroastcastWebBooking("**authorize web>>" + "xxx" + ">>" + Environment.MachineName + ">>" + jobId);

                                            }

                                        }


                                    }

                                    else
                                    {

                                        if (!string.IsNullOrEmpty(obj.CaptionText))
                                        {

                                            MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(obj.CaptionText, obj.ContentText, null, System.Media.SystemSounds.Asterisk, false, "", "", ""); });
                                            this.Invoke(mi);



                                            if (obj.ListofFetechedJobs != null)
                                            {

                                                if (AppVars.objPolicyConfiguration.EnableOnlineBookingAuthorization.ToBool() == false)
                                                {
                                                    obj.ListofFetechedJobs.RemoveAll(c => c.BookingTypeId == Enums.BOOKING_TYPES.WEB);
                                                }

                                                if (AppVars.objPolicyConfiguration.EnableMobileBookingAuthorization.ToBool() == false)
                                                {
                                                    obj.ListofFetechedJobs.RemoveAll(c => c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE);

                                                }
                                            }


                                            if (this.InvokeRequired)
                                            {



                                                if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                                {
                                                    this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), obj.ListofFetechedJobs);

                                                    string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                    BroastcastWebBooking("**authorize web>>" + obj.ListofFetechedJobs.FirstOrDefault().AddBy.ToStr() + ">>" + Environment.MachineName + ">>" + ids);

                                                }
                                                else
                                                {
                                                    UIDelegate d = new UIDelegate(RefreshTodayAndPreData);
                                                    this.BeginInvoke(d);

                                                }
                                            }
                                            else
                                            {

                                                // PopulateData();

                                                if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                                {
                                                    ShowOnlineBookingsPopup(obj.ListofFetechedJobs);
                                                    string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                    BroastcastWebBooking("**authorize web>>" + obj.ListofFetechedJobs.FirstOrDefault().AddBy.ToStr() + ">>" + Environment.MachineName + ">>" + ids);


                                                }
                                                else
                                                {

                                                    RefreshTodayAndPreData();

                                                }

                                            }
                                        }
                                        else if (obj.CancelCount > 0)
                                        {

                                            if (this.InvokeRequired)
                                            {

                                                UIDelegate d = new UIDelegate(RefreshTodayAndPreData);
                                                this.BeginInvoke(d);

                                            }
                                            else
                                            {
                                                RefreshTodayAndPreData();

                                            }


                                        }
                                    }
                                }
                            }
                        });
                        th_WebBooking.IsBackground = true;
                        th_WebBooking.Start();
                    }
                    else
                    {
                        th_WebBooking = new Thread(delegate()
                        {
                            using (FetchWebBookingsVehicleManagement obj = new FetchWebBookingsVehicleManagement())
                            {
                                obj.HasWebBookingTab = this.HasWebBookingTab;

                                if (obj.Fetch(ref msg))
                                {

                                    if (HasWebBookingTab)
                                    {
                                        if (!string.IsNullOrEmpty(obj.CaptionText))
                                        {

                                            if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                            {


                                                //   AddWaitingWebBooking(obj.ListofFetechedJobs);

                                                if (this.InvokeRequired)
                                                {

                                                    this.BeginInvoke(new UIOnlineBookingDelegate(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));

                                                }
                                                else
                                                {
                                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));

                                                }


                                                long jobId = 0;
                                                if (obj.ListofFetechedJobs.Count == 1)
                                                {
                                                    jobId = obj.ListofFetechedJobs.FirstOrDefault().Id;
                                                }


                                                //   string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                BroastcastWebBooking("**authorize web>>" + "xxx" + ">>" + Environment.MachineName + ">>" + jobId);

                                            }

                                        }


                                    }

                                    else
                                    {

                                        if (!string.IsNullOrEmpty(obj.CaptionText))
                                        {

                                            MethodInvoker mi = new MethodInvoker(delegate() { this.CreateAndShowAlert(obj.CaptionText, obj.ContentText, null, System.Media.SystemSounds.Asterisk, false, "", "", ""); });
                                            this.Invoke(mi);



                                            if (obj.ListofFetechedJobs != null)
                                            {

                                                if (AppVars.objPolicyConfiguration.EnableOnlineBookingAuthorization.ToBool() == false)
                                                {
                                                    obj.ListofFetechedJobs.RemoveAll(c => c.BookingTypeId == Enums.BOOKING_TYPES.WEB);
                                                }

                                                if (AppVars.objPolicyConfiguration.EnableMobileBookingAuthorization.ToBool() == false)
                                                {
                                                    obj.ListofFetechedJobs.RemoveAll(c => c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE);

                                                }
                                            }


                                            if (this.InvokeRequired)
                                            {



                                                if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                                {
                                                    this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), obj.ListofFetechedJobs);

                                                    string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                    BroastcastWebBooking("**authorize web>>" + obj.ListofFetechedJobs.FirstOrDefault().AddBy.ToStr() + ">>" + Environment.MachineName + ">>" + ids);

                                                }
                                                else
                                                {
                                                    UIDelegate d = new UIDelegate(RefreshTodayAndPreData);
                                                    this.BeginInvoke(d);

                                                }
                                            }
                                            else
                                            {

                                                // PopulateData();

                                                if (obj.ListofFetechedJobs != null && obj.ListofFetechedJobs.Count > 0)
                                                {
                                                    ShowOnlineBookingsPopup(obj.ListofFetechedJobs);
                                                    string ids = string.Join(">>", obj.ListofFetechedJobs.Select(a => a.Id.ToStr()).ToArray<string>());
                                                    BroastcastWebBooking("**authorize web>>" + obj.ListofFetechedJobs.FirstOrDefault().AddBy.ToStr() + ">>" + Environment.MachineName + ">>" + ids);


                                                }
                                                else
                                                {

                                                    RefreshTodayAndPreData();

                                                }

                                            }
                                        }
                                        else if (obj.CancelCount > 0)
                                        {

                                            if (this.InvokeRequired)
                                            {

                                                UIDelegate d = new UIDelegate(RefreshTodayAndPreData);
                                                this.BeginInvoke(d);

                                            }
                                            else
                                            {
                                                RefreshTodayAndPreData();

                                            }


                                        }
                                    }
                                }
                            }
                        });
                        th_WebBooking.IsBackground = true;
                        th_WebBooking.Start();


                    }

                    //   this.Cursor = Cursors.Default;


                }

                // Free Memory
                if (System.Diagnostics.Process.GetCurrentProcess().WorkingSet64 > 500000000)
                {

                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                    SetProcessWorkingSetSize(System.Diagnostics.Process.GetCurrentProcess().Handle, -1, -1);
                }


                if (BookingHours > 0 && EnablePDA)
                {

                    DateTime CurrDate = DateTime.Now;


                    if (grdPreBookings.Rows.Where(c => c.Cells["Plot"].Value.ToStr() != string.Empty)
                        .Count(c => c.Cells["PlotHour"].Value.ToDateTime() <= CurrDate) > 0)
                    {


                        RefreshRequiredData();
                        // PopulateRequiredData();
                        //PopulateData();

                    }
                }


                //if (AppVars.IsBTVoipCLI)
                //    AppVars.frmMDI.OnRestartBTVOIPCLI();

               // need to uncomment
              //  AutoDespatchActivity();


                if (IsServer)
                {

                    //if (AppVars.objPolicyConfiguration.DriverSuspensionDateTime != null && DateTime.Now.DayOfWeek == AppVars.objPolicyConfiguration.DriverSuspensionDateTime.Value.DayOfWeek
                    //    && DateTime.Now.Hour == (AppVars.objPolicyConfiguration.DriverSuspensionDateTime.Value.Hour - 2) && DateTime.Now.TimeOfDay.Minutes == 1)
                    //{

                    //    Thread dueRentThread = new Thread(new ThreadStart(SendRentDueSMS));
                    //    dueRentThread.IsBackground = true;
                    //    dueRentThread.Start();


                    //}

                    
                    if (ShowPendingJobOnRecentTab)
                    {

                        string pendingTimeoutJobs = string.Join(",", (grdAllJobs.Rows.Where(c =>

                                  c.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING

                                 &&

                                        ((c.Cells["IsAutoDespatch"].Value.ToBool() && c.Cells["PickupDateTemp"].Value.ToDateTime() < DateTime.Now.AddMinutes(-6))
                                     || (c.Cells["DespatchDateTime"].Value.ToDateTime() <=  DateTime.Now.AddSeconds(-80)))

                                 )
                                 .Select(c => c.Cells["Id"].Value.ToString()).ToArray<string>()));


                        // AUTORECALL TIMEOUT JOBS FROM RECENT JOBS TO PENDING JOBS
                        if (pendingTimeoutJobs.Length > 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.stp_RunProcedure("update booking set bookingstatusid=12 where  (bookingstatusId=4 or bookingstatusid=12)  and driverId is not null and ID IN(" + pendingTimeoutJobs + ")");
                                //   db.SubmitChanges();
                            }

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);

                        }
                    }



                    SendWeeklyControllerReport();
                }



                if (ddlShowDue.SelectedValue.ToInt() > 0 && grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor!=null)
                {

                    grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Value = DateTime.Now.AddMinutes(ddlShowDue.SelectedValue.ToInt());
                 

                }




                UpdateDriverWaitingSince();
            }
            catch (Exception ex)
            {


            }



        }

        private void UpdateDriverWaitingSince()
        {


            try
            {
                if (grdDriverWaiting.Columns["WaitSinceOn"] == null)
                    return;

                if (now.Year == 0001)
                    now = DateTime.Now;

                grdDriverWaiting.Rows.ToList().ForEach(item => item.Cells["WaitSinceOn"].Value = now.Subtract(item.Cells["WaitSinceDate"].Value.ToDateTime()).TotalMinutes.ToInt() + " mins");

              
            }

            catch
            {

            }
        }


        private void AddNewWebBooking(long jobId, Booking objNewBooking)
        {
            if (jobId == 0)
                return;

            try
            {


                bool IsNewObject = false;



                GridViewRowInfo row = grdWebBookingsNew.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                if (row == null)
                {

                    if (objNewBooking == null)
                    {
                        objNewBooking = General.GetObject<Booking>(c => c.Id == jobId);
                        IsNewObject = true;

                    }

                    if (objNewBooking != null)
                    {


                        row = grdWebBookingsNew.Rows.AddNew();

                        row.Cells["ID"].Value = objNewBooking.Id;
                        row.Cells["REFNO"].Value = objNewBooking.BookingNo;

                        row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", objNewBooking.BookingDate.ToDateTime());

                        row.Cells["PASSENGER"].Value = objNewBooking.CustomerName;

                        row.Cells["BOOKINGTYPEID"].Value = objNewBooking.BookingTypeId;
                        row.Cells["DEFAULTCLIENTID"].Value = objNewBooking.AddBy;
                        row.Cells["VEHICLETYPE"].Value = IsNewObject ? objNewBooking.Fleet_VehicleType.DefaultIfEmpty().VehicleType.ToStr() : objNewBooking.BoundType.ToStr().Trim();


                        if (!string.IsNullOrEmpty(objNewBooking.CustomerPhoneNo) && !string.IsNullOrEmpty(objNewBooking.CustomerMobileNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerPhoneNo + "/" + objNewBooking.CustomerMobileNo;

                        else if (!string.IsNullOrEmpty(objNewBooking.CustomerPhoneNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerPhoneNo;

                        else if (!string.IsNullOrEmpty(objNewBooking.CustomerMobileNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerMobileNo;


                        if (!string.IsNullOrEmpty(objNewBooking.CustomerEmail))
                        {
                            row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + objNewBooking.CustomerEmail;
                            row.Cells["EMAIL"].Value = objNewBooking.CustomerEmail;
                        }

                        row.Cells["PICKUPDATETIME"].Value = objNewBooking.PickupDateTime;
                        row.Cells["PICKUPTIME"].Value = objNewBooking.PickupDateTime;

                        row.Cells["OLDPICKUPDATETIME"].Value = objNewBooking.PickupDateTime;


                        row.Cells["FlightNo"].Value = objNewBooking.FromDoorNo;


                        if (!string.IsNullOrEmpty(objNewBooking.FromStreet.ToStr().Trim()))
                            row.Cells["FlightNo"].Value += " - " + objNewBooking.FromStreet;


                        row.Cells["FROMADDRESS"].Value = objNewBooking.FromAddress;
                        row.Cells["TOADDRESS"].Value = objNewBooking.ToAddress;

                        row.Cells["FARES"].Value = objNewBooking.FareRate.ToDecimal();
                        row.Cells["OLDFARES"].Value = objNewBooking.FareRate.ToDecimal();


                        row.Cells["VIA"].Value = objNewBooking.DistanceString.ToStr();
                        row.Cells["PAYMENTTYPE"].Value = IsNewObject ? objNewBooking.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr().Trim() : objNewBooking.CancelReason.ToStr().Trim();


                        if (IsNewObject)
                        {
                            row.Cells["Notes"].Value = objNewBooking.Booking_Notes.Count > 0 ? objNewBooking.Booking_Notes[0].notes.ToStr().Trim() : "";
                        }
                        else
                        {
                            row.Cells["Notes"].Value = objNewBooking.SpecialRequirements.ToStr().Trim();
                        }

                        AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);


                        txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                    }
                }
            }
            catch (Exception ex)
            {


            }

        }



        private bool EnableAutoDespatchMode = false;
        private bool EnableBiddingMode = false;

        private DateTime? lastCheckReEnableAutoDespatch = null;

        private void AutoDespatchActivity()
        {
          
            //if(Debugger.IsAttached)
            //    IsServer=true;

            if (IsServer)
            {

                //if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                //{

                   

                //    if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool() == false
                //        || (EnableAutoDespatchMode == true && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool() == false))
                //    {

                //        IsPerformingAutoDespatchActivity = false;

                //        try
                //        {
                //            if (lastCheckReEnableAutoDespatch == null || DateTime.Now.Subtract(lastCheckReEnableAutoDespatch.Value).TotalMinutes >= 3)
                //            {

                //                using (TaxiDataContext db = new TaxiDataContext())
                //                {
                //                    if (db.Gen_SysPolicy_Configurations.Count(c => c.EnableAutoDespatch == true) > 0)
                //                    {

                //                        AppVars.objPolicyConfiguration = db.Gen_SysPolicy_Configurations.FirstOrDefault();
                //                    }
                //                }

                //                lastCheckReEnableAutoDespatch = DateTime.Now;
                //                File.AppendAllText(Application.StartupPath + "\\AutoDespatchReEnabled.txt", lastCheckReEnableAutoDespatch.ToStr() + Environment.NewLine);
                //            }
                //        }
                //        catch
                //        {



                //        }

                //    }   
                //}


              

                if (EnableBiddingMode ||  (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool() && EnableAutoDespatchMode))
                {


                    jobIds = grdPendingJobs.Rows.Where(c => c.Cells["Time"].Style.CustomizeFill == true
                        && (c.Cells["IsAutoDespatch"].Value.ToBool() == true || c.Cells["IsBidding"].Value.ToBool() == true)
                        &&   (c.Cells["PickupDateTemp"].Value.ToDateTime() > DateTime.Now.AddMinutes(-60)))
                         .Select(c => c.Cells["Id"].Value.ToLong()).ToArray<long>();


                    //  if (jobIds.Count() == 0)
                    // {

                    IEnumerable<long> jobIds2 = grdAllJobs.Rows.Where(c =>
                             (c.Cells["IsAutoDespatch"].Value.ToBool() == true || c.Cells["IsBidding"].Value.ToBool() == true)
                             && c.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING
                             && c.Cells["PickupDateTemp"].Value.ToDateTime() > DateTime.Now
                             )
                             .Select(c => c.Cells["Id"].Value.ToLong());






                    jobIds = jobIds.Union(jobIds2).ToArray<long>();

                    //jobIds.Union(grdAllJobs.Rows.Where(c =>
                    //     (c.Cells["IsAutoDespatch"].Value.ToBool() == true || c.Cells["IsBidding"].Value.ToBool() == true))
                    //     .Select(c => c.Cells["Id"].Value.ToLong()).ToArray<long>());


                    //  }

                    if (jobIds.Count() > 0)
                    {

                       

                        ThreadPool.QueueUserWorkItem(PerformAutoDespatchActivity2, null);

                     //   thread_AutoDespatch = new Thread(new ThreadStart(PerformAutoDespatchActivity2));
                     //   thread_AutoDespatch.IsBackground = true;
                     ////   thread_AutoDespatch.Name = (testCnt++).ToStr();
                     //   thread_AutoDespatch.Start();

                    }

                }

            }

        }


        //int testCnt = 0;
     //   Thread thread_AutoDespatch = null;

    

        private void SendAutoEmailController()
        {
            try
            {







                List<Attachment> myAttach = new List<Attachment>();

                var list = (from a in General.GetQueryable<UM_User>(c => c.UM_SecurityGroup.GroupName == "Controller")
                            select new
                            {
                                Id = a.Id,
                                ControllerName = a.UserName
                            }).ToList();
                DateTime dtFrom = DateTime.Now.AddDays(-7).ToDate();
                DateTime dtTill = DateTime.Now;
                rptfrmAdminReport frm = new rptfrmAdminReport();
                string Comment = string.Empty;
                foreach (var item in list)
                {
                    frm.LoadReport(item.ControllerName, dtFrom, dtTill, item.Id, Comment);
                    string path = frm.ExportReport2(item.ControllerName.ToStr());

                    if (!string.IsNullOrEmpty(path))
                    {
                        myAttach.Add(new System.Net.Mail.Attachment(path));

                    }
                }

                string criteria = "Weekly Controller Report : " + string.Format("{0:dd/MM/yyyy}", dtFrom) + " to " + string.Format("{0:dd/MM/yyyy}", dtTill);


                Taxi_AppMain.Email.Send(criteria, criteria, AppVars.objSubCompany.EmailAddress.ToStr(), AppVars.objSubCompany.EmailCC.ToStr(), myAttach);

                int cnt = myAttach.Count;

                for (int i = 0; i < cnt; i++)
                {
                    if (File.Exists(myAttach[i].Name))
                    {
                        File.Delete(myAttach[i].Name);
                    }

                }


            }
            catch (Exception ex)
            {


            }
        }

        private void SendWeeklyControllerReport()
        {
            try
            {

                if (AutoEmailControllerReport == false)
                    return;


                if (AppVars.objSubCompany.EmailCC.ToStr().Trim() == string.Empty)
                    return;


                //if (DateTime.Now.DayOfWeek.ToStr().ToLower() == ControllerReportDay.ToStr().ToLower() &&  DateTime.Now.TimeOfDay.Minutes == 1)
                //{

                //    Thread thEmail = new Thread(new ThreadStart(SendAutoEmailController));
                //    thEmail.Start();

                //}


            }
            catch (Exception ex)
            {


            }

        }



      


        private void BroastcastWebBooking(string message)
        {

            new BroadcasterData().BroadCastToAll(message);

        }

        public void ShowCancelBookingPopup(long jobId,Booking obj)
        {
            frmBookingCancelledPopup frmOnline = new frmBookingCancelledPopup(jobId);
            frmOnline.StartPosition = FormStartPosition.CenterScreen;
            frmOnline.Show();



        }


       

        public void ShowOnlineBookingsPopup(List<Booking> listofJobs)
        {
            frmFetchedOnlineBookingsPopup frmOnline = new frmFetchedOnlineBookingsPopup(listofJobs);
            frmOnline.StartPosition = FormStartPosition.CenterScreen;
            frmOnline.Show();



        }








        private void btnWebBooking_Click(object sender, EventArgs e)
        {
            try
            {

                //AddCall("DANISH" + " - " + "03323755646" + "-" + string.Format("{0:HH:mm}", DateTime.Now));

                timer_WebBooking.Stop();
                frmWebBooking frm = new frmWebBooking(HasWebBookingTab);
                frm.ShowDialog();

            }
            catch (Exception ex)
            {


            }
            finally
            {

                timer_WebBooking.Start();
            }

        }







        private void btnFindPreBooking_Click(object sender, EventArgs e)
        {
            RefreshSearchPreBookingData();

        }


        private void PopulateSearchPreBookingData()
        {
            try
            {
                string searchTxt = txtSearch.Text.ToLower().Trim();
                string col = ddlColumns.Text.Trim().ToLower();

                if (searchTxt.Length < 3)
                    searchTxt = string.Empty;

                bool col_name = false;
                bool col_refNo = false;
                bool col_telNo = false;
                bool col_mobNo = false;

                if (col == "passenger")
                {
                    col_name = true;
                }
                else if (col == "reference")
                {
                    col_refNo = true;
                }
                else if (col == "telephone no")
                {
                    col_telNo = true;
                }
                else if (col == "mobile no")
                {
                    col_mobNo = true;
                }

                DateTime? nowDate = DateTime.Now.Date;

                DateTime? fromDate = dtpFromDatePreBook.Value.ToDateorNull();


                DateTime? tillDate = dtpToDatePreBook.Value.ToDateorNull();

                if (fromDate != null && fromDate < nowDate)
                    fromDate = nowDate;



                listofPreBooking = (from a in General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date > nowDate
                                     &&   (c.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId==0))
                                    //where (fromDate == null || a.PickupDateTime.Value.Date >= fromDate) && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)
                                    where

                                    (fromDate != null ||


                               (col_name && (a.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                   || (col_refNo && (a.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                   || (col_telNo && (a.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                    || (col_mobNo && (a.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                               )
                                   && ((fromDate == null || a.PickupDateTime.Value.Date >= fromDate) && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate))


                                    select new
                                    {
                                        Id = a.Id,
                                        Plot = a.Gen_Zone1.ShortName,

                                        PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                        ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                        : a.PickupDateTime.Value.AddHours(-BookingHours),

                                        RefNumber = a.BookingNo,
                                        BookingDateTime = a.BookingDate,
                                        PickupDateTemp = a.PickupDateTime,
                                        PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                        Time = string.Format("{0:HH:mm}", a.PickupDateTime),


                                        Account = a.Gen_Company.CompanyName,
                                        PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                        Vehicle = a.Fleet_VehicleType.VehicleType,


                                        From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                                        FromPostCode = a.FromPostCode,
                                        To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                        ToPostCode = a.ToPostCode,
                                        Fare = a.FareRate,
                                        Pax=a.NoofPassengers,
                                        FromLocTypeId = a.FromLocTypeId,
                                        ToLocTypeId = a.ToLocTypeId,

                                        BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                        TextColor1 = a.Gen_Company.TextColor,

                                        BackgroundColor = a.Fleet_VehicleType.BackgroundColor,

                                        TextColor = a.Fleet_VehicleType.TextColor,



                                        Passenger = a.CustomerName,
                                        MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                                        SpecialReq = a.SpecialRequirements,
                                        UpdateBy = a.AddLog,
                                        StatusId = a.BookingStatusId,
                                        Status = a.BookingStatus.StatusName,
                                        StatusColor = a.BookingStatus.BackgroundColor,
                                        Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                        DriverId = a.DriverId,
                                        IsAutoDespatch = a.AutoDespatch,
                                        BookingTypeId = a.BookingTypeId,
                                        HasNotes = a.Booking_Notes.Count,
                                        HasNotesImg = "",
                                        SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                        BookingBackgroundColor = a.BookingType.BackgroundColor,
                                        GroupId = a.JobCode,

                                        //   PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                        //  Direction = a.BoundType,
                                        FromLocId = a.FromLocId,
                                        //  FromPostCode = a.FromPostCode,
                                        PrePickupDate = a.PickupDateTime.Value.Date,
                                        BabySeats = a.BabySeats,
                                    //    FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                     //   ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,
                                      //  FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                      //  ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                        IsConfirmedDriver = a.IsConfirmedDriver,
                                        MilesFromBase = a.ExtraMile,
                                        IsBidding = a.IsBidding,
                                        DeadMileage = a.DeadMileage,
                                        a.DespatchDateTime,
                                        a.JourneyTypeId,
                                        Due = a.ZoneId != null ? a.Gen_Zone1.JobDueTime : null
                                    }).OrderByDescending(c => c.PickupDateTemp).ToList();


                //  grdPreBookings.DataSource = query;


                //NEEDTOCHECK
                //grdPreBookings.MasterTemplate.ExpandAllGroups();

            }
            catch (Exception ex)
            {


            }
        }

        private void btnShowAllPreBooking_Click(object sender, EventArgs e)
        {
            dtpFromDatePreBook.Value = null;
            dtpToDatePreBook.Value = null;
            txtSearch.Text = string.Empty;


            RefreshTodayAndPreData();

        }



        //private void btnBiddings_Click(object sender, EventArgs e)
        //{
        //    frmBiddings frm = new frmBiddings();
        //    frm.StartPosition = FormStartPosition.CenterScreen;
        //    frm.Show();
        //}

        private void btnShowAllQuotation_Click(object sender, EventArgs e)
        {
            dtpFromQuotation.Value = null;
            dtpToQuotation.Value = null;
            PopulateQuotationsGrid();
        }

        private void btnFindQuotations_Click(object sender, EventArgs e)
        {
            PopulateQuotationsGrid();
        }

        private void btnEmail_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                    Booking obj = General.GetObject<Booking>(c => c.Id == id);

                    if (obj != null)
                    {

                        frmEmailBooking frm = new frmEmailBooking(obj);
                        frm.IsOpenedFromBooking = true;
                        frm.StartPosition = FormStartPosition.CenterScreen;
                        frm.ShowDialog();
                    }
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void btnSMS_Click(object sender, EventArgs e)
        {
            try
            {
                frmSMSAll frm = new frmSMSAll();
                frm.ShowDialog();
                frm.Dispose();

            }
            catch (Exception ex)
            {



            }
        }

        private void btnComplaints_Click(object sender, EventArgs e)
        {
            try
            {

                frmComplaint frmCom = new frmComplaint();
                frmCom.StartPosition = FormStartPosition.CenterScreen;
                frmCom.MaximizeBox = false;
                frmCom.FormBorderStyle = FormBorderStyle.FixedSingle;
                frmCom.ShowDialog();
                frmCom.Dispose();
            }
            catch (Exception ex)
            {


            }
        }





        bool IsNotification = false;
        private int xpos = 0, ypos = 0;
        private int lblNotiX;
        private void tmrAlert_Tick(object sender, EventArgs e)
        {
           
            
            try
            {

                if (IsNotification == true)
                {
                    

                    if (lblNotification.Text != string.Empty)
                    {

                        int lbl = lblNotification.Location.X + lblNotification.Width;

                        if (pnlNotification.Location.X >= (pnlNotification.Location.X + lblNotification.Location.X + lblNotification.Width))
                        {
                            lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
                            xpos = 0;
                            ypos = 0;
                        }

                        else if (xpos == 0)
                        {

                            int xval = lblNotification.Location.X;
                            lblNotification.Location = new System.Drawing.Point(xval, 4);
                            xpos = xval;
                        }
                        else
                        {

                            lblNotification.Location = new System.Drawing.Point(xpos, 4);
                            xpos -= 2;
                            if (xpos == 0)
                            {
                                xpos = -1;
                            }
                        }
                    }
                    else
                    {
                        lblNotification.Location = new System.Drawing.Point((lblNotification.Location.X + lblNotification.Width) / 2, 4);
                        xpos = 0;
                        ypos = 0;
                    }

                }





            }
            catch 
            {


            }

        }




        private void MoveUpCall()
        {
            if (lst_cdr.Items.Count < 2)
            {
                return;
            }
            if (lst_cdr.SelectedItem == null)
            {
                return;
            }
            if (lst_cdr.SelectedIndex == 0)
            {
                return;
            }


            object item = lst_cdr.SelectedItem;
            int index = lst_cdr.SelectedIndex;
            lst_cdr.Items.Remove(item);
            lst_cdr.Items.Insert(index - 1, item);
            lst_cdr.SelectedItem = item;
        }









        public void AddCall(object item)
        {
            try
            {

                if (lst_cdr.Items.OfType<string>().Count(c => c == item.ToString()) == 0)
                {
                    lst_cdr.Items.Insert(0, item);
                    lst_cdr.Visible = true;
                }

                if (ControlMoverOrResizer.WorkType == ControlMoverOrResizer.MoveOrResize.Move)
                {

                    ControlMoverOrResizer.Init(lst_cdr);
                    ControlMoverOrResizer.WorkType = ControlMoverOrResizer.MoveOrResize.Resize;
                }

            }
            catch (Exception ex)
            {


            }


        }

        private void lst_cdr_DoubleClick(object sender, EventArgs e)
        {
            lst_cdr.Visible = false;
        }

        private void btnInbox_Click(object sender, EventArgs e)
        {
            ShowInboxMessages("Inbox");
        }

        private void btnAddLostProperty_Click(object sender, EventArgs e)
        {
            frmLostProperty frm = new frmLostProperty();
            frm.ShowDialog();
            frm.Dispose();
        }

        private void btnLostPropertyList_Click(object sender, EventArgs e)
        {

            frmLostPropertyList frm = new frmLostPropertyList();
            frm.ShowDialog();
            frm.Dispose();

        }


        public void SetSelectedTabName(string tabName)
        {

            if ((tabName == "Pg_RecentJobs" || tabName == "Pg_PreBookings" || tabName == "Pg_AllJobs")
              && (grdPendingJobs.IsInEditMode == false && grdPreBookings.IsInEditMode == false)

              )
            {

                RadPageViewPage page = radPageView1.Pages.FirstOrDefault(c => c.Name == tabName);
                if (page != null)
                {

                    radPageView1.SelectedPage = page;

                    if (page == Pg_AllJobs)
                    {
                        ClearRecentJobFilter();

                    }

                }
            }
        }


        public void GetMainDashBoard()
        {
            try
            {
                radPageView1.SelectedPage = Pg_PendingJobs;
                SetCurrentFocus();

                if (grdPendingJobs.Rows.Count > 0)
                {

                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void SetCurrentFocus()
        {
            Focus();
            grdPendingJobs.Focus();

        }

        public string GetSelectedTabName()
        {


            return radPageView1.SelectedPage.Name;
        }

        public bool IsActiveTodayTabWOFilter()
        {


            return (radPageView1.SelectedPage.Name == "Pg_PendingJobs" && grdPendingJobs.IsInEditMode == false);
        }



        private void btnRecentFind_Click(object sender, EventArgs e)
        {
            RefreshSearchAllJobsData();
        }

        private void PopulateSearchAllJobGrid()
        {
            try
            {

                grdAllJobs.DataSource = listofAllJobs;

                FormatRecentJobsGrid();
            }
            catch (Exception ex)
            {


            }

        }


        private void PopulateSearchRecentJobs()
        {

            try
            {
                DateTime FromDateRecent = dtpFromDateRecent.Value.ToDate();
                DateTime ToDateRecent = dtpToDateRecent.Value.ToDate();
                string searchTxt = txtSearchRec.Text.ToStr().ToLower().Trim();

                string col = ddlRecentColumn.Text.ToStr().Trim().ToLower();

                string BookingStatua = ddlBookingStatus.Text.ToStr().Trim().ToLower();

                bool col_ref = false;
                bool col_driver = false;
                bool col_From = false;
                bool col_To = false;
                bool col_Paseenger = false;
                bool col_PaseengerPhone = false;
                bool col_PaseengerMobile = false;

                bool col_Both = false;
                bool col_Waiting = false;
                bool col_ongoing = false;
                bool col_All = false;

                if (col == "refrence no")
                {
                    col_ref = true;
                }

                if (col == "driver")
                {
                    col_driver = true;
                }
                if (col == "pickup point")
                {
                    col_From = true;
                }
                if (col == "destination")
                {
                    col_To = true;
                }
                if (txtPassengerRecent.Text != "")
                {
                    col_Paseenger = true;
                    searchTxt = txtPassengerRecent.Text.ToStr().ToLower().Trim();
                }
                if (txtPhoneRecent.Text != "")
                {
                    col_PaseengerPhone = true;
                    searchTxt = txtPhoneRecent.Text.ToStr().ToLower().Trim();
                }
                if (txtMobileRecent.Text != "")
                {
                    col_PaseengerMobile = true;
                    searchTxt = txtMobileRecent.Text.ToStr().ToLower().Trim();
                }


                if (BookingStatua == "waiting & ongoing")
                {
                    col_Both = true;
                }
                if (BookingStatua == "waiting")
                {
                    col_Waiting = true;
                }
                if (BookingStatua == "ongoing")
                {
                    col_ongoing = true;
                }
                if (BookingStatua == "all")
                {
                    col_All = true;
                }


                listofAllJobs = General.GetQueryable<Booking>(null).Where(c => (
                                                                   (col_All && (c.BookingStatusId != 0))
                                                               || (col_Both && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.POB
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.STC))
                                                               || (col_Waiting && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING))
                                                               || (col_ongoing && (c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.POB
                                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.STC)))
                                                               && (
                                                              (col_ref && (c.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                 || (col_driver && (c.Fleet_Driver.DriverNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                 || (col_From && (c.FromAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                 || (col_To && (c.ToAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                 || (col_Paseenger && (c.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                            || (col_PaseengerPhone && (c.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                          || (col_PaseengerMobile && (c.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty)))
                                                                  && ((FromDateRecent == null || c.PickupDateTime.Value.Date >= FromDateRecent) && (ToDateRecent == null || c.PickupDateTime.Value.Date <= ToDateRecent))

                                                                 ).Select(a => new
                                                                 {
                                                                     Id = a.Id,
                                                                     Plot = a.Gen_Zone1.ShortName,
                                                                     //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

                                                                     PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                                                     ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                                                     : a.PickupDateTime.Value.AddHours(-BookingHours),

                                                                     RefNumber = a.BookingNo,
                                                                     BookingDateTime = a.BookingDate,
                                                                     PickupDateTemp = a.PickupDateTime,
                                                                     PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                                                     Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                                                     Passenger = a.CustomerName,
                                                                     MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                                                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                                                                     Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - "  + a.FromOther : a.FromOther,
                                                                     FromPostCode = a.FromPostCode,
                                                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                                                     GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                                                     ToPostCode = a.ToPostCode,

                                                                     Fare = a.FareRate,
                                                                     Pax = a.NoofPassengers,
                                                                     PaymentMethod = a.Gen_PaymentType.PaymentType,
                                                                     FromLocTypeId = a.FromLocTypeId,
                                                                     ToLocTypeId = a.ToLocTypeId,

                                                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                                                     TextColor1 = a.Gen_Company.TextColor,

                                                                     BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                                                     TextColor = a.Fleet_VehicleType.TextColor,

                                                                     Account = a.Gen_Company.CompanyName,
                                                                     PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                                                     UpdateBy = a.AddLog,
                                                                     SpecialReq = a.SpecialRequirements,
                                                                     StatusId = a.BookingStatusId,
                                                                     Status = a.BookingStatus.StatusName,
                                                                     StatusColor = a.BookingStatus.BackgroundColor,
                                                                     Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                                                     DriverId = a.DriverId,
                                                                     IsAutoDespatch = a.AutoDespatch,
                                                                     BookingTypeId = a.BookingTypeId,
                                                                     HasNotes = a.Booking_Notes.Count,
                                                                     HasNotesImg = "",
                                                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                                                     BookingBackgroundColor = a.BookingType.BackgroundColor,
                                                                     GroupId = a.JobCode,

                                                                     //  PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                                                     //   Direction = a.BoundType,
                                                                     FromLocId = a.FromLocId,
                                                                     //FromPostCode = a.FromPostCode,
                                                                     PrePickupDate = a.PickupDateTime.Value.Date,
                                                                     BabySeats = a.BabySeats,
                                                                   //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                                                   //  ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                                                                   //  FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                                                   //  ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                                                     IsConfirmedDriver = a.IsConfirmedDriver,
                                                                     MilesFromBase = a.ExtraMile,
                                                                     IsBidding = a.IsBidding,
                                                                     DeadMileage = a.DeadMileage,
                                                                     a.DespatchDateTime,
                                                                     a.JourneyTypeId,
                                                                     Due = a.ZoneId != null ? a.Gen_Zone1.JobDueTime : null

                                                                 }).OrderBy(c => c.PickupDateTemp).ToList();


            }
            catch (Exception ex)
            {


            }
        }

        private void btnRecentShowAll_Click(object sender, EventArgs e)
        {
            ClearRecentJobFilter();
            RefreshSearchAllJobsData();
        }


        private void ClearRecentJobFilter()
        {

            txtSearchRec.Text = string.Empty;


            ddlBookingStatus.SelectedIndex = ddlBookingStatus.Tag.ToInt();
            ddlRecentColumn.SelectedIndex = 0;
            dtpFromDateRecent.Value = DateTime.Now.ToDate().AddDays(-1);
            dtpToDateRecent.Value = DateTime.Now.ToDate();

            txtSearchRec.Focus();
        }

        private void txtSearchRec_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.Control)
            {
                return;
            }

            if (e.KeyCode ==  Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Up)
            {
                dtpFromDateRecent.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtPassengerRecent.Focus();
            }
            else if (e.KeyCode == Keys.Right)
            {
                int Sel = txtSearchRec.SelectionStart;
                int pos = txtSearchRec.Text.Length;


            }
        }


        string updatemessage=string.Empty;
        private void AddNotifyMessage(string message)
        {
            updatemessage = message + " " + string.Format("{0:HH:mm}", DateTime.Now);
            //try
            //{

                
            //    if (message.Length > 0)
            //    {

            //        message = message + " " + string.Format("{0:HH:mm}", DateTime.Now);
            //            updatemessage=message;
            //        //IsNotification = true;
            //        //lblNotification.Visible = true;

            //        //radLabel1.Text = "";
            //        //radLabel1.BackColor = Color.Red;
                   
            //        //lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
            //        //xpos = 0;
            //        //ypos = 0;

            //        //if (string.IsNullOrEmpty(lblNotification.Text))
            //        //    lblNotification.Text = message;

            //        //else
            //        //    lblNotification.Text = message + " >> " + lblNotification.Text;

            //    }

            //}
            //catch 
            //{
            //  //  ENUtils.ShowErrorMessage(ex.Message);
            //}
        }



        private void dtpFromDateRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                dtpToDateRecent.Focus();
            }
        }

        private void dtpToDateRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ddlBookingStatus.Focus();

            }
        }

        private void ddlBookingStatus_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnRecentFind.Focus();
            }
            else if (e.KeyCode == Keys.Left)
            {
                txtSearchRec.Focus();
            }
        }

        private void txtPhoneRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtMobileRecent.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtPassengerRecent.Focus();
            }
        }

        private void txtPassengerRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtPhoneRecent.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtSearchRec.Focus();
            }
        }

        private void txtMobileRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtPhoneRecent.Focus();
            }
        }

        private void lblNotification_MouseHover(object sender, EventArgs e)
        {
            IsNotification = false;
        }

        private void lblNotification_MouseLeave(object sender, EventArgs e)
        {
            IsNotification = true;
        }

        private void ddlRecentColumn_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Left)
                {

                    if (ddlRecentColumn.SelectionStart == 0)
                    {

                        txtSearchRec.Focus();
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void btnPDAInbox_Click(object sender, EventArgs e)
        {
            ShowPDAInbox();
        }

        private void ShowPDAInbox()
        {
            ShowInboxMessages("Pda");

        }

        private void btnRecover_Click(object sender, EventArgs e)
        {
            RecoverJob();
        }

        private void RecoverJob()
        {

            try
            {
                frmRecallJob frmRec = new frmRecallJob();
                frmRec.StartPosition = FormStartPosition.CenterScreen;
                frmRec.ShowDialog();
                frmRec.Dispose();
            }
            catch (Exception ex)
            {


            }

        }

        private void btnMessageAllDrivers_Click(object sender, EventArgs e)
        {
            MessageAllDrivers();
        }


        private void MessageAllDrivers()
        {
            try
            {
                frmMessageAllDrivers frmMsgDrvs = new frmMessageAllDrivers();
                frmMsgDrvs.StartPosition = FormStartPosition.CenterScreen;
                frmMsgDrvs.Show();

            }
            catch (Exception ex)
            {


            }


        }

        private void timer_Lic_Tick(object sender, EventArgs e)
        {
            try
            {
                if (this.IsLicenseExpired == false)
                {

                    if (AppVars.LicenseChecked == false)
                    {

                        thread_License = new Thread(new ThreadStart(CheckLicense));
                        thread_License.IsBackground = true;
                        thread_License.Priority = ThreadPriority.Lowest;
                        thread_License.Start();
                    }
                }




                // need to test
                //if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmNotification") > 0)
                //{
                //    Application.OpenForms.OfType<Form>().Where(c => c.Name == "frmNotification").ToList().ForEach(c => c.Close());
                //}



                DateTime dtNow = DateTime.Now.ToDate();

                //    DateTime dateVar = DateTime.Now.AddDays(AppVars.objPolicyConfiguration.DriverExpiryNoticeInDays.ToInt()).Date;
                var ctn = General.GetQueryable<Fleet_Driver>(c => c.IsActive == true &&
                                               (

                                              (c.MOTExpiryDate >= dtNow && c.MOTExpiryDate <= dtNow.AddDays(MOTDays))
                                            || (c.MOT2ExpiryDate >= dtNow && c.MOT2ExpiryDate <= dtNow.AddDays(MOT2Days))
                                            || (c.PCODriverExpiryDate >= dtNow && c.PCODriverExpiryDate <= dtNow.AddDays(PHCDriverDays))
                                            || (c.PCOVehicleExpiryDate >= dtNow && c.PCOVehicleExpiryDate <= dtNow.AddDays(PHCVehicleDays))
                                            || (c.DrivingLicenseExpiryDate >= dtNow && c.DrivingLicenseExpiryDate <= dtNow.AddDays(LicenseDays))
                                            || (c.InsuranceExpiryDate >= dtNow && c.InsuranceExpiryDate <= dtNow.AddDays(InsuranceDays))
                                            || (c.RoadTaxiExpiryDate >= dtNow && c.RoadTaxiExpiryDate <= dtNow.AddDays(RoadTaxDays))
                                               )

                                            //   (c.MOTExpiryDate >= dtNow && c.MOTExpiryDate <= dateVar)
                    //|| (c.MOT2ExpiryDate >= dtNow && c.MOT2ExpiryDate <= dateVar)
                    //|| (c.PCODriverExpiryDate >= dtNow && c.PCODriverExpiryDate <= dateVar)
                    //|| (c.PCOVehicleExpiryDate >= dtNow && c.PCOVehicleExpiryDate <= dateVar)
                    //|| (c.DrivingLicenseExpiryDate >= dtNow && c.DrivingLicenseExpiryDate <= dateVar)
                    //|| (c.InsuranceExpiryDate >= dtNow && c.InsuranceExpiryDate <= dateVar)
                    //|| (c.RoadTaxiExpiryDate >= dtNow && c.RoadTaxiExpiryDate <= dateVar)
                    //   )

                                            ).Count();

                if (ctn > 0)
                {
                    frmNotification notification = new frmNotification(MOTDays, MOT2Days, PHCDriverDays, PHCVehicleDays, LicenseDays, InsuranceDays, RoadTaxDays, this.IsServer);
                    notification.FormBorderStyle = FormBorderStyle.FixedSingle;
                    notification.StartPosition = FormStartPosition.CenterScreen;
                    notification.Show();
                    this.WindowState = FormWindowState.Normal;
                }



            }
            catch (Exception ex)
            {


            }


        }


        Thread thread_License = null;

        private void CheckLicense()
        {
            try
            {
                using (LicDataContextDataContext db = new LicDataContextDataContext())
                {

                    stp_SysPolicyAuthResult objClient = db.stp_SysPolicyAuth(AppVars.objPolicyConfiguration.DefaultClientId).FirstOrDefault();

                    if (objClient != null)
                    {
                        if (objClient.ScriptType.ToStr().ToLower() == "expired")
                        {
                            //Taxi.Email.EmailLicenseExpiry(General.GetObject<Gen_SysPolicy_LCompany>(c => c.AddOn != null),objClient.Name,objClient.InstallationDate.ToStr(),objClient.LicenseExpiryDate.ToStr());

                            //new TaxiDataContext().stp_UpdateData(objClient.InstallationDate, objClient.LicenseExpiryDate);
                            AppVars.LicenseExpiryDate = "License Expired on " + string.Format("{0:dd/MMM/yyyy HH:mm}", objClient.LastCondition.ToStr());

                            this.IsLicenseExpired = true;

                        }
                        else
                        {
                            if (DateTime.Now.AddDays(3) > objClient.LastCondition)
                            {

                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(ShowLicenseAlert));
                                }
                                else
                                {
                                    ShowLicenseAlert();

                                }
                            }
                        }
                    }
                    else
                    {
                        this.IsLicenseExpired = true;
                        //  VerifySystemLicense();

                    }
                }

            }
            catch (Exception ex)
            {
                //  this.IsLicenseExpired = false;
                //VerifySystemLicense();

                if (ex.Message.ToLower().StartsWith("a network-related"))
                {
                    this.IsLicenseExpired = true;
                }
            }

        }


        private void ShowLicenseAlert()
        {


            frmLicenseAlert frmLic = new frmLicenseAlert(AppVars.LicenseExpiryDate, new Point((this.Size.Width - 300), 20));
            frmLic.StartPosition = FormStartPosition.CenterScreen;
            frmLic.Show();

        }

        private void VerifySystemLicense()
        {


            try
            {

                Gen_SysPolicy_LCompany objLic = General.GetObject<Gen_SysPolicy_LCompany>(c => c.AddOn != null);

                if (objLic != null)
                {
                    if (objLic.EditOn < objLic.AddOn)
                        this.IsLicenseExpired = true;


                    AppVars.LicenseExpiryDate = "License Expired on " + string.Format("{0:dd/MMM/yyyy HH:mm}", objLic.EditOn.ToStr());
                }
            }
            catch (Exception ex)
            {

            }




        }

        private void btnclearSearchFilter_Click(object sender, EventArgs e)
        {
            ClearSearchFilter();
        }


        private void ClearSearchFilter()
        {
            ClearSearchByDateFilter();
            opt_JOneWay.ToggleState = ToggleState.On;
            ddlVehicleType.SelectedValue = null;
            ddlCust.SelectedValue = null;
            ddlCust.Text = string.Empty;
            ddlPaymentType.SelectedValue = null;
            txtVia.Text = string.Empty;
            txtPickup.Text = string.Empty;
            txtDestination.Text = string.Empty;
            txtMobileNo.Text = string.Empty;
            txtOrderNo.Text = string.Empty;
            txtPhoneNo.Text = string.Empty;
            txtRefNumber.Text = string.Empty;

            txtOrderNo.Text = string.Empty;

            ddlDriver.SelectedValue = null;

            ddlStatus.SelectedValue = null;

            ddlPaymentType.SelectedValue = null;

            ddlBookingType.SelectedValue = null;

        }

        private void ClearSearchByDateFilter()
        {

            dtp_recentJob_StartDate.Value = DateTime.Now.GetStartOfCurrentWeek();
            dtp_RecentJobs_EndDate.Value = DateTime.Now.GetEndOfCurrentWeek();


        }

        public bool ReCallFOJBooking(long jobId, int driverId)
        {

            bool rtn = true;

            try
            {
                (new TaxiDataContext()).stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);




                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                {
                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
                    }

                }
                else
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
                    }


                }

            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);


            }


            return rtn;

        }

        //public void ReCallPreBooking(long jobId, int driverId)
        //{

        //    try
        //    {
        //        (new TaxiDataContext()).stp_RecoverPreJob(jobId, Enums.BOOKINGSTATUS.WAITING, driverId, "", AppVars.LoginObj.UserName.ToStr());




        //        if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
        //        {
        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Pre Job>>" + jobId + "=2");
        //            }

        //        }
        //        else
        //        {

        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Pre Job>>" + jobId + "=2");
        //            }


        //        }

        //    }
        //    catch (Exception ex)
        //    {

        //        ENUtils.ShowMessage(ex.Message);


        //    }




        //}

        private void btnEmailPrint_Click(object sender, EventArgs e)
        {
            EmailPrint();
        }




        public void EmailPrint()
        {

            try
            {

                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == id || c.MasterJobId == id).ToList();


                    if (list.Count > 0)
                    {

                        UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                        rptfrmJobDetails frm = null;
                        rptfrmJobDetails2 frm2 = null;
                        rptfrmJobDetails3 frm3 = null;
                        rptfrmJobDetails4 frm4 = null;
                        if (objReport != null)
                        {

                            switch (objReport.TemplateValue)
                            {
                                case "rptfrmJobDetails":
                                    frm = new rptfrmJobDetails();
                                    frm.DataSource = list;
                                    frm.GenerateReport();

                                    frm.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                    break;


                                case "rptfrmJobDetails2":
                                    frm2 = new rptfrmJobDetails2();
                                    frm2.DataSource = list;
                                    frm2.GenerateReport();

                                    frm2.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                    break;

                                case "rptfrmJobDetails3":
                                    frm3 = new rptfrmJobDetails3();
                                    frm3.DataSource = list;
                                    frm3.GenerateReport();
                                    frm3.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());

                                    break;


                                case "rptfrmJobDetails4":
                                    frm4 = new rptfrmJobDetails4();
                                    frm4.DataSource = list;
                                    frm4.GenerateReport();

                                    frm4.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                    break;
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {


            }

        }

        private void radPageView1_SelectedPageChanged(object sender, EventArgs e)
        {

        }

        private void btnFindWaitWebBooking_Click(object sender, EventArgs e)
        {
            PopulateWebBookingsGrid();
        }

        private void btnShowAllWebBooking_Click(object sender, EventArgs e)
        {



        }

        private void btnRefreshPendingWebBooking_Click(object sender, EventArgs e)
        {
            PopulatePendingWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING));

        }

        private void btnRefreshWaitingWebBooking_Click(object sender, EventArgs e)
        {
            PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
        }






        #region BackgroundWorker code


        BackgroundWorker worker = null;


        public void RefreshSearchAllJobsData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateSearchRecentJobs");
                }
            }
            catch (Exception ex)
            {


            }
        }


        public void RefreshBookingList()
        {
            try
            {


                if (worker.IsBusy == false)
                {
                    ShowProgress2(true);
                    worker.RunWorkerAsync("PopulateBookingHistoryData");

                }
            }
            catch (Exception ex)
            {

            }
        }


        public override void RefreshData()
        {
            try
            {
                if (worker.IsBusy == true)
                {

                    try
                    {

                        worker.CancelAsync();
                    }
                    catch
                    {


                    }
                }
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateAllData");


                    //try
                    //{

                    //    File.AppendAllText(Application.StartupPath + "\\refreshauthdata.txt", DateTime.Now.ToStr());
                    //}
                    //catch
                    //{


                    //}
                
            }
            catch (Exception ex)
            {

            }
        }

        public void RefreshBookingData()
        {
            try
            {
                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateData");

                }
            }
            catch (Exception ex)
            {

            }
        }

        public void RefreshDashBoardDrivers()
        {
            try
            {
                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateDriversData");

                }
            }
            catch (Exception ex)
            {

            }
        }


        public void RefreshAllRequiredData()
        {
            //LoadDriversGrid();
            //PopulateRequiredData();

            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateRequiredDataWithDriver");
            }
        }


        public void RefreshTodayBookingData()
        {
            //LoadDriversGrid();
            //PopulateRequiredData();

            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateTodaysBookingData");
            }
        }

        public void RefreshRequiredData()
        {
            //LoadDriversGrid();
            //PopulateRequiredData();

            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateRequiredData");
            }
        }

        public void RefreshTodayAndPreData()
        {


            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateTodayAndPreBookingData");
            }
        }



        private bool HasBookingHistoryTab = false;

        public void RefreshAllActiveData()
        {
            try
            {


                if (worker.IsBusy)
                {
                    Thread.Sleep(500);

                    try
                    {
                        try
                        {

                            worker.CancelAsync();
                        }
                        catch
                        {


                        }

                      //  File.AppendAllText("BackgroundWorkerfixedWithSleep.txt", DateTime.Now.ToStr() + Environment.NewLine);

                    }
                    catch
                    {


                    }
                }


                //if (worker.IsBusy == false)
                //{
                    ShowProgress(true);

             

                    if (tableLayoutPanel1.RowStyles[0].Height > 0)
                    {
                        worker.RunWorkerAsync("PopulateAllActiveData");

                    }
                    else
                    {
                        worker.RunWorkerAsync("PopulateActiveData");


                    }


                    
                //}


                if (HasBookingHistoryTab)
                {
                    RefreshOnActive = true;
                }
                else
                {

                    if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                    {
                        (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive();
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        public void RefreshBiddingJobsData()
        {
            try
            {



                if (enableBiddingTab)
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshPriceBiddingGrid));
                    }
                    else
                    {



                        RefreshPriceBiddingGrid();

                    }

                }
            }
            catch (Exception ex)
            {


            }
        }

        public void RefreshActiveData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateActiveData");
                }
            }
            catch (Exception ex)
            {


            }
        }


        //public void RefreshWaitingDrivers()
        //{
        //    if (worker != null && worker.IsBusy == false)
        //    {
        //        ShowProgress(true);
        //        worker.RunWorkerAsync("PopulateWaitingDrivers");

        //    }


        //}

        public void RefreshSearchPreBookingData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateSearchPreBookingData");
                }
            }
            catch (Exception ex)
            {


            }
        }

        //public void RefreshWaitingAndOnBoardDrivers()
        //{
        //    if (worker != null && worker.IsBusy == false)
        //    {
        //        ShowProgress(true);
        //        worker.RunWorkerAsync("PopulateWaitingAndOnBoardDrivers");

        //    }


        //}


        public void RefreshPlotDrivers()
        {
            if (worker != null && worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulatePlotDrivers");

            }


        }



        delegate void UIProgress(bool show);
        private void ShowProgress(bool show)
        {
            // lblProgressBar.Visible = show;
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIProgress(DisplayProgress), show);
            }
            else
            {
                DisplayProgress(show);

            }
        }





        private void DisplayProgress(bool show)
        {
            lblProgressBar.Visible = show;

        }


        private void ShowProgress2(bool show)
        {
            // lblProgressBar.Visible = show;
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIProgress(DisplayProgress2), show);
            }
            else
            {
                DisplayProgress2(show);

            }
        }





        private void DisplayProgress2(bool show)
        {
            lblProgressBookingHistory.Visible = show;

        }


        private void InitializeWorker()
        {
            worker = new BackgroundWorker();
            worker.WorkerSupportsCancellation = true;
            worker.DoWork += new DoWorkEventHandler(worker_DoWork);
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);

        }

        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            if (AppVars.IsLogout)
                return;


            if (e.Argument.ToStr() == "PopulateAllData")
            {
                e.Result = e.Argument.ToStr();
                LoadDriversByWorker();
                PopulateAllData();

            }
            else  if (e.Argument.ToStr() == "PopulateData")
            {
                e.Result = e.Argument.ToStr();
                PopulateAllData();

            }
            else if (e.Argument.ToStr() == "PopulateRequiredDataWithDriver")
            {
                e.Result = e.Argument.ToStr();

                LoadDriversByWorker();
                PopulateRequiredData();
            }
            else if (e.Argument.ToStr() == "PopulateRequiredData")
            {
                e.Result = e.Argument.ToStr();

                PopulateRequiredData();
            }
            else if (e.Argument.ToStr() == "PopulateTodaysBookingData")
            {
                e.Result = e.Argument.ToStr();

                PopulateTodaysBookingData();
            }



            else if (e.Argument.ToStr() == "PopulateAllActiveData")
            {
                LoadDriversByWorker();
                PopulateActiveData();
                e.Result = e.Argument.ToStr();
            }
            else if (e.Argument.ToStr() == "PopulateActiveData")
            {

                PopulateActiveData();
                e.Result = e.Argument.ToStr();
            }


            else if (e.Argument.ToStr() == "PopulateTodayAndPreBookingData")
            {
                e.Result = e.Argument.ToStr();
                PopulateTodayAndPreBookingData();

            }
            else if (e.Argument.ToStr() == "PopulateDriversData")
            {
                e.Result = e.Argument.ToStr();
                LoadDriversByWorker();

            }
            //else if (e.Argument.ToStr() == "PopulateWaitingDrivers")
            //{
            //    e.Result = e.Argument.ToStr();
            //    LoadWaitingDriversByWorker();

            //}
            //else if (e.Argument.ToStr() == "PopulateWaitingAndOnBoardDrivers")
            //{
            //    e.Result = e.Argument.ToStr();
            //    LoadWaitingAndOnBoardDriversByWorker();

            //}
            else if (e.Argument.ToStr() == "PopulatePlotDrivers")
            {
                e.Result = e.Argument.ToStr();
                LoadPlotsDriversByWorker();

            }
            else if (e.Argument.ToStr() == "PopulateSearchPreBookingData")
            {
                e.Result = e.Argument.ToStr();
                PopulateSearchPreBookingData();

            }
            else if (e.Argument.ToStr() == "PopulateSearchRecentJobs")
            {
                e.Result = e.Argument.ToStr();
                PopulateSearchRecentJobs();

            }


            else if (e.Argument.ToStr() == "PopulateBookingHistoryData")
            {
                e.Result = e.Argument.ToStr();
                PopulateBookingHistoryData();

            }




        }

        void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            if (AppVars.IsLogout)
                return;


         


            if (e.Result.ToStr() == "PopulateAllData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateAllGrids));
                }
                else
                {

                    PopulateAllDriversGrid();
                    PopulateAllGrids();
                }
            }
            else if (e.Result.ToStr() == "PopulateData")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllGrids));

                }
                else
                {

                    PopulateAllGrids();
                }



            }
            else if (e.Result.ToStr() == "PopulateRequiredDataWithDriver")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateRequiredGrids));
                }
                else
                {

                    PopulateAllDriversGrid();
                    PopulateRequiredGrids();
                }

                // PopulateAllDriversGrid();
                // PopulateRequiredGrids();

            }
            else if (e.Result.ToStr() == "PopulateRequiredData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateRequiredGrids));

                }
                else
                {

                    PopulateRequiredGrids();
                }



            }

            else if (e.Result.ToStr() == "PopulateTodaysBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodaysBookingGrid));

                }
                else
                {

                    PopulateTodaysBookingGrid();
                }



            }


            else if (e.Result.ToStr() == "PopulateAllActiveData")
            {
               

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateTodayAndAllJobsGrids));
                }
                else
                {

                 //   grdOnBoardDriver.InvokeRequired

                  
                    PopulateAllDriversGrid();
                    PopulateTodayAndAllJobsGrids();
                }
                // PopulateAllDriversGrid();
                // PopulateTodayAndAllJobsGrids();


            }
            else if (e.Result.ToStr() == "PopulateActiveData")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodayAndAllJobsGrids));

                }
                else
                {

                    PopulateTodayAndAllJobsGrids();
                }
                // PopulateTodayAndAllJobsGrids();


            }

            else if (e.Result.ToStr() == "PopulateTodayAndPreBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodayAndPreGrids));

                }
                else
                {

                    PopulateTodayAndPreGrids();
                }
                //                 PopulateTodayAndPreGrids();

            }

            else if (e.Result.ToStr() == "PopulateDriversData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));

                }
                else
                {

                    PopulateAllDriversGrid();
                }


            }
            //else if (e.Result.ToStr() == "PopulateWaitingDrivers")
            //{
            //    if (this.InvokeRequired)
            //    {

            //        this.BeginInvoke(new UIDelegate(PopulateWaitingDriversGrid));

            //    }
            //    else
            //    {

            //        PopulateWaitingDriversGrid();
            //    }


            //}
            //else if (e.Result.ToStr() == "PopulateWaitingAndOnBoardDrivers")
            //{
            //    if (this.InvokeRequired)
            //    {

            //        this.BeginInvoke(new UIDelegate(PopulateWaitingOnBoardDriversGrid));

            //    }
            //    else
            //    {

            //        PopulateWaitingOnBoardDriversGrid();
            //    }


            //}
            else if (e.Result.ToStr() == "PopulatePlotDrivers")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulatePlotsDriversGrid));

                }
                else
                {

                    PopulatePlotsDriversGrid();
                }
            }
            else if (e.Result.ToStr() == "PopulateSearchPreBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateSearchPreGrids));

                }
                else
                {

                    PopulateSearchPreGrids();
                }
                //                 PopulateTodayAndPreGrids();

            }



            else if (e.Result.ToStr() == "PopulateSearchRecentJobs")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateSearchAllJobGrid));

                }
                else
                {

                    PopulateSearchAllJobGrid();
                }
                //                 PopulateTodayAndPreGrids();

            }

            else if (e.Result.ToStr() == "PopulateBookingHistoryData")
            {
                if (this.InvokeRequired)
                {


                    this.BeginInvoke(new UIDelegate(PopulateBookingHistoryGrid));

                }
                else
                {

                    PopulateBookingHistoryGrid();
                }

                ShowProgress2(false);

                GC.Collect();

                return;
            }


            ShowProgress(false);
         //   GC.Collect();
        }







        IList listofDriversWaiting = null;
        IList listofDriversOnBoard = null;
        List<stp_GetDashboardDriversResult> listofDriverPlots = null;


        IList listofTodaysBooking = null;

        IList listofPreBooking = null;
        IList listofAllJobs = null;
        IList listofQuotations = null;

        List<stp_GetPriceBiddingJobsResult> listofBiddingJobs = null;

        public void LoadDriversByWorker()
        {
            try
            {
                DateTime nowDate = DateTime.Now;
                //FOJDRIVER STATUS ADDED

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    listofDriverPlots = db.stp_GetDashboardDrivers(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
                }


                //var driverDataList = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
                //  && (a.Fleet_Driver.SubcompanyId == AppVars.DefaultDriverSubCompanyId || AppVars.DefaultDriverSubCompanyId == 0)).Distinct().ToList();

              

                listofDriversWaiting = (from a in listofDriverPlots
                                        where (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                               || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONBREAK
                                                               || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.FOJ

                                                                || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SINBIN
                                                               
                                                               )

                                        orderby a.QueueDateTime

                                        select new
                                        {
                                           
                                            Id = a.DriverLoginId,
                                            DriverId = a.driverid,
                                            DriverNo = a.driverno,// b.DriverNo,
                                            Name = a.DriverName,// b.DriverName,
                                            Vehicle = a.VehicleType,
                                            CurrentJobId = a.CurrentJobId,
                                            OnJob = a.OnJob,
                                            //  OnJob =  a.CurrentDestinationPostCode ,
                                            WorkStatusId = a.driverworkstatusid,
                                            IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                            PDA = "",
                                            HasPDA = a.HasPDA,
                                            BgColor = a.backgroundcolor,
                                            HasNewMsg = "",
                                            a.LoginFrom,
                                            a.ZoneName,
                                            WaitSinceDate=a.WaitSinceOn,
                                           // WaitSinceOn = a.WaitSinceOn != null ? Convert.ToInt32(nowDate.Subtract(a.WaitSinceOn.Value).TotalMinutes) + " mins" : "0 min",
                                          //  a.ZoneName

                                        }).Distinct().ToList();


                // grdDriverWaiting.DataSource = query;

                //grdDriverWaiting.HideSelection = true;


                listofDriversOnBoard = (from a in listofDriverPlots
                                        where (
                                          (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
                                       a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
                                        || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ARRIVED
                                                                || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONROUTE))
                                        orderby a.QueueDateTime

                                        select new
                                        {
                                            Id = a.DriverLoginId,
                                            DriverId = a.driverid,
                                            DriverNo = a.driverno,// b.DriverNo,
                                            Name = a.DriverName,// b.DriverName,
                                            Vehicle = a.VehicleType,
                                            CurrentJobId = a.CurrentJobId,
                                            OnJob = a.OnJob,
                                            //  OnJob =  a.CurrentDestinationPostCode ,
                                            WorkStatusId = a.driverworkstatusid,
                                            IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                            PDA = "",
                                            HasPDA = a.HasPDA,
                                            BgColor = a.backgroundcolor,
                                            HasNewMsg = "",
                                            a.LoginFrom
                                        }).ToList();







                //  grdOnBoardDriver.DataSource = query2;
                //  grdOnBoardDriver.HideSelection = true;


                //                FormatOnBoardGrid();



              //  listofDriverPlots = new TaxiDataContext().stp_GetDriverPlots(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();


                //  LoadPlotsGrid();


            }
            catch (Exception ex)
            {


            }
        }


        //public void LoadWaitingDriversByWorker()
        //{
        //    try
        //    {

        //        //FOJDRIVER
        //        var driverDataList = General.GetQueryable<Fleet_DriverQueueList>(null)
        //            .Where(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
        //          && (a.Fleet_Driver.SubcompanyId == AppVars.DefaultDriverSubCompanyId || AppVars.DefaultDriverSubCompanyId == 0))
        //            .Distinct().ToList();



        //        listofDriversWaiting = (from a in driverDataList
        //                                where (a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
        //                                                       || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONBREAK
        //                                                        || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.FOJ
                                                             
        //                                                        || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SINBIN
                                                                
        //                                                       )

        //                                orderby a.QueueDateTime

        //                                select new
        //                                {
        //                                    Id = a.Id,
        //                                    DriverId = a.DriverId,
        //                                    DriverNo = a.Fleet_Driver.DriverNo,
        //                                    Name = a.Fleet_Driver.DriverName,
        //                                    Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //                                    CurrentJobId = a.CurrentJobId,
        //                                    OnJob = a.CurrentDestinationPostCode,
        //                                    LoginDate = a.LoginDateTime,
        //                                    WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //                                    IsPanic = a.IsPanic == null || a.IsPanic == true ? "Panic" : "CalmDown",
        //                                    PDA = "",
        //                                    HasPDA = a.Fleet_Driver.HasPDA,

        //                                    BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //                                    HasNewMsg = "",
        //                                    a.LoginFrom,
        //                                  ///  a.ZoneName,
        //                                    WaitSinceDate = a.WaitSinceOn,
        //                                }).Distinct().ToList();


        //        // grdDriverWaiting.DataSource = query;

        //        //grdDriverWaiting.HideSelection = true;


        //        //listofDriversOnBoard = (from a in driverDataList
        //        //                        where (
        //        //                          (a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
        //        //                       a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
        //        //                         || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ARRIVED
        //        //                         || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONROUTE))
        //        //                        orderby a.QueueDateTime

        //        //                        select new
        //        //                        {
        //        //                            Id = a.Id,
        //        //                            DriverId = a.DriverId,
        //        //                            DriverNo = a.Fleet_Driver.DriverNo,// b.DriverNo,
        //        //                            Name = a.Fleet_Driver.DriverName,// b.DriverName,
        //        //                            Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //        //                            CurrentJobId = a.CurrentJobId,
        //        //                            OnJob = a.CurrentJobId != null ? a.Booking.ToAddress : "",
        //        //                            //  OnJob =  a.CurrentDestinationPostCode ,
        //        //                            WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //        //                            IsPanic = a.IsPanic == true ? "Panic" : "CalmDown",
        //        //                            PDA = "",
        //        //                            HasPDA = a.Fleet_Driver.HasPDA,
        //        //                            BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //        //                            HasNewMsg = "",
        //        //                            a.LoginFrom,

        //        //                        }).ToList();









        //    }
        //    catch (Exception ex)
        //    {


        //    }
        //}

        //public void LoadWaitingAndOnBoardDriversByWorker()
        //{
        //    try
        //    {

        //        //FOJDRIVER
        //        var driverDataList = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
        //          && (a.Fleet_Driver.SubcompanyId == AppVars.DefaultDriverSubCompanyId || AppVars.DefaultDriverSubCompanyId == 0)).Distinct().ToList();



        //        listofDriversWaiting = (from a in driverDataList
        //                                where (a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE
        //                                                       || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONBREAK
        //                                                         || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.FOJ
                                                              
        //                                                        || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SINBIN
                                                                 
        //                                                       )

        //                                orderby a.QueueDateTime

        //                                select new
        //                                {
        //                                    Id = a.Id,
        //                                    DriverId = a.DriverId,
        //                                    DriverNo = a.Fleet_Driver.DriverNo,
        //                                    Name = a.Fleet_Driver.DriverName,
        //                                    Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //                                    CurrentJobId = a.CurrentJobId,
        //                                    OnJob = a.CurrentDestinationPostCode,
        //                                    LoginDate = a.LoginDateTime,
        //                                    WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //                                    IsPanic = a.IsPanic == null || a.IsPanic == true ? "Panic" : "CalmDown",
        //                                    PDA = "",
        //                                    HasPDA = a.Fleet_Driver.HasPDA,

        //                                    BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //                                    HasNewMsg = "",
        //                                    a.LoginFrom,
        //                                  //  a.ZoneName,
        //                                    WaitSinceDate = a.WaitSinceOn,
        //                                }).Distinct().ToList();


        //        // grdDriverWaiting.DataSource = query;

        //        //grdDriverWaiting.HideSelection = true;


        //        listofDriversOnBoard = (from a in driverDataList
        //                                where (
        //                                  (a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
        //                               a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
        //                                || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ARRIVED
        //                                || a.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONROUTE))
        //                                orderby a.QueueDateTime

        //                                select new
        //                                {
        //                                    Id = a.Id,
        //                                    DriverId = a.DriverId,
        //                                    DriverNo = a.Fleet_Driver.DriverNo,// b.DriverNo,
        //                                    Name = a.Fleet_Driver.DriverName,// b.DriverName,
        //                                    Vehicle = a.Fleet_Driver.Fleet_VehicleType.VehicleType,
        //                                    CurrentJobId = a.CurrentJobId,
        //                                    OnJob = a.CurrentJobId != null ? a.Booking.ToAddress : "",
        //                                    //  OnJob =  a.CurrentDestinationPostCode ,
        //                                    WorkStatusId = a.DriverWorkStatusId == null ? 0 : a.DriverWorkStatusId,
        //                                    IsPanic = a.IsPanic == true ? "Panic" : "CalmDown",
        //                                    PDA = "",
        //                                    HasPDA = a.Fleet_Driver.HasPDA,
        //                                    BgColor = a.Fleet_DriverWorkingStatus.BackgroundColor,
        //                                    HasNewMsg = "",
        //                                    a.LoginFrom,

        //                                }).ToList();









        //    }
        //    catch (Exception ex)
        //    {


        //    }
        //}


        public void LoadPlotsDriversByWorker()
        {
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    listofDriverPlots = db.stp_GetDashboardDrivers(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
                }

               // listofDriverPlots = new TaxiDataContext().stp_GetDriverPlots(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
            }
            catch (Exception ex)
            {


            }
        }


        public void PopulateRequiredData()
        {
            try
            {

                DateTime beforeDate = DateTime.Now;
                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                DateTime dtNow = DateTime.Now;
                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();




                var data1 = General.GetQueryable<Booking>(a => (a.PickupDateTime.Value.Date >= recentDays && a.PickupDateTime.Value.Date <= prebookingdays) &&
                  (a.BookingStatusId != Enums.BOOKINGSTATUS.DISPATCHED && a.BookingStatusId != Enums.BOOKINGSTATUS.CANCELLED)
                  && a.IsQuotation == false 
                  && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0)
                  
                  );
                


                var query = (from a in data1
                             select new
                             {
                                 Id = a.Id,
                                 Plot = a.Gen_Zone1.ShortName,
                                 PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                 ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                 : a.PickupDateTime.Value.AddHours(-BookingHours),

                                 RefNumber = a.BookingNo,
                                 BookingDateTime = a.BookingDate,
                                 PickupDateTemp = a.PickupDateTime,
                                 PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                 Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                 Passenger = a.CustomerName,
                                 MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,

                                 Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - "  + a.FromOther : a.FromOther,
                                 FromPostCode = a.FromPostCode,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                 ToPostCode = a.ToPostCode,
                                 Fare = a.FareRate,
                                 Pax = a.NoofPassengers,
                                 PaymentMethod = a.Gen_PaymentType.PaymentType,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,

                                 BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                 TextColor = a.Fleet_VehicleType.TextColor,

                                 Account = a.Gen_Company.CompanyName,
                                 PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                 Vehicle = a.Fleet_VehicleType.VehicleType,
                                 UpdateBy = a.AddLog,
                                 SpecialReq = a.SpecialRequirements,
                                 StatusId = a.BookingStatusId,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                 DriverId = a.DriverId,
                                 IsAutoDespatch = a.AutoDespatch,
                                 BookingTypeId = a.BookingTypeId,
                                 HasNotes = a.Booking_Notes.Count,
                                 HasNotesImg = "",
                                 SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                 BookingBackgroundColor = a.BookingType.BackgroundColor,
                                 GroupId = a.JobCode,

                                 FromLocId = a.FromLocId,
                                 PrePickupDate = a.PickupDateTime.Value.Date,
                                 BabySeats = a.BabySeats,
                               //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                // ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,
                                 //FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                 //ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                 IsConfirmedDriver = a.IsConfirmedDriver,
                                 MilesFromBase = a.ExtraMile,
                                 IsBidding = a.IsBidding,
                                 DeadMileage = a.DeadMileage,
                                 a.DespatchDateTime,
                                 a.JourneyTypeId,
                                 Due = a.ZoneId != null? a.Gen_Zone1.JobDueTime:null
                             }).ToList();











                DateTime prevDates = dt.Value.AddDays(-3);
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);

                double time = DateTime.Now.Subtract(beforeDate).TotalMilliseconds;


                if (BookingHours > 0)
                {


                  
                    
                        listofTodaysBooking = query.Where(a => a.PickupDateTemp >= prevDates && a.PlotHour <= dtNow
                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                           || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                           || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                           .OrderBy(c => c.PickupDateTemp).ToList();

                    
                }
                else
                {
                 
                   


                       
                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                .OrderBy(c => c.Due).ToList();
                            }
                            else
                            {

                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                              && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                 || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                  || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                  .OrderBy(c => c.PickupDateTemp).ToList();
                            }
                       

                   

                }


                // PreBooking

                if (BookingHours > 0)
                {

                    listofPreBooking = query.Where(a => a.PlotHour > dtNow
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                          || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                          || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                 .OrderBy(c => c.PickupDateTemp).ToList();
                }





                if (ShowPendingJobOnRecentTab)
                {


                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                            || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                            || c.StatusId == Enums.BOOKINGSTATUS.FOJ || c.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                            || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();

                }
                else
                {

                    if (EnableGhostJob)
                    {

                        listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                               || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC                                                            
                                                               || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                    }
                    else
                    {
                       
                            listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                                   || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                       
                       

                    }
                }







            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }



        private void PopulateAllData()
        {
            try
            {



                PopulateRequiredData();




                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    DateTime? nowDate = DateTime.Now.Date;
                    DateTime? fromDate = dtpFromDatePreBook.Value.ToDateorNull();
                    DateTime? tillDate = dtpToDatePreBook.Value.ToDateorNull();

                    if (fromDate != null && fromDate < nowDate)
                        fromDate = nowDate;


                    listofQuotations = (from a in AppVars.BLData.GetAll<Booking>(a => a.IsQuotation == true
                                                 && (fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                                                  && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)).OrderByDescending(c => c.PickupDateTime)

                                        select new
                                        {
                                            Id = a.Id,
                                            RefNumber = a.BookingNo,
                                            PickupDateTemp = a.PickupDateTime,
                                            PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                            Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                            Passenger = a.CustomerName,
                                            MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                                            From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                            To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                            Fare = a.FareRate,
                                            FromLocTypeId = a.FromLocTypeId,
                                            ToLocTypeId = a.ToLocTypeId,
                                            Account = a.Gen_Company != null ? a.Gen_Company.CompanyName : "",
                                            BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                            TextColor = a.Fleet_VehicleType.TextColor,
                                            Vehicle = a.Fleet_VehicleType.VehicleType,
                                            UpdateBy = a.AddLog,

                                        }).ToList();




              
                }



                //if (this.InvokeRequired)
                //{
                //    this.BeginInvoke(new UIDelegate(PopulateAllGrids));
                //}
                //else
                //{

                //    PopulateAllGrids();



                //}



            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }


        }

        public void PopulateTodaysBookingData()
        {
            try
            {

               DateTime? dt = DateTime.Now;
                DateTime recentDays =  DateTime.Now.Date.AddDays(-1);

                IQueryable<Booking> data1 = null;

                //if (EnableGhostJob)
                //{
                //    data1 = General.GetQueryable<Booking>(a => (a.PickupDateTime.Value.Date >= recentDays 
                //        && ( (DaysInTodayBooking == 0 && a.PickupDateTime.Value.Date==dt.Value.Date) || a.PickupDateTime.Value <= dt.Value.AddHours(DaysInTodayBooking)))
                //             && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                //           || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED
                //           || a.BookingStatusId == Enums.BOOKINGSTATUS.ONHOLD || a.BookingStatusId == Enums.BOOKINGSTATUS.BID
                //                           || a.BookingStatusId == Enums.BOOKINGSTATUS.NOSHOW || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START
                //                           || a.BookingStatusId == Enums.BOOKINGSTATUS.FOJ)
                //       && a.IsQuotation == false && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0));
                //}
                //else
                //{
                    data1 = General.GetQueryable<Booking>(a => (a.PickupDateTime.Value.Date >= recentDays && ((DaysInTodayBooking == 0 && a.PickupDateTime.Value.Date == dt.Value.Date) || a.PickupDateTime.Value <= dt.Value.AddHours(DaysInTodayBooking)))
                           && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                         || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED
                         || a.BookingStatusId == Enums.BOOKINGSTATUS.ONHOLD || a.BookingStatusId == Enums.BOOKINGSTATUS.BID
                                         || a.BookingStatusId == Enums.BOOKINGSTATUS.NOSHOW || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START
                                         || a.BookingStatusId == Enums.BOOKINGSTATUS.FOJ)
                     && a.IsQuotation == false && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0));

              //  }

                if (data1 != null)
                {

                    DateTime dtNow = DateTime.Now;

                    if (selectedduevalue == 1000)
                    {
                        var query = (from a in data1
                                     select new
                                     {
                                         Id = a.Id,
                                         Plot = a.Gen_Zone1.ShortName,
                                         //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

                                         PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                         ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                         : a.PickupDateTime.Value.AddHours(-BookingHours),

                                         RefNumber = a.BookingNo,
                                         BookingDateTime = a.BookingDate,
                                         PickupDateTemp = a.PickupDateTime,
                                         PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                         Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                         Passenger = a.CustomerName,
                                         MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                                         From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                                         Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromOther : a.FromOther,
                                         FromPostCode = a.FromPostCode,
                                         To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                         GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                         ToPostCode = a.ToPostCode,

                                         Fare = a.FareRate,
                                         Pax = a.NoofPassengers,
                                         PaymentMethod = a.Gen_PaymentType.PaymentType,
                                         FromLocTypeId = a.FromLocTypeId,
                                         ToLocTypeId = a.ToLocTypeId,

                                         BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                         TextColor1 = a.Gen_Company.TextColor,

                                         BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                         TextColor = a.Fleet_VehicleType.TextColor,

                                         Account = a.Gen_Company.CompanyName,
                                         PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                         Vehicle = a.Fleet_VehicleType.VehicleType,
                                         UpdateBy = a.AddLog,
                                         SpecialReq = a.SpecialRequirements,
                                         StatusId = a.BookingStatusId,
                                         Status = a.BookingStatus.StatusName,
                                         StatusColor = a.BookingStatus.BackgroundColor,
                                         Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                         DriverId = a.DriverId,
                                         IsAutoDespatch = a.AutoDespatch,
                                         BookingTypeId = a.BookingTypeId,
                                         HasNotes = a.Booking_Notes.Count,
                                         HasNotesImg = "",
                                         SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                         BookingBackgroundColor = a.BookingType.BackgroundColor,
                                         GroupId = a.JobCode,

                                         //  PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                         //   Direction = a.BoundType,
                                         FromLocId = a.FromLocId,
                                         //FromPostCode = a.FromPostCode,
                                         PrePickupDate = a.PickupDateTime.Value.Date,
                                         BabySeats = a.BabySeats,
                                        // FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                         //ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                                        // FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                        // ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                         IsConfirmedDriver = a.IsConfirmedDriver,
                                         MilesFromBase = a.ExtraMile,
                                         IsBidding = a.IsBidding,
                                         DeadMileage = a.DeadMileage,
                                         a.DespatchDateTime,
                                         a.JourneyTypeId,
                                         Due = a.ZoneId != null? a.Gen_Zone1.JobDueTime:null
                                     }).OrderBy(c => c.Due).ToList();

                        listofTodaysBooking = query;

                    }
                    else
                    {

                        var query = (from a in data1
                                     select new
                                     {
                                         Id = a.Id,
                                         Plot = a.Gen_Zone1.ShortName,
                                         //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

                                         PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                         ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                         : a.PickupDateTime.Value.AddHours(-BookingHours),

                                         RefNumber = a.BookingNo,
                                         BookingDateTime = a.BookingDate,
                                         PickupDateTemp = a.PickupDateTime,
                                         PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                         Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                         Passenger = a.CustomerName,
                                         MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                                         From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                                         Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromOther : a.FromOther,
                                         FromPostCode = a.FromPostCode,
                                         To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                         GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                         ToPostCode = a.ToPostCode,

                                         Fare = a.FareRate,
                                         Pax = a.NoofPassengers,
                                         PaymentMethod = a.Gen_PaymentType.PaymentType,
                                         FromLocTypeId = a.FromLocTypeId,
                                         ToLocTypeId = a.ToLocTypeId,

                                         BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                         TextColor1 = a.Gen_Company.TextColor,

                                         BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                         TextColor = a.Fleet_VehicleType.TextColor,

                                         Account = a.Gen_Company.CompanyName,
                                         PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                         Vehicle = a.Fleet_VehicleType.VehicleType,
                                         UpdateBy = a.AddLog,
                                         SpecialReq = a.SpecialRequirements,
                                         StatusId = a.BookingStatusId,
                                         Status = a.BookingStatus.StatusName,
                                         StatusColor = a.BookingStatus.BackgroundColor,
                                         Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                         DriverId = a.DriverId,
                                         IsAutoDespatch = a.AutoDespatch,
                                         BookingTypeId = a.BookingTypeId,
                                         HasNotes = a.Booking_Notes.Count,
                                         HasNotesImg = "",
                                         SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                         BookingBackgroundColor = a.BookingType.BackgroundColor,
                                         GroupId = a.JobCode,

                                         //  PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                         //   Direction = a.BoundType,
                                         FromLocId = a.FromLocId,
                                         //FromPostCode = a.FromPostCode,
                                         PrePickupDate = a.PickupDateTime.Value.Date,
                                         BabySeats = a.BabySeats,
                                        // FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                        // ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                                        // FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                        // ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                         IsConfirmedDriver = a.IsConfirmedDriver,
                                         MilesFromBase = a.ExtraMile,
                                         IsBidding = a.IsBidding,
                                         DeadMileage = a.DeadMileage,
                                         a.DespatchDateTime,
                                         a.JourneyTypeId,
                                         Due = a.ZoneId != null ? a.Gen_Zone1.JobDueTime : null
                                     }).OrderBy(c => c.PickupDateTemp).ToList();

                        listofTodaysBooking = query;
                    }


                }






            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }

        public void PopulateActiveData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);


                var data1 = General.GetQueryable<Booking>(a => (a.PickupDateTime.Value.Date >= recentDays && a.PickupDateTime.Value.Date <= dt.Value.AddDays(DaysInTodayBooking).Date)
                    &&  (a.BookingStatusId != Enums.BOOKINGSTATUS.DISPATCHED && a.BookingStatusId!=Enums.BOOKINGSTATUS.CANCELLED)
                    && a.IsQuotation == false && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0));
                DateTime dtNow = DateTime.Now;

                var query = (from a in data1
                             select new
                             {
                                 Id = a.Id,
                                 Plot = a.Gen_Zone1.ShortName,
                                 //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

                                 PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                 ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                 : a.PickupDateTime.Value.AddHours(-BookingHours),

                                 RefNumber = a.BookingNo,
                                 BookingDateTime = a.BookingDate,
                                 PickupDateTemp = a.PickupDateTime,
                                 PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                 Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                 Passenger = a.CustomerName,
                                 MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                 Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - "  + a.FromOther : a.FromOther,
                                 FromPostCode = a.FromPostCode,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                 ToPostCode = a.ToPostCode,

                                 Fare = a.FareRate,
                                 Pax = a.NoofPassengers,
                                 PaymentMethod = a.Gen_PaymentType.PaymentType,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,

                                 BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                 TextColor = a.Fleet_VehicleType.TextColor,

                                 Account = a.Gen_Company.CompanyName,
                                 PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                 Vehicle = a.Fleet_VehicleType.VehicleType,
                                 UpdateBy = a.AddLog,
                                 SpecialReq = a.SpecialRequirements,
                                 StatusId = a.BookingStatusId,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                 DriverId = a.DriverId,
                                 IsAutoDespatch = a.AutoDespatch,
                                 BookingTypeId = a.BookingTypeId,
                                 HasNotes = a.Booking_Notes.Count,
                                 HasNotesImg = "",
                                 SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                 BookingBackgroundColor = a.BookingType.BackgroundColor,
                                 GroupId = a.JobCode,

                                 //  PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                 //   Direction = a.BoundType,
                                 FromLocId = a.FromLocId,
                                 //FromPostCode = a.FromPostCode,
                                 PrePickupDate = a.PickupDateTime.Value.Date,
                                 BabySeats = a.BabySeats,
                               //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                // ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                                // FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                // ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                 IsConfirmedDriver = a.IsConfirmedDriver,
                                 MilesFromBase = a.ExtraMile,
                                 IsBidding = a.IsBidding,
                                 DeadMileage = a.DeadMileage,
                                 a.DespatchDateTime,
                                 a.JourneyTypeId,
                                 Due = a.ZoneId != null? a.Gen_Zone1.JobDueTime:null
                             }).ToList();




                DateTime prevDates = dt.Value.AddDays(-3);
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);



                if (BookingHours > 0)
                {

                  
                    

                        listofTodaysBooking = query.Where(a => a.PickupDateTemp >= prevDates && a.PlotHour <= dtNow
                         && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                            || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                            .OrderBy(c => c.PickupDateTemp).ToList();
                    


                }
                else
                {

                  
                    

                        if (EnableGhostJob)
                        {
                            if (selectedduevalue == 1000)
                            {

                                listofTodaysBooking = query.Where(a =>
                                                 (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                    || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Due).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a =>
                                               (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                 || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                  || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();

                            }
                        }
                        else
                        {
                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a =>
                                           (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Due).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a =>
                                            (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();
                            }

                        }
                   

                }




                if (ShowPendingJobOnRecentTab)
                {

                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                             || c.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                        || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                        || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                        || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                }
                else
                {

                  

                        
                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                              || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                              || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                              || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                      
                   

                }
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }



        public void PopulateTodayAndPreBookingData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();

                var data1 = General.GetQueryable<Booking>(a =>(a.PickupDateTime.Value.Date >= recentDays && a.PickupDateTime.Value.Date <= prebookingdays)
                                        && a.IsQuotation == false
                                        && a.BookingStatusId != Enums.BOOKINGSTATUS.DISPATCHED
                                        && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0));
                DateTime dtNow = DateTime.Now;

                var query = (from a in data1
                             select new
                             {
                                 Id = a.Id,
                                 Plot = a.Gen_Zone1.ShortName,

                                 PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                                 ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                                 : a.PickupDateTime.Value.AddHours(-BookingHours),

                                 RefNumber = a.BookingNo,
                                 BookingDateTime = a.BookingDate,
                                 PickupDateTemp = a.PickupDateTime,
                                 PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                                 Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                                 Passenger = a.CustomerName,
                                 MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,


                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                                 Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - "  + a.FromOther : a.FromOther,
                                 FromPostCode = a.FromPostCode,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                                 ToPostCode = a.ToPostCode,


                                 Fare = a.FareRate,
                                 Pax = a.NoofPassengers,
                                 PaymentMethod = a.Gen_PaymentType.PaymentType,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,

                                 BackgroundColor = a.Fleet_VehicleType.BackgroundColor,

                                 TextColor = a.Fleet_VehicleType.TextColor,




                                 Account = a.Gen_Company.CompanyName,
                                 PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                                 Vehicle = a.Fleet_VehicleType.VehicleType,
                                 UpdateBy = a.AddLog,
                                 SpecialReq = a.SpecialRequirements,
                                 StatusId = a.BookingStatusId,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                                 DriverId = a.DriverId,
                                 IsAutoDespatch = a.AutoDespatch,
                                 BookingTypeId = a.BookingTypeId,
                                 HasNotes = a.Booking_Notes.Count,
                                 HasNotesImg = "",
                                 SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                                 BookingBackgroundColor = a.BookingType.BackgroundColor,
                                 GroupId = a.JobCode,

                                 //   PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                                 //  Direction = a.BoundType,
                                 FromLocId = a.FromLocId,
                                 // FromPostCode = a.FromPostCode,
                                 PrePickupDate = a.PickupDateTime.Value.Date,
                                 BabySeats = a.BabySeats,
                               //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                                // ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                                // FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                                // ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                                 IsConfirmedDriver = a.IsConfirmedDriver,
                                 MilesFromBase = a.ExtraMile,
                                 IsBidding = a.IsBidding,
                                 DeadMileage = a.DeadMileage,
                                 a.DespatchDateTime,
                                 a.JourneyTypeId,
                                 Due = a.ZoneId != null? a.Gen_Zone1.JobDueTime:null
                             }).ToList();




                DateTime prevDates = dt.Value.AddDays(-3);
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);



                if (BookingHours > 0)
                {


                  
                    

                        listofTodaysBooking = query.Where(a => a.PickupDateTemp >= prevDates && a.PlotHour <= dtNow
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                   || a.StatusId == Enums.BOOKINGSTATUS.FOJ))

                                   .OrderBy(c => c.PickupDateTemp).ToList();

                    
                }
                else
                {
                   
                  
                        
                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                     && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                        || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                         || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                         .OrderBy(c => c.Due).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= prevDates && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                   && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                      || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                       || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                       .OrderBy(c => c.PickupDateTemp).ToList();


                            }
                                        

                }



                // PreBooking

                if (BookingHours > 0)
                {

                    listofPreBooking = query.Where(a => a.PlotHour > dtNow
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                               || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                               || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                .OrderBy(c => c.PickupDateTemp).ToList();
                }



            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }





        private void PopulateAllDriversGrid()
        {
            try
            {
                //if (worker.IsBusy)
                //    return;


                int val = grdDriverWaiting.TableElement.VScrollBar.Value;
                long drvIndex = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;
               

                grdDriverWaiting.DataSource = listofDriversWaiting;
        

                


                //if (drvIndex > 0)
                //{
                //    grdDriverWaiting.CurrentRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndex);

                // //   grdDriverWaiting.HideSelection = false;
                //}

                if (grdDriverWaiting.TableElement.VScrollBar.Maximum > val)
                {
                    grdDriverWaiting.TableElement.VScrollBar.Value = val;
                }


                val = grdOnBoardDriver.TableElement.VScrollBar.Value;
                drvIndex = grdOnBoardDriver.CurrentRow != null ? grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;
               

                grdOnBoardDriver.DataSource = listofDriversOnBoard;
          

                 

                 //if (drvIndex > 0)
                 //{
                 //    grdOnBoardDriver.CurrentRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndex);
              

                 //}




                 if (grdOnBoardDriver.TableElement.VScrollBar.Maximum > val)
                 {
                     grdOnBoardDriver.TableElement.VScrollBar.Value = val;
                 }


                FormatOnBoardGrid();   





                var colList = listofDriverPlots.Where(c =>c.ShortName!="" && c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

                colList = colList.Union(listofDriverPlots.Where(c =>c.ShortName!="" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                DataGridViewTextBoxColumn[] cols = (from a in colList

                                                    select new DataGridViewTextBoxColumn
                                                    {

                                                        Name = a.ShortName,
                                                        HeaderText = a.ShortName,
                                                        SortMode = DataGridViewColumnSortMode.NotSortable,
                                                        FillWeight = 100,
                                                        Resizable = DataGridViewTriState.False,
                                                        Width = a.ShortName.Length > 7 ? 80 : 60
                                                    }).Distinct().ToArray<DataGridViewTextBoxColumn>();





                if (grdOnPlotDrivers.Columns.Count > 0)
                {
                    if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                    {
                        grdOnPlotDrivers.Columns.Clear();
                        grdOnPlotDrivers.Columns.AddRange(cols);
                    }


                }
                else
                {

                    grdOnPlotDrivers.Columns.AddRange(cols);
                }




                if  (grdOnPlotDrivers.Columns.Count > 0 && grdOnPlotDrivers.Rows.Count <= 1)
                {

                    for (int i = 0; i < 22; i++)
                    {
                        grdOnPlotDrivers.Rows.Add();
                    }

                }





                var drvList = (from a in listofDriverPlots
                               orderby a.orderno, a.plotdate
                               where a.driverworkstatusid != null && a.ShortName!=""
                               select a).ToList();

                int cnt = 0;
                string tempZoneName = string.Empty;



                foreach (var data in drvList)
                {


                    if (data.ShortName != tempZoneName)
                    {


                        if (data.ShortName.ToStr().Length > 0)
                        {

                            grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().Where(c => c.Cells[data.ShortName].Value.ToStr() != string.Empty).ToList()
                           .ForEach(c =>
                           {

                               c.Cells[data.ShortName].Value = string.Empty;
                               c.Cells[data.ShortName].Tag = null;
                               c.Cells[data.ShortName].ErrorText = string.Empty;

                           });
                        }

                        cnt = 0;
                    }
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                    cnt++;

                    tempZoneName = data.ShortName;

                }





                if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
                    grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

                grdOnPlotDrivers.CurrentCell = null;

                grdOnPlotDrivers.Refresh();

                //  LoadPlotsGrid();




                UpdateDriversCounter();
                UpdateDriverWaitingSince();

            }
            catch (Exception ex)
            {


            }

        }

        //private void PopulateWaitingDriversGrid()
        //{
        //    try
        //    {
               


        //        int val = grdDriverWaiting.TableElement.VScrollBar.Value;


        //       // long drvIndex = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;
                


        //        grdDriverWaiting.DataSource = listofDriversWaiting;
        //      //  grdDriverWaiting.HideSelection = true;


                

        //        //if (drvIndex > 0)
        //        //    grdDriverWaiting.CurrentRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndex);


        //        if (grdDriverWaiting.TableElement.VScrollBar.Maximum > val)
        //        {
        //            grdDriverWaiting.TableElement.VScrollBar.Value = val;
        //        }



        //        UpdateDriversCounter();
        //        UpdateDriverWaitingSince();
        //    }
        //    catch (Exception ex)
        //    {


        //    }

        //}




        //private void PopulateWaitingOnBoardDriversGrid()
        //{
        //    try
        //    {

        //        int val = grdDriverWaiting.TableElement.VScrollBar.Value;

        //       // long drvIndex = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;

        //        grdDriverWaiting.DataSource = listofDriversWaiting;
              


                

        //        //if (drvIndex > 0)
        //        //    grdDriverWaiting.CurrentRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndex);

        //        if (grdDriverWaiting.TableElement.VScrollBar.Maximum > val)
        //        {
        //            grdDriverWaiting.TableElement.VScrollBar.Value = val;
        //        }


        //        val = grdOnBoardDriver.TableElement.VScrollBar.Value;
        //     //   drvIndex = grdOnBoardDriver.CurrentRow != null ? grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;


        //        grdOnBoardDriver.DataSource = listofDriversOnBoard;
              


                


        //        //if (drvIndex > 0)
        //        //    grdOnBoardDriver.CurrentRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndex);

        //        if (grdOnBoardDriver.TableElement.VScrollBar.Maximum >val)
        //        {
        //            grdOnBoardDriver.TableElement.VScrollBar.Value = val;
        //        }

        //        FormatOnBoardGrid();

        //        UpdateDriversCounter();
        //        UpdateDriverWaitingSince();
        //    }
        //    catch (Exception ex)
        //    {


        //    }

        //}


        private void PopulatePlotsDriversGrid()
        {
            try
            {


                var colList = listofDriverPlots.Where(c =>c.ShortName!="" && c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

                colList = colList.Union(listofDriverPlots.Where(c =>c.ShortName!="" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                DataGridViewTextBoxColumn[] cols = (from a in colList

                                                    select new DataGridViewTextBoxColumn
                                                    {

                                                        Name = a.ShortName,
                                                        HeaderText = a.ShortName,
                                                        SortMode = DataGridViewColumnSortMode.NotSortable,

                                                        Width = a.ShortName.Length > 8 ? 100 : 50
                                                    }).Distinct().ToArray<DataGridViewTextBoxColumn>();





                if (grdOnPlotDrivers.Columns.Count > 0)
                {
                    if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                    {
                        grdOnPlotDrivers.Columns.Clear();
                        grdOnPlotDrivers.Columns.AddRange(cols);


                    }
                }
                else
                {

                    grdOnPlotDrivers.Columns.AddRange(cols);
                }




                if (grdOnPlotDrivers.Rows.Count <= 1)
                {

                    for (int i = 0; i < 22; i++)
                    {
                        grdOnPlotDrivers.Rows.Add();
                    }

                }





                var drvList = (from a in listofDriverPlots
                               orderby a.orderno, a.plotdate
                               where a.driverworkstatusid != null && a.ShortName != ""
                               select a).ToList();

                int cnt = 0;
                string tempZoneName = string.Empty;



                foreach (var data in drvList)
                {

                    if (data.ShortName != tempZoneName)
                        cnt = 0;

                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;
                    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                    cnt++;

                    tempZoneName = data.ShortName;

                }




                if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
                    grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

                grdOnPlotDrivers.CurrentCell = null;

                grdOnPlotDrivers.Refresh();

                //  LoadPlotsGrid();

                UpdateDriversCounter();


            }
            catch (Exception ex)
            {


            }

        }


       
        private void PopulateAllGrids()
        {
            try
            {
                timer1.Stop();


                  long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                  int val = grdPendingJobs.TableElement.VScrollBar.Value;

             
                  grdPendingJobs.DataSource = listofTodaysBooking;

               
                // grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);

                if (JobIndex > 0)
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);

                grdPendingJobs.TableElement.VScrollBar.Value = val;
               


                FormatTodaysBookingGrid();

   
                RefreshUpdatePreBookingGrid();


                ClearRecentJobFilter();

                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;

             

                grdAllJobs.DataSource = listofAllJobs;

                


                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }




                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";



                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    grdQuotations.DataSource = listofQuotations;
                  
                    FormatQuotationsGrid();
                }




                timer1.Start();

            }
            catch (Exception ex)
            {

                timer1.Start();
            }
        }

        private void PopulateSearchPreGrids()
        {
            try
            {


                grdPreBookings.DataSource = listofPreBooking;

                UpdateRequiredPreBooking = false;

            }
            catch (Exception ex)
            {


            }
        }



        private void PopulateTodayAndPreGrids()
        {
            try
            {
                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;


            

                int val = grdPendingJobs.TableElement.VScrollBar.Value;

                grdPendingJobs.DataSource = listofTodaysBooking;

            
                if(JobIndex>0)
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);

                grdPendingJobs.TableElement.VScrollBar.Value = val;



                FormatTodaysBookingGrid();


                


                if (Pg_PreBookings.Item.IsSelected)
                {

                    val = grdPreBookings.TableElement.VScrollBar.Value;
                    JobIndex = grdPreBookings.CurrentRow != null ? grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                    grdPreBookings.DataSource = listofPreBooking;

                   
                    if (JobIndex > 0)
                        grdPreBookings.CurrentRow = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    grdPreBookings.TableElement.VScrollBar.Value = val;


                    UpdateRequiredPreBooking = false;
                }
                else
                {
                    UpdateRequiredPreBooking = true;
                }


                timer1.Start();
            }
            catch (Exception ex)
            {
                timer1.Start();

            }
        }


        private void RefreshUpdatePreBookingGrid()
        {
            try
            {


                int val = grdPreBookings.TableElement.VScrollBar.Value;
                //    this.grdPreBookings.MasterTemplate.BeginUpdate();
                long  JobIndex = grdPreBookings.CurrentRow != null ? grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                grdPreBookings.DataSource = listofPreBooking;

                
                if (JobIndex > 0)
                {
                     grdPreBookings.CurrentRow = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);
                }

                grdPreBookings.TableElement.VScrollBar.Value = val;

               // grdPreBookings.Text = "Today\'s Booking(" + grdPendingJobs.Rows.Count + ")";

                this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";

              
                UpdateRequiredPreBooking = false;
            }
            catch
            {

            }
        }

        private void PopulateTodaysBookingGrid()
        {
            try
            {
                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                int val = grdPendingJobs.TableElement.VScrollBar.Value;
         
                grdPendingJobs.DataSource = listofTodaysBooking;
      
                
                if(JobIndex>0)
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                grdPendingJobs.TableElement.VScrollBar.Value = val;

              
                FormatTodaysBookingGrid();


                



                timer1.Start();
            }
            catch (Exception ex)
            {
                timer1.Start();

            }
        }


        private void PopulateTodayAndAllJobsGrids()
        {
            try
            {
                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;


                  int val = grdPendingJobs.TableElement.VScrollBar.Value;
                grdPendingJobs.DataSource = listofTodaysBooking;
                
                 if (JobIndex > 0)
                     grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);

                 grdPendingJobs.TableElement.VScrollBar.Value = val;


                //  grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == rowIndex);
             //   grdPendingJobs.TableElement.VScrollBar.Value = val;

                // grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);
                FormatTodaysBookingGrid();


                


                ClearRecentJobFilter();



                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;

                grdAllJobs.DataSource = listofAllJobs;

                


                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }

                // 07-09-2016
                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";

                timer1.Start();


            }
            catch (Exception ex)
            {
                timer1.Start();

            }
        }


        private void PopulateRequiredGrids()
        {
            try
            {
                timer1.Stop();


                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;             
                int val = grdPendingJobs.TableElement.VScrollBar.Value;


                grdPendingJobs.DataSource = listofTodaysBooking;


               
                if (JobIndex > 0)
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);

                grdPendingJobs.TableElement.VScrollBar.Value = val;


                // grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);
                FormatTodaysBookingGrid();

      
                RefreshUpdatePreBookingGrid();
               
                ClearRecentJobFilter();


                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;
              
                grdAllJobs.DataSource = listofAllJobs;
               


                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }

                timer1.Start();
            }
            catch (Exception ex)
            {
                timer1.Start();

            }
        }






        #endregion






        private void FormatRejectedWebBookingsGrid()
        {

            grdRejectedWebBookings.Columns["MobileNo"].IsVisible = false;
            grdRejectedWebBookings.Columns["Id"].IsVisible = false;
            grdRejectedWebBookings.Columns["DriverId"].IsVisible = false;

            grdRejectedWebBookings.Columns["VehicleBgColor"].IsVisible = false;
            grdRejectedWebBookings.Columns["VehicleTextColor"].IsVisible = false;

            grdRejectedWebBookings.Columns["BackgroundColor1"].IsVisible = false;
            grdRejectedWebBookings.Columns["TextColor1"].IsVisible = false;


            grdRejectedWebBookings.Columns["BookingTypeId"].IsVisible = false;


            grdRejectedWebBookings.Columns["StatusColor"].IsVisible = false;
            grdRejectedWebBookings.Columns["FromLocTypeId"].IsVisible = false;
            grdRejectedWebBookings.Columns["ToLocTypeId"].IsVisible = false;






            //AddCommandColumn("btnReCall", "Re-Call", 70);

            //if (this.CanDelete)
            //{
            //    AddCommandColumn("btnDelete", "Delete", 70);

            //    //  grdLister.AddDeleteColumn();
            //   // grdLister.Columns["btnDelete"].Width = 70;
            //}

            UI.GridFunctions.SetFilter(grdRejectedWebBookings);




            grdRejectedWebBookings.Columns["RefNumber"].Width = 60;
            grdRejectedWebBookings.Columns["RefNumber"].HeaderText = "Ref #";
            grdRejectedWebBookings.Columns["Fare"].Width = 70;
            grdRejectedWebBookings.Columns["Fare"].HeaderText = "Fare £";
            grdRejectedWebBookings.Columns["Vehicle"].Width = 70;
            grdRejectedWebBookings.Columns["Driver"].Width = 50;

            grdRejectedWebBookings.Columns["Status"].Width = 80;
            grdRejectedWebBookings.Columns["Passenger"].Width = 120;

            grdRejectedWebBookings.Columns["From"].Width = 170;
            grdRejectedWebBookings.Columns["From"].HeaderText = "Pickup Point";

            grdRejectedWebBookings.Columns["To"].Width = 170;
            grdRejectedWebBookings.Columns["To"].HeaderText = "Destination";


            grdRejectedWebBookings.Columns["BookingDate"].Width = 130;
            grdRejectedWebBookings.Columns["BookingDate"].HeaderText = "Booking Date";


            (grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
            (grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

            (grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).SortOrder = RadSortOrder.Ascending;
            (grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).Sort(RadSortOrder.Ascending, true);



            grdRejectedWebBookings.Columns["PickupDate"].Width = 130;
            grdRejectedWebBookings.Columns["PickupDate"].HeaderText = "Pickup Date-Time";


            grdRejectedWebBookings.Columns["Account"].Width = 120;
            grdRejectedWebBookings.Columns["Account"].HeaderText = "A/C";



            if (grdRejectedWebBookings.Columns.Contains("RECALL") == false)
            {

                GridViewCommandColumn col = new GridViewCommandColumn();
                col.Width = 60;

                col.Name = "RECALL";
                col.UseDefaultText = true;
                col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
                col.DefaultText = "Re-Call";
                col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

                grdRejectedWebBookings.Columns.Add(col);
            }




            grdRejectedWebBookings.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
            grdRejectedWebBookings.CommandCellClick += new CommandCellClickEventHandler(grdRejectedWebBookings_CommandCellClick);
            // grdRejectedWebBookings.ShowRowHeaderColumn = false;
            grdRejectedWebBookings.ShowGroupPanel = false;
            grdRejectedWebBookings.AllowAddNewRow = false;
            grdRejectedWebBookings.ShowGroupPanel = false;

            grdRejectedWebBookings.AllowColumnResize = false;
            grdRejectedWebBookings.AllowColumnReorder = false;
            grdRejectedWebBookings.AllowDeleteRow = false;
            grdRejectedWebBookings.AllowMultiColumnSorting = true;
            grdRejectedWebBookings.AllowEditRow = false;



            // grdWebBookingsNew.AllowEditRow = false;
            //    grdWebBookingsNew.AllowDeleteRow = false;
            grdRejectedWebBookings.Font = new Font("Tahoma", 9, FontStyle.Regular);
            grdRejectedWebBookings.MasterTemplate.AllowColumnChooser = false;

            grdRejectedWebBookings.EnableFiltering = true;
            grdRejectedWebBookings.ShowFilteringRow = true;


        }

        void grdRejectedWebBookings_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                GridViewRowInfo row = gridCell.RowElement.RowInfo;
                long id = row.Cells["Id"].Value.ToLong();


                if (name == "recall")
                {
                    new TaxiDataContext().stp_UpdateOnlineJobStatus(id, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING, "Declined", "Re-call", AppVars.LoginObj.UserName.ToStr());

                    //    new TaxiDataContext().stp_UpdateJobStatus(id, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING);
                    row.Delete();

                    PopulatePendingWebBookings(null);


                    txtDeclinedWebBookingTotal.Text = grdRejectedWebBookings.Rows.Count.ToString();

                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }



        #region Booking History


        private bool IsFind = false;

        bool lockCompletedBooking = false;
        bool lockCancelledBooking = false;
        bool lockNoFareBooking = false;


        private void btnFindBookingHistory_Click(object sender, EventArgs e)
        {
            Find();
        }


        private void Find()
        {

            this.IsFind = true;
            skip = 0;
            RefreshBookingList();
        }


        private void ClearFilter()
        {

            skip = 0;
            this.IsFind = false;
            this.dtpFromDate.Value = null;
            this.dtpToDate.Value = null;
            this.txtsearchBookingHistory.Text = string.Empty;
        }


        int pageSize = 1000;
        IList listofBookingHistoryData = null;
        private void PopulateBookingHistoryData()
        {
            try
            {


                var data1 = General.GetQueryable<Booking>(c => c.BookingStatusId != Enums.BOOKINGSTATUS.PENDING && c.BookingStatusId != Enums.BOOKINGSTATUS.WAITING && c.BookingStatusId != Enums.BOOKINGSTATUS.ONHOLD
                    && (c.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0))
                               .OrderByDescending(c => c.PickupDateTime);


                if (this.IsFind)
                {

                    string searchTxt = txtsearchBookingHistory.Text.ToLower().Trim();
                    string col = ddlColumnBookingHistory.Text.Trim().ToLower();

                    if (searchTxt.Length < 3)
                        searchTxt = string.Empty;


                    DateTime? fromDate = dtpFromDate.Value.ToDateTimeorNull();
                    DateTime? toDate = dtpToDate.Value.ToDateTimeorNull();

                    bool col_name = false;
                    bool col_refNo = false;
                    bool col_telNo = false;
                    bool col_mobileno = false;
                    bool col_driver = false;
                    bool col_vehicle = false;
                    bool col_status = false;
                    bool col_pickupPoint = false;
                    bool col_destination = false;
                    bool col_subcompany = false;

                    if (col == "passenger")
                    {
                        col_name = true;
                    }
                    else if (col == "reference")
                    {
                        col_refNo = true;
                    }
                    else if (col == "telephone no")
                    {
                        col_telNo = true;
                    }

                    else if (col == "mobile no")
                    {
                        col_mobileno = true;
                    }

                    else if (col == "driver")
                    {
                        col_driver = true;
                    }

                    else if (col == "vehicle")
                    {
                        col_vehicle = true;
                    }

                    else if (col == "status")
                    {
                        col_status = true;
                    }

                    else if (col == "pickup point")
                    {
                        col_pickupPoint = true;
                    }

                    else if (col == "destination")
                    {
                        col_destination = true;
                    }
                    else if (col == "subcompany")
                    {
                        col_subcompany = true;
                    }


                    int cnt = data1.Count();
                    if (skip + pageSize > cnt && cnt - pageSize > 0)
                        skip = cnt - pageSize;
                    else if (cnt <= pageSize)
                        skip = 0;



                    var query = (from a in data1

                                 where

                                 (fromDate != null ||


                                 (col_name && (a.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_refNo && (a.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_telNo && (a.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_mobileno && (a.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_driver && (a.Fleet_Driver != null && a.Fleet_Driver.DriverNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))

                                     || (col_pickupPoint && (a.FromAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_destination && (a.ToAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))


                                     || (col_vehicle && (a.Fleet_VehicleType != null && a.Fleet_VehicleType.VehicleType.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_status && (a.BookingStatus != null && a.BookingStatus.StatusName.ToLower().Contains(searchTxt)))

                                      || (col_subcompany && (a.SubcompanyId != null && a.Gen_SubCompany.CompanyName.ToLower().Contains(searchTxt)))

                                 )
                                     && ((fromDate == null || a.PickupDateTime.Value >= fromDate) && (toDate == null || a.PickupDateTime.Value <= toDate))



                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     BookingDate = a.BookingDate,
                                     PickupDate = a.PickupDateTime,
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Account = a.OrderNo != null && a.OrderNo != string.Empty ? a.Gen_Company.CompanyName + " - " + a.OrderNo : a.Gen_Company.CompanyName,
                                     Driver = a.Fleet_Driver.DriverNo,
                                     DriverId = a.DriverId,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Status = a.BookingStatus.StatusName,
                                     StatusColor = a.BookingStatus.BackgroundColor,
                                     BookingTypeId = a.BookingTypeId,
                                     VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                     VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                     TextColor1 = a.Gen_Company.TextColor,
                                     MobileNo = a.CustomerMobileNo,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,
                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,
                                     StatusId = a.BookingStatusId,
                                     BookingBackgroundColor = a.BookingType.BackgroundColor
                                 }).Skip(skip).Take(pageSize).ToList();



                    listofBookingHistoryData = query;
                    //  this.grdLister.TableElement.BeginUpdate();
                    //  grdLister.DataSource = query;
                    //  this.grdLister.TableElement.EndUpdate();
                }
                else
                {

                    int cnt = data1.Count();
                    if (skip + pageSize > cnt && cnt - pageSize > 0)
                        skip = cnt - pageSize;
                    else if (cnt <= pageSize)
                        skip = 0;


                    var query = (from a in data1


                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     BookingDate = a.BookingDate,
                                     PickupDate = a.PickupDateTime,
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Account = a.OrderNo != null && a.OrderNo != string.Empty ? a.Gen_Company.CompanyName + " - " + a.OrderNo : a.Gen_Company.CompanyName,
                                     Driver = a.Fleet_Driver.DriverNo,
                                     DriverId = a.DriverId,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Status = a.BookingStatus.StatusName,
                                     StatusColor = a.BookingStatus.BackgroundColor,
                                     BookingTypeId = a.BookingTypeId,
                                     VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                     VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                     TextColor1 = a.Gen_Company.TextColor,
                                     MobileNo = a.CustomerMobileNo,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,
                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,
                                     StatusId = a.BookingStatusId,
                                     BookingBackgroundColor = a.BookingType.BackgroundColor
                                 }).Skip(skip).Take(pageSize).ToList();


                    listofBookingHistoryData = query;
                    //  this.grdLister.TableElement.BeginUpdate();

                    //  grdLister.DataSource = query;
                    // this.grdLister.TableElement.EndUpdate();
                }
            }
            catch (Exception ex)
            {


            }


        }


        private void PopulateBookingHistoryGrid()
        {

            try
            {



                //   grdLister.BeginUpdate();
                grdLister.DataSource = listofBookingHistoryData;
                //   grdLister.EndUpdate();


                FormatBookingHistoryGrid();
            }
            catch (Exception ex)
            {


            }

        }


        private void FormatBookingHistoryGrid()
        {
            if (grdLister.Columns.Count == 0)
                return;

            try
            {
                //if (this.CanDelete)
                //{
                //    grdLister.Columns["Check"].Width = 40;
                //}






                AddCommandColumn(grdLister, "btnRecall", "Re-Call");
                AddCommandColumn(grdLister, "btnReDespatch", "Re-Despatch");

                if (this.CanDelete)
                {
                    AddCommandColumn(grdLister, "btnDelete", "Delete");

                    grdLister.Columns["btnDelete"].Width = 70;



                }


                if (grdLister.EnableFiltering == false)
                {


                    grdLister.ShowFilteringRow = true;
                    UI.GridFunctions.SetFilter(grdLister);
                    grdLister.AllowEditRow = true;
                }


                grdLister.Columns["BookingBackgroundColor"].IsVisible = false;

                grdLister.Columns["SubCompanyBgColor"].IsVisible = false;
                grdLister.Columns["MobileNo"].IsVisible = false;
                grdLister.Columns["Id"].IsVisible = false;
                grdLister.Columns["DriverId"].IsVisible = false;

                grdLister.Columns["VehicleBgColor"].IsVisible = false;
                grdLister.Columns["VehicleTextColor"].IsVisible = false;

                grdLister.Columns["BackgroundColor1"].IsVisible = false;
                grdLister.Columns["TextColor1"].IsVisible = false;

                grdLister.Columns["StatusId"].IsVisible = false;
                grdLister.Columns["BookingTypeId"].IsVisible = false;


                grdLister.Columns["StatusColor"].IsVisible = false;
                grdLister.Columns["FromLocTypeId"].IsVisible = false;
                grdLister.Columns["ToLocTypeId"].IsVisible = false;



                grdLister.Columns["RefNumber"].Width = 50;
                grdLister.Columns["RefNumber"].HeaderText = "Ref #";
                grdLister.Columns["Fare"].Width = 70;
                grdLister.Columns["Fare"].HeaderText = "Fare £";
                grdLister.Columns["Vehicle"].Width = 70;
                grdLister.Columns["Driver"].Width = 50;

                grdLister.Columns["Status"].Width = 80;
                grdLister.Columns["Passenger"].Width = 70;

                grdLister.Columns["From"].Width = 110;
                grdLister.Columns["From"].HeaderText = "Pickup Point";

                grdLister.Columns["To"].Width = 110;
                grdLister.Columns["To"].HeaderText = "Destination";


                grdLister.Columns["BookingDate"].Width = 90;
                grdLister.Columns["BookingDate"].HeaderText = "Booking Date";


                (grdLister.Columns["PickupDate"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdLister.Columns["PickupDate"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";


                grdLister.Columns["PickupDate"].Width = 130;
                grdLister.Columns["PickupDate"].HeaderText = "Pickup Date-Time";


                grdLister.Columns["Account"].Width = 120;
                grdLister.Columns["Account"].HeaderText = "A/C";



            }
            catch (Exception ex)
            {


            }

        }

        RadDropDownMenu bookingHistory_Contextmenu = null;

        void grdLister_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;

                else if (cell.GridControl.Name == "grdLister")
                {

                    if (bookingHistory_Contextmenu == null)
                    {
                        bookingHistory_Contextmenu = new RadDropDownMenu();
                        bookingHistory_Contextmenu.BackColor = Color.Orange;

                        RadMenuItem EditFareItem1 = new RadMenuItem("Edit Fare");
                        EditFareItem1.ForeColor = Color.DarkBlue;
                        EditFareItem1.BackColor = Color.Orange;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                        EditFareItem1.Click += new EventHandler(EditFareItem1_Click);
                        bookingHistory_Contextmenu.Items.Add(EditFareItem1);


                        RadMenuItem EditFareItem2 = new RadMenuItem("Arrival Text");
                        EditFareItem2.ForeColor = Color.DarkBlue;
                        EditFareItem2.BackColor = Color.Orange;
                        EditFareItem2.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem2.Click += new EventHandler(EditFareItem2_Click);
                        bookingHistory_Contextmenu.Items.Add(EditFareItem2);


                    }

                    e.ContextMenu = bookingHistory_Contextmenu;
                    return;
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void EditFareItem2_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdLister.CurrentRow != null && grdLister.CurrentRow is GridViewDataRowInfo)
                {
                    string message = AppVars.objPolicyConfiguration.ArrivalBookingText.ToStr();
                    frmSMSAll frm = new frmSMSAll(grdLister.CurrentRow.Cells["MobileNo"].Value.ToStr(), message,0);
                    frm.ShowDialog();
                    frm.Dispose();
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }

        void grdLister_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {



                if (e.CellElement is GridHeaderCellElement)
                {
                    //    e.CellElement
                    e.CellElement.BorderColor = _HeaderRowBorderColor;
                    e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                    // e.CellElement.DrawBorder = false;
                    e.CellElement.BackColor = _HeaderRowBackColor;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.Font = newFont;
                    e.CellElement.ForeColor = Color.White;
                    e.CellElement.DrawFill = true;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                }

                else if (e.CellElement is GridFilterCellElement)
                {



                    e.CellElement.Font = oldFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.White;
                    e.CellElement.RowElement.BackColor = Color.White;
                    e.CellElement.RowElement.NumberOfColors = 1;

                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }
                else if (e.CellElement is GridRowHeaderCellElement)
                {

                    if (e.CellElement is GridTableHeaderCellElement)
                    {

                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    }
                    else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                    {

                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.White;
                        e.CellElement.RowElement.BackColor = Color.White;
                        e.CellElement.RowElement.NumberOfColors = 1;

                        e.CellElement.BorderColor = Color.DarkSlateBlue;
                        e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                        e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                        e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    }

                    else
                    {

                        e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BorderColor = Color.DarkSlateBlue;
                        e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                        e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                        e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        e.CellElement.DrawFill = true;

                    }



                }


                else if (e.CellElement is GridDataCellElement)
                {



                    if (e.CellElement.ColumnInfo is GridViewCommandColumn)
                    {


                        if (e.Column.Name == "btnReDespatch" || e.Column.Name == "btnRecall")
                        {

                            if (
                                (lockCompletedBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                               || (lockCancelledBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                                || (lockNoFareBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP))
                            {


                                // ((RadButtonElement)e.CellElement.Children[0]).Text = "Completed";
                                ((RadButtonElement)e.CellElement.Children[0]).Enabled = false;
                            }
                            else
                            {
                                //     ((RadButtonElement)e.CellElement.Children[0]).Text = "Re-Despatched";
                                ((RadButtonElement)e.CellElement.Children[0]).Enabled = true;

                            }

                        }
                        else if (e.Column.Name == "btnDelete")
                        {


                            ((RadButtonElement)e.CellElement.Children[0]).TextImageRelation = TextImageRelation.ImageBeforeText;
                            ((RadButtonElement)e.CellElement.Children[0]).TextAlignment = ContentAlignment.MiddleCenter;
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.delete;




                        }


                    }


                    e.CellElement.ToolTipText = e.CellElement.Text;

                    e.CellElement.BorderColor = Color.DarkSlateBlue;
                    e.CellElement.BorderColor2 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor3 = Color.DarkSlateBlue;
                    e.CellElement.BorderColor4 = Color.DarkSlateBlue;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    e.CellElement.ForeColor = Color.Black;

                    e.CellElement.Font = oldFont;

                    //if (e.CellElement.RowElement.IsSelected == true)
                    //{

                    //    e.CellElement.RowElement.NumberOfColors = 1;
                    //    e.CellElement.RowElement.BackColor = Color.DeepSkyBlue;

                    //    e.CellElement.NumberOfColors = 1;
                    //    e.CellElement.BackColor = Color.DeepSkyBlue;
                    //    e.CellElement.ForeColor = Color.White;
                    //    e.CellElement.Font = newFont;

                    //}

                    //else
                    //{
                    //    e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                    //}

                    e.CellElement.DrawFill = false;


                    if (e.Column.Name == "RefNumber" || e.Column.Name == "BookingDate")
                    {

                        e.CellElement.BackColor = Color.White;
                        e.CellElement.NumberOfColors = 1;

                        if (e.Row.Cells["BookingBackgroundColor"].Value != null)
                        {

                            e.CellElement.BackColor = Color.FromArgb((e.Row.Cells["BookingBackgroundColor"].Value.ToInt()));
                            e.CellElement.DrawFill = true;
                        }


                    }

                    //if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate" || e.Column.Name == "Time")
                    //{
                    //    if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.VIP)
                    //    {
                    //        e.CellElement.NumberOfColors = 1;
                    //        e.CellElement.DrawFill = true;

                    //        string bgColor = AppVars.objPolicyConfiguration.VIPBookingBackgroundColor.ToStr();

                    //        if (!string.IsNullOrEmpty(bgColor))
                    //        {

                    //            e.CellElement.BackColor = Color.FromArgb(bgColor.ToInt());
                    //        }

                    //    }
                    //    else if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.WEB)
                    //    {
                    //        e.CellElement.NumberOfColors = 1;
                    //        e.CellElement.DrawFill = true;

                    //        string bgColor = AppVars.objPolicyConfiguration.WebBookingBackgroundColor.ToStr();

                    //        if (!string.IsNullOrEmpty(bgColor))
                    //        {

                    //            e.CellElement.BackColor = Color.FromArgb(bgColor.ToInt());
                    //        }

                    //    }
                    //}



                    if (e.Column.Name == "Account" && e.CellElement.Value.ToStr() != string.Empty)
                    {


                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;


                        string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                        string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                        if (Bgcolor != string.Empty && textColor != string.Empty)
                        {

                            Color bgClr = Color.FromArgb(Bgcolor.ToInt());
                            Color txtClr = Color.FromArgb(textColor.ToInt());

                            e.CellElement.BackColor = bgClr;
                            e.CellElement.ForeColor = txtClr;

                        }
                        else
                        {
                            e.CellElement.ForeColor = Color.White;
                            e.CellElement.BackColor = Color.Crimson;


                        }
                    }

                    else if (e.Column.Name == "Vehicle")
                    {
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;


                        string Bgcolor = e.Row.Cells["VehicleBgColor"].Value.ToStr().Trim();
                        string textColor = e.Row.Cells["VehicleTextColor"].Value.ToStr().Trim();

                        if (Bgcolor != string.Empty && textColor != string.Empty)
                        {

                            e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                            e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                        }
                    }


                    else if (e.Column.Name == "From")
                    {
                        if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        {

                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.DrawFill = true;


                            e.CellElement.BackColor = Color.GreenYellow;
                            e.CellElement.ForeColor = Color.Black;
                        }
                    }

                    else if (e.Column.Name == "To")
                    {
                        if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        {

                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.DrawFill = true;


                            e.CellElement.BackColor = Color.GreenYellow;
                            e.CellElement.ForeColor = Color.Black;

                        }
                    }

                    else if (e.Column.Name == "Status")
                    {

                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                        e.CellElement.ForeColor = Color.Black;

                        e.CellElement.DrawFill = true;
                    }



                }
            }
            catch { }
        }



        private void grdLister_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                GridViewRowInfo row = gridCell.RowElement.RowInfo;
                long id = row.Cells["Id"].Value.ToLong();

                int driverId = row.Cells["DriverId"].Value.ToInt();

                bool rtn = false;

                int bookingStatusId = row.Cells["StatusId"].Value.ToInt();

                if (name == "btndelete")
                {
                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete a Booking ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {

                        RadGridView grid = gridCell.GridControl;
                        grid.CurrentRow.Delete();
                    }
                }
                else if (name == "btnrecall")
                {
                    if (row.Cells["Status"].Value.ToStr() == "POB" || row.Cells["Status"].Value.ToStr() == "STC")
                    {





                        ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + row.Cells["Status"].Value.ToStr() + " Status.");
                        return;

                    }
                    else if (row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED || row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                    {


                        if (General.GetQueryable<Booking>(null).Count(c => c.Id == id && (c.AcceptedDateTime != null || c.Fleet_Driver != null && c.Fleet_Driver.HasPDA == true)) > 0)
                        {
                            ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + row.Cells["Status"].Value.ToStr() + " Status.");
                            return;

                        }

                    }


                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to Re-Call a Booking ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {

                        new Thread(delegate()
                        {
                            int loopCnt = 1;
                            bool success = false;
                            while (loopCnt < 3)
                            {

                                if (bookingStatusId.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                                {
                                    success = ReCallFOJBooking(id, driverId);
                                }
                                else
                                {

                                    success = General.ReCallBooking(id, driverId);
                                }


                                if (success)
                                {
                                    break;

                                }
                                else
                                    loopCnt++;



                            }
                        }).Start();

                    }
                    else
                    {

                        return;
                    }


                }
                else if (name == "btnredespatch")
                {



                    rtn = General.ShowDespatchForm(General.GetObject<Booking>(c => c.Id == id));

                }

                if (name == "btnrecall" || name == "btnredespatch")
                {
                    if (name == "btnredespatch" && rtn == false)
                        return;


                    Thread.Sleep(500);
                    //   PopulateData();


                    if (name == "btnrecall")
                    {

                        grdLister.RowsChanging -= new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                        grdLister.CurrentRow.Delete();

                        grdLister.RowsChanging += new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                    }

                    (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingDashBoard") as frmBookingDashBoard).RefreshAllActiveData();


                    // General.RefreshListWithoutSelected<frmBookingDashBoard>("frmBookingDashBoard1");
                }
            }
            catch (Exception ex)
            {


            }
        }


        //public bool ReCallFOJBooking(long jobId, int driverId)
        //{

        //    try
        //    {
        //        (new TaxiDataContext()).stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);




        //        if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
        //        {
        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
        //            }

        //        }
        //        else
        //        {

        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
        //            }


        //        }

        //        return true;

        //    }
        //    catch (Exception ex)
        //    {

        //        return true;
        //        //ENUtils.ShowMessage(ex.Message);


        //    }




        //}


        private void txtSearchBookingHistory_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Find();

            }
        }

        private void btnShowAllBookingHistory_Click(object sender, EventArgs e)
        {
            ClearFilter();
            RefreshBookingList();
        }

        int skip = 0;

        private void btnFirstRecords_Click(object sender, EventArgs e)
        {



            try
            {

                // InitializeBWorker();

                if (worker.IsBusy == false)
                {
                    skip = 0;


                    RefreshBookingList();
                    // bWorker.RunWorkerAsync();
                }


                btnFirstRecords.Enabled = false;

                Thread.Sleep(1000);

                btnFirstRecords.Enabled = true;
                //PopulateData();
            }
            catch (Exception ex)
            {


            }
        }

        private void btnPreviousRecords_Click(object sender, EventArgs e)
        {

            try
            {







                if (worker.IsBusy == false)
                {

                    if (skip - pageSize < 0)
                        skip = 0;
                    else
                        skip = skip - pageSize;

                    RefreshBookingList();
                }


                btnPreviousRecords.Enabled = false;

                Thread.Sleep(1000);

                btnPreviousRecords.Enabled = true;

            }
            catch (Exception ex)
            {


            }
            // PopulateData();
        }

        private void btnNextRecord_Click(object sender, EventArgs e)
        {

            try
            {






                if (worker.IsBusy == false)
                {
                    skip = skip + pageSize;

                    RefreshBookingList();
                    //worker.RunWorkerAsync();
                }

                //  PopulateData();

                btnNextRecord.Enabled = false;

                Thread.Sleep(1000);

                btnNextRecord.Enabled = true;
            }
            catch (Exception ex)
            {


            }
        }

        private void btnLastRecords_Click(object sender, EventArgs e)
        {




            try
            {




                if (worker.IsBusy == false)
                {
                    int cnt = General.GetQueryable<Booking>(c => c.BookingStatusId != Enums.BOOKINGSTATUS.PENDING && c.BookingStatusId != Enums.BOOKINGSTATUS.WAITING).Count();

                    if (cnt <= pageSize)
                    {
                        skip = 0;

                    }
                    else if (cnt > pageSize)
                    {

                        skip = cnt - pageSize;

                    }

                    RefreshBookingList();
                }



                btnLastRecords.Enabled = false;

                Thread.Sleep(1000);

                btnLastRecords.Enabled = true;

            }
            catch (Exception ex)
            {


            }
            //PopulateData();
        }

        void grdBookingHistoryLister_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            ViewBookingHistoryDetailForm(e.Row);


        }

        private void ViewBookingHistoryDetailForm(GridViewRowInfo row)
        {
            try
            {

                if (row != null && row is GridViewDataRowInfo)
                {
                    ShowBookingForm(row.Cells["Id"].Value.ToInt(), 2);
                }
                else
                {
                    ENUtils.ShowMessage("Please select a record");
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void ShowBookingForm(long id, int openedFrom)
        {
            // General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);


            try
            {


                frmBooking frm = new frmBooking(openedFrom);
                frm.PickBookingTypeId = Enums.BOOKING_TYPES.WEB;
                if (id != 0)
                {
                    frm.OnDisplayRecord(id);
                }
                frm.ControlBox = true;
                frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm.MaximizeBox = false;

                //if (showOnDialog)
                //{
                frm.ShowDialog();
                //}
                //else
                //    frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        #endregion

        private void grdOnPlotDrivers_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void chkShowAllocatedJobs_CheckedChanged(object sender, EventArgs e)
        {

            try
            {
                if (grdPreBookings.Columns["DriverId"].FilterDescriptor == null)
                    grdPreBookings.Columns["DriverId"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

                if (chkShowAllocatedJobs.Checked)
                {
                    //grdPreBookings.EnableSorting = true;



                    grdPreBookings.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;

                    SortGridAllocatedDriver(optSortPickupDate.ToggleState);

                }
                else
                {



                    //   grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = true);
                    grdPreBookings.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.StartsWith;


                    if (grdPreBookings.GroupDescriptors.Count == 0)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["DriverId"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["DriverId"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }

                }

            }
            catch
            {

            }



        }

        private void ChkShowAllJobs_CheckedChanged(object sender, EventArgs e)
        {

            if (ChkShowAllJobs.Checked)
            {
                FilterTodaysbooking(1);
            }
            else
            {
                FilterTodaysbooking(chkShowCashJobs.Checked ? 2 : 3);

            }
        }


        private void FilterTodaysbooking(int filterType)
        {


            if (grdPendingJobs.Columns["Account"].FilterDescriptor == null)
                grdPendingJobs.Columns["Account"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();


            if (filterType == 1)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.StartsWith;


            }
            else if (filterType == 2)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNull;


            }
            else if (filterType == 3)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;

            }



        }


        private int selectedduevalue = 0;
        private void ddlShowDue_SelectedIndexChanging(object sender, Telerik.WinControls.UI.Data.PositionChangingCancelEventArgs e)
        {

            int dueMins = ddlShowDue.Items[e.Position].Value.ToInt();

            selectedduevalue = dueMins;
            

            if (grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor == null)
            {
                grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();
                //   grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.v
            }

            if (dueMins == 0 || dueMins==1000)
            {
                if (dueMins==1000 || ddlShowDue.SelectedValue.ToInt() == 1000)
                {
                    RefreshTodayBookingData();
                    Thread.Sleep(500);
                }


                grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;
                grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Value = null;
            }
            else
            {
                //if (dueMins == 1000)
                //{
                //    RefreshTodayBookingData();
                //}
                //else
                //{
                    if (ddlShowDue.SelectedValue.ToInt() == 1000)
                    {
                        RefreshTodayBookingData();
                        Thread.Sleep(500);

                    }

                    grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsLessThanOrEqualTo;
                    grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Value = DateTime.Now.AddMinutes(dueMins);
              //  }
            }



            //if (worker != null && worker.IsBusy || IsUpdating)
            //{
            //    e.Cancel = true;
            //    return;
            //}

            //try
            //{
            //    timer1.Stop();

            //    if (ddlShowDue.SelectedIndex == 0)
            //    {
            //        maxTopDues = 0;

            //    }
            //    //else if (ddlShowDue.SelectedIndex == 1)
            //    //    maxTopDues = 10;
            //    //else if (ddlShowDue.SelectedIndex == 2)
            //    //    maxTopDues = 5;
            //    //else if (ddlShowDue.SelectedIndex == 3)
            //    //    maxTopDues = 3;
            //    else

            //        maxTopDues = 300;

            //    totalDueJobs = 0;
            //    grdPendingJobs.Rows.ToList().ForEach(c => c.IsPinned = false);


            //    timer1.Start();
            //}
            //catch
            //{
            //    timer1.Start();

            //}
        }


        //void grdPendingJobs_CustomFiltering(object sender, GridViewCustomFilteringEventArgs e)
        //{

        //    if(ddlShowDue.SelectedValue.ToInt() ==0)
        //        e.Visible=true;
        //    else
        //    {
    
        //      e.Visible=  e.Row.Cells["PickupDateTemp"].Value.ToDateTime()<= DateTime.Now.AddMinutes(ddlShowDue.SelectedValue.ToInt())
        //               && e.Row.Cells["PickupDateTemp"].Value.ToDateTime()>= DateTime.Now.AddMinutes(-15) ? true  :  false;
        //    }
        //}

        private void chkShowAllocatedTodayJobs_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (grdPendingJobs.Columns["DriverId"].FilterDescriptor == null)
                    grdPendingJobs.Columns["DriverId"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

                if (chkShowAllocatedTodayJobs.Checked)
                {
                    //     grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = false);


                    //grdPendingJobs.EnableSorting = true;
                    //grdPendingJobs.Columns["Driver"].SortOrder = RadSortOrder.Ascending;
                    //grdPendingJobs.Columns["Driver"].Sort(RadSortOrder.Ascending, true);

                    grdPendingJobs.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;


                    SortGridAllocatedDriverToday(optSortTodayPickup.ToggleState);


                }
                else
                {
                    //   grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = true);
                    grdPendingJobs.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.StartsWith;



                    if (grdPendingJobs.EnableSorting == true)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["DriverId"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["DriverId"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }

                    //grdPendingJobs.EnableSorting = false;
                    //grdPendingJobs.Columns["Driver"].SortOrder = RadSortOrder.None;
                    //grdPendingJobs.Columns["Driver"].Sort(RadSortOrder.None, true);
                }
            }
            catch (Exception ex)
            {


            }
        }

        

        private void optSortPickupDate_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            SortGridAllocatedDriver(args.ToggleState);
        }


        private void SortGridAllocatedDriver(ToggleState toggle)
        {
            try
            {
                if (chkShowAllocatedJobs.Checked)
                {

                    if (toggle == ToggleState.On)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);

                    }
                    else
                    {
                        grdPreBookings.GroupDescriptors.Expression = "";
                        grdPreBookings.EnableSorting = true;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.Ascending;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.Ascending, true);
                    }

                }
                else
                {

                    if (grdPreBookings.GroupDescriptors.Count == 0)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }
                }
            }
            catch
            {

            }

        }


        private void SortGridAllocatedDriverToday(ToggleState toggle)
        {
            try
            {
                if (chkShowAllocatedTodayJobs.Checked)
                {

                    if (toggle == ToggleState.On)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);

                    }
                    else
                    {


                        grdPendingJobs.EnableSorting = true;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.Ascending;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.Ascending, true);



                    }
                }
                else
                {
                    if (grdPendingJobs.EnableSorting == true)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }
                }
            }
            catch
            {

            }


        }

        private void optSortTodayPickup_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            SortGridAllocatedDriverToday(optSortTodayPickup.ToggleState);
        }






        void BiddingPriceNotification_Click(object sender, EventArgs e)
        {

            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }




                if (jobId > 0)
                {

                    var objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                    frmBiddingNotifications frmBid = new frmBiddingNotifications(objBooking);
                    frmBid.StartPosition = FormStartPosition.CenterScreen;
                    frmBid.ShowDialog();
                    frmBid.Dispose();


                }

            }
            catch (Exception ex)
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }



        void ShowDriverPriceBidding_Click(object sender, EventArgs e)
        {

            try
            {

                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }


                ShowDriverBiddingForm(jobId);





            }
            catch (Exception ex)
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }


        private void ShowDriverBiddingForm(long jobId)
        {

            if (jobId > 0)
            {

                var objBooking = General.GetObject<Booking>(c => c.Id == jobId);
                if (objBooking != null)
                {
                    frmDriverBidding frmdrv = new frmDriverBidding(objBooking);
                    frmdrv.StartPosition = FormStartPosition.CenterScreen;
                    frmdrv.ShowDialog();
                    frmdrv.Dispose();
                }
            }
        }


        void grdBiddingJobs_CommandCellClick(object sender, EventArgs e)
        {
            if (grdBiddingJobs.CurrentRow != null && grdBiddingJobs.CurrentRow is GridViewDataRowInfo)
            {
                long jobId = grdBiddingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                ShowDriverBiddingForm(jobId);

            }
        }

        private void btnRefreshDrvBidding_Click(object sender, EventArgs e)
        {
            RefreshPriceBiddingGrid();
        }


        private void SendDriverConfirmationEmail()
        {

            if ((AppVars.listUserRights.Count(c => c.functionId == "EMAIL - PD") > 0))
            {

                new Thread(delegate()
                {

                    JATEmail.SendDriverConfirmationEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
                }).Start();

            }
        }

        private void radLabel2_Click(object sender, EventArgs e)
        {

        }




        void grdWebBookingsNew_MouseClick(object sender, MouseEventArgs e)
        {


            try
            {

                grdWebBookingsNew.AllowEditRow = true;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = false;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = false;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = false;
                if (this.grdWebBookingsNew.BeginEditMode.ToBool())
                {
                    this.grdWebBookingsNew.BeginEdit();
                }
                grdWebBookingsNew.AllowEditRow = false;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

            }
            catch (NullReferenceException ex)
            {
                MessageBox.Show("" + ex);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex);
            }

        }




        private void grdWebBookingsNew_KeyPress(object sender, KeyPressEventArgs e)
        {

            try
            {

                grdWebBookingsNew.AllowEditRow = true;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = false;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = false;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = false;
                if (this.grdWebBookingsNew.BeginEditMode.ToBool())
                {
                    this.grdWebBookingsNew.EndEdit();
                    this.grdWebBookingsNew.Refresh();
                    this.grdWebBookingsNew.BeginEdit();
                }
                grdWebBookingsNew.AllowEditRow = false;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

            }
            catch (NullReferenceException ex)
            {
                MessageBox.Show("" + ex);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex);
            }

        }


        public void SetOnBreakMode(bool enable, bool refreshOther)
        {

           


            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableOnBreak=1");
                    }

                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableOnBreak=0");


                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);


               

                Thread.Sleep(400);


                if (refreshOther == false)
                {

                    new BroadcasterData().BroadCastToAll("**onbreakmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

        }


        public void SetAutoDespatchMode(bool enable,bool refreshFromOther)
        {

            EnableAutoDespatchMode = enable;


            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableAutoDespatch=1");
                    }                 

                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableAutoDespatch=0");


                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);


                //if (IsServer)
                //{

                //    GetTripletObject();
                //}


                Thread.Sleep(400);


                if (refreshFromOther == false)
                {

                    new BroadcasterData().BroadCastToAll("**autodespatchmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                }

                IsPerformingAutoDespatchActivity = false;


                try
                {

                    File.AppendAllText("autodespatchlog.txt", DateTime.Now.ToStr() + ":" + "mode -" + EnableAutoDespatchMode.ToStr() + Environment.NewLine);
                }
                catch
                {


                }
            }
            catch (Exception ex)
            {
              //  MessageBox.Show(ex.Message);
                IsPerformingAutoDespatchActivity = false;

                try
                {

                    File.AppendAllText("autodespatchlogCatch.txt", DateTime.Now.ToStr() + ":" + "mode -" + EnableAutoDespatchMode.ToStr() + Environment.NewLine);
                }
                catch
                {


                }
            }

        }


        public void SetBiddingMode(bool enable, bool refreshFromOther)
        {

            EnableBiddingMode = enable;


            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableBidding=1");
                    }
                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableBidding=0");
                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);

                Thread.Sleep(400);


                if (refreshFromOther == false)
                {

                    new BroadcasterData().BroadCastToAll("**biddingmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

        }



        void AuditReport_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    RadMenuItem item = (RadMenuItem)sender;
            //    GridViewRowInfo row = grdPendingJobs.CurrentRow;

            //    if (row != null && row is GridViewDataRowInfo)
            //    {
            //        int BookingId = row.Cells["Id"].Value.ToInt();

            //        //  Booking_Log obj = General.GetObject<Booking_Log>(c => c.Id == BookingId);


            //        var list = General.GetQueryable<Booking_Log>(c => c.BookingId == BookingId).OrderBy(c => c.UpdateDate).ToList();


            //        if (list != null)
            //        {
            //            if (list.Count > 0)
            //            {

            //                frmBookingAudit frmbookingaudit = new frmBookingAudit(list, row.Cells["Id"].Value.ToStr());
            //                frmbookingaudit.StartPosition = FormStartPosition.CenterScreen;
            //                frmbookingaudit.ShowDialog();
            //                frmbookingaudit.Dispose();
            //            }
            //        }
            //    }


            //}
            //catch (Exception ex)
            //{
            //    ENUtils.ShowMessage(ex.Message);

            //}
        }

        private void VScrollBar_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                grdWebBookingsNew.AllowEditRow = false;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

                if (this.grdWebBookingsNew.IsInEditMode)
                {
                    this.grdWebBookingsNew.EndEdit();
                    this.grdWebBookingsNew.Refresh();
                    this.grdWebBookingsNew.BeginEdit();
                    this.grdWebBookingsNew.EndUpdate();
                }
            }
            catch (NullReferenceException ex)
            {
                MessageBox.Show("" + ex);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex);
            }

        }

        private void ddlShowDue_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {

        }

        private void btnAirportArrivals_Click(object sender, EventArgs e)
        {
            ShowAirportArrivals();
        }


        private void ShowAirportArrivals()
        {

            try
            {
                //frmFlightDetails fm = new frmFlightDetails();
                //  fm.Show();
               string connString =    Application.StartupPath + "\\TreasureFlightDetails.exe";
                Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureFlightDetails"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }


                if (File.Exists(connString))
                {

                    string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");
                    //  string arg = conn;
                    Process.Start(connString, conn);
                }
                else
                {

                    MessageBox.Show("Process not found");
                }
            }
            catch (Exception ex)
            {


            }
        }

      

        private void btnPrintSelected_Click(object sender, EventArgs e)
        {
            PrintPreBooking();
        }

        private void PrintPreBooking()
        {
            try
            {
                UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);

                foreach (var item in grdPreBookings.Rows)
                {
                    if (item.Cells["Check"].Value.ToBool() == true)
                    {

                        long Id = item.Cells["Id"].Value.ToLong();
                        if (Id > 0)
                        {
                            var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == Id || c.MasterJobId == Id).ToList();
                            rptfrmJobDetails frm = null;
                            rptfrmJobDetails2 frm2 = null;
                            rptfrmJobDetails3 frm3 = null;
                            rptfrmJobDetails4 frm4 = null;
                            ReportPrintDocument rpt = null;
                            if (objReport != null)
                            {
                                switch (objReport.TemplateValue)
                                {
                                    case "rptfrmJobDetails":
                                        frm = new rptfrmJobDetails();
                                        frm.DataSource = list;
                                        frm.GenerateReport();
                                        rpt = new ReportPrintDocument(frm.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;


                                    case "rptfrmJobDetails2":
                                        frm2 = new rptfrmJobDetails2();
                                        frm2.DataSource = list;
                                        frm2.GenerateReport();
                                        rpt = new ReportPrintDocument(frm2.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;
                                    case "rptfrmJobDetails3":
                                        frm3 = new rptfrmJobDetails3();
                                        frm3.DataSource = list;
                                        frm3.GenerateReport();
                                        rpt = new ReportPrintDocument(frm3.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;


                                    case "rptfrmJobDetails4":
                                        frm4 = new rptfrmJobDetails4();
                                        frm4.DataSource = list;
                                        frm4.GenerateReport();
                                        rpt = new ReportPrintDocument(frm4.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;

                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }




        public void ReceivedText(string senderName, string message)
        {

            MethodInvoker mi = new MethodInvoker(delegate()
            {
                CreateAndShowCustomerMsgAlert("Message Received : " + senderName, message, null, null, false, null, "", "");
            });
            this.Invoke(mi);




            if (AppVars.objPolicyConfiguration.SMSNotificationSound.ToBool())
            {

                PlaySoundNotification("Message1.wav", false);
            }

        }

        frmAuthorizeAutoDespAllocDrvs frmAlloc = null;
        //public void ShowAuthAllocDrv(ref string jobIds)
        //{

        //    if (chkShowAuthorization.Checked)
        //    {

        //        if (frmAlloc != null && frmAlloc.IsDisposed == false)
        //        {
        //            // frmAlloc.jobs = jobIds;
        //            frmAlloc.newjobs = jobIds;
        //            frmAlloc.LoadData();
        //        }
        //        else
        //        {


        //            if (jobIds.ToStr().Trim().Length > 0)
        //            {

        //                frmAlloc = new frmAuthorizeAutoDespAllocDrvs(jobIds);
        //                frmAlloc.StartPosition = FormStartPosition.CenterScreen;
        //                frmAlloc.Show();
        //            }
        //        }
        //    }
        //}


        public void ShowAuthAllocDrv(ref string jobIds)
        {

            if (chkShowAuthorization.Checked)
            {
                bool canShow = true;

                if (frmAlloc != null && frmAlloc.IsDisposed == false)
                {
                    // frmAlloc.jobs = jobIds;
                    frmAlloc.newjobs = jobIds;

                    frmAlloc.LoadData();
                }
                else
                {


                    if (jobIds.ToStr().Trim().Length > 0)
                    {

                        if (jobIds.Contains(",") && AppVars.denyAllocatedBookingIds.ToStr().Length > 0)
                        {

                            string[] arrCnt = jobIds.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                            int cntExist = 0;
                            foreach (var item in arrCnt)
                            {

                                if (AppVars.denyAllocatedBookingIds.ToStr().Contains("," + item.ToStr() + ",") == true)
                                {
                                    cntExist++;
                                }
                            }


                            if (cntExist == arrCnt.Count())
                            {
                                canShow = false;

                            }

                        }
                        else if (AppVars.denyAllocatedBookingIds.ToStr().Trim().Length > 0)
                        {
                            if (AppVars.denyAllocatedBookingIds.ToStr().Trim().Contains("," + jobIds.ToStr() + ",") == true)
                            {
                                canShow = false;
                            }
                        }

                        if (canShow)
                        {

                            frmAlloc = new frmAuthorizeAutoDespAllocDrvs(jobIds);

                            frmAlloc.StartPosition = FormStartPosition.CenterScreen;
                            frmAlloc.Show();
                        }
                    }
                }
            }
        }

        private string GetTimeDifferenceInHourAndMin(DateTime? datetimetoSubtract)
        {
            if (datetimetoSubtract == null)
                return "";

            string waitSince = string.Empty;
            try
            {



                 waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(datetimetoSubtract.Value));
                waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                if (waitSince.StartsWith("00"))
                    waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                else if (waitSince.StartsWith("0"))
                    waitSince = waitSince.Remove(0, 1);

                if (waitSince.Contains(":"))
                    waitSince = waitSince.Replace(":", " hour(s) ").Trim();

            }
            catch
            {


            }

            return waitSince;

        }



        private string DistanceMatrixKey = string.Empty;
        private string DistanceMatrixServerKey = string.Empty;
        private List<clsDriverRadius> listofDrvRadius = new List<clsDriverRadius>();
        public class clsDriverRadius
        {
            public double latitude1;
            public double latitude2;
            public double longitude1;
            public double longitude2;
            public double Miles;

        }


        private double GetNearestDriverRadiusOnline(double? Latitude, double? Longitude, double? destLatitude, double? destLongitude)
        {
            double miles = 0.00;
            try
            {

                if (string.IsNullOrEmpty(DistanceMatrixKey))
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        DistanceMatrixKey = db.ExecuteQuery<string>("select APIKey from mapkeys where maptype='distancematrix'").FirstOrDefault().ToStr().Trim();


                        if (DistanceMatrixKey.Length == 0)
                            DistanceMatrixKey = " ";
                        else
                            DistanceMatrixKey = "&key=" + DistanceMatrixKey;
                    }
                }


                if (listofDrvRadius.Count(c => c.latitude1 == Latitude && c.longitude1 == Longitude && c.latitude2 == destLatitude && c.longitude2 == destLongitude) > 0)
                {
                    miles = listofDrvRadius.FirstOrDefault(c => c.latitude1 == Latitude && c.longitude1 == Longitude && c.latitude2 == destLatitude && c.longitude2 == destLongitude).Miles;
                }
                else
                {
                    if (DistanceMatrixKey.ToStr().Trim().Length > 0)
                    {

                        using (System.Data.DataSet ds = new System.Data.DataSet())
                        {
                            ds.ReadXml(new XmlTextReader("https://maps.googleapis.com/maps/api/distancematrix/xml?origins=" + Latitude + "," + Longitude + "&destinations=" + destLatitude + "," + destLongitude + DistanceMatrixKey + "&units=imperial&mode=driving&sensor=false"));
                            DataTable dt = ds.Tables["distance"];

                            if (dt != null && dt.Rows.Count > 0)
                            {
                                miles = Convert.ToDouble(dt.Rows[0]["text"].ToStr().Replace(" mi", "").Trim());


                                if (listofDrvRadius.Count(c => c.latitude1 == Latitude && c.longitude1 == Longitude && c.latitude2 == destLatitude && c.longitude2 == destLongitude) == 0)
                                {
                                    listofDrvRadius.Add(new clsDriverRadius { latitude1 = Convert.ToDouble(Latitude), longitude1 = Convert.ToDouble(Longitude), latitude2 = Convert.ToDouble(destLatitude), longitude2 = Convert.ToDouble(destLongitude), Miles = miles });

                                }
                            }

                        }

                    }



                    if (miles == 0)
                    {
                        if (string.IsNullOrEmpty(DistanceMatrixServerKey))
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                DistanceMatrixServerKey = db.ExecuteQuery<string>("select APIKey from mapkeys where maptype='distancematrixserverkey'").FirstOrDefault().ToStr().Trim();


                                if (DistanceMatrixServerKey.Length == 0)
                                    DistanceMatrixServerKey = " ";
                                else
                                    DistanceMatrixServerKey = "&key=" + DistanceMatrixServerKey;
                            }
                        }


                        if (DistanceMatrixServerKey.ToStr().Trim().Length > 0)
                        {


                            using (System.Data.DataSet ds = new System.Data.DataSet())
                            {
                                ds.ReadXml(new XmlTextReader("https://maps.googleapis.com/maps/api/distancematrix/xml?origins=" + Latitude + "," + Longitude + "&destinations=" + destLatitude + "," + destLongitude + DistanceMatrixServerKey + "&units=imperial&mode=driving&sensor=false"));
                                DataTable dt = ds.Tables["distance"];

                                if (dt != null && dt.Rows.Count > 0)
                                {
                                    miles = Convert.ToDouble(dt.Rows[0]["text"].ToStr().Replace(" mi", "").Trim());


                                    if (listofDrvRadius.Count(c => c.latitude1 == Latitude && c.longitude1 == Longitude && c.latitude2 == destLatitude && c.longitude2 == destLongitude) == 0)
                                    {
                                        listofDrvRadius.Add(new clsDriverRadius { latitude1 = Convert.ToDouble(Latitude), longitude1 = Convert.ToDouble(Longitude), latitude2 = Convert.ToDouble(destLatitude), longitude2 = Convert.ToDouble(destLongitude), Miles = miles });

                                    }
                                }

                            }
                        }


                    }



                }
            }
            catch (Exception ex)
            {
                try
                {
                    File.AppendAllText(Application.StartupPath + "\\distancematrix.txt", DateTime.Now.ToStr() + ":" + ex.Message);


                }
                catch
                {


                }

            }

            return miles;
        }






        #region ONLINE BOOKING WORKER


        private BackgroundWorker bg_OnlineBookingWorker = null;
        private void InitializeOnlineBookingWorker(string action)
        {

            if (bg_OnlineBookingWorker == null)
            {

                bg_OnlineBookingWorker = new BackgroundWorker();
                bg_OnlineBookingWorker.DoWork += new DoWorkEventHandler(bg_OnlineBookingWorker_DoWork);
                bg_OnlineBookingWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bg_OnlineBookingWorker_RunWorkerCompleted);
            }


            if (bg_OnlineBookingWorker != null && bg_OnlineBookingWorker.IsBusy == false)
                bg_OnlineBookingWorker.RunWorkerAsync(action);





        }



        public class clsWebBooker
        {
            public string action;
            public List<Booking> listofBookings;
            public IList listofRejectedBookings;


        }

        void bg_OnlineBookingWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                string arg = e.Argument.ToStr().Trim();

                if (arg.Length == 0)
                    e.Cancel = true;

                if (arg == "accept" || arg == "pending accept")
                {

                    List<Booking> list = General.GetQueryable<Booking>(a => (a.BookingStatusId == 18 || a.BookingStatusId == 19)
                                                 ).ToList();

                    e.Result = new clsWebBooker { action = arg, listofBookings = list };

                }
                else if (arg == "decline")
                {

                    DateTime fromdate = DateTime.Now.AddDays(-60).ToDate();

                    var data1 = General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date >= fromdate

                       && (c.BookingTypeId == Enums.BOOKING_TYPES.WEB || c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                       && (c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING || c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || c.BookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)

                      )

                     .OrderByDescending(c => c.PickupDateTime);
                    var list = (from a in data1


                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     BookingDate = a.BookingDate,
                                     PickupDate = a.PickupDateTime,
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Account = a.Gen_Company.CompanyName,
                                     Driver = a.Fleet_Driver.DriverNo,
                                     DriverId = a.DriverId,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Status = a.BookingStatus.StatusName,
                                     StatusColor = a.BookingStatus.BackgroundColor,
                                     BookingTypeId = a.BookingTypeId,
                                     VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                     VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                     TextColor1 = a.Gen_Company.TextColor,
                                     MobileNo = a.CustomerMobileNo,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,

                                 }).ToList();


                    List<Booking> listofAcceptedBookings = General.GetQueryable<Booking>(a => (a.BookingStatusId == 18 || a.BookingStatusId == 19)).ToList();
                   

                    e.Result = new clsWebBooker { action = arg, listofBookings=listofAcceptedBookings,  listofRejectedBookings = list };

                }
            }
            catch
            {


            }
        }


        void bg_OnlineBookingWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                if (e.Cancelled == false && e.Result != null)
                {
                    clsWebBooker objWebBooker = (clsWebBooker)e.Result;


                    if (objWebBooker != null)
                    {

                        string action = objWebBooker.action;

                        if (action == "accept")
                        {

                            var list = objWebBooker.listofBookings;
                            PopulateNewWebBookings(list.Where(c => c.BookingStatusId == 19).ToList());
                            PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());
                        }
                        else if (action == "decline")
                        {

                            var list = objWebBooker.listofBookings;
                            PopulateNewWebBookings(list.Where(c => c.BookingStatusId == 19).ToList());
                            PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());

                            PopulateDeclinedWebBookingsGrid(objWebBooker.listofRejectedBookings);
                           
                        }
                    }
                }
            }
            catch
            {


            }

        }




        private string DefaultWebBookingTemplate = string.Empty;
        private string webBookingTemplate = string.Empty;

        void grdWebBookings_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                GridViewRowInfo row = gridCell.GridControl.CurrentRow;

                string gridName = gridCell.GridControl.Name;
                if (row is GridViewDataRowInfo)
                {
                    row.Tag = gridName;
                    long jobId = row.Cells["Id"].Value.ToLong();
                    DateTime? pickupDate = row.Cells["PICKUPDATETIME"].Value.ToDateorNull();
                    DateTime? pickupTime = row.Cells["PICKUPTIME"].Value.ToDateTimeorNull();


                    if (pickupDate == null || pickupTime == null)
                    {
                        ENUtils.ShowMessage("Please Enter Pickup Date/Time");
                        return;

                    }



                    string refNo = row.Cells["REFNO"].Value.ToStr();

                    if (name == "pendingaccept")
                    {

                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "pendingaccept");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {
                            new TaxiDataContext().stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING, "New Web-Booking", "Pending Accept", AppVars.LoginObj.UserName.ToStr());

                            // need to uncomment
                            // PopulatePendingWebBookings(GetWebBookingList(a => a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING));
                            AddWebBookingRow(grdWebBookingsPending, row);

                            row.Delete();

                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);


                            ResetWebBookingBlinking();



                            new BroadcasterData().BroadCastToAll("**pending accept web>>" + Environment.MachineName);


                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();
                        }

                    }

                    else if (name == "accept")
                    {
                        if (worker.IsBusy == true)
                            return;



                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "accept");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {

                            try
                            {
                                EmailWebBookingCustomer(row, name);

                                row.Delete();

                            }
                            catch (Exception ex)
                            {

                            }


                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

                            if (pickupDate.ToDate() <= DateTime.Now.Date)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(RefreshTodayBookingData));
                                }
                                else
                                {
                                    RefreshTodayBookingData();
                                }
                            }
                            else
                            {
                                // need invoke required here
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));

                                }
                                else
                                {
                                    RefreshTodayAndPreData();

                                }
                            }



                            // RefreshTodayAndPreData();

                            new BroadcasterData().BroadCastToAll("**close authorize web>>" + Environment.MachineName + ">>" + name);

                            ResetWebBookingBlinking();

                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();

                        }
                    }
                    else if (name == "decline")
                    {
                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "decline");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {
                            try
                            {
                                EmailWebBookingCustomer(row, name);
                            }
                            catch
                            {

                            }

                            //  AddWebBookingRow(grdRejectedWebBookings, row);

                            row.Delete();

                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

                            new BroadcasterData().BroadCastToAll("**close authorize web>>" + Environment.MachineName + ">>" + name);


                            ResetWebBookingBlinking();

                            PopulateDeclinedWebBookings();

                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();
                            // txtDeclinedWebBookingTotal.Text = grdRejectedWebBookings.Rows.Count.ToStr();
                        }
                    }
                }
            }

            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);
            }

        }



        private void AddWebBookingRow(RadGridView grid, GridViewRowInfo row)
        {
            try
            {
                GridViewRowInfo newRow = grid.Rows.AddNew();


                newRow.Cells["ID"].Value = row.Cells["ID"].Value;
                newRow.Cells["REFNO"].Value = row.Cells["REFNO"].Value;

                newRow.Cells["BOOKEDON"].Value = row.Cells["BOOKEDON"].Value;
                newRow.Cells["PASSENGER"].Value = row.Cells["PASSENGER"].Value;

                newRow.Cells["BOOKINGTYPEID"].Value = row.Cells["BOOKINGTYPEID"].Value;
                newRow.Cells["DEFAULTCLIENTID"].Value = row.Cells["DEFAULTCLIENTID"].Value;

                newRow.Cells["VEHICLETYPE"].Value = row.Cells["VEHICLETYPE"].Value;
                newRow.Cells["CONTACTNO"].Value = row.Cells["CONTACTNO"].Value;

                newRow.Cells["EMAIL"].Value = row.Cells["EMAIL"].Value;

                newRow.Cells["PICKUPDATETIME"].Value = row.Cells["PICKUPDATETIME"].Value;
                newRow.Cells["PICKUPTIME"].Value = row.Cells["PICKUPTIME"].Value;
                newRow.Cells["OLDPICKUPDATETIME"].Value = row.Cells["OLDPICKUPDATETIME"].Value;

                newRow.Cells["FlightNo"].Value = row.Cells["FlightNo"].Value;




                newRow.Cells["FROMADDRESS"].Value = row.Cells["FROMADDRESS"].Value;
                newRow.Cells["TOADDRESS"].Value = row.Cells["TOADDRESS"].Value;

                newRow.Cells["FARES"].Value = row.Cells["FARES"].Value;
                newRow.Cells["OLDFARES"].Value = row.Cells["OLDFARES"].Value;

                newRow.Cells["VIA"].Value = row.Cells["VIA"].Value;

                newRow.Cells["PAYMENTTYPE"].Value = row.Cells["PAYMENTTYPE"].Value;
                newRow.Cells["Notes"].Value = row.Cells["Notes"].Value;


            }
            catch (Exception ex)
            {



            }



        }


        private void AddWebBookingLog(long bookingId, string before, string after)
        {
            try
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.Booking_Logs.InsertOnSubmit(new Booking_Log { ActionType = "webbooking", BeforeUpdate = before, AfterUpdate = after, BookingId = bookingId, UpdateDate = DateTime.Now });
                    db.SubmitChanges();
                }
            }
            catch
            {


            }

        }





        private void EmailWebBookingCustomer(GridViewRowInfo row, string action)
        {

            string gridName = row.Tag.ToStr();

            decimal fares = row.Cells["Fares"].Value.ToDecimal();
            decimal oldFare = row.Cells["OldFares"].Value.ToDecimal();
            string waitingTime = row.Cells["WaitingTime"].Value.ToStr().Trim();



            DateTime? pickupDate = row.Cells["PICKUPDATETIME"].Value.ToDate();
            TimeSpan pickupTime = row.Cells["PICKUPTIME"].Value.ToDateTime().TimeOfDay;
            DateTime? pickupDateTime = pickupDate + pickupTime;


            string refNo = row.Cells["REFNO"].Value.ToStr().Trim();



            int bookingTypeId = row.Cells["BOOKINGTYPEID"].Value.ToInt();


            if (action != "decline")
                action = "confirmed";



            action = action.ToProperCase();

            long jobId = row.Cells["ID"].Value.ToLong();


            if (row.Cells["PICKUPDATETIME"].Value.ToDateTime() != row.Cells["OLDPICKUPDATETIME"].Value.ToDateTime()
                || row.Cells["PICKUPTIME"].Value.ToDateTime() != row.Cells["PICKUPTIME"].Value.ToDateTime()
                || fares != oldFare)
            {



                BookingBO objBO = new BookingBO();
                objBO.GetByPrimaryKey(jobId);

                if (objBO.Current != null && objBO.PrimaryKeyValue != null)
                {

                    objBO.Current.FareRate = fares;
                    objBO.Current.CustomerPrice = fares;

                    if (objBO.Current.CompanyId != null)
                        objBO.Current.CompanyPrice = fares;


                    objBO.Current.BookingStatusId = action.ToLower() == "confirmed" ? Enums.BOOKINGSTATUS.WAITING : Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING;


                    if (objBO.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING)
                    {
                        objBO.Current.Booking_Logs.Add(new Booking_Log
                        {
                            BookingId = objBO.Current.Id,
                            UpdateDate = DateTime.Now,
                            BeforeUpdate = (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept")
                            ,
                            AfterUpdate = "Accept",
                            User = AppVars.LoginObj.UserName.ToStr(),
                            ActionType = "webbooking"
                        });




                    }
                    else
                    {
                        objBO.Current.Booking_Logs.Add(new Booking_Log
                        {
                            BookingId = objBO.Current.Id,
                            UpdateDate = DateTime.Now,
                            BeforeUpdate = (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept"),
                            AfterUpdate = "Declined",
                            User = AppVars.LoginObj.UserName.ToStr(),
                            ActionType = "webbooking"
                        });


                    }


                    objBO.Current.PickupDateTime = pickupDateTime;

                    objBO.CheckDataValidation = false;
                    objBO.CheckCustomerValidation = false;

                    objBO.Save();
                }
            }
            else
            {

                if (action.ToLower() == "confirmed")
                {


                    new TaxiDataContext().stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING, (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept")
                                                       , "Accept", AppVars.LoginObj.UserName.ToStr());


                    // new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);
                }
                else
                {


                    new TaxiDataContext().stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING, (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept")
                                                       , "Declined", AppVars.LoginObj.UserName.ToStr());


                    //    new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING);

                }
            }



            int defaultclientId = row.Cells["DEFAULTCLIENTID"].Value.ToInt();



            if (oldFare != fares || !string.IsNullOrEmpty(waitingTime))
            {
                action = "Waiting";
            }


            if (!string.IsNullOrEmpty(row.Cells["EMAIL"].Value.ToStr()))
            {
                string subject = "";
                string msgBody = string.Empty;


                Booking objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                string email = row.Cells["EMAIL"].Value.ToStr().Trim();
                string customerName = row.Cells["PASSENGER"].Value.ToStr();

                if (action.ToLower() == "decline")
                {
                    if (objBooking.Gen_SubCompany.DefaultIfEmpty().DisableDeclineEmail.ToBool() == false)
                    {


                        string via = row.Cells["VIA"].Value.ToStr();

                        string msg = action.ToLower() == "decline" ? "DECLINED" : "CONFIRMATION";


                        subject = "TAXI " + msg + " - " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;


                        string newLine = "<br>";


                        if (action.ToLower() == "decline")
                            msgBody = "<html><body><div>We have declined your online booking request." + newLine;
                        else
                            msgBody = "<html><body><div>Your online booking request is confirmed." + newLine;


                        msgBody += newLine + AppVars.objPolicyConfiguration.MobileBookingEmailVerification.ToStr().Trim();


                        if (msgBody.Contains("<BookingNo>"))
                        {
                            msgBody = msgBody.Replace("<BookingNo>", refNo);

                        }



                        if (msgBody.Contains("<FromDoorNo>"))
                        {
                            msgBody = msgBody.Replace("<FromDoorNo>", row.Cells["FlightNo"].Value.ToStr().Trim());

                        }


                        if (msgBody.Contains("<PickupPoint>"))
                        {
                            msgBody = msgBody.Replace("<PickupPoint>", row.Cells["FROMADDRESS"].Value.ToStr().Trim());

                        }



                        if (!string.IsNullOrEmpty(via) && msgBody.Contains("<ViaPoint>"))
                        {
                            via = "Via : " + newLine + via.Replace("\r\n", "<br>");
                            msgBody = msgBody.Replace("<ViaPoint>", via);

                        }


                        if (msgBody.Contains("<Fares>"))
                        {
                            msgBody = msgBody.Replace("<Fares>", row.Cells["Fares"].Value.ToStr());

                        }



                        if (msgBody.Contains("<Passenger>"))
                        {
                            msgBody = msgBody.Replace("<Passenger>", row.Cells["Passenger"].Value.ToStr());

                        }



                        if (msgBody.Contains("<Destination>"))
                        {
                            msgBody = msgBody.Replace("<Destination>", row.Cells["TOADDRESS"].Value.ToStr());

                        }


                        if (msgBody.Contains("<PickupDate>"))
                        {
                            msgBody = msgBody.Replace("<PickupDate>", string.Format("{0:dd/MM/yyyy}", row.Cells["PICKUPDATETIME"].Value));

                        }


                        if (msgBody.Contains("<PickupTime>"))
                        {
                            msgBody = msgBody.Replace("<PickupTime>", string.Format("{0:HH:mm}", row.Cells["PICKUPTIME"].Value));

                        }


                        if (msgBody.Contains("<CompanyTelNo>"))
                        {
                            msgBody = msgBody.Replace("<CompanyTelNo>", AppVars.objSubCompany.TelephoneNo);

                        }


                        if (msgBody.Contains("<CompanyName>"))
                        {
                            msgBody = msgBody.Replace("<CompanyName>", AppVars.objSubCompany.CompanyName);

                        }

                        msgBody = msgBody.Replace("\n", newLine);




                        msgBody += newLine + "</div></body></html>";
                    }
                }


                else
                {

                    if (objBooking.Gen_SubCompany.DefaultIfEmpty().DisableAcceptEmail.ToBool() == false)
                    {


                        if (string.IsNullOrEmpty(webBookingTemplate))
                            webBookingTemplate = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "frmWebBookingsList" && (c.IsDefault != null && c.IsDefault == true))
                                                    .DefaultIfEmpty().TemplateName.ToStr().ToLower().Trim();

                        if (webBookingTemplate == "template1")
                        {

                            string newLine = "<br>";
                            string via = row.Cells["VIA"].Value.ToStr();

                            msgBody = "<html><body><div>Your online booking request is confirmed." + newLine;
                            msgBody += newLine + AppVars.objPolicyConfiguration.MobileBookingEmailVerification.ToStr().Trim();

                            if (msgBody.Contains("<BookingNo>"))
                            {
                                msgBody = msgBody.Replace("<BookingNo>", refNo);
                            }

                            if (msgBody.Contains("<FromDoorNo>"))
                            {
                                msgBody = msgBody.Replace("<FromDoorNo>", row.Cells["FlightNo"].Value.ToStr().Trim());
                            }

                            if (msgBody.Contains("<PickupPoint>"))
                            {
                                msgBody = msgBody.Replace("<PickupPoint>", row.Cells["FROMADDRESS"].Value.ToStr().Trim());
                            }

                            if (!string.IsNullOrEmpty(via) && msgBody.Contains("<ViaPoint>"))
                            {
                                via = "Via : " + newLine + via.Replace("\r\n", "<br>");
                                msgBody = msgBody.Replace("<ViaPoint>", via);
                            }


                            if (msgBody.Contains("<Fares>"))
                            {
                                msgBody = msgBody.Replace("<Fares>", row.Cells["Fares"].Value.ToStr());
                            }

                            if (msgBody.Contains("<Passenger>"))
                            {
                                msgBody = msgBody.Replace("<Passenger>", customerName);
                            }

                            if (msgBody.Contains("<Destination>"))
                            {
                                msgBody = msgBody.Replace("<Destination>", row.Cells["TOADDRESS"].Value.ToStr());

                            }

                            if (msgBody.Contains("<PickupDate>"))
                            {
                                msgBody = msgBody.Replace("<PickupDate>", string.Format("{0:dd/MM/yyyy}", pickupDate));

                            }


                            if (msgBody.Contains("<PickupTime>"))
                            {
                                msgBody = msgBody.Replace("<PickupTime>", string.Format("{0:HH:mm}", pickupTime));

                            }


                            if (msgBody.Contains("<CompanyTelNo>"))
                            {
                                msgBody = msgBody.Replace("<CompanyTelNo>", AppVars.objSubCompany.TelephoneNo);
                            }

                            if (msgBody.Contains("<CompanyName>"))
                            {
                                msgBody = msgBody.Replace("<CompanyName>", AppVars.objSubCompany.CompanyName);
                            }

                            msgBody = msgBody.Replace("\n", newLine);

                            msgBody += newLine + "</div></body></html>";

                        }
                        else if (webBookingTemplate == "template2")
                        {



                            string telephoneNo = objBooking.Gen_SubCompany.DefaultIfEmpty().TelephoneNo.ToStr();

                            subject = "BOOKING CONFIRMATION -  " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;

                            msgBody += "<html xmlns=\"http://www.w3.org/1999/xhtml\">" +
                                                    "<head>" +
                                                    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" +
                                                    "<title>Untitled Document</title>" +
                                                    "<style>" +
                                                    "body {" +
                                                        "text-align: left;" +
                                                        "letter-spacing: normal;" +
                                                        "word-spacing: normal;" +
                                                        "white-space: normal;" +
                                                        "background:#FFF;" +
                                                    "}" +
                                                    ".body {" +
                                                        "clear: both;" +
                                                        "margin: 0 auto;" +
                                                        "width: 100%;" +
                                                    "}" +
                                                    "p {" +
                                                        "display: block;" +
                                                    "-webkit-margin-before: 0.2em;" +
                                                    "-webkit-margin-after: 0.5em;" +
                                                    "-webkit-margin-start: 0px;" +
                                                    "-webkit-margin-end: 0px;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-size: 13px;" +
                                                        "font-weight: normal;" +
                                                        "color: #333;" +
                                                        "text-decoration: none;" +
                                                    "}" +
                                                    "h1 {font-size: 1.571em}" +	/* 22px */
                                                    "h2 {font-size: 1.571em}" +	/* 22px */
                                                    "h3 {font-size: 1.429em}" +	/* 20px */
                                                    "h4 {font-size: 1.286em}" +	/* 18px */
                                                    "h5 {font-size: 1.143em}" +	/* 16px */
                                                    "h6 {font-size: 1em}	" +	/* 14px */

                                                    "h1, h2, h3, h4, h5, h6 {" +
                                                        "font-weight: 400;" +
                                                        "line-height: 1.1;" +
                                                        "margin-bottom: .8em;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-weight: bold;" +
                                                    "}" +
                                                    ".wrapper {" +
                                                        "width: 1000px;" +
                                                        "margin:0 auto;" +
                                                    "}" +
                                                    "</style>" +
                                                    "</head>" +

                                                    "<body>" +
                                                    "<div class=\"wrapper\">" +
                                                    "<p><strong>Dear " + customerName + ".</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "We thank you for booking your airport transfer  with us.&nbsp; We are confirming your booking as it is detailed  below: </p>" +
                                                    "<p>Your  booking reference is:&nbsp;<strong>" + refNo + ";</strong><br />" +
                                                      "<br />" +
                                                      "When you contact us, we advise you to provide us  this reference to enable us to deal with your enquiry.&nbsp;<br />" +
                                                      "<br />" +
                                                      "It is the responsibility of the passenger or the  person who makes this reservation to ensure that they provide us with the  correct information. To do this, we would recommend you to double check the  transfer details below this confirmation. If any of the details are incorrect,  please advise us. </p>" +
                                                    "<p>Please  inform us, if there are any changes or cancellations to your travel plans with  regard to this transfer at your earliest&nbsp;convenience.<br />" +
                                                      "<br />" +
                                                      "If any of the details of the journey are  incorrect, then please advise us as soon as possible. Should the amendments  alter&nbsp;the total mileage, period of time the vehicle is required  or the specification of the vehicle or the price will be adjusted&nbsp;<br />" +
                                                      "accordingly.<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "Below statement is only for the passengers who  will be travelling from the <strong>airport/seaport  / station.</strong> Passengers, who will be travelling from other locations, please  IGNORE the following statement. </p>" +
                                                    "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\" align=\"left\" width=\"100%\">" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Airports</strong></p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Meeting Points</strong></p></td>" +
                                                      "</tr>" +

                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 1</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 2</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Coffee Nero    (coffee shop) </p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 3  </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of WHSmith    (Blue, Stationary shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 4 </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 5</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick North Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick South Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Stansted Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Luton Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>London City     Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>All the other UK airports</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                    "</table>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Meeting points at the airports:</strong> <br />" +
                                                      "On arrival, our driver will be at the airport  arrival with the <strong>passenger's&nbsp;</strong><strong>name board.</strong> However, if you have any difficulties finding your  driver in the arrival hall, please call us on the contact number provided below.</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Seaport / Cruise pickup - meeting point</strong>:<br />" +
                                                      "On  arrival, our driver will be at the&nbsp;<strong>seaport</strong>&nbsp;arrival hall with passenger name  board. However, if you have any difficulties finding your driver in the arrival  hall, please call us on the contact number provided below.<br />" +
                                                      "<br />" +
                                                      "<strong>Train Station pickup – meeting point</strong>: On all train station pickups including Euston, St  Pancras, Kings Cross, Victoria and Waterloo, our driver will  be waiting at the dedicated minicab pickup point which is situated outside the  station. If you are not sure where this is, you can ask any member of staff,  who works at the train station; they will guide you to the pickup point.  We can also offer a meet and greet service with  an&nbsp;<strong>additional charge</strong>&nbsp;of £7.00, where our driver will wait  at the station arrival hall with the passenger name board.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<strong>What do I do if I cannot find my driver?</strong>&nbsp;Sometimes it can be difficult to find your driver at  the airport, station or hotel, when it is very busy. For any reason, if you are  unable to locate our driver, you&nbsp;<strong>must</strong> contact us on the numbers provided below. In the event of failing to contact us  or failing to meet our driver, this will be considered as &ldquo;no show&rdquo; and you  will be liable to pay the full fare or if the fare is pre- paid the payment  will not be refunded (Please see our terms and conditions on our website for  further details).&nbsp;<br />" +
                                                      "<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0203 3276 606 | International Callers: +44 203 3276 606</strong>&nbsp;<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0208 1234 971 | International Callers: +44 208 1234 971</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "Should the amendments alter the total mileage,  period of time the vehicle is required or the specification of the vehicle, the  price will be adjusted accordingly.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<strong>We also suggest that the passenger keeps our  contact details with their travel documents as a referral.&nbsp;</strong> <strong>Any further details,  please refer  to our website or contact our customer service team.</strong><br />" +
                                                    "</p>" +
                                                    "<h1 align=\"center\">IMPORTANT NOTICE </h1>" +
                                                    "<p align=\"center\"><br />" +
                                                      "Please Note:  If you wish to make further travel arrangements with us, such as returns trips  must be booked through our official website or with our customer service team  via our online, email or phone (not through any&nbsp;other sources). <br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "PLEASE ADD  OUR WEBSITE ON YOUR COMPUTER''S FAVORITE LIST AND YOU WILL NEVER HAVE TO SEARCH  FOR US AGAIN.&nbsp;<br />" +
                                                    "</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><br />" +
                                                      "Kind Regards<br />" +
                                                      "Customer Service Team<br />" +
                                                      "<br />" +
                                                    "</p>" +
                                                    "<h2>Visit  us&nbsp;&gt;&gt;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "</a></h2>" +
                                                    "<p><br />" +
                                                    "Email -&nbsp;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr().Trim() + "</a>&nbsp;| UK Callers: " + telephoneNo + " | International Callers:+44" + (telephoneNo.Length > 0 ? telephoneNo.ToStr().Remove(0, 1).ToStr() : "") + "&nbsp;<br />" +
                                                      "<img src=\"" + objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyLogoOnlinePath.ToStr().Trim() + "\"" + "alt=\"\" /></p>" +

                                                    "</div><br/><br/><br/>";




                            StringBuilder StrBld = new StringBuilder();


                            StrBld.Append("<table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid; background-color:White;font-family: verdana, arial;font-size: 11px;font-weight: normal;color: #000;text-decoration: none;'>");
                            StrBld.Append("<tr><td style='text-align: left; padding: 10px 20px 10px 20px; font-size: 16px;font-weight: bold; color: #ef0000; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>Booking Confirmation</td>");

                            string fullCompanyName = objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyName.ToStr();

                            StrBld.Append("<td style='text-align: center; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;color: #640120; font-weight: bold; font-size: 24px' colspan='2'>");

                            StrBld.Append(fullCompanyName + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='1' style='text-align: left; padding: 5px 5px 5px 0px; font-size: 16px;font-weight: bold; color: #000; border-bottom: #d4e0ee 1px solid;'>Dear " + objBooking.CustomerName.ToStr() + "," + "<td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2; border-bottom: #d4e0ee 1px solid;'>");

                            StrBld.Append("Thank You for your Booking. Please check your journey details.</td></tr><tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 16px;font-weight: bold; color: #000;'>" + AppVars.objSubCompany.TelephoneNo + "</td></tr><tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border-top: #d4e0ee 1px solid;'><tr style='background-color: #eff3f9;'>");
                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("ORDER NO:</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid; color: #008000;'>" + objBooking.BookingNo.ToStr() + "</td>");

                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;color: #008000;'>" + "" + "</td></tr></table>");

                            StrBld.Append("</td></tr><tr style='background-color: #eff3f9;'><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;'>");

                            StrBld.Append("Traveller Information</td><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; font-size: 12px;'>Carrier Details</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 25%'>" + objBooking.CustomerName.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;width: 45%'>" + objBooking.NoofPassengers.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Mobile:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerMobileNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Hand Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofHandLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Phone:</td><td style='padding: 5px; bold; border-bottom: #d4e0ee 1px solid;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerPhoneNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Check-in Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Email:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerEmail.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Vehicle:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Fleet_VehicleType.DefaultIfEmpty().VehicleType + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Pickup Date/Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + string.Format("{0:dd-MMM-yyyy HH:mm}", objBooking.PickupDateTime) + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Special Ins:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.SpecialRequirements.ToStr() + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr valign='top'><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Pick-up Information</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress + "</td></tr>");

                            if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Number:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Coming From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");
                                //    StrBld.Append(" <tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Date:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>31 August 2014</td></tr>");
                                //    StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>01 : 00</td></tr>");
                            }
                            else if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");


                            }
                            else
                            {

                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");


                            }
                            StrBld.Append("</table></td><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Drop-off Information</td></tr>");


                            StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>To:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");

                            if (objBooking.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {

                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                                StrBld.Append("To Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToStreet.ToStr() + "</td></tr>");
                            }
                            else
                            {
                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr>");


                            }

                            StrBld.Append("</table></td></tr>");


                            if (objBooking.Booking_ViaLocations.Count > 0)
                            {

                                StrBld.Append("<tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>From</td><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>To</td></tr>");

                                int cnt = objBooking.Booking_ViaLocations.Count;


                                for (int i = 0; i < cnt; i++)
                                {
                                    if (i == 0)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }
                                    else
                                    {
                                        if (i < cnt)
                                        {

                                            StrBld.Append("<tr>");
                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i - 1].ViaLocValue.ToStr() + "</td>");


                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                            StrBld.Append("</tr>");
                                        }
                                    }


                                    if (i + 1 == cnt)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }


                                }

                                StrBld.Append("</table></td></tr>");
                            }


                            StrBld.Append("<tr><td colspan='4'>&nbsp;</td></tr>");


                            //                 <tr><td style='padding: 10px 5px 10px 5px; font-size: 14px; border: #d4e0ee 1px solid;background-color: White; text-decoration: underline; font-weight: bold;'>Meeting Point:</td><td style='padding: 10px 5px 10px 5px; font-size: 11px; border: #d4e0ee 1px solid;background-color: #eff3f9;' colspan='3'>The driver will meet you with a name board displaying the Passenger name at ARRIVALS <span style='color: Green'>05 Minutes</span> after your flight lands (as per your request). You will have a further <span style='color: Green'>35 minutes</span> of Free waiting time, meaning a total Free waiting time allowance of <span style='color: Red'>40 Minutes</span> from the time of landing which also include car park. Please Note thereafter waiting time is chargeable at the rate of <span style='color: Red'>GBP £20p</span> per minute.</td></tr>
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-size: 18px; border-bottom: #d4e0ee 1px solid;background-color: #eff3f9;'>");
                            StrBld.Append("GBP Cost: <span style='color: #008000;'>£ " + String.Format("{0:f2}", objBooking.CustomerPrice.ToDecimal()) + "</span>");
                            StrBld.Append(" <span style='color: #008000;'>" + objBooking.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr() + "</span></td></tr>");
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-weight: bold; font-size: 17px;text-align: center; border-bottom: #d4e0ee 1px solid;'>Thank You & Have A Pleasant Journey from all of us on " + AppVars.objSubCompany.CompanyName + " Team.</td></tr>");

                            StrBld.Append("<tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2;'>Orders are subject to our current terms & conditions. We welcome all comments on the services that we provide.</td></tr>");

                            StrBld.Append("</table>");


                            msgBody += StrBld.ToStr();
                            msgBody += "</body></html>";
                        }
                        else if (webBookingTemplate == "template3" || webBookingTemplate == "template3a")
                        {

                            string skipText = "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 1</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>";



                            string phoneNumbers = "<strong>UK</strong><strong> Callers: 0203 3276 606 | International Callers: +44 203 3276 606</strong>&nbsp;<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0208 1234 971 | International Callers: +44 208 1234 971</strong>&nbsp;<br />";

                            if (webBookingTemplate == "template3a")
                            {

                                skipText = string.Empty;
                            }


                            if (AppVars.objSubCompany.ConnectionString.ToStr().Trim().Length > 0)
                            {

                                phoneNumbers = AppVars.objSubCompany.ConnectionString.ToStr().Trim();
                            }

                            string telephoneNo = objBooking.Gen_SubCompany.DefaultIfEmpty().TelephoneNo.ToStr();

                            subject = "BOOKING CONFIRMATION -  " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;

                            msgBody += "<html xmlns=\"http://www.w3.org/1999/xhtml\">" +
                                                    "<head>" +
                                                    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" +
                                                    "<title>Untitled Document</title>" +
                                                    "<style>" +
                                                    "body {" +
                                                        "text-align: left;" +
                                                        "letter-spacing: normal;" +
                                                        "word-spacing: normal;" +
                                                        "white-space: normal;" +
                                                        "background:#FFF;" +
                                                    "}" +
                                                    ".body {" +
                                                        "clear: both;" +
                                                        "margin: 0 auto;" +
                                                        "width: 100%;" +
                                                    "}" +
                                                    "p {" +
                                                        "display: block;" +
                                                    "-webkit-margin-before: 0.2em;" +
                                                    "-webkit-margin-after: 0.5em;" +
                                                    "-webkit-margin-start: 0px;" +
                                                    "-webkit-margin-end: 0px;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-size: 13px;" +
                                                        "font-weight: normal;" +
                                                        "color: #333;" +
                                                        "text-decoration: none;" +
                                                    "}" +
                                                    "h1 {font-size: 1.571em}" +	/* 22px */
                                                    "h2 {font-size: 1.571em}" +	/* 22px */
                                                    "h3 {font-size: 1.429em}" +	/* 20px */
                                                    "h4 {font-size: 1.286em}" +	/* 18px */
                                                    "h5 {font-size: 1.143em}" +	/* 16px */
                                                    "h6 {font-size: 1em}	" +	/* 14px */

                                                    "h1, h2, h3, h4, h5, h6 {" +
                                                        "font-weight: 400;" +
                                                        "line-height: 1.1;" +
                                                        "margin-bottom: .8em;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-weight: bold;" +
                                                    "}" +
                                                    ".wrapper {" +
                                                        "width: 1000px;" +
                                                        "margin:0 auto;" +
                                                    "}" +
                                                    "</style>" +
                                                    "</head>" +

                                                    "<body>" +
                                                    "<div class=\"wrapper\">" +
                                                    "<p><strong>Dear " + customerName + ".</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "We thank you for booking your airport transfer  with us.&nbsp; We are confirming your booking as it is detailed  below: </p>" +
                                                    "<p>Your  booking reference is:&nbsp;<strong>" + refNo + ";</strong><br />" +
                                                      "<br />" +
                                                      "When you contact us, we advise you to provide us  this reference to enable us to deal with your enquiry.&nbsp;<br />" +
                                                      "<br />" +
                                                      "It is the responsibility of the passenger or the  person who makes this reservation to ensure that they provide us with the  correct information. To do this, we would recommend you to double check the  transfer details below this confirmation. If any of the details are incorrect,  please advise us. </p>" +
                                                    "<p>Please  inform us, if there are any changes or cancellations to your travel plans with  regard to this transfer at your earliest&nbsp;convenience.<br />" +
                                                      "<br />" +
                                                      "If any of the details of the journey are  incorrect, then please advise us as soon as possible. Should the amendments  alter&nbsp;the total mileage, period of time the vehicle is required  or the specification of the vehicle or the price will be adjusted&nbsp;<br />" +
                                                      "accordingly.<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "Below statement is only for the passengers who  will be travelling from the <strong>airport/seaport  / station.</strong> Passengers, who will be travelling from other locations, please  IGNORE the following statement. </p>" +
                                                    "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\" align=\"left\" width=\"100%\">" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Airports</strong></p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Meeting Points</strong></p></td>" +
                                                      "</tr>" +

                                                     skipText +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 2</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>After the arrival gate we meet at WH Smiths News agents </p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 3  </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>As you come out of the arrivals there is a Marks & Spencer store on the left the driver will meet you there</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 4 </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 5</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick North Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick South Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Stansted Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Luton Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>London City     Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>All the other UK airports</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                    "</table>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Meeting points at the airports:</strong> <br />" +
                                                      "On arrival, our driver will be at the airport  arrival with the <strong>passenger's&nbsp;</strong><strong>name board.</strong> However, if you have any difficulties finding your  driver in the arrival hall, please call us on the contact number provided below.</p>" +
                                                    "<p>&nbsp;</p>" +

                                                      "<br />" +
                                                      "<strong>What do I do if I cannot find my driver?</strong>&nbsp;Sometimes it can be difficult to find your driver at  the airport, station or hotel, when it is very busy. For any reason, if you are  unable to locate our driver, you&nbsp;<strong>must</strong> contact us on the numbers provided below. In the event of failing to contact us  or failing to meet our driver, this will be considered as &ldquo;no show&rdquo; and you  will be liable to pay the full fare or if the fare is pre- paid the payment  will not be refunded (Please see our terms and conditions on our website for  further details).&nbsp;<br />" +
                                                      "<br />" +
                                                      phoneNumbers +

                                                      "<br />" +
                                                      "Should the amendments alter the total mileage,  period of time the vehicle is required or the specification of the vehicle, the  price will be adjusted accordingly.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<strong>We also suggest that the passenger keeps our  contact details with their travel documents as a referral.&nbsp;</strong> <strong>Any further details,  please refer  to our website or contact our customer service team.</strong><br />" +
                                                    "</p>" +
                                                    "<h1 align=\"center\">IMPORTANT NOTICE </h1>" +
                                                    "<p align=\"center\"><br />" +
                                                      "Please Note:  If you wish to make further travel arrangements with us, such as returns trips  must be booked through our official website or with our customer service team  via our online, email or phone (not through any&nbsp;other sources). <br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "PLEASE ADD  OUR WEBSITE ON YOUR COMPUTER''S FAVORITE LIST AND YOU WILL NEVER HAVE TO SEARCH  FOR US AGAIN.&nbsp;<br />" +
                                                    "</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><br />" +
                                                      "Kind Regards<br />" +
                                                      "Customer Service Team<br />" +
                                                      "<br />" +
                                                    "</p>" +
                                                    "<h2>Visit  us&nbsp;&gt;&gt;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "</a></h2>" +
                                                    "<p><br />" +
                                                    "Email -&nbsp;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr().Trim() + "</a>&nbsp;| UK Callers: " + telephoneNo + " | International Callers:+44" + (telephoneNo.Length > 0 ? telephoneNo.ToStr().Remove(0, 1).ToStr() : "") + "&nbsp;<br />" +
                                                      "<img src=\"" + objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyLogoOnlinePath.ToStr().Trim() + "\"" + "alt=\"\" /></p>" +

                                                    "</div><br/><br/><br/>";




                            StringBuilder StrBld = new StringBuilder();


                            StrBld.Append("<table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid; background-color:White;font-family: verdana, arial;font-size: 11px;font-weight: normal;color: #000;text-decoration: none;'>");
                            StrBld.Append("<tr><td style='text-align: left; padding: 10px 20px 10px 20px; font-size: 16px;font-weight: bold; color: #ef0000; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>Booking Confirmation</td>");

                            string fullCompanyName = objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyName.ToStr();

                            StrBld.Append("<td style='text-align: center; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;color: #640120; font-weight: bold; font-size: 24px' colspan='2'>");

                            StrBld.Append(fullCompanyName + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='1' style='text-align: left; padding: 5px 5px 5px 0px; font-size: 16px;font-weight: bold; color: #000; border-bottom: #d4e0ee 1px solid;'>Dear " + objBooking.CustomerName.ToStr() + "," + "<td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2; border-bottom: #d4e0ee 1px solid;'>");

                            StrBld.Append("Thank You for your Booking. Please check your journey details.</td></tr><tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 16px;font-weight: bold; color: #000;'>" + AppVars.objSubCompany.TelephoneNo + "</td></tr><tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border-top: #d4e0ee 1px solid;'><tr style='background-color: #eff3f9;'>");
                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("ORDER NO:</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid; color: #008000;'>" + objBooking.BookingNo.ToStr() + "</td>");

                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;color: #008000;'>" + "" + "</td></tr></table>");

                            StrBld.Append("</td></tr><tr style='background-color: #eff3f9;'><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;'>");

                            StrBld.Append("Traveller Information</td><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; font-size: 12px;'>Carrier Details</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 25%'>" + objBooking.CustomerName.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;width: 45%'>" + objBooking.NoofPassengers.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Mobile:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerMobileNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Hand Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofHandLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Phone:</td><td style='padding: 5px; bold; border-bottom: #d4e0ee 1px solid;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerPhoneNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Check-in Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Email:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerEmail.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Vehicle:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Fleet_VehicleType.DefaultIfEmpty().VehicleType + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Pickup Date/Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + string.Format("{0:dd-MMM-yyyy HH:mm}", objBooking.PickupDateTime) + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Special Ins:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.SpecialRequirements.ToStr() + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr valign='top'><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Pick-up Information</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress + "</td></tr>");

                            if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Number:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Coming From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");
                                //    StrBld.Append(" <tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Date:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>31 August 2014</td></tr>");
                                //    StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>01 : 00</td></tr>");
                            }
                            else if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");


                            }
                            else
                            {

                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");


                            }
                            StrBld.Append("</table></td><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Drop-off Information</td></tr>");


                            StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>To:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");

                            if (objBooking.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {

                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                                StrBld.Append("To Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToStreet.ToStr() + "</td></tr>");
                            }
                            else
                            {
                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr>");


                            }

                            StrBld.Append("</table></td></tr>");


                            if (objBooking.Booking_ViaLocations.Count > 0)
                            {

                                StrBld.Append("<tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>From</td><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>To</td></tr>");

                                int cnt = objBooking.Booking_ViaLocations.Count;


                                for (int i = 0; i < cnt; i++)
                                {
                                    if (i == 0)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }
                                    else
                                    {
                                        if (i < cnt)
                                        {

                                            StrBld.Append("<tr>");
                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i - 1].ViaLocValue.ToStr() + "</td>");


                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                            StrBld.Append("</tr>");
                                        }
                                    }


                                    if (i + 1 == cnt)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }


                                }

                                StrBld.Append("</table></td></tr>");
                            }


                            StrBld.Append("<tr><td colspan='4'>&nbsp;</td></tr>");


                            //                 <tr><td style='padding: 10px 5px 10px 5px; font-size: 14px; border: #d4e0ee 1px solid;background-color: White; text-decoration: underline; font-weight: bold;'>Meeting Point:</td><td style='padding: 10px 5px 10px 5px; font-size: 11px; border: #d4e0ee 1px solid;background-color: #eff3f9;' colspan='3'>The driver will meet you with a name board displaying the Passenger name at ARRIVALS <span style='color: Green'>05 Minutes</span> after your flight lands (as per your request). You will have a further <span style='color: Green'>35 minutes</span> of Free waiting time, meaning a total Free waiting time allowance of <span style='color: Red'>40 Minutes</span> from the time of landing which also include car park. Please Note thereafter waiting time is chargeable at the rate of <span style='color: Red'>GBP £20p</span> per minute.</td></tr>
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-size: 18px; border-bottom: #d4e0ee 1px solid;background-color: #eff3f9;'>");
                            StrBld.Append("GBP Cost: <span style='color: #008000;'>£ " + String.Format("{0:f2}", objBooking.CustomerPrice.ToDecimal()) + "</span>");
                            StrBld.Append(" <span style='color: #008000;'>" + objBooking.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr() + "</span></td></tr>");
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-weight: bold; font-size: 17px;text-align: center; border-bottom: #d4e0ee 1px solid;'>Thank You & Have A Pleasant Journey from all of us on " + AppVars.objSubCompany.CompanyName + " Team.</td></tr>");

                            StrBld.Append("<tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2;'>Orders are subject to our current terms & conditions. We welcome all comments on the services that we provide.</td></tr>");

                            StrBld.Append("</table>");


                            msgBody += StrBld.ToStr();
                            msgBody += "</body></html>";
                        }
                    }

                }

                if (!string.IsNullOrEmpty(msgBody))
                {


                    Gen_SubCompany objSub = objBooking.Gen_SubCompany.DefaultIfEmpty();


                    new Thread(delegate()
                    {
                        SendEmail(objSub, email, subject, msgBody);

                        try
                        {
                            if (refNo.ToStr().EndsWith("/1"))
                                refNo = refNo.ToStr().Replace("/1", "").Trim();

                            if (refNo.ToStr().EndsWith("/2"))
                                refNo = refNo.ToStr().Replace("/2", "").Trim();


                            if (refNo.ToStr().Length > 0 && refNo[1].ToStr().IsAlpha())
                            {
                                string newRefNo = string.Empty;
                                for (int i = 0; i < refNo.Length; i++)
                                {
                                    if (refNo[i].ToStr().IsAlpha())
                                        newRefNo += refNo[i].ToStr();

                                }


                                if (!string.IsNullOrEmpty(newRefNo))
                                {
                                    refNo = refNo.Replace(newRefNo, "").Trim();

                                }

                            }


                            if (bookingEngineType == "old")
                            {

                                new WebDataClassesDataContext().spUpdateBookingConfirmationFromApp2(defaultclientId, refNo.ToLong(), action, fares, waitingTime, string.Format("{0:d MMMM yyyy}", pickupDate), string.Format("{0:HH:mm}", pickupDateTime));
                            }
                            else
                            {

                                new DataClassesOnlineVehicleDataContext().spUpdateBookingConfirmationFromApp2(defaultclientId, refNo.ToLong(), action, fares, waitingTime, string.Format("{0:d MMMM yyyy}", pickupDate), string.Format("{0:HH:mm}", pickupDateTime));

                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }).Start();

                }
                else
                {

                    new Thread(delegate()
                    {
                        try
                        {
                            if (refNo.ToStr().EndsWith("/1"))
                                refNo = refNo.ToStr().Replace("/1", "").Trim();

                            if (refNo.ToStr().EndsWith("/2"))
                                refNo = refNo.ToStr().Replace("/2", "").Trim();


                            if (refNo.ToStr().Length > 0 && refNo[1].ToStr().IsAlpha())
                            {
                                string newRefNo = string.Empty;
                                for (int i = 0; i < refNo.Length; i++)
                                {
                                    if (refNo[i].ToStr().IsAlpha())
                                        newRefNo += refNo[i].ToStr();

                                }


                                if (!string.IsNullOrEmpty(newRefNo))
                                {
                                    refNo = refNo.Replace(newRefNo, "").Trim();

                                }

                            }

                            if (bookingEngineType == "old")
                            {

                                new WebDataClassesDataContext().spUpdateBookingConfirmationFromApp2(defaultclientId, refNo.ToLong(), action, fares, waitingTime, string.Format("{0:d MMMM yyyy}", pickupDate), string.Format("{0:HH:mm}", pickupDateTime));
                            }
                            else
                            {
                                new DataClassesOnlineVehicleDataContext().spUpdateBookingConfirmationFromApp2(defaultclientId, refNo.ToLong(), action, fares, waitingTime, string.Format("{0:d MMMM yyyy}", pickupDate), string.Format("{0:HH:mm}", pickupDateTime));

                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }).Start();

                }



            }

            else
            {
                if (!string.IsNullOrEmpty(refNo))
                {

                    new Thread(delegate()
                    {


                        //  if (bookingTypeId == Enums.BOOKING_TYPES.ONLINE)

                        try
                        {
                            if (AppVars.objPolicyConfiguration.PDANewWeekMessageByDay.ToStr().Trim().ToLower() == "old")
                            {
                                new WebDataClassesDataContext().spUpdateBookingConfirmationFromApp(defaultclientId, refNo.ToLong(), action, fares, waitingTime);
                            }
                            else
                            {
                                new DataClassesOnlineVehicleDataContext().spUpdateBookingConfirmationFromApp2(defaultclientId, refNo.ToLong(), action, fares, waitingTime, string.Format("{0:d MMMM yyyy}", pickupDate), string.Format("{0:HH:mm}", pickupDateTime));
                            }
                            //  new WebDataClassesDataContext().spUpdateBookingFromApp(defaultclientId, refNo.ToLong(), action);

                        }
                        catch (Exception ex)
                        {


                        }
                    }).Start();
                }

            }


        }

    

        #endregion


        private void btnAcceptorpooljob_Click(object sender, EventArgs e)
        {
            frmJobAcceptor frm = new frmJobAcceptor();
            frm.Show();
        }

        private void btnSearchJobsPool_Click_1(object sender, EventArgs e)
        {

        }

       

       







    }
}

