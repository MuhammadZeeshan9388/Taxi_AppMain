using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Xml;
using Utils;
using Telerik.WinControls.UI;
using System.Data.Linq;
using Taxi_BLL;
using Taxi_Model;
using Telerik.WinControls.Enumerations;
using DAL;
using Telerik.WinControls;


using UI;
using System.Collections;

using System.Net;
using System.Xml.Linq;

//using TreasureBooking.Classes;
using System.Threading;
using System.Diagnostics;
//using TreasureBooking;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Drawing.Drawing2D;





namespace Taxi_AppMain
{
    public partial class frmBooking2 : Form
    {
        private bool WasQuotiation;

        private bool IsDespatched;

        private int? _PickBookingTypeId = AppVars.objPolicyConfiguration.DefaultBookingTypeId;

        public int? PickBookingTypeId
        {
            get { return _PickBookingTypeId; }
            set { _PickBookingTypeId = value; }
        }


        private bool _IsAccountCalled;

        public bool IsAccountCalled
        {
            get { return _IsAccountCalled; }
            set { _IsAccountCalled = value; }
        }

        frmDespatchJob frm = null;



        bool IsKeyword = false;



        private bool saved = false;
        private int _MapType;
        public int MapType
        {
            get { return _MapType; }
            set { _MapType = value; }
        }



        private string _CallRefNo;

        public string CallRefNo
        {
            get { return _CallRefNo; }
            set { _CallRefNo = value; }
        }



        private Point OldfromDoorNoLoc;
        private Point NewFromDoorNoLoc;
        private Point OldtoDoorNoLoc;
        private Point NewtoDoorNoLoc;



        BookingBO objMaster;
        Booking_Payment objBookingPayment = null;

        private int? _PickSubCompanyId;

        public int? PickSubCompanyId
        {
            get { return _PickSubCompanyId; }
            set { _PickSubCompanyId = value; }
        }


        private int _PickVehicleTypeId;

        public int PickVehicleTypeId
        {
            get { return _PickVehicleTypeId; }
            set { _PickVehicleTypeId = value; }
        }
        private string _PickViaString;

        public string PickViaString
        {
            get { return _PickViaString; }
            set { _PickViaString = value; }
        }

        public frmBooking2()
        {

            //Stopwatch s = new Stopwatch();
            //s.Start();
            InitializeComponent();


            //  Console.WriteLine("ccc :" + s.ElapsedMilliseconds);

            InitializeConstructor();
        }


        private int openedFrom;

        private string CallerCustomerName;

        public frmBooking2(int openFrom)
        {
            InitializeComponent();

            this.openedFrom = openFrom;


            InitializeConstructor();
        }


        public string CustomerPermanentNotes = string.Empty;

        public frmBooking2(string name, string phone, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();
            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;

            }

            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }


            //else
            //{
            if (AccountId.ToInt() > 0)
            {
                IsDisplayingRecord = true;
                chkIsCompanyRates.Checked = true;
                ddlCompany.SelectedValue = AccountId;

                IsDisplayingRecord = false;

            }
            //    }


            //      SetAccountByCustomer();



            PickCustomerCreditCardNo(name, phone);

        }

        public frmBooking2(string name, string phone, string doorNo, string address, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();
            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;
            }
            else
            {
                if (AccountId.ToInt() > 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;

                }

            }
            //  btnSearch.Visible = false;

            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }

            txtFromFlightDoorNo.Text = doorNo;
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = address;
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            SetPickupZone(address.ToStr().ToUpper().Trim());


            //  SetAccountByCustomer();

            PickCustomerCreditCardNo(name, phone);

        }



        public frmBooking2(string name, string phone, string mobileNo, string doorNo, string address, string email, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();


            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;
            }
            else
            {
                if (AccountId.ToInt() > 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;
                }
            }

            txtCustomerPhoneNo.Text = phone;
            txtCustomerMobileNo.Text = mobileNo;
            txtEmail.Text = email;

            txtFromFlightDoorNo.Text = doorNo;
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = address;
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        }

        public frmBooking2(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                          int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, string doorNo)
        {



            InitializeComponent();
            InitializeConstructor();

            txtFromFlightDoorNo.Text = doorNo;
            PickBooking(name, phone, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);

            btnSearch.Visible = false;


            PickCustomerCreditCardNo(name, phone);
        }


        private bool IsExistingCustomer = false;
        public frmBooking2(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                    int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, string fromDoorNo, string toDoorNo, string email, int? companyId, bool IsAccountCall)
        {



            InitializeComponent();
            InitializeConstructor();
            IsDisplayingRecord = true;

            txtFromFlightDoorNo.Text = fromDoorNo.ToStr().Trim();
            txtToFlightDoorNo.Text = toDoorNo.ToStr().Trim();

            txtEmail.Text = email;

            this.IsAccountCalled = IsAccountCall;

            if (companyId.ToInt() > 0)
            {
                chkIsCompanyRates.Checked = true;
                ddlCompany.SelectedValue = companyId;
                numCompanyFares.Value = fare;
            }

            PickBooking(name, phone, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);

            btnSearch.Visible = false;

            PickCustomerCreditCardNo(name, phone);
            IsDisplayingRecord = false;

            if (name.ToStr().Trim().Length > 0)
            {
                IsExistingCustomer = true;
                CallerCustomerName = name.ToStr();

            }
        }


        private void PickCustomerCreditCardNo(string name, string phoneNo)
        {

            //if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 2)
            //{

            //    try
            //    {
            //        txtCustomerCreditCardNo.Text = General.GetObject<Customer>(c => c.Name.ToLower() == name.ToLower() && (c.MobileNo == phoneNo || c.TelephoneNo == phoneNo)).DefaultIfEmpty().CreditCardDetails.ToStr().Trim();

            //    }
            //    catch
            //    {


            //    }
            //}


        }


        private void PickBooking(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                          int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse)
        {


            name = name.ToProperCase();


            if (IsAccountCalled == false)
            {

                ddlCustomerName.Text = name;

            }


            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }

            if (IsReverse)
            {
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;
                toLocTypeId = toLocTypeId ^ fromLocTypeId;
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;

                if (fromLocId != null && toLocId != null)
                {

                    fromLocId = fromLocId ^ toLocId;
                    toLocId = toLocId ^ fromLocId;
                    fromLocId = fromLocId ^ toLocId;
                }

                if (fromLocId == null)
                    fromLocId = toLocId;

                if (toLocId == null)
                    toLocId = fromLocId;

                string tempAddress = fromAddress;
                fromAddress = toAddress;
                toAddress = tempAddress;



            }

            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            SetPickupZone(txtFromAddress.Text);
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //}

            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //  txtFromPostCode.Text = fromAddress;
            //}
            //else
            //{
            //  DetachLocationsSelectionEvent(ddlFromLocation);
            //  ddlFromLocation.SelectedValue = fromLocId;
            //  AttachLocationSelectionEvent(ddlFromLocation);
            //  }


            //if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(txtToAddress.Text);
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //}
            //else if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //    txtToPostCode.Text = toAddress;
            //}
            //else
            //{
            //    DetachLocationsSelectionEvent(ddlToLocation);
            //    ddlToLocation.SelectedValue = toLocId;
            //    AttachLocationSelectionEvent(ddlToLocation);
            //}




            numFareRate.Value = fare;




            ddlCustomerName.Focus();


        }



        private void PickBookingComplete(string name, string phone, string mobileNo, int? fromLocTypeId, int? toLocTypeId,
                         int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, int? bookingTypeId, string email)
        {
            OnPickDetails(name, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);

            txtCustomerPhoneNo.Text = phone;
            txtCustomerMobileNo.Text = mobileNo;
            txtEmail.Text = email.ToStr().Trim();

            ddlBookingType.SelectedValue = bookingTypeId;


            PickCustomerCreditCardNo(name, phone);

        }

        private void OnPickDetails(string name, int? fromLocTypeId, int? toLocTypeId,
                         int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse)
        {
            name = name.ToProperCase();
            ddlCustomerName.Text = name;

            if (IsReverse)
            {
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;
                toLocTypeId = toLocTypeId ^ fromLocTypeId;
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;

                if (fromLocId != null && toLocId != null)
                {

                    fromLocId = fromLocId ^ toLocId;
                    toLocId = toLocId ^ fromLocId;
                    fromLocId = fromLocId ^ toLocId;
                }

                if (fromLocId == null)
                    fromLocId = toLocId;

                if (toLocId == null)
                    toLocId = fromLocId;

                string tempAddress = fromAddress;
                fromAddress = toAddress;
                toAddress = tempAddress;
            }

            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            SetPickupZone(txtFromAddress.Text);
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //}
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            //{
            //    DetachLocationsSelectionEvent(ddlFromLocation);

            //    ddlFromLocation.SelectedValue = fromLocId;
            //    SetPickupZone(ddlFromLocation.Text);
            //    AttachLocationSelectionEvent(ddlFromLocation);
            //}
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //    txtFromPostCode.Text = fromAddress;
            //}
            //else
            //{
            //    ddlFromLocation.SelectedValue = fromLocId;
            //}


            //if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(txtToAddress.Text);
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //  }
            //else if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //    txtToPostCode.Text = toAddress;
            //}
            //else
            //{
            //    DetachLocationsSelectionEvent(ddlToLocation);
            //    ddlToLocation.SelectedValue = toLocId;
            //    SetDropOffZone(ddlToLocation.Text);
            //    AttachLocationSelectionEvent(ddlToLocation);
            //}


            numFareRate.Value = fare;
            ddlCustomerName.Focus();


        }



        private void InitializeConstructor()
        {



            try
            {



                //  numFareRate.Controls[0].Hide();
                //  numParkingChrgs.Controls[0].Visible = false;
                ////  numWaitingChrgs.Controls[0].Visible = false;
                //  numMeetCharges.Controls[0].Visible = false;
                //  numCongChrgs.Controls[0].Visible = false;

                //  numDrvWaitingMins.Controls[0].Visible = false;



                ddlVehicleType.KeyDown += new KeyEventHandler(ddlVehicleType_KeyDown);
                btnMultiVehicle.Click += new EventHandler(btnMultiVehicle_Click);
                ddlCustomerName.KeyDown += new KeyEventHandler(ddlCustomerName_KeyDown);
                ddlCustomerName.Validated += new EventHandler(ddlCustomerName_Validated);
                txtCustomerMobileNo.KeyDown += new KeyEventHandler(txtCustomerMobileNo_KeyDown);
                txtCustomerPhoneNo.KeyDown += new KeyEventHandler(txtCustomerPhoneNo_KeyDown);
                btnCustomerLister.Click += new EventHandler(btnCustomerLister_Click);

                btn_notes.Click += new EventHandler(btn_notes_Click);
                dtpPickupDate.KeyDown += new KeyEventHandler(dtpPickupDate_KeyDown);
                // dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupDate_KeyPress);


                ddlPickupPlot.KeyDown += new KeyEventHandler(ddlPickupPlot_KeyDown);
                ddlDropOffPlot.KeyDown += new KeyEventHandler(ddlDropOffPlot_KeyDown);






                dtpPickupTime.Enter += new EventHandler(dtpPickupTime_Enter);
                dtpPickupTime.Leave += new EventHandler(dtpPickupTime_Leave);
                //fwdkh3
                txtEmail.Enter += new EventHandler(txtEmail_Enter);
                //   dtpPickupTime.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
                dtpPickupTime.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
                dtpPickupTime.DateTimePickerElement.KeyDown += DtpPickupTime_KeyDown;

                dtpPickupTime.Validated += new EventHandler(dtpPickupTime_Validated);





                ddlDriver.GotFocus += new EventHandler(ddlDriver_GotFocus);
                ddlDriver.KeyDown += new KeyEventHandler(ddlDriver_KeyDown);
                ddlDriver.SelectedIndexChanged += DdlDriver_SelectedIndexChanged; // new EventHandler(ddlDriver_SelectedIndexChanged);


                //   opt_one.Checked = true;

                chkIsCompanyRates.CheckedChanged += new EventHandler(chkIsCompanyRates_CheckedChanged);
                ddlCompany.KeyDown += new KeyEventHandler(ddlCompany_KeyDown);



                btnSms.Click += new EventHandler(btnSms_Click);



                //    chkAutoDespatch.ToggleStateChanging += new StateChangingEventHandler(chkAutoDespatch_ToggleStateChanging);//comment // leave it

                txtSpecialRequirements.KeyDown += new KeyEventHandler(txtSpecialRequirements_KeyDown);
                btnSaveNew.Click += new EventHandler(btnSaveNew_Click);
                btnCancelBooking.Click += new EventHandler(btnCancelBooking_Click);
                btnExitForm.Click += new EventHandler(btnExitForm_Click);



                //ddlPaymentType.SelectedValueChanged += new EventHandler(ddlPaymentType_SelectedValueChanged);
                btnPayment.Click += new EventHandler(btnPayment_Click);


                chkIsCommissionWise.CheckStateChanged += new EventHandler(chkIsCommissionWise_ToggleStateChanged);
                //  ddlCommissionType.SelectedIndexChanged += new EventHandler(ddlCommissionType_SelectedIndexChanged);
                ddlCommissionType.SelectedIndexChanged += DdlCommissionType_SelectedIndexChanged;
                btnPickFares.Click += new EventHandler(btnPickFares_Click);

                numFareRate.KeyDown += new KeyEventHandler(numFareRate_KeyDown);

                numFareRate.Validated += new EventHandler(numFareRate_Validated);
                numParkingChrgs.Validated += new EventHandler(numFareRate_Validated);
                numWaitingChrgs.Validated += new EventHandler(numFareRate_Validated);
                numMeetCharges.Validated += new EventHandler(numFareRate_Validated);
                numCongChrgs.Validated += new EventHandler(numFareRate_Validated);
                numExtraChrgs.Validated += new EventHandler(numFareRate_Validated);

                btnDetailMap.Click += new EventHandler(btnDetailMap_Click);




                //RadTextBoxItem TotalPass = ((RadSpinElement)num_TotalPassengers.RootElement.Children[0]).TextBoxItem;
                num_TotalPassengers.KeyDown += new KeyEventHandler(child_KeyDown);

                //RadTextBoxItem totalLugg = ((RadSpinElement)numTotalLuggages.RootElement.Children[0]).TextBoxItem;
                numTotalLuggages.KeyDown += new KeyEventHandler(totalLugg_KeyDown);

                numFareRate.KeyDown += new KeyEventHandler(TextBoxItem_KeyDown);

                //till

                txtEmail.KeyDown += new KeyEventHandler(txtEmail_KeyDown);

                this.Load += new EventHandler(frmBooking_Load);
                this.FormClosed += new FormClosedEventHandler(frmBooking_FormClosed);
                this.Shown += new EventHandler(frmBooking_Shown);

                btnCancelBooking.Enabled = false;


                this.OldfromDoorNoLoc = txtFromFlightDoorNo.Location;
                this.NewFromDoorNoLoc = new Point(txtFromFlightDoorNo.Location.X, txtFromFlightDoorNo.Location.Y - 85);

                this.OldtoDoorNoLoc = txtToFlightDoorNo.Location;
                this.NewtoDoorNoLoc = new Point(txtToFlightDoorNo.Location.X, txtToFlightDoorNo.Location.Y - 85);

                //needtouncomment

                this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                txtFromAddress.KeyDown += new KeyEventHandler(TextBoxFromAddressElement_KeyDown);





                txtFromAddress.ListBoxElement.Width = 610;
                txtFromAddress.ListBoxElement.Height = 400;
                txtToAddress.ListBoxElement.Width = 610;


                Font font = new Font("Tahoma", 10.5f, FontStyle.Bold);
                txtFromAddress.ListBoxElement.Font = font;
                txtToAddress.ListBoxElement.Font = font;

                txtFromAddress.ListBoxElement.ItemHeight = 30;
                txtToAddress.ListBoxElement.ItemHeight = 30;

                //2needtouncomment
                txtFromAddress.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                txtFromAddress.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);

                txtToAddress.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                txtToAddress.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);


                txtToAddress.KeyDown += new KeyEventHandler(TextBoxElement_KeyDown);


                //  txtToAddress.TextBoxElement.KeyDown

                if (txtReturnFrom != null)
                {
                    txtReturnFrom.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                    txtReturnFrom.ListBoxElement.Width = 610;
                    txtReturnFrom.ListBoxElement.Height = 400;
                    txtReturnFrom.ListBoxElement.Font = font;

                    txtReturnFrom.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                    txtReturnFrom.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);
                    txtReturnFrom.ListBoxElement.ItemHeight = 30;
                }

                if (txtReturnTo != null)
                {
                    txtReturnTo.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    txtReturnTo.ListBoxElement.Width = 610;
                    txtReturnTo.ListBoxElement.Height = 400;
                    txtReturnTo.ListBoxElement.Font = font;

                    txtReturnTo.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                    txtReturnTo.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);
                    txtReturnTo.ListBoxElement.ItemHeight = 30;
                }


                if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {


                    txtFromAddress.Leave += new EventHandler(txtFromAddress_Leave);
                    txtToAddress.Leave += new EventHandler(txtFromAddress_Leave);


                    // txtToAddress.Validated += new EventHandler(txtToAddress_Validated);
                }





                objMaster = new BookingBO();
                // this.SetProperties((INavigation)objMaster);// need to uncomment again

                FillCombos();

                pnlOtherCharges.Visible = AppVars.objPolicyConfiguration.EnableBookingOtherCharges.ToBool();




                OnNew();

                ddlVehicleType.SelectedValueChanged += new EventHandler(ddlVehicleType_SelectedValueChanged);

                ddlPaymentType.SelectedValueChanged += new EventHandler(ddlPaymentType_SelectedValueChanged);

                ddlBookingType.SelectedIndexChanged += new EventHandler(ddlBookingType_SelectedIndexChanged);

                SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());

                EnablePOI = AppVars.objPolicyConfiguration.EnablePOI.ToBool();


                SetDefaultCommission();

                //if (!AppVars.objPolicyConfiguration.EnablePDA.ToBool())
                //{
                //  btnNearestDrv.Visible = false;
                btnViewMapReport.Visible = false;

                //  }


                MapType = AppVars.objPolicyConfiguration.MapType.ToInt();
                chkAutoDespatch.Enabled = AppVars.objPolicyConfiguration.EnablePDA.ToBool() ? true : false;


                if (chkAutoDespatch.Enabled)
                {
                    //   lblPickupPlot.Visible = true;
                    //  lblDropOffPlot.Visible = true;
                }



                chkIsCommissionWise.Enabled = !AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool();


                if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
                {
                    chkIsCommissionWise.Visible = false;
                    ddlCommissionType.Visible = false;
                    numDriverCommission.Visible = false;


                }


                //  chkSecondaryPaymentType.ToggleStateChanged += new StateChangedEventHandler(chkSecondaryPaymentType_ToggleStateChanged);//comment


                numDrvWaitingMins.ValueChanged += new EventHandler(NumDrvWaitingMins_ValueChanged);


                btnDespatchView.Visible = !AppVars.objPolicyConfiguration.EnableOfflineDistance.ToBool();



                if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "E.E-Car" || AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "local")
                {

                    InitializeAccountBookedBy(true, null);
                }





                //  AppVars.objPolicyConfiguration.

                // Booking Fees Work
                if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
                {
                    pnlBookingFees.Visible = true;
                    numBookingFee.Visible = true;
                }



                if (AppVars.objPolicyConfiguration.EnableBiddingForChauffers.ToBool())
                {
                    numTotalChrgs.ValueChanged += new EventHandler(numTotalChrgs_ValueChanged);

                }



                //if (AppVars.objPolicyConfiguration.UseMultipleSMSGateways.ToBool())
                //{

                //    optSMSGsm.Visible = true;
                //    optSMSThirdParty.Visible = true;

                //    btnSms.Location = new Point(92, 46);
                //    btnSms.Size = new Size(73, 38);


                //}

                txtFromFlightDoorNo.KeyDown += new KeyEventHandler(txtFromFlightDoorNo_KeyDown);
                txtFromStreetComing.KeyDown += new KeyEventHandler(txtFromStreetComing_KeyDown);

                btnAttributes.Click += btnAttributes_Click;
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void DtpPickupTime_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                dtpPickupTime.Tag = null;
                FocusOnPickupDate();
                //fwdkh3  FocusOnSpecialRequirement();
            }
            else if (e.KeyCode == Keys.Insert || e.KeyCode == Keys.ShiftKey)
            {
                FocusOnPickupDate();
            }


            else
                dtpPickupTime.Tag = null;


        }

        private void DdlDriver_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            int? driverId = ddlDriver.SelectedValue.ToIntorNull();
            if (objMaster != null && objMaster.PrimaryKeyValue == null && driverId != null && chkAutoDespatch.Checked == false)
            {
                btnSaveNew.Text = "Save and Dispatch";

            }
            else
            {
                btnSaveNew.Text = "Save Booking    (HOME)";
            }


        }

        private void DdlCommissionType_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddlCommissionType.SelectedValue.ToStr().Trim() == "Percent")
            {
                numDriverCommission.DecimalPlaces = 0;
                numDriverCommission.Maximum = 100;
                SetDefaultCommission();
            }
            else
            {
                numDriverCommission.DecimalPlaces = 2;
                numDriverCommission.Maximum = 99999999;
                SetDefaultCommissionAmount();
            }
        }

        void txtEmail_Enter(object sender, EventArgs e)
        {
            /// ddlVehicleType.Focus();
        }


        DateTime? lastPickupTime = null;
        void dtpPickupTime_Enter(object sender, EventArgs e)
        {
            lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();


        }

        void numFareRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnSpecialRequirement();

            }
            if (e.KeyCode == Keys.Insert)
            {
                FocusOnSpecialRequirement();

            }
            //if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnVehicle();
            //}
        }

        void numTotalChrgs_ValueChanged(object sender, EventArgs e)
        {

            if (numTotalChrgs.Value >= AppVars.objPolicyConfiguration.FromBidPriceLimit.ToDecimal() && numTotalChrgs.Value <= AppVars.objPolicyConfiguration.TillBidPriceLimit.ToDecimal())
            {

                if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                {

                    chkBidding.Checked = true;
                }

            }

        }




        void SpinElement_ValueChanging(object sender, ValueChangingEventArgs e)
        {
            GetFareByJourneyTime(e.NewValue.ToDecimal());
        }



        void NumDrvWaitingMins_ValueChanged(object sender, EventArgs e)
        {
            if (IsDisplayingRecord)
                return;

            if (ddlVehicleType.SelectedValue != null)
            {

                try
                {
                    decimal val = numDrvWaitingMins.Value;


                    if (val == 0)
                    {
                        numMeetCharges.Value = 0.00m;

                        if (ddlCompany.SelectedValue != null && numWaitingChrgs.Enabled)
                        {

                            numWaitingChrgs.Value = 0.00m;
                        }

                        CalculateTotalCharges();

                    }
                    else
                    {

                        var objVehicle = General.GetObject<Fleet_VehicleType>(c => c.Id == ddlVehicleType.SelectedValue.ToInt());

                        if (objVehicle != null)
                        {
                            numMeetCharges.Value = Math.Round(((val * objVehicle.DriverWaitingChargesPerHour.ToDecimal())), 1);



                            if (ddlCompany.SelectedValue != null && numWaitingChrgs.Enabled)
                            {

                                numWaitingChrgs.Value = Math.Round(((val * objVehicle.AccountWaitingChargesPerHour.ToDecimal())), 1);


                            }

                            CalculateTotalCharges();

                        }

                    }

                }
                catch
                {


                }


            }
        }



        void ddlVehicleType_SelectedValueChanged(object sender, EventArgs e)
        {
            if (ddlVehicleType.SelectedValue != null)
            {


                PickVehicleDetails();


                UpdateAutoCalculateFares();
            }
        }


        private void PickVehicleDetails()
        {

            if (AppVars.objPolicyConfiguration.PickVehicleDetailsOnBooking.ToBool())
            {

                var objVeh = General.GetObject<Fleet_VehicleType>(c => c.Id == ddlVehicleType.SelectedValue.ToInt());

                if (objVeh != null)
                {
                    num_TotalPassengers.Value = objVeh.NoofPassengers.ToDecimal();
                    numTotalLuggages.Value = objVeh.NoofLuggages.ToDecimal();

                }
            }

        }



        void txtEmail_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left)
            {

                numTotalLuggages.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                // FocusOnMobNo();
                FocusOnMobNo();

            }
            else if (e.KeyCode == Keys.Down)
            {
                //FocusOnPickupDate();
                FocusOnVehicle();

            }
            else if (e.KeyCode == Keys.Enter)
            {
                FocusOnVehicle();

            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnMobNo();

            //}


        }

        void TextBoxFromAddressElement_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.Up)
            //{
            //    if (txtToAddress.SelectionStart <= 18)
            //        SendKeys.Send("{TAB}");
            //}
            if (e.KeyCode == Keys.Down)
            {


                if (txtFromAddress.SelectionStart + 18 > txtToAddress.TextLength && txtFromAddress.ListBoxElement.Visible == false)
                {


                    //    FocusOnToAddress();
                    // SendKeys.Send("{Enter}");
                    // SendKeys.Send("{Enter}");


                    //SendKeys.Send("{Down}");
                    // SendKeys.Send("{Down}");

                }
            }
            //if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnPickupDate();
            //}


        }

        void TextBoxElement_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                if (txtToAddress.SelectionStart <= 18 && txtToAddress.ListBoxElement.Visible == false)
                {
                    e.SuppressKeyPress = true;
                    FocusOnFromAddress();
                }
                //    SendKeys.Send("{TAB}");
            }
            else if (e.KeyCode == Keys.Down)
            {


                if (txtToAddress.SelectionStart + 18 > txtToAddress.TextLength && txtToAddress.ListBoxElement.Visible == false)
                {
                    // // if (txtToAddress.Text.Length == 0)
                    ////  {

                    //  //    FocusOnCustomer();

                    //  //    SendKeys.Send("{TAB}");

                    //  SendKeys.Send("{Enter}");
                    ////fwdkh3   SendKeys.Send("{Enter}");
                }
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnFromAddress();

            //}


        }

        void chkSecondaryPaymentType_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            if (args.ToggleState == ToggleState.On)
                numCashPaymentFares.Enabled = true;
            else
            {
                numCashPaymentFares.Value = 0.00m;
                numCashPaymentFares.Enabled = false;
            }
        }



        void dtpPickupDate_Leave(object sender, EventArgs e)
        {
            dtpPickupDate.Tag = null;
            SetReturnPickupDate();



            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true || HasFareIncrementCharges)
            {

                try
                {

                    if (lastPickupDate == null || lastPickupDate != dtpPickupDate.DateTimePickerElement.Value.ToDate())
                    {

                        UpdateAutoCalculateFares();
                    }
                }
                catch
                {


                }
            }
            //fwdkh3
            //  FocusOnFromAddress();
        }

        private void SetReturnPickupDate()
        {
            try
            {

                if (opt_return.Checked && dtpReturnPickupDate != null && dtpPickupDate.Value.ToDate() > dtpReturnPickupDate.Value.ToDate())
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();

                }
            }
            catch
            {

            }


        }

        void ddlBookingType_SelectedIndexChanged(object sender, EventArgs e)
        {

            SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());




        }


        private void SetBookingTypeDetails(int bookingtypeId)
        {

            ShowGroupJobPanel(false, ddlToLocType.SelectedValue.ToInt());
            SetPaymentFooterLabel("Payment && Charges Details");
            SetDefaultSettings();

        }


        private void SetDefaultSettings()
        {

            if (!dtpPickupDate.Enabled)
            {

                dtpPickupDate.Enabled = true;

                ////  lblPickupTime.Location = new Point(411, 40);//(594, 335);
                // dtpPickupTime.Location = new Point(507, 37);//(641, 334);
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);

                lblPickupTime.Text = "Pickup Time";

                //   btnSelectVia.Location = new Point(800, 129);
                //   btn_notes.Location = new Point(749, 282);

            }
        }

        private void SetPaymentFooterLabel(string heading)
        {
            try
            {
                //   lblPaymentHeading.Text = heading;


                if (heading == "Payment && Charges Details")
                {
                    pnlPaymentMode.Visible = true;
                    pnlOtherCharges.Visible = true;
                    pnlOtherCharges.BringToFront();



                }
                else
                {
                    pnlOtherCharges.SendToBack();



                    pnlPaymentMode.Visible = false;
                    pnlOtherCharges.Visible = false;
                }

            }
            catch (Exception ex)
            {

            }
        }






        private void ShowGroupJobRoomAndFlightDetails(bool canShow, int locTypeId)
        {






            if (canShow == true)
            {




                if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
                {
                    canShow = true;

                }
                else if (locTypeId == Enums.LOCATION_TYPES.HOTELS)
                {
                    canShow = false;


                }

            }



            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {
                dtpPickupDate.Enabled = false;
                //  lblPickupTime.Location = new Point(411, 40);//(764, 149);
                // dtpPickupTime.Location = new Point(507, 37);//(853, 148);
                lblPickupTime.Text = "Pickup Time";
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
            }
            else
            {
                dtpPickupDate.Enabled = true;

                // lblPickupTime.Location = new Point(411, 40);//(600, 337);
                // dtpPickupTime.Location = new Point(507, 37);//(641, 334);
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 11, FontStyle.Bold);

                lblPickupTime.Text = "Pickup Time";

            }










        }

        private void ShowGroupJobPanel(bool canShow, int locTypeId)
        {

            //if (this.btnClearGroup == null)
            //    return;


            //this.btnClearGroup.Visible = canShow;
            //this.btnAddGroup.Visible = canShow;

            //this.btnViewGroup.Visible = canShow;

            //this.lblPickGroup.Visible = canShow;
            //this.txtGroupJobNo.Visible = canShow;
            //this.txtGroupJobNo.Text = string.Empty;
            //this.txtGroupJobNo.Tag = null;



            if (canShow)
            {
                //    btnSelectVia.Location = new Point(749, 280);
                //   btn_notes.Location = new Point(btn_notes.Location.X, 350);

            }


            ShowGroupJobRoomAndFlightDetails(canShow, locTypeId);

        }






        void txtFromAddress_Leave(object sender, EventArgs e)
        {
            try
            {
                string temp = "";
                if (sender is UIX.AutoCompleteTextBox)
                {


                    string postcode = string.Empty;



                    var item = (sender as UIX.AutoCompleteTextBox);

                    postcode = General.GetPostCodeMatch((sender as UIX.AutoCompleteTextBox).Text.Trim());

                    if (postcode.ToStr().Length > 0 && postcode.Contains(" "))
                    {
                        string tag = (sender as UIX.AutoCompleteTextBox).Tag.ToStr();



                        (sender as UIX.AutoCompleteTextBox).Tag = null;
                        temp = item.Name;
                    }
                    else
                    {
                        if (item.Text.Length > 0 && item.Text.Contains(" ") && item.Text.ToStr().Replace(" ", "").Trim().IsAlpha())
                        {

                            if (item.Name == "txtFromAddress")
                            {
                                ddlPickupPlot.SelectedValue = 0;
                                // SetPickupZone(box.Text.Trim());

                            }
                            else if (item.Name == "txtToAddress")
                            {

                                ddlDropOffPlot.SelectedValue = 0;

                                //   SetDropOffZone(box.Text.Trim());

                            }


                            UpdateAutoCalculateFares();



                        }
                        temp = item.Name;



                    }




                }
                else
                {

                    UpdateAutoCalculateFares();

                }

            }
            catch
            {


            }
        }













        private bool IsF4 = false;
        private void UpdateAutoCalculateFares()
        {





            if (IsF4 == false && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool() == false)
            {


                return;


            }

            if (objMaster.PrimaryKeyValue != null)
                return;

            if (IsDisplayingRecord || (ddlCompany != null && ddlCompany.Tag.ToBool()))
                return;

            if (IsAllowUpdating == false)
                return;

            try
            {


                int fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int toLocTypeId = ddlToLocType.SelectedValue.ToInt();
                bool isOk = false;

                if ((
                     !string.IsNullOrEmpty(txtFromAddress.Text.Trim()))

                    &&

                    (
                     !string.IsNullOrEmpty(txtToAddress.Text.Trim())))
                {

                    isOk = true;
                }





                if (isOk)
                {

                    if (AppVars.keyLocations.Count(c => c.ToStr().Trim().ToLower() == txtFromAddress.Text.Trim().ToLower()) == 0
                        &&
                        AppVars.keyLocations.Count(c => c.ToStr().Trim().ToLower() == txtToAddress.Text.Trim().ToLower()) == 0
                        )
                    {


                        if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtToAddress.Text.ToStr().Trim().ToLower() == "as directed"
                            && numJourneyTime != null)
                        {

                            GetFareByJourneyTime(numJourneyTime.Value);
                        }
                        else
                        {

                            //InitializeAutoCalculateFaresWorker();

                            //object[] objarr = new object[10];
                            //objarr[0] =General.GetPostCodeMatch(txtFromAddress.Text);
                            //objarr[1] = General.GetPostCodeMatch(txtToAddress.Text);

                            //worker_autocalculatefares.RunWorkerAsync(objarr);
                            // CalculateAutoFareUI();

                            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool())
                            {

                                CalculateAutoFareUI();
                            }
                            else
                            {
                                // CalculateAutoFareUI();

                                Thread th = new System.Threading.Thread(new ThreadStart(CalculateAutoFareUI));

                                th.Priority = ThreadPriority.Highest;
                                th.Start();
                            }
                        }
                    }



                }




            }
            catch
            {


            }

        }

        //private BackgroundWorker worker_autocalculatefares;


        //private void InitializeAutoCalculateFaresWorker()
        //{
        //    if (worker_autocalculatefares == null)
        //    {
        //        worker_autocalculatefares = new BackgroundWorker();
        //        worker_autocalculatefares.DoWork += new DoWorkEventHandler(worker_autocalculatefares_DoWork);
        //        worker_autocalculatefares.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_autocalculatefares_RunWorkerCompleted);
        //        worker_autocalculatefares.WorkerSupportsCancellation = true;
        //    }
        //}

        //void worker_autocalculatefares_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        //{
        //    lblMap.Text = "miles : " + e.Result.ToDecimal();
        //}

        //void worker_autocalculatefares_DoWork(object sender, DoWorkEventArgs e)
        //{
        //    object[] obj = (object[])e.Argument;


        //     e.Result=  General.CalculateDistance(obj[0].ToStr(), obj[1].ToStr());


        //}

        private void CalculateAutoFareUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIDelegate(CalculateTotalFares));
            }
            else
            {
                CalculateTotalFares();
            }

        }


        private void CalculateAutoFares()
        {
            try
            {
                if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {

                    if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool())
                    {

                        CalculateAutoFareUI();
                    }
                    else
                    {

                        Thread th = new System.Threading.Thread(new ThreadStart(CalculateAutoFareUI));
                        th.IsBackground = true;
                        th.Start();
                    }
                }
            }
            catch (Exception ex)
            {

            }

        }

        void ddlPlot_TextChanged(object sender, EventArgs e)
        {

            ComboBox cboPlot = (ComboBox)sender;

            if (cboPlot.Text.Length > 0 && cboPlot.Text[0].ToStr().IsAlpha())
            {
                try
                {

                    Object item = cboPlot.Items.Cast<Object>().FirstOrDefault(c => c.ToStr().ToUpper().Substring(c.ToStr().IndexOf('.') + 1).Trim().StartsWith(cboPlot.Text.ToUpper()));

                    if (item != null)
                    {

                        string oldText = cboPlot.Text[0].ToStr();

                        cboPlot.BeginUpdate();

                        cboPlot.Text = item.ToStr().Substring((item.ToStr().IndexOf("ZoneName = ") + 10)).Trim().Replace("}", "").Trim().ToStr();
                        cboPlot.SelectedItem = item;
                        cboPlot.SelectionStart = cboPlot.Text.IndexOf('.') + 1;
                        cboPlot.SelectionLength = cboPlot.Text.Length + (cboPlot.Text.IndexOf('.') - 1);

                        cboPlot.EndUpdate();
                        cboPlot.Refresh();

                    }
                }
                catch
                {

                }

            }

        }


        private void ddlPickupPlot_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                    FocusOnToAddress();
                else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                    FocusOnToPostCode();


            }
        }

        private void ddlDropOffPlot_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnCustomer();

            }
        }

        void ddlDriver_GotFocus(object sender, EventArgs e)
        {
            FillDriversCombo();
        }

        private void FillDriversCombo()
        {
            if (ddlDriver.DataSource == null)
            {

                ComboFunctions.FillDriverNoQueueCombo(ddlDriver);
                ddlDriver.GotFocus -= new EventHandler(ddlDriver_GotFocus);

            }
        }


        void dtpPickupTime_Leave(object sender, EventArgs e)
        {
            dtpPickupTime.Tag = null;
            i = 0;

            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true || HasFareIncrementCharges)
            {
                //comment
                try
                {
                    if (lastPickupTime == null || lastPickupTime != dtpPickupTime.Value.ToDateTime())
                    {

                        UpdateAutoCalculateFares();

                        if (grdPickupDateTime != null && grdPickupDateTime.Rows.Count > 0)
                        {

                            this.radPageView1.SelectedTab = this.tabCurrentBooking;
                        }
                    }
                }
                catch
                {


                }
            }


            //fwdkh3
            // dtpPickupDate.Focus();


        }


        private string[] priorityPostCodes = null;

        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
        {

            if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
            {
                e.Graphics.FillRectangle(Brushes.CornflowerBlue, e.Bounds);
            }
            else
            {

                if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Length == 0)
                {

                    e.Graphics.FillRectangle(Brushes.White, e.Bounds);

                }

                else
                {


                    if (priorityPostCodes == null)
                    {
                        priorityPostCodes = AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Split(new char[] { ',' });
                    }


                    if (AppVars.zonesList.Count(c => ((sender as ListBox).Items[e.Index].ToString()).Contains(c)) > 0)
                    {

                        if (priorityPostCodes != null && priorityPostCodes.Count(c => GeneralBLL.GetHalfPostCodeMatch((sender as ListBox).Items[e.Index].ToString()) == c) > 0)
                        {
                            e.Graphics.FillRectangle(Brushes.White, e.Bounds);


                        }
                        else
                            e.Graphics.FillRectangle(Brushes.LightPink, e.Bounds);


                    }


                    else
                    {
                        e.Graphics.FillRectangle(Brushes.Red, e.Bounds);
                    }
                }
            }

            // Draw a rectangle in blue around each item.
            e.Graphics.DrawRectangle(Pens.Blue, e.Bounds);

            // Draw the text in the item.
            e.Graphics.DrawString((sender as ListBox).Items[e.Index].ToString(),
                e.Font, Brushes.Black, e.Bounds.X, e.Bounds.Y);

            // Draw the focus rectangle around the selected item.
            e.DrawFocusRectangle();
        }




        private void LoadPostCodes()
        {


            //try
            //{

            //    //if (txtFromPostCode.AutoCompleteCustomSource.Count > 0 && txtToPostCode.AutoCompleteCustomSource.Count > 0
            //    //    &&  (txtviaPostCode==null || txtviaPostCode.AutoCompleteCustomSource.Count > 0))
            //    //    return;




            //    //var postcodes = (from a in AppVars.listOfAddress

            //    //                 select a.PostalCode
            //    //                      ).Distinct().ToArray<string>();


            //    //txtFromPostCode.AutoCompleteCustomSource.Clear();
            //    //txtFromPostCode.AutoCompleteCustomSource.AddRange(postcodes);

            //    //txtToPostCode.AutoCompleteCustomSource.Clear();
            //    //txtToPostCode.AutoCompleteCustomSource.AddRange(postcodes);
            //}
            //catch (Exception ex)
            //{


            //}
        }




        private void SetDefaultCommission()
        {

            numDriverCommission.Value = AppVars.objPolicyConfiguration.DriverCommissionPerBooking.ToDecimal();
            ddlCommissionType.SelectedItem = ddlCommissionType.Items[0];
        }

        string[] res = null;
        string searchTxt = "";
        //  bool IsPOI = false;


        private void InitializeTimer()
        {
            if (this.timer1 == null)
            {
                this.timer1 = new System.Windows.Forms.Timer();
                this.timer1.Tick += timer1_Tick;
                this.timer1.Interval = 100;
            }

        }







        private bool IsOnClosed = false;

        void frmBooking_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {
                IsOnClosed = true;
                //   CancelPing();
                // this.WindowState = FormWindowState.Minimized;
                this.Visible = false;
                if (saved && (frm == null || (frm != null && frm.SuccessDespatched == false)))
                {

                    if ((objMaster.PrimaryKeyValue == null)
                        || (objMaster.PrimaryKeyValue != null && objMaster.Current != null && objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING))
                    {



                        if (objMaster.Current.IsQuotation.ToBool() || WasQuotiation)
                        {
                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ONLY_DASHBOARD);

                        }
                        else
                        {

                            //int days = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() / 24;

                            //if (objMaster.Current != null && objMaster.Current.PickupDateTime <= DateTime.Now.AddDays(days))
                            //{

                            //    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                            //}
                            //else
                            //{

                            //    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                            //}

                            //   int days = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() / 24;


                            if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() == 0 && objMaster.Current != null && objMaster.Current.PickupDateTime.ToDate() <= DateTime.Now.ToDate())
                            {

                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                {

                                    if (OldPickupDateTime == null || (OldPickupDateTime > objMaster.Current.PickupDateTime && OldPickupDateTime <= DateTime.Now.ToDate()))
                                    {

                                        //    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);

                                    }
                                    else
                                    {
                                        //  new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);


                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                                    }
                                }
                                else
                                {

                                    //  new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                }
                            }

                            else if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() > 0 && objMaster.Current != null && objMaster.Current.PickupDateTime <= DateTime.Now.AddHours(AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt()))
                            {
                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                {

                                    if (OldPickupDateTime == null || (OldPickupDateTime > objMaster.Current.PickupDateTime && OldPickupDateTime <= DateTime.Now.AddHours(AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt())))
                                    {

                                        // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                    }
                                    else
                                    {
                                        // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                    }
                                }
                                else
                                {

                                    // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                }




                            }
                            else
                            {

                                // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                            }



                            //  CheckBiddingNotification();

                        }


                    }
                    else
                    {

                        if (this.openedFrom == 0)
                        {

                            // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DASHBOARD);
                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_DASHBOARD);
                        }
                        else if (this.openedFrom == 1)
                        {
                            if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.REJECTED)
                            {
                                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DECLINEDWEBBOOKINGS_DASHBOARD);
                            }
                            else
                            {

                                ((frmBookingDashBoard)System.Windows.Forms.Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingDashBoard")).PopulateWebBookingsGrid();

                                //  new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_WEBBOOKINGS_DASHBOARD);
                            }

                        }
                        else if (this.openedFrom == 2)
                        {
                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_BOOKINGHISTORY_DASHBOARD);

                        }


                    }

                }

                if (frm != null)
                {
                    if (frm.SmsThread != null)
                        frm.SmsThread.Start();


                    frm.Dispose();
                }


                DisposeGDIObjects();




                this.Dispose(true);


                GC.Collect();


                //General.DisposeForm(this);
            }
            catch (Exception ex)
            {


            }

        }


        private void CheckBiddingNotification()
        {
            if (chkBidding.Checked && AppVars.objPolicyConfiguration.EnableBiddingForChauffers.ToBool()
                && objMaster.Current.Id > 0 && objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING
                && OldTotalCharges != objMaster.Current.TotalCharges.ToDecimal())
            {
                try
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        var list = db.stp_getbiddingdriversforjob(objMaster.Current.Id);

                        PutJobOnBidding(list.Select(c => c.Id).ToArray<int>(), objMaster.Current.Id);

                    }


                }
                catch
                {



                }

            }


        }

        private void PutJobOnBidding(int[] driverIds, long jobId)
        {
            if (driverIds != null && driverIds.Count() > 0)
            {

                Thread bidThread = new Thread(delegate ()
                {
                    if (this.IsDisposed == false)
                    {
                        SendBidNotication(driverIds, jobId);
                    }
                });

                bidThread.Priority = ThreadPriority.Highest;

                bidThread.Start();
            }

        }

        private void SendBidNotication(int[] driverIds, long jobId)
        {

            try
            {


                foreach (var item in driverIds)
                {


                    if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                    {

                        // For TCP Connection
                        if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                        {
                            General.SendPDAMessage("request pda=" + item + "=" + jobId + "=" + "Bid Alert>>" + "=6");
                        }

                    }
                    else
                    {
                        // For TCP Connection
                        if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                        {
                            General.SendPDAMessage("request pda=" + item + "=" + jobId + "=" + "Bid Alert>>" + "=6");
                        }

                    }

                }
            }
            catch (Exception ex)
            {


            }
        }




        private void DisposeGDIObjects()
        {

            //    this.Font.Dispose();

            try
            {
                ddlSubCompany.Dispose();
                //    btnPasteBooking.Dispose();
                btnDespatchView.Dispose();

                // lblBookingType.Font.Dispose();
                lblBookingType.Dispose();
                ddlBookingType.Dispose();
                // label1.Controls.Clear();
                label1.Dispose();


                txtBookingNo.Font.Dispose();
                txtCustomerMobileNo.Font.Dispose();
                txtCustomerPhoneNo.Font.Dispose();

                txtFromAddress.Font.Dispose();
                txtFromAddress.ListBoxElement.Font.Dispose();
                txtToAddress.ListBoxElement.Font.Dispose();
                txtFromAddress.ListBoxElement.Items.Clear();
                txtFromAddress.ListBoxElement.Dispose();
                txtToAddress.ListBoxElement.Items.Clear();
                txtToAddress.ListBoxElement.Dispose();

                txtToAddress.Font.Dispose();
                //  ddlFromLocation.Font.Dispose();
                //  ddlToLocation.Font.Dispose();

                //  lblFromLoc.Font.Dispose();
                lblFromStreetComing.Font.Dispose();

                if (lblDepartment != null)
                    lblDepartment.Font.Dispose();

                if (lblBookedBy != null)
                {
                    lblBookedBy.Font.Dispose();
                }

                lblMap.Font.Dispose();
                txtSpecialRequirements.Font.Dispose();

                btnSaveNew.Image.Dispose();
                //    btnPrintJob.Image.Dispose();
                btnExit.Image.Dispose();
                btnExitForm.Image.Dispose();

                btnDetailMap.Image.Dispose();
                //  btnHospital.Dispose();
                //  btnAirport.Dispose();
                //  btnStations.Dispose();

                pnlMain.Dispose();





                if (webBrowser1 != null)
                {
                    webBrowser1.Stop();

                    webBrowser1.Dispose();
                }








                if (timer1 != null)
                {
                    timer1.Stop();
                    timer1.Dispose();
                    timer1 = null;

                    if (POIWorker != null)
                    {
                        if (POIWorker.IsBusy)
                        {

                            POIWorker.CancelAsync();
                        }


                        POIWorker.Dispose();
                        POIWorker = null;
                        GC.Collect();

                    }
                }


                if (worker_fares != null)
                {
                    if (worker_fares.IsBusy)
                    {
                        worker_fares.CancelAsync();
                    }

                    worker_fares.Dispose();
                    worker_fares = null;
                    GC.Collect();
                }






                if (radPageView1 != null)
                {
                    radPageView1.Controls.Clear();

                    radPageView1.Dispose();

                }
            }
            catch
            {


            }

            InstallEventHandlers(pnlCustomer);
            InstallEventHandlers(pnlMain);

        }






















        void TextBoxElement_TextChanged(object sender, EventArgs e)
        {


            try
            {

                IsKeyword = false;

                InitializeTimer();
                timer1.Stop();

                aTxt = (UIX.AutoCompleteTextBox)sender;
                aTxt.ResetListBox();

                if (aTxt.Name == "txtFromAddress")
                    txtToAddress.SendToBack();

                else if (aTxt.Name == "txtToAddress")
                    txtToAddress.BringToFront();



                if (EnablePOI)
                {

                    InitializeSearchPOIWorker();

                    if (POIWorker.IsBusy)
                    {
                        POIWorker.CancelAsync();

                        POIWorker.Dispose();
                        POIWorker = null;
                        // GC.Collect();
                        InitializeSearchPOIWorker();

                    }


                    AddressTextChangePOI();
                }
                else
                {

                    AddressTextChangeWOPOI();
                }
            }
            catch (Exception ex)
            {

            }
        }

        BackgroundWorker POIWorker = null;
        private void InitializeSearchPOIWorker()
        {
            if (POIWorker == null)
            {
                POIWorker = new BackgroundWorker();
                POIWorker.WorkerSupportsCancellation = true;
                POIWorker.DoWork += new DoWorkEventHandler(POIWorker_DoWork);
                POIWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(POIWorker_RunWorkerCompleted);
            }



        }

        void POIWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                if (e.Cancelled || e.Result == null || (sender as BackgroundWorker) == null)
                    return;


                ShowAddressesPOI((string[])e.Result);

            }
            catch
            {


            }
        }

        //void POIWorker_DoWork(object sender, DoWorkEventArgs e)
        //{


        //   string searchValue = e.Argument.ToStr();
        //   try
        //   {
        //       if (POIWorker == null || IsOnClosed)
        //       {
        //           e.Cancel = true;
        //           return;


        //       }







        //           //
        //           string postCode = General.GetPostCodeMatchOpt(searchValue);

        //           string doorNo = string.Empty;
        //           string place = string.Empty;




        //           if (postCode.Length == 0 && searchValue.Trim().Contains(" ") && searchValue.Trim().Contains(".") == false && searchValue.Trim().Contains("#") == false
        //             && searchValue[0].ToStr().IsAlpha() && searchValue.Split(new char[] { ' ' }).Any(c => c.IsAlpha() == false))
        //           //    && (searchValue.Trim().Substring(0, searchValue.Trim().IndexOf(' ')).ToStr().IsAlpha() == false || searchValue.Trim().Substring(searchValue.Trim().IndexOf(' ') + 1)[0].ToStr().IsAlpha()))
        //           {
        //               var arrData = searchValue.Split(new char[] { ' ' });



        //               if (arrData.Count() == 2)
        //               {
        //                   postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));

        //               }
        //               else if (arrData.Count() > 2)
        //               {

        //                   if (arrData[1][0].ToStr().IsNumeric())
        //                       postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[1]).Trim());
        //                   else if (arrData[1].ToStr().IsAlpha() == false && arrData[2].ToStr().IsAlpha() == false)
        //                       postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[2]).Trim());
        //                   else
        //                       postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));
        //               }


        //           }

        //           if (!string.IsNullOrEmpty(postCode) && postCode.IsAlpha() == true)
        //               postCode = string.Empty;

        //           string street = searchValue;

        //           if (postCode.Length > 0)
        //           {
        //               street = street.Replace(postCode, "").Trim();
        //           }


        //           if (!string.IsNullOrEmpty(street) && !string.IsNullOrEmpty(postCode) && street.IsAlpha() == false && street.Length < 4 && searchValue.IndexOf(postCode) < searchValue.IndexOf(street))
        //           {
        //               street = "";
        //               postCode = searchTxt;
        //           }


        //           if (street.Length > 0)
        //           {

        //               if (char.IsNumber(street[0]))
        //               {

        //                   for (int i = 0; i <= 3; i++)
        //                   {
        //                       if (char.IsNumber(street[i]) || (doorNo.Length > 0 && doorNo.Length == i && char.IsLetter(street[i])))
        //                           doorNo += street[i];
        //                       else
        //                           break;
        //                   }
        //               }
        //           }


        //           if (street.EndsWith("#"))
        //           {
        //               street = street.Replace("#", "").Trim();
        //               place = "p=";
        //           }

        //           if (doorNo.Length > 0 && place.Length == 0)
        //           {
        //               street = street.Replace(doorNo, "").Trim();


        //           }


        //           if (postCode.Length == 0 && street.Length < 3)
        //           {
        //               e.Cancel = true;
        //               return;

        //           }


        //           if (street.Length > 1 || postCode.Length > 0)
        //           {
        //               if (postCode.Length > 0)
        //               {
        //                   if (doorNo.Length > 0 && postCode == General.GetPostCodeMatch(postCode))
        //                   {
        //                       doorNo = string.Empty;
        //                   }

        //               }

        //               if (postCode.Length >= 5 && postCode.Contains(" ") == false)
        //               {
        //                   string resultPostCode = AppVars.listOfAddress.FirstOrDefault(a => a.PostalCode.Strip(' ') == postCode).DefaultIfEmpty().PostalCode.ToStr().Trim();


        //                   if (resultPostCode.Length >= 5 && resultPostCode.Contains(" "))
        //                   {
        //                       postCode = resultPostCode;

        //                   }

        //               }


        //               if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
        //               {
        //                   e.Cancel = true;
        //                   return;
        //               }



        //               using (TaxiDataContext db = new TaxiDataContext())
        //               {
        //                   e.Result = db.stp_GetByRoadLevelData(postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();

        //               }

        //               if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
        //               {
        //                   e.Cancel = true;
        //                   return;
        //               }




        //               //   Console.WriteLine("end work : " + searchValue);

        //           }


        //           //



        //    }
        //    catch
        //    {
        //   //     Console.WriteLine("Start work catch: " + searchValue);

        //    }
        //}


        void POIWorker_DoWork(object sender, DoWorkEventArgs e)
        {


            string searchValue = e.Argument.ToStr();
            try
            {
                if (POIWorker == null || IsOnClosed)
                {
                    e.Cancel = true;
                    return;


                }


                //
                string postCode = General.GetPostCodeMatchOpt(searchValue);

                string doorNo = string.Empty;
                string place = string.Empty;




                if (postCode.Length == 0 && searchValue.Trim().Contains(" ") && searchValue.Trim().Contains(".") == false && searchValue.Trim().Contains("#") == false
                  && searchValue[0].ToStr().IsAlpha() && searchValue.Split(new char[] { ' ' }).Any(c => c.IsAlpha() == false))
                //    && (searchValue.Trim().Substring(0, searchValue.Trim().IndexOf(' ')).ToStr().IsAlpha() == false || searchValue.Trim().Substring(searchValue.Trim().IndexOf(' ') + 1)[0].ToStr().IsAlpha()))
                {
                    var arrData = searchValue.Split(new char[] { ' ' });



                    if (arrData.Count() == 2)
                    {
                        postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));

                    }
                    else if (arrData.Count() > 2)
                    {

                        if (arrData[1][0].ToStr().IsNumeric())
                            postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[1]).Trim());
                        else if (arrData[1].ToStr().IsAlpha() == false && arrData[2].ToStr().IsAlpha() == false)
                            postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[2]).Trim());
                        else
                            postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));
                    }


                }

                if (!string.IsNullOrEmpty(postCode) && postCode.IsAlpha() == true)
                    postCode = string.Empty;

                string street = searchValue;

                if (postCode.Length > 0)
                {
                    street = street.Replace(postCode, "").Trim();
                }


                if (!string.IsNullOrEmpty(street) && !string.IsNullOrEmpty(postCode) && street.IsAlpha() == false && street.Length < 4 && searchValue.IndexOf(postCode) < searchValue.IndexOf(street))
                {
                    street = "";
                    postCode = searchTxt;
                }


                if (street.Length > 0)
                {

                    if (char.IsNumber(street[0]))
                    {

                        for (int i = 0; i <= 3; i++)
                        {

                            try
                            {
                                if (char.IsNumber(street[i]) || (doorNo.Length > 0 && doorNo.Length == i && char.IsLetter(street[i])))
                                    doorNo += street[i];
                                else
                                    break;
                            }
                            catch
                            {


                            }
                        }
                    }
                }


                if (street.Contains("#"))
                {
                    street = street.Replace("#", "").Trim();
                    place = "p=";
                }

                if (doorNo.Length > 0 && place.Length == 0)
                {
                    street = street.Replace(doorNo, "").Trim();


                }


                if (postCode.Length == 0 && street.Length < 3)
                {
                    e.Cancel = true;
                    return;

                }


                if (street.Length > 1 || postCode.Length > 0)
                {
                    if (postCode.Length > 0)
                    {
                        if (doorNo.Length > 0 && postCode == General.GetPostCodeMatch(postCode))
                        {
                            doorNo = string.Empty;
                        }

                    }

                    if (postCode.Length >= 5 && postCode.Contains(" ") == false)
                    {


                        //string resultPostCode = AppVars.listOfAddress.FirstOrDefault(a => a.PostalCode.Strip(' ') == postCode).DefaultIfEmpty().PostalCode.ToStr().Trim();


                        //if (resultPostCode.Length >= 5 && resultPostCode.Contains(" "))
                        //{
                        //    postCode = resultPostCode;

                        //}

                    }


                    if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
                    {
                        e.Cancel = true;
                        return;
                    }






                    //if (text.Contains(" ") && text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()==false
                    //    && (AppVars.keyLocations.Contains(text.Split(new char[] { ' ' })[0])))
                    //{
                    //  aTxt.ListBoxElement.Items.Clear();
                    if (searchValue.Contains(" ") && searchValue.Length < 20 && searchValue.WordCount() == 2 && searchValue.Contains(".") == false && searchValue.Strip(' ').IsAlpha() == false)
                    {

                        string[] arr = searchValue.Split(new char[] { ' ' });

                        if (arr.Count() == 2)
                        {
                            if (arr[0].IsAlpha())
                            {
                                string pcode = General.GetPostCodeMatch(arr[1].ToStr().ToUpper());

                                if (pcode.ToStr().Length > 0)
                                {
                                    e.Result = (from a in General.GetQueryable<Gen_Location>(c => (c.Gen_LocationType.ShortCutKey == arr[0]) && c.PostCode.StartsWith(pcode))
                                                select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                                    if (e.Result != null && (e.Result as string[]).Count() == 0)
                                        e.Result = null;

                                }
                            }
                        }

                    }




                    if (e.Result == null)
                    {

                        if (doorNo.Length > 0 && street.Strip(' ').IsAlpha() == false)
                        {
                            postCode = General.GetPostCodeMatch(street);
                            if (postCode.Length > 0)
                            {

                                street = street.Replace(postCode, "").Trim();
                            }
                        }
                        else if (postCode.Length > 0 && street.Length == 0 && postCode.Count(c => c == ' ') > 1)
                        {
                            string originalPostCode = postCode;
                            postCode = postCode.Substring(0, postCode.LastIndexOf(' '));

                            doorNo = originalPostCode.Replace(postCode, "").ToStr().Trim();
                        }
                        else if (street.Length > 3 && street.Contains(' ') && street.IsAlpha() == false && doorNo.Length == 0)
                        {


                            for (int i = 0; i < street.Length; i++)
                            {
                                if (Char.IsDigit(street[i]))
                                {
                                    if (i > 0 && street[i - 1] == ' ')
                                    {

                                        doorNo += street[i];
                                    }
                                    else if (i == 0)
                                    {
                                        doorNo += street[i];
                                    }
                                    else if (doorNo.Length > 0)
                                    {
                                        doorNo += street[i];

                                    }


                                }

                            }


                            if (doorNo.Length > 0)
                                street = street.Replace(doorNo, "").Trim();
                        }
                        else if (postCode.Length > 0 && postCode.Contains(" ") == false && street.Length == 0 && doorNo.Length == 0 && place.Length == 0)
                        {
                            //    IF LENGTH IS 5
                            //THEN
                            //E11AA=> IF 3RD CHARACTER IS NUMERIC THEN E1 1AA


                            //IF LENGTH IS 6
                            //THEN
                            //HA20DU=> IF 4TH CHARACTER IS NUMERIC THEN HA2 0DU

                            //IF LENGTH IS 7
                            //THEN 
                            //WC1A1AB=> IF 5TH CHARACTER IS NUMERIC THEN WC1A 1AB



                            if (postCode.Length == 5)
                            {
                                if (postCode[2].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(2, " ");

                                }

                            }
                            else if (postCode.Length == 6)
                            {
                                if (postCode[3].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(3, " ");

                                }

                            }
                            else if (postCode.Length == 7)
                            {
                                if (postCode[4].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(4, " ");

                                }

                            }
                        }


                        //using (System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(Cryptography.Decrypt(System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToString(), "softeuroconnskey", true)))
                        //{
                        //    System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
                        //    cmd.Connection = conn;
                        //    cmd.CommandType = CommandType.StoredProcedure;
                        //    cmd.CommandText = "stp_GetByRoadLevelData";
                        //    cmd.Parameters.AddWithValue("@PostCode", postCode);
                        //    cmd.Parameters.AddWithValue("@doorno", doorNo);
                        //    cmd.Parameters.AddWithValue("@street", street);
                        //    cmd.Parameters.AddWithValue("@place", place);
                        //    conn.Open();
                        //    System.Data.SqlClient.SqlDataReader reader = cmd.ExecuteReader();
                        //    while (reader.Read())
                        //    {


                        //    }
                        //    conn.Close();
                        //}

                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (postCode.Length > 0 && postCode.Contains(" ") == false && doorNo.Length == 0 && street.Length > 0 && place.Length == 0)
                            {
                                e.Result = db.stp_GetByRoadAndPostCodeLevelData(postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();

                            }
                            else if (place.Length > 0)
                            {

                                string pafdbname = System.Configuration.ConfigurationManager.AppSettings["name"] != null ? System.Configuration.ConfigurationManager.AppSettings["name"].ToStr() : "PAFDb";
                                if (postCode.Length == 0)
                                {

                                    postCode = General.GetPostCodeMatch(street);
                                }


                                if (street.Length > 0 && postCode.Length == 0 && doorNo.Length == 0)
                                {
                                    string query = string.Empty;

                                    if (searchValue.Trim().EndsWith("#") == false && street.Contains(" ") && street.WordCount() >= 2)
                                    {

                                        string street2 = searchValue.Split(new char[] { '#' })[1].Trim();


                                        street = street.Replace(street2, "").Trim();

                                        query = string.Format("   SELECT  TOP 100  "

                                           + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                          + " FROM " + pafdbname + ".dbo.DetailData dd "

                                          + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode  "

                                          + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                        + "     WHERE (dd.Data LIKE '%{0}%' ) AND ((md.Street like '{1}%' or md.SubStreet like    '{1}%' or md.Town like '{1}%' or md.Locality like '{1}%')   )  "


                                          + "   ORDER BY l.Id  ", street, street2);

                                    }
                                    //if (searchValue.EndsWith("#") == false && street.Contains(" ") && searchValue.WordCount() >= 2)
                                    //{

                                    //    string street2 = searchValue.Split(new char[] { '#' })[1].Trim();


                                    //    street = street.Replace(street2, "").Trim();

                                    //    query = string.Format("   SELECT  TOP 100  "

                                    //       + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                    //      + " FROM PAFDb.dbo.DetailData dd "

                                    //      + "  INNER JOIN PAFDb.dbo.MainData md ON md.PostCode = dd.PostCode  "

                                    //      + "    INNER JOIN PAFDb.dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                    //    + "     WHERE (dd.Data LIKE '%{0}%' ) AND ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   )  "


                                    //      + "   ORDER BY l.Id  ", street, street2);

                                    //}
                                    else
                                    {


                                        query = string.Format("SELECT TOP 100     "

                                                                 + "AddressLine = dd.Data + ' ' + md.Street + ' ' + md.PostCode "

                                                                 + "FROM "

                                                                 + pafdbname + ".dbo.Localization l "

                                                                 + " INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCodeId = l.PostCodeId"

                                                                 + " INNER JOIN " + pafdbname + ".dbo.DetailData dd ON md.PostCode = dd.PostCode"

                                                                 + " WHERE Data LIKE  '%{0}%' order by l.id     ", street);


                                    }

                                    e.Result = db.ExecuteQuery<string>(query).ToArray<string>();


                                }
                                else if (street.Length > 0 && postCode.Length > 0)
                                {

                                    if (postCode.Length > 0)
                                    {
                                        street = street.Replace(postCode, "").TrimEnd();

                                    }

                                    if (doorNo.Length > 0)
                                    {
                                        street = street.Replace(doorNo, "").TrimStart();

                                    }


                                    if (doorNo.Length > 0)
                                    {


                                        string query = string.Format("   SELECT  TOP 100  "

                                             + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                            + " FROM " + pafdbname + ".dbo.DetailData dd "

                                            + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode and md.PostCode like '{0} %'  "

                                            + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                           + "    WHERE dd.Data LIKE '%{1}%' OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   and dd.Data like +'% {2}%')   "

                                            + "   ORDER BY l.Id  ", postCode, street, doorNo);

                                        //  + "OPTION(QUERYTRACEON 8649)  ",

                                        e.Result = db.ExecuteQuery<string>(query).ToArray<string>();
                                    }
                                    else
                                    {

                                        string query = string.Format("   SELECT  TOP 100  "

                                            + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                           + " FROM " + pafdbname + ".dbo.DetailData dd "

                                           + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode and md.PostCode like '{0} %'  "

                                           + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                          + "    WHERE dd.Data LIKE '%{1}%' OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   )   "

                                           + "   ORDER BY l.Id  ", postCode, street);

                                        //  + "OPTION(QUERYTRACEON 8649)  ",

                                        e.Result = db.ExecuteQuery<string>(query).ToArray<string>();


                                    }


                                    //e.Result = db.stp_getroadleveldatabyplacenameandpostcode(street,postCode,doorNo).Select(c => c.AddressLine).ToArray<string>();

                                }
                                else
                                {


                                    string street2 = street.Replace(doorNo, "").TrimStart();



                                    string query = string.Format("   SELECT  TOP 100  "

                                         + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                        + " FROM " + pafdbname + ".dbo.DetailData ddv "

                                        + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode  "

                                        + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                      + "     WHERE (dd.Data LIKE '%{0}%' ) OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   )  "


                                        + "   ORDER BY l.Id  ", street, street2);

                                    //  + "OPTION(QUERYTRACEON 8649)  ",

                                    e.Result = db.ExecuteQuery<string>(query).ToArray<string>();



                                }
                            }
                            else
                            {
                                //if (POIWorker.IsBusy == false)
                                //{
                                e.Result = db.stp_GetByRoadLevelData(postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();
                                //}
                                //else
                                //{


                                //}
                            }


                        }
                    }

                    if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
                    {
                        e.Cancel = true;
                        return;
                    }






                }


                //



            }
            catch (Exception ex)
            {
                AddExcepLog("POIWORKER_DOWORK : " + ex.Message);
                //     Console.WriteLine("Start work catch: " + searchValue);

            }
        }

        private void AddExcepLog(string msg)
        {

            try
            {
                File.AppendAllText(Application.StartupPath + "\\exception_booking.txt", DateTime.Now.ToStr() + "," + msg + Environment.NewLine);

            }
            catch
            {


            }

        }


        //private void AddressTextChangeWOPOI()
        //{
        //    string text = aTxt.Text;
        //    string doorNo = string.Empty;

        //    if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool())
        //    {
        //        if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToStr().ToLower() == aTxt.Text.ToLower())
        //        {
        //            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
        //            aTxt.Text = aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim();


        //            if (aTxt.Text.Contains(".") && aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
        //            {

        //                aTxt.Text = aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim();
        //            }

        //            aTxt.SelectedItem = aTxt.Text.Trim();
        //            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        //            //    }               

        //        }

        //    }

        //    if (text.Length > 2 && text.EndsWith(".") == false && text.EndsWith(",") == false)
        //    {

        //        if (aTxt.SelectedItem == null || (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() != aTxt.Text.ToLower()))
        //        {


        //            for (int i = 0; i <= 2; i++)
        //            {
        //                if (char.IsNumber(text[i]))
        //                    doorNo += text[i];
        //                else
        //                    break;

        //            }
        //            text = text.Remove(text.IndexOf(doorNo), doorNo.Length).TrimStart(new char[] { ' ' });
        //        }
        //    }


        //    if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool() && text.Length <= 3 && text.Length > 0 && text.EndsWith("."))
        //    {
        //        string itemFound = string.Empty;

        //        foreach (object item in ddlPickupPlot.Items)
        //        {

        //            if (item.ToString().Contains(text))
        //            {

        //                itemFound = item.ToString().Substring(item.ToString().IndexOf("ZoneName =")).ToStr().Replace("ZoneName =", "").Trim().Replace("}", "").Trim().ToStr();
        //                if (itemFound.StartsWith(text))
        //                {
        //                    itemFound = itemFound.Replace(text, "").Trim();

        //                    break;

        //                }


        //            }

        //            //  var itemFound = ddlPickupPlot.Items.OfType<Gen_Zone>().FirstOrDefault(c => c.ZoneName.StartsWith(text));
        //        }

        //        if (!string.IsNullOrEmpty(itemFound.ToStr().Trim()))
        //        {
        //            aTxt.Text = itemFound;

        //            return;
        //        }


        //    }


        //    if (text.Length > 1 && text != "BASX")
        //    {
        //        if (text.EndsWith("   "))
        //        {
        //            if (aTxt.Name == "txtFromAddress")
        //            {
        //                FocusOnPickupPlot();
        //            }
        //            else if (aTxt.Name == "txtToAddress")
        //            {
        //                FocusOnDropOffPlot();
        //            }

        //            return;

        //        }

        //        else if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() == aTxt.Text.ToLower())
        //        {
        //            aTxt.ListBoxElement.Items.Clear();

        //            aTxt.ResetListBox();

        //            string locName = aTxt.SelectedItem.ToLower();
        //            int commaIndex = aTxt.SelectedItem.LastIndexOf(',');
        //            if (commaIndex != -1)
        //            {
        //                locName = locName.Remove(commaIndex);
        //            }


        //            string formerValue = aTxt.FormerValue.ToLower().Trim();

        //            int? loctypeId = 0;
        //            Gen_Location loc = null;
        //            if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
        //            || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 3 && aTxt.FormerValue.Strip(' ').IsAlpha()))
        //            {
        //                //if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
        //                // ||   (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <=2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
        //                //{



        //                if (aTxt.FormerValue.EndsWith("  ") || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
        //                {
        //                    loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == locName);
        //                }
        //                else
        //                    loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

        //                if (loc != null)
        //                {
        //                    loctypeId = loc.LocationTypeId;
        //                }
        //            }

        //            if (loctypeId != 0)
        //            {

        //                if (aTxt.Name == "txtFromAddress")
        //                {

        //                    ddlFromLocType.SelectedValue = loctypeId;
        //                    RadComboBoxItem item = (RadComboBoxItem)ddlFromLocation.Items.FirstOrDefault(b => b.Text.ToUpper().Equals(aTxt.SelectedItem.ToUpper()));
        //                    if (item != null)
        //                    {
        //                        ddlFromLocation.SelectedValue = item.Value;
        //                        if (commaIndex > 0 && ddlFromLocation.Text.ToUpper() != item.Text.ToUpper())
        //                        {

        //                            SetPickupZone(item.Text);

        //                        }


        //                        if (loc != null && loc.ZoneId != null && ddlPickupPlot.SelectedValue == null)
        //                        {
        //                            ddlPickupPlot.SelectedValue = loc.ZoneId;
        //                        }




        //                        if (ddlFromLocation.SelectedValue != null && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
        //                        {
        //                            UpdateAutoCalculateFares();

        //                        }

        //                    }
        //                    else
        //                    {
        //                        if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
        //                        {
        //                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
        //                            aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
        //                            aTxt.Text = aTxt.Text.Trim();
        //                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        //                            if (aTxt.Name == "txtFromAddress")
        //                            {
        //                                SetPickupZone(aTxt.Text);

        //                                UpdateAutoCalculateFares();
        //                            }


        //                        }

        //                    }

        //                    if (loctypeId != Enums.LOCATION_TYPES.POSTCODE || loctypeId != Enums.LOCATION_TYPES.ADDRESS
        //                        || loctypeId != Enums.LOCATION_TYPES.AIRPORT || loctypeId != Enums.LOCATION_TYPES.BASE)
        //                    {

        //                        txtToAddress.Focus();

        //                    }



        //                }
        //                else if (aTxt.Name == "txtToAddress")
        //                {

        //                    ddlToLocType.SelectedValue = loctypeId;
        //                    RadComboBoxItem item = (RadComboBoxItem)ddlToLocation.Items.FirstOrDefault(b => b.Text.ToUpper().Equals(aTxt.SelectedItem.ToUpper()));
        //                    if (item != null)
        //                    {
        //                        ddlToLocation.SelectedValue = item.Value;

        //                        if (commaIndex > 0 && ddlToLocation.Text.ToUpper() != item.Text.ToUpper())
        //                        {
        //                            SetDropOffZone(item.Text);

        //                        }

        //                        if (loc != null && loc.ZoneId != null && ddlDropOffPlot.SelectedValue == null)
        //                        {
        //                            ddlDropOffPlot.SelectedValue = loc.ZoneId;
        //                        }

        //                        if (ddlToLocation.SelectedValue != null && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
        //                        {
        //                            UpdateAutoCalculateFares();

        //                        }

        //                    }
        //                    else
        //                    {
        //                        if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
        //                        {
        //                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
        //                            aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
        //                            aTxt.Text = aTxt.Text.Trim();
        //                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        //                            SetDropOffZone(aTxt.Text);
        //                            UpdateAutoCalculateFares();


        //                        }

        //                    }

        //                    if (loctypeId == Enums.LOCATION_TYPES.POSTCODE || loctypeId == Enums.LOCATION_TYPES.ADDRESS)
        //                    {
        //                        txtToFlightDoorNo.Focus();
        //                    }
        //                    else
        //                    {
        //                        ddlCustomerName.Focus();
        //                    }
        //                }
        //            }
        //            else if (aTxt.Text.Contains('.'))
        //            {

        //                RemoveNumbering(doorNo);

        //                if (aTxt.Name == "txtFromAddress")
        //                {

        //                    SetPickupZone(aTxt.SelectedItem);
        //                    txtFromFlightDoorNo.Focus();

        //                }

        //                else if (aTxt.Name == "txtToAddress")
        //                {
        //                    SetDropOffZone(aTxt.SelectedItem);
        //                    txtToFlightDoorNo.Focus();

        //                }
        //            }
        //            else if (!string.IsNullOrEmpty(doorNo))
        //            {
        //                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
        //                aTxt.Text = doorNo + " " + aTxt.Text;
        //                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        //            }
        //            else
        //            {
        //                if (aTxt.Name == "txtFromAddress")
        //                {


        //                    SetPickupZone(aTxt.SelectedItem);
        //                    //  txtFromFlightDoorNo.Focus();

        //                }

        //                else if (aTxt.Name == "txtToAddress")
        //                {
        //                    SetDropOffZone(aTxt.SelectedItem);
        //                    //  txtToFlightDoorNo.Focus();

        //                }

        //                if (aTxt.SelectedItem.ToStr().Trim() != string.Empty)
        //                {
        //                    UpdateAutoCalculateFares();

        //                }


        //            }

        //            aTxt.FormerValue = string.Empty;


        //            return;
        //        }



        //        if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
        //        {

        //            //   CancelWebClientAsync();
        //            // wc.CancelAsync();
        //            aTxt.Values = null;

        //        }
        //        text = text.ToLower();

        //        if (AppVars.keyLocations.Contains(text) || (text.Length <= 4 && (text.EndsWith("  ") || (text[1] == ' ' || (text.Length > 2 && char.IsLetter(text[1]) && text[2] == ' ' && text.Trim().WordCount() == 2))))
        //           || (text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()))
        //        {


        //            aTxt.ListBoxElement.Items.Clear();


        //            string[] res = null;

        //            if (text.EndsWith("  "))
        //            {

        //                text = text.Trim();

        //                res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.StartsWith(text))
        //                       select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                        ).ToArray<string>();


        //            }
        //            else
        //            {
        //                if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
        //                {
        //                    string shortcut = text.Remove(text.IndexOf(' ')).Trim();

        //                    string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

        //                    res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
        //                                c.LocationName.ToLower().Contains(locName))
        //                           select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                              ).ToArray<string>();

        //                }
        //                else
        //                {


        //                    res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
        //                           select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                               ).ToArray<string>();
        //                }
        //            }


        //            if (res.Count() > 0)
        //            {
        //                IsKeyword = true;


        //                var finalList = (from a in AppVars.zonesList
        //                                 from b in res
        //                                 where b.Contains(a)
        //                                 select b).ToArray<string>();


        //                if (finalList.Count() > 0)
        //                    finalList = finalList.Union(res).ToArray<string>();

        //                else
        //                    finalList = res;


        //                aTxt.ListBoxElement.Items.AddRange(finalList);


        //                aTxt.ShowListBox();
        //            }


        //            if (aTxt.Text != aTxt.FormerValue)
        //            {
        //                aTxt.FormerValue = aTxt.Text;
        //            }
        //        }


        //        if (MapType == Enums.MAP_TYPE.NONE) return;

        //        StartAddressTimer(text);

        //    }
        //    else if (text.Length > 0)
        //    {
        //        if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
        //        {

        //            //   CancelWebClientAsync();
        //            // wc.CancelAsync();
        //            aTxt.Values = null;

        //        }
        //        text = text.ToLower();

        //        if (AppVars.keyLocations.Contains(text))
        //        {

        //            aTxt.ListBoxElement.Items.Clear();


        //            string[] res = null;

        //            if (text.EndsWith("  "))
        //            {

        //                text = text.Trim();

        //                res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.ToLower() == text)
        //                       select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                        ).ToArray<string>();


        //            }
        //            else
        //            {
        //                if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
        //                {
        //                    string shortcut = text.Remove(text.IndexOf(' ')).Trim();

        //                    string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

        //                    res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
        //                                c.LocationName.ToLower().Contains(locName))
        //                           select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                              ).ToArray<string>();

        //                }
        //                else
        //                {


        //                    res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
        //                           select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
        //                               ).ToArray<string>();
        //                }
        //            }


        //            if (res.Count() > 0)
        //            {
        //                IsKeyword = true;


        //                var finalList = (from a in AppVars.zonesList
        //                                 from b in res
        //                                 where b.Contains(a)
        //                                 select b).ToArray<string>();


        //                if (finalList.Count() > 0)
        //                    finalList = finalList.Union(res).ToArray<string>();

        //                else
        //                    finalList = res;


        //                aTxt.ListBoxElement.Items.AddRange(finalList);

        //                if (text == "." && finalList.Count() == 1)
        //                {
        //                    aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
        //                    aTxt.Text = finalList[0];
        //                    aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        //                    if (aTxt.Name == "txtFromAddress")
        //                    {

        //                        SetPickupZone(aTxt.Text);
        //                        txtFromFlightDoorNo.Focus();

        //                    }

        //                    else if (aTxt.Name == "txtToAddress")
        //                    {
        //                        SetDropOffZone(aTxt.Text);
        //                        txtToFlightDoorNo.Focus();

        //                    }
        //                }
        //                else
        //                {

        //                    aTxt.ShowListBox();
        //                }
        //            }


        //            if (aTxt.Text != aTxt.FormerValue)
        //            {
        //                aTxt.FormerValue = aTxt.Text;
        //            }




        //            StartAddressTimer(text);
        //        }


        //    }
        //    else
        //    {
        //        if (MapType == Enums.MAP_TYPE.NONE) return;
        //        aTxt.ResetListBox();
        //        //  aTxt.ListBoxElement.Visible = false;
        //        aTxt.ListBoxElement.Items.Clear();

        //        //   CancelWebClientAsync();
        //        //  wc.CancelAsync();
        //        aTxt.Values = null;

        //    }



        //}



        private void AddressTextChangeWOPOI()
        {
            string text = aTxt.Text;
            string doorNo = string.Empty;

            if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool())
            {
                if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToStr().ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    aTxt.Text = aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim();


                    if (aTxt.Text.Contains(".") && aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
                    {

                        aTxt.Text = aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim();
                    }

                    aTxt.SelectedItem = aTxt.Text.Trim();
                    aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    //    }               

                }

            }

            if (text.Length > 2 && text.EndsWith(".") == false && text.EndsWith(",") == false)
            {

                if (aTxt.SelectedItem == null || (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() != aTxt.Text.ToLower()))
                {


                    for (int i = 0; i <= 2; i++)
                    {
                        if (char.IsNumber(text[i]))
                            doorNo += text[i];
                        else
                            break;

                    }
                    text = text.Remove(text.IndexOf(doorNo), doorNo.Length).TrimStart(new char[] { ' ' });
                }
            }


            if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool() && text.Length <= 3 && text.Length > 0 && text.EndsWith("."))
            {
                string itemFound = string.Empty;

                foreach (object item in ddlPickupPlot.Items)
                {

                    if (item.ToString().Contains(text))
                    {

                        itemFound = item.ToString().Substring(item.ToString().IndexOf("ZoneName =")).ToStr().Replace("ZoneName =", "").Trim().Replace("}", "").Trim().ToStr();
                        if (itemFound.StartsWith(text))
                        {
                            itemFound = itemFound.Replace(text, "").Trim();

                            break;

                        }
                    }

                    //  var itemFound = ddlPickupPlot.Items.OfType<Gen_Zone>().FirstOrDefault(c => c.ZoneName.StartsWith(text));
                }

                if (!string.IsNullOrEmpty(itemFound.ToStr().Trim()))
                {
                    aTxt.Text = itemFound;

                    return;
                }


            }


            if (text.Length > 1 && text != "BASX")
            {
                if (text.EndsWith("   "))
                {
                    if (aTxt.Name == "txtFromAddress")
                    {
                        FocusOnPickupPlot();
                    }
                    else if (aTxt.Name == "txtToAddress")
                    {
                        FocusOnDropOffPlot();
                    }

                    return;

                }

                else if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.ListBoxElement.Items.Clear();

                    aTxt.ResetListBox();

                    string locName = aTxt.SelectedItem.ToLower();
                    int commaIndex = aTxt.SelectedItem.LastIndexOf(',');
                    if (commaIndex != -1)
                    {
                        locName = locName.Remove(commaIndex);
                    }


                    string formerValue = aTxt.FormerValue.ToLower().Trim();

                    int? loctypeId = 0;
                    Gen_Location loc = null;
                    if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                    || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 3 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                    {
                        //if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                        // ||   (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <=2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        //{



                        if (aTxt.FormerValue.EndsWith("  ") || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        {
                            loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == locName);
                        }
                        else
                            loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                        if (loc != null)
                        {
                            loctypeId = loc.LocationTypeId;
                        }
                    }

                    if (loctypeId != 0)
                    {

                        if (aTxt.Name == "txtFromAddress")
                        {

                            ddlFromLocType.SelectedValue = loctypeId;
                            RadComboBoxItem item = null;


                            if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                                if (aTxt.Name == "txtFromAddress")
                                {
                                    SetPickupZone(aTxt.Text);

                                    UpdateAutoCalculateFares();
                                }


                            }

                        }

                        if (loctypeId != Enums.LOCATION_TYPES.POSTCODE || loctypeId != Enums.LOCATION_TYPES.ADDRESS
                            || loctypeId != Enums.LOCATION_TYPES.AIRPORT || loctypeId != Enums.LOCATION_TYPES.BASE)
                        {

                            txtToAddress.Focus();

                        }




                        else if (aTxt.Name == "txtToAddress")
                        {

                            ddlToLocType.SelectedValue = loctypeId;
                            RadComboBoxItem item = null;


                            if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                SetDropOffZone(aTxt.Text);
                                UpdateAutoCalculateFares();


                            }



                            if (loctypeId == Enums.LOCATION_TYPES.POSTCODE || loctypeId == Enums.LOCATION_TYPES.ADDRESS)
                            {
                                txtToFlightDoorNo.Focus();
                            }
                            else
                            {
                                ddlCustomerName.Focus();
                            }
                        }
                    }
                    else if (aTxt.Text.Contains('.'))
                    {

                        RemoveNumbering(doorNo);

                        if (aTxt.Name == "txtFromAddress")
                        {

                            SetPickupZone(aTxt.SelectedItem);
                            txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            txtToFlightDoorNo.Focus();

                        }
                    }
                    else if (!string.IsNullOrEmpty(doorNo))
                    {
                        aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        aTxt.Text = doorNo + " " + aTxt.Text;
                        aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    }
                    else
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {


                            SetPickupZone(aTxt.SelectedItem);
                            //  txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            //  txtToFlightDoorNo.Focus();

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty)
                        {
                            UpdateAutoCalculateFares();

                        }


                    }

                    aTxt.FormerValue = string.Empty;


                    return;
                }



                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    //   CancelWebClientAsync();
                    // wc.CancelAsync();
                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text) || (text.Length <= 4 && (text.EndsWith("  ") || (text[1] == ' ' || (text.Length > 2 && char.IsLetter(text[1]) && text[2] == ' ' && text.Trim().WordCount() == 2))))
                   || (text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()))
                {


                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.StartsWith(text))
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);


                        aTxt.ShowListBox();
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }
                }


                if (MapType == Enums.MAP_TYPE.NONE) return;

                StartAddressTimer(text);

            }
            else if (text.Length > 0)
            {
                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    //   CancelWebClientAsync();
                    // wc.CancelAsync();
                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text))
                {

                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.ToLower() == text)
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        if (text == "." && finalList.Count() == 1)
                        {
                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                            aTxt.Text = finalList[0];
                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                            if (aTxt.Name == "txtFromAddress")
                            {

                                SetPickupZone(aTxt.Text);
                                txtFromFlightDoorNo.Focus();

                            }

                            else if (aTxt.Name == "txtToAddress")
                            {
                                SetDropOffZone(aTxt.Text);
                                txtToFlightDoorNo.Focus();

                            }
                        }
                        else
                        {

                            aTxt.ShowListBox();
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }




                    StartAddressTimer(text);
                }


            }
            else
            {
                if (MapType == Enums.MAP_TYPE.NONE) return;
                aTxt.ResetListBox();
                //  aTxt.ListBoxElement.Visible = false;
                aTxt.ListBoxElement.Items.Clear();

                //   CancelWebClientAsync();
                //  wc.CancelAsync();
                aTxt.Values = null;

            }



        }


        void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                if (aTxt == null || IsKeyword)
                {

                    timer1.Stop();
                    return;
                }

                timer1.Stop();

                searchTxt = searchTxt.ToUpper();


                if (EnablePOI)
                {

                    if (POIWorker.IsBusy)
                        POIWorker.CancelAsync();



                    POIWorker.RunWorkerAsync(searchTxt);
                }
                else
                {

                    PerformAddressChangeTimerWOPOI();
                }


            }
            catch (Exception ex)
            {


            }

        }


        private void StartAddressTimer(string text)
        {
            text = text.ToLower();
            searchTxt = text;
            InitializeTimer();
            timer1.Start();
        }


        #region ROAD LEVEL DATA ADDRESS SEARCHING




        private void AddressTextChangePOI()
        {
            string text = aTxt.Text;
            string doorNo = string.Empty;





          if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToStr().ToLower() == aTxt.Text.ToLower()
               && aTxt.Text.Length > 0)
            //&& aTxt.Text[0].ToStr().IsNumeric() )
            {
                if (aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim().Length > 0)
                {
                    aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    aTxt.Text = aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim();

                    if (aTxt.Text.Contains(".") && aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
                    {
                        aTxt.Text = aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim();
                    }

                    aTxt.SelectedItem = aTxt.Text.Trim();
                    aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }
            }




            for (int i = 0; i <= 2; i++)
            {
                if (char.IsNumber(text[i]))
                    doorNo += text[i];
                else
                    break;
            }





            if (text.Length > 1 && text != "BASX")
            {
                if (text.EndsWith("   "))
                {
                    if (aTxt.Name == "txtFromAddress")
                    {
                        FocusOnPickupPlot();
                    }
                    else if (aTxt.Name == "txtToAddress")
                    {
                        FocusOnDropOffPlot();
                    }
                    return;
                }


                else if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.ListBoxElement.Items.Clear();
                    aTxt.ResetListBox();

                    string locName = aTxt.SelectedItem.ToLower();
                    int commaIndex = aTxt.SelectedItem.LastIndexOf(',');
                    if (commaIndex != -1)
                    {
                        locName = locName.Remove(commaIndex);
                    }


                    string formerValue = aTxt.FormerValue.ToLower().Trim();

                    int? loctypeId = 0;
                    //   Gen_Location loc = null;
                    if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                    || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 3 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                    {
                        if (aTxt.FormerValue.EndsWith("  ") || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        {
                            string shortkey = aTxt.FormerValue.ToStr().Trim().Contains(" ") ? aTxt.FormerValue.Substring(0, aTxt.FormerValue.IndexOf(' ')) : "";


                            using (TaxiDataContext db = new TaxiDataContext())
                            {



                                loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey))).DefaultIfEmpty().LocationTypeId;

                            }

                            // loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey)));
                        }
                        else
                        {
                            if (locName.IsAlpha() == false)
                            {
                                string postcode = General.GetPostCodeMatch(locName.ToUpper());

                                if (postcode.Length > 0)
                                {
                                    postcode = postcode.ToLower();
                                    string street = locName.Replace(postcode, "").Trim();


                                    if (street.EndsWith(","))
                                    {
                                        street = street.Substring(0, street.LastIndexOf(",") - 1).ToLower();


                                    }

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode).DefaultIfEmpty().LocationTypeId;
                                    }

                                    // loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode);

                                }
                                else
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                    }

                                    //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                                }



                            }
                            else
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                }


                                //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);
                            }


                        }
                        if (loctypeId != null)
                        {
                            loctypeId = loctypeId.ToInt();
                        }
                        else
                            loctypeId = Enums.LOCATION_TYPES.ADDRESS;
                    }
                    else
                    {

                        if (locName.IsAlpha() == false)
                        {
                            string postcode = General.GetPostCodeMatch(locName.ToUpper());

                            if (postcode.Length > 0)
                            {
                                postcode = postcode.ToLower();
                                string street = locName.Replace(postcode, "").Trim();


                                if (street.EndsWith(","))
                                {
                                    street = street.Substring(0, street.LastIndexOf(",") - 1).ToLower();


                                }


                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode).DefaultIfEmpty().LocationTypeId;

                                }

                                //  loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode);

                            }
                            else
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                }


                                //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                            }



                        }
                        else
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                            }


                            // loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);
                        }

                        if (loctypeId != null)
                        {
                            loctypeId = loctypeId.ToInt();
                        }
                        else
                            loctypeId = Enums.LOCATION_TYPES.ADDRESS;

                    }

                    if (loctypeId == 0)
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {
                            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                            {

                                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                            }

                        }
                        else if (aTxt.Name == "txtToAddress")
                        {
                            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                            {

                                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                            }

                        }
                        else
                        {


                        }
                    }

                    if (loctypeId == 0)
                    {
                        loctypeId = Enums.LOCATION_TYPES.ADDRESS;

                    }

                    if (loctypeId != 0)
                    {

                        if (aTxt.Name == "txtFromAddress")
                        {

                            ddlFromLocType.SelectedValue = loctypeId;
                            //RadComboBoxItem item = (RadComboBoxItem)ddlFromLocation.Items.FirstOrDefault(b => b.Text.ToUpper().Equals(aTxt.SelectedItem.ToUpper()));
                            //if (item != null)
                            //{
                            //   // ddlFromLocation.SelectedValue = item.Value;
                            //    if (commaIndex > 0 && ddlFromLocation.Text.ToUpper() != item.Text.ToUpper())
                            //    {
                            //       SetPickupZone(item.Text);
                            //    }


                            //    if (loc != null && loc.ZoneId != null && ddlPickupPlot.SelectedValue == null)
                            //    {
                            //        ddlPickupPlot.SelectedValue = loc.ZoneId;
                            //    }

                            //    if (ddlFromLocation.SelectedValue != null && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                            //    {
                            //        UpdateAutoCalculateFares();

                            //    }
                            //}
                            //else
                            //{
                            if (aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                //   aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                                if (aTxt.Name == "txtFromAddress")
                                {
                                    SetPickupZone(aTxt.Text);
                                    UpdateAutoCalculateFares();
                                    LoadNearest();
                                    aTxt.SelectedItem = "";

                                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                    {
                                        FocusOnFromDoor();
                                    }
                                    else
                                    {

                                        FocusOnToAddress();
                                    }
                                    //  txtToAddress.Focus();

                                }
                            }
                            // }

                            //if (loctypeId != Enums.LOCATION_TYPES.POSTCODE || loctypeId != Enums.LOCATION_TYPES.ADDRESS
                            //    || loctypeId != Enums.LOCATION_TYPES.AIRPORT || loctypeId != Enums.LOCATION_TYPES.BASE)
                            //{

                            //    txtToAddress.Focus();

                            //}
                        }
                        else if (aTxt.Name == "txtViaAddress")
                        {

                            //  txtViaAddress.KeyDown -=new KeyEventHandler(txtViaAddress_KeyDown);

                            ddlViaFromLocType.SelectedValue = loctypeId;


                            AddViaPoint();

                            //  txtViaAddress.KeyDown += new KeyEventHandler(txtViaAddress_KeyDown);
                        }
                        else if (aTxt.Name == "txtToAddress")
                        {

                            ddlToLocType.SelectedValue = loctypeId;

                            if (aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                // aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                SetDropOffZone(aTxt.Text);
                                UpdateAutoCalculateFares();
                                LoadNearest();
                                aTxt.SelectedItem = "";
                            }




                            //  txtToFlightDoorNo.Focus();

                            //   ddlCustomerName.Focus();

                        }
                    }
                    else if (aTxt.Text.Contains('.'))
                    {
                        RemoveNumbering(doorNo);

                        if (aTxt.Name == "txtFromAddress")
                        {

                            SetPickupZone(aTxt.SelectedItem);
                            txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            txtToFlightDoorNo.Focus();
                            UpdateAutoCalculateFares();
                        }
                    }
                    else if (!string.IsNullOrEmpty(doorNo))
                    {
                        aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        aTxt.Text = aTxt.Text;
                        aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                        if (aTxt.Name == "txtFromAddress")
                        {
                            SetPickupZone(aTxt.SelectedItem);
                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty)
                        {
                            UpdateAutoCalculateFares();
                        }
                    }
                    else
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {
                            SetPickupZone(aTxt.SelectedItem);
                        }
                        else if (aTxt.Name == "txtViaAddress")
                        {
                            AddViaPoint();
                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty && aTxt.Name != "txtViaAddress")
                        {
                            UpdateAutoCalculateFares();
                        }
                    }

                    aTxt.FormerValue = string.Empty;
                    return;
                }

                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    aTxt.Values = null;

                }

                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text) || (text.Length <= 4 && (text.EndsWith("  ") || (text[1] == ' ' || (text.Length > 2 && char.IsLetter(text[1]) && text[2] == ' ' && text.Trim().WordCount() == 2))))
                   || (text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()))
                {


                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.StartsWith(text))
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {

                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                db.DeferredLoadingEnabled = false;
                                db.CommandTimeout = 5;

                                res = (from a in db.Gen_Locations.Where(c => c.ShortCutKey == text)
                                       select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                     ).ToArray<string>();

                                //res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                //       select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                //      ).ToArray<string>();

                            }



                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        aTxt.ShowListBox();

                        if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                        {

                            aTxt.onUpdating = true;
                            aTxt.ListBoxElement.SelectedIndex = 0;
                            aTxt.onUpdating = false;
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }
                }


                if (MapType == Enums.MAP_TYPE.NONE) return;

                StartAddressTimer(text);

            }
            else if (text.Length > 0)
            {
                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text))
                {

                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.ToLower() == text)
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        if (text == "." && finalList.Count() == 1)
                        {
                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                            aTxt.Text = finalList[0];
                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                            if (aTxt.Name == "txtFromAddress")
                            {

                                SetPickupZone(aTxt.Text);
                                txtFromFlightDoorNo.Focus();

                            }

                            else if (aTxt.Name == "txtToAddress")
                            {
                                SetDropOffZone(aTxt.Text);
                                txtToFlightDoorNo.Focus();

                            }
                        }
                        else
                        {

                            aTxt.ShowListBox();
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }

                    StartAddressTimer(text);
                }


            }
            else
            {
                //if (MapType == Enums.MAP_TYPE.NONE)
                //    return;
                aTxt.ResetListBox();
                aTxt.ListBoxElement.Items.Clear();
                aTxt.Values = null;

            }



        }



        private void PerformAddressChangeTimerPOI()
        {




            //res = (from a in new TaxiDataContext().stp_GetByRoadLevelData(fullPostCode, doorNo, street, place)
            //       select a.AddressLine1).ToArray<string>();




        }


        private void ShowAddressesPOI(string[] resValue)
        {
            int sno = 1;

            // var finalList = resValue;

            try
            {






                //

                var finalList = (from a in AppVars.zonesList
                                 from b in resValue
                                 where b.Contains(a) && (b.Substring(b.IndexOf(a), a.Length) == a && (b.IndexOf(a) - 1) >= 0 && b[b.IndexOf(a) - 1] == ' ' && GeneralBLL.GetHalfPostCodeMatch(b) == a)

                                 select b).ToArray<string>();


                if (finalList.Count() > 0)
                {



                    finalList = finalList.Union(resValue).ToArray<string>();


                    var finalList2 = (from a in resValue
                                      where General.GetPostCodeMatch(a).Length == 0
                                      select a).ToArray<string>();


                    finalList = finalList2.Union(finalList).ToArray<string>();

                }
                else
                {
                    finalList = resValue;

                    var finalList2 = (from a in resValue
                                      where General.GetPostCodeMatch(a).Length == 0
                                      select a).ToArray<string>();


                    finalList = finalList2.Union(finalList).ToArray<string>();
                }



                //if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
                //{
                //    searchTxt = searchTxt.Replace("#", "").Trim();



                //    string[] list = null;
                //    using (TaxiDataContext db = new TaxiDataContext())
                //    {
                //        list = db.Gen_RecentAddresses.OrderByDescending(c => c.SearchedOn).Take(50)
                //       .Where(c => c.AddressLine1.Contains(searchTxt) && (ddlCompany.SelectedValue == null || c.CompanyId == ddlCompany.SelectedValue.ToIntorNull()))
                //       .Distinct().Select(c => c.AddressLine1.Replace("&", "AND")).ToArray<string>();
                //    }


                //    if (list!=null && list.Count() > 0)
                //    {


                //        try
                //        {


                //            list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                //                    where (a as XElement).Value.Contains(searchTxt)
                //                    select (a as XElement).Value).Distinct().ToArray<string>();


                //            if (finalList != null)
                //            {

                //                finalList = list.Union(finalList).ToArray<string>();
                //            }
                //            else
                //            {

                //                finalList = list;
                //            }
                //        }
                //        catch
                //        {


                //        }
                //    }
                //}

                if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
                {
                    try
                    {
                        searchTxt = searchTxt.Replace("#", "").Trim();


                        string serch = "<add>" + searchTxt;
                        string[] list = null;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.CommandTimeout = 6;

                            list = db.Gen_RecentAddresses
                           .Where(c => c.AddressLine1.Contains(serch))
                           .OrderByDescending(c => c.SearchedOn).Take(50)
                           .Distinct().Select(c => c.AddressLine1.Replace("&", "AND")).ToArray<string>();
                        }


                        if (list != null && list.Count() > 0)
                        {





                            list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                                    where (a as XElement).Value.StartsWith(searchTxt)
                                    select (a as XElement).Value).Distinct().ToArray<string>();


                            if (finalList != null)
                            {

                                finalList = list.Union(finalList).ToArray<string>();
                            }
                            else
                            {

                                finalList = list;
                            }


                        }
                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            File.AppendAllText("recentaddress_exception.txt", DateTime.Now + " : " + ex.Message + Environment.NewLine);

                        }
                        catch
                        {


                        }


                    }
                }


                if (finalList.Count() < 10)
                {
                    finalList = finalList.Select(args => (sno++) + ". " + args).ToArray();
                }


                aTxt.ListBoxElement.Items.Clear();
                aTxt.ListBoxElement.Items.AddRange(finalList);
                //



                if (aTxt.ListBoxElement.Items.Count == 0)
                    aTxt.ResetListBox();
                else
                {


                    aTxt.ShowListBox();


                }

                if (searchTxt != aTxt.FormerValue.ToLower())
                {
                    aTxt.FormerValue = aTxt.Text;

                }

                if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                {

                    aTxt.onUpdating = true;
                    aTxt.ListBoxElement.SelectedIndex = 0;
                    aTxt.onUpdating = false;
                }

                //if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                //{


                //    //aTxt.onUpdating = true;
                //    //   aTxt.ListBoxElement.SelectedValueChanged -= ;
                //    //  aTxt.ListBoxElement.SelectedIndex = 0;
                //    //aTxt.onUpdating = false;
                //}
            }
            catch (Exception ex)
            {
                AddExcepLog("POIWORKER_COMPLETED : " + ex.Message);


            }
        }


        #endregion

        private void PerformAddressChangeTimerWOPOI()
        {

            string postCode = General.GetPostCodeMatch(searchTxt);
            string fullPostCode = postCode;


            if (!string.IsNullOrEmpty(postCode) && postCode.IsAlpha() == true)
                postCode = string.Empty;


            string street = searchTxt;



            int IsAsc = 0;
            if (!string.IsNullOrEmpty(postCode))
            {
                street = street.Replace(postCode, "").Trim();

                if (postCode.Contains(' ') == false)
                {
                    if (postCode.Length == 3 && Char.IsNumber(postCode[2]))
                    {

                        IsAsc = 1;
                    }
                    else if (postCode.Length == 2 && Char.IsNumber(postCode[1]))
                    {

                        IsAsc = 1;
                    }
                    else if (postCode.Length > 3 && Char.IsNumber(postCode[3]))
                    {

                        IsAsc = 2;
                    }


                }

            }


            if (!string.IsNullOrEmpty(street) && !string.IsNullOrEmpty(postCode) && street.IsAlpha() == false && street.Length < 4 && searchTxt.IndexOf(postCode) < searchTxt.IndexOf(street))
            {
                street = "";
                postCode = searchTxt;
            }


            if (IsAsc == 1)
            {



                if (!string.IsNullOrEmpty(street))
                {


                    res = (from a in AppVars.listOfAddress

                           where (a.AddressLine1.Contains(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))

                           orderby a.PostalCode

                           select a.AddressLine1

                                   ).Take(1000).ToArray<string>();

                }
                else
                {

                    res = (from a in AppVars.listOfAddress

                           where a.PostalCode.StartsWith(postCode)

                           orderby a.PostalCode

                           select a.AddressLine1

                         ).Take(600).ToArray<string>();
                }

            }
            else if (IsAsc == 2)
            {


                res = (from a in AppVars.listOfAddress

                       where (a.AddressLine1.Contains(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))

                       orderby a.PostalCode descending

                       select a.AddressLine1

                               ).Take(500).ToArray<string>();


                if (street.Contains(' ') && res.Count() == 0)
                {

                    string[] vals = street.Split(' ');
                    int valCnt = vals.Count();

                    res = (from a in AppVars.listOfAddress

                           where (vals.Count(c => a.AddressLine1.Contains(c)) == valCnt)

                           select a.AddressLine1

                         ).Take(30).ToArray<string>();


                }


            }
            else
            {

                if (postCode.Contains(' '))
                {

                    res = null;

                    if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool()
                        && AppVars.zonesList.Count() > 0
                        && fullPostCode.Length > 0)
                    {

                        fullPostCode = General.GetPostCodeMatch(fullPostCode);

                        if (fullPostCode.Length > 0 && searchTxt.Trim() == fullPostCode)
                        {


                            string[] res1 = (from a in AppVars.listOfAddress

                                             where a.PostalCode == postCode

                                             select a.AddressLine1

                                       ).Take(1).ToArray<string>();





                            res = (from a in new TaxiDataContext().stp_GetRoadLevelData(fullPostCode)
                                   select a.AddressLine1).ToArray<string>();


                            res = res1.Union(res).Distinct().ToArray<string>();


                        }


                        if (res.Count() == 0)
                        {
                            res = (from a in AppVars.listOfAddress

                                   where a.PostalCode.StartsWith(postCode)

                                   orderby a.PostalCode

                                   select a.AddressLine1

                                  ).Take(100).ToArray<string>();


                        }


                        //  string text = aTxt.Text.ToStr().ToUpper();

                        //string door = string.Empty;

                        //for (int i = 0; i <= 2; i++)
                        //{
                        //    if (char.IsNumber(text[i]))
                        //        door += text[i];
                        //    else
                        //        break;

                        //}

                        //string actualPostcode = (door + " " + fullPostCode).Trim();



                        //    AddressFindByTermApi.PostcodeAnywhere_SoapClient a = new Taxi_AppMain.AddressFindByTermApi.PostcodeAnywhere_SoapClient();
                        //    var res2 = a.CapturePlus_Interactive_Find_v2_00("DZ83-FP68-FC49-TD83", actualPostcode, "", "Everything", "GBR", "EN");



                        //    if (res2.Count > 0)
                        //    {


                        //            AddressRetrieveByIdApi.PostcodeAnywhere_SoapClient ssc = new AddressRetrieveByIdApi.PostcodeAnywhere_SoapClient();

                        //            res = new string[res2.Count];



                        //            for (int i = 0; i < res2.Count; i++)
                        //            {

                        //                var addr = res2[i].Text;

                        //                var splitArr = addr.Split(',');
                        //                if (splitArr.Count() == 5)
                        //                {

                        //                    addr = splitArr[2] +" "+ splitArr[3] + " "+ splitArr[4] + " "+ splitArr[0];

                        //                }
                        //                else if (splitArr.Count() == 6)
                        //                {
                        //                    addr = splitArr[2] + " " + splitArr[3] + " " + splitArr[4] + " " + splitArr[5] + " " + splitArr[0];

                        //                }
                        //                else if (splitArr.Count() == 7)
                        //                {
                        //                    addr = splitArr[3] + " " + splitArr[4] + " " + splitArr[5] + " " + splitArr[6] + " " + splitArr[0];

                        //                }
                        //                else if (splitArr.Count() == 4)
                        //                {
                        //                    addr = splitArr[1] + " " + splitArr[2] + " " + splitArr[3] + " " + splitArr[0];

                        //                }



                        //                res[i] = addr.ToUpper().Trim();
                        //              //  var addr = ssc.CapturePlus_Interactive_Retrieve_v2_10("DZ83-FP68-FC49-TD83", res2[i].Id);


                        //               // if (addr != null && addr.Count > 0 && addr[0].PostalCode.ToStr().Length > 0)
                        //               //     res[i] = addr[0].Label.Replace("M I N D\n", "").Trim().Replace("\nUNITED KINGDOM", "").Trim().Replace("\n", " ").Trim().ToUpper();

                        //            }


                        //            res.ToList().RemoveAll(c => c.ToStr().Trim().Length == 0);
                        //       // }
                        //        //  txtResult.Text = fullAddress[0].Label.Replace("M I N D\n", "").Trim().Replace("\nUNITED KINGDOM", "").Trim().Replace("\n", " ").Trim().ToUpper();
                        //    }




                    }
                    else
                    {

                        res = (from a in AppVars.listOfAddress

                               where (a.AddressLine1.Contains(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode))))

                               select a.AddressLine1

                                  ).Take(500).ToArray<string>();
                    }
                }
                else
                {


                    if (street.Length == 3 && street.IsAlpha() && !string.IsNullOrEmpty(AppVars.objPolicyConfiguration.CountyString))
                    {


                        string[] areas = AppVars.objPolicyConfiguration.CountyString.Split(',');

                        string last = street[2].ToStr();
                        street = street.Remove(2);

                        res = (from b in AppVars.listOfAddress.Where(a => areas.Any(c => a.AddressLine1.Contains(c)) && a.AddressLine1.Split(' ').Count() > 5)
                                   //  let x = (areas.Any(c => b.Address.Contains(c)) ? b.Address.Split(' ') : null)
                               let x = b.AddressLine1.Split(' ')
                               where

                                  (

                               (x.ElementAt(0).StartsWith(street) && x.ElementAt(1).StartsWith(last))
                            || (x.ElementAt(0).StartsWith(street) && areas.Contains(x.ElementAt(2)) == false && x.ElementAt(2).StartsWith(last))
                                )

                               select b.AddressLine1

                                  ).Take(200).ToArray<string>();



                    }
                    else
                    {


                        if (street.WordCount() == 1 && street.ContainsNoSpaces())
                        {
                            //  street = street + " ";




                            if (AppVars.zonesList.Count() == 0)
                            {
                                res = (from a in AppVars.listOfAddress

                                       where (a.AddressLine1.StartsWith(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))
                                       select a.AddressLine1

                                ).Take(500).ToArray<string>();
                            }
                            else
                            {
                                res = (from a in AppVars.listOfAddress

                                       where (a.AddressLine1.StartsWith(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))
                                       select a.AddressLine1

                               ).Take(100).ToArray<string>();

                            }


                            if (AppVars.zonesList.Count() > 0)
                            {

                                string[] res2 = (from a in AppVars.listOfAddress

                                                 where (a.AddressLine1.StartsWith(street))
                                                 && AppVars.zonesList.Count(c => a.PostalCode.StartsWith(c)) > 0
                                                 select a.AddressLine1

                                    ).Take(200).ToArray<string>();

                                res = res2.Union(res).Distinct().ToArray<string>();


                            }










                        }
                        else
                        {



                            if (AppVars.zonesList.Count() > 0)
                            {




                                if (postCode.Length == 0)
                                {

                                    res = (from a in AppVars.listOfAddress


                                           where

                                           (a.AddressLine1.StartsWith(street))
                                           select a.AddressLine1

                                       ).Take(500).ToArray<string>();
                                }
                                else
                                {
                                    res = (from a in AppVars.listOfAddress


                                           where

                                           ((a.AddressLine1.StartsWith(street))
                                        && ((a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))

                                           select a.AddressLine1

                                      ).Take(500).ToArray<string>();


                                }


                                res = res.Union((from a in AppVars.listOfAddress


                                                 where

                                                 (a.AddressLine1.Contains(street)
                                                 && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))




                                                 select a.AddressLine1

                                   ).Take(2000)
                                     ).Distinct().ToArray<string>();




                            }
                            else
                            {

                                res = (from a in AppVars.listOfAddress

                                       where (a.AddressLine1.Contains(street) && ((postCode == string.Empty || a.PostalCode.StartsWith(postCode) || a.PostalCode.Strip(' ').StartsWith(postCode))))



                                       select a.AddressLine1

                                    ).Take(1000).ToArray<string>();
                            }

                        }

                    }



                    if (street.Contains(' ') && res.Count() == 0)
                    {



                        string[] vals = street.Split(' ');
                        int valCnt = vals.Count();


                        res = (from a in AppVars.listOfAddress

                               where (vals.Count(c => a.AddressLine1.Contains(c)) == valCnt)



                               select a.AddressLine1

                             ).Take(30).ToArray<string>();


                    }



                }



            }

            ShowAddresses();

        }


        private void SetPickupZone(string val)
        {

            ddlPickupPlot.SelectedValue = GetZoneId(val.ToStr().ToUpper()).ToInt();


            if (chkLead.Checked == false && leadZoneDueTime != null)
            {
                try
                {
                    int hour = leadZoneDueTime.Value.Hour;
                    int min = leadZoneDueTime.Value.Minute;

                    numLead.Value = ((hour * 60) + min);
                }
                catch
                {


                }

            }
            else
            {
                try
                {
                    if (ddlPickupPlot.SelectedValue == null)
                    {


                        if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        {

                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.DeferredLoadingEnabled = false;
                                db.CommandTimeout = 3;

                                string postcode = General.GetPostCodeMatch(txtFromAddress.Text.Trim().ToUpper());
                                if (postcode.Length > 0)
                                {
                                    int locId = db.Gen_Locations.FirstOrDefault(c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT && c.PostCode == postcode).DefaultIfEmpty().Id;
                                    if (locId > 0)
                                    {
                                        int airportlead = db.Gen_Syspolicy_LocationExpiries.FirstOrDefault(c => c.LocationId == locId).DefaultIfEmpty().ExpiryMins.ToInt();


                                        // chkLead.Checked = true;
                                        numLead.Value = airportlead;

                                    }
                                }


                            }
                        }
                        else
                        {
                            numLead.Value = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToDecimal();


                        }


                    }
                }
                catch
                {


                }


            }




        }

        private void SetDropOffZone(string val)
        {
            ddlDropOffPlot.SelectedValue = GetZoneId(val.ToStr().ToUpper()).ToInt();
        }

        private void RemoveNumbering(string formerVal)
        {

            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

            if (aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
            {

                aTxt.Text = (formerVal.ToStr() + " " + aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim()).Trim();
            }
            else
            {
                if (EnablePOI)
                {

                    aTxt.Text = aTxt.Text.ToStr().Trim();
                }
                else
                {
                    aTxt.Text = (formerVal.ToStr() + " " + aTxt.Text.ToStr().Trim()).Trim();

                }
            }

            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        }





        private void DisplayBooking_Map()
        {
            try
            {





                string fromAddress = txtFromAddress.Text.ToStr().ToUpper();


                fromAddress = txtFromAddress.Text.ToStr().ToUpper();


                string[] viaLocs = new string[0];

                if (pnlVia != null)
                {
                    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();
                }

                string toAddress = txtToAddress.Text.ToStr().ToUpper();


                toAddress = txtToAddress.Text.ToStr().ToUpper();



                mileageError = false;
                milesList.Clear();

                if (fromAddress.Length > 0 && toAddress.Length > 0)
                {

                    milesList.Add(CalculateTotalDistance(fromAddress, viaLocs, toAddress));

                    if (this.IsHandleCreated)
                    {


                        DisplayMilesHandler d = new DisplayMilesHandler(ShowMilesFromGoogle);
                        this.BeginInvoke(d);

                    }
                }

            }
            catch (Exception ex)
            {


            }

        }

        private void ShowMilesFromGoogle()
        {

            if (mileageError)
                MileageError();
            else
            {






                lblMap.Text = "Distance : " + string.Format("{0:#.##}", milesList.Sum()) + " miles";





            }
            btnPickFares.Enabled = true;
        }

        List<decimal> milesList = new List<decimal>();


        public struct DwmBlurbehind
        {
            public int DwFlags;
            public bool FEnable;
            public IntPtr HRgnBlur;
            public bool FTransitionOnMaximized;
        }
        private bool EnablePOI = false;

        private void Control_Paint(object sender, PaintEventArgs e)
        {
            Control activeControl = this.ActiveControl;

            if (activeControl != null && activeControl.Parent == sender)
            {

                if (activeControl.Name != "chkQuotedPrice" && activeControl.Name != "dtpPickupDate" && activeControl.Name!="dtpPickupTime" && activeControl.Name != "chkAutoDespatch" && activeControl.Name != "chkBidding" && activeControl.Name != "chkDisableDriverSMS" && activeControl.Name != "chkDisablePassengerSMS" && activeControl.Name!="ddlDepartment")
                {

                    
                    //activeControl.BackColor = Color.AliceBlue;

                    Rectangle r = new Rectangle(activeControl.Location.X - Convert.ToInt32(1.8), activeControl.Location.Y - Convert.ToInt32(1.8),
                                     activeControl.Size.Width + Convert.ToInt32(2.8), activeControl.Size.Height + Convert.ToInt32(2.8));

                    LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush(
                                        r,
                                        Color.Blue,
                                        Color.Green,
                                        LinearGradientMode.Horizontal);
                    e.Graphics.FillRectangle(myLinearGradientBrush, r);


                    e.Graphics.DrawRectangle(Pens.LightBlue,
                            r);



                }
                else
                {


                }

            }

        }

        private void Control_ReceivedFocus(object sender, EventArgs e)
        {
            this.Refresh();

        }

        private void InstallEventHandlers(Control containerControl)
        {
            containerControl.Paint -= Control_Paint;
            containerControl.Paint += Control_Paint;


            foreach (Control nestedControl in containerControl.Controls)
            {

                if (nestedControl.Name != "dtpPickupTime" && nestedControl.Name!="dtpPickupDate" && nestedControl.Name !="ddlDepartment")
                {
                    nestedControl.Enter -= Control_ReceivedFocus;
                    nestedControl.Enter += Control_ReceivedFocus;



                    if (nestedControl is ScrollableControl)
                        InstallEventHandlers(nestedControl);
                }
            }
        }




        void frmBooking_Load(object sender, EventArgs e)
        {
            try
            {

                // timer2.Enabled = true;
                //   InstallEventHandlers(ddlDriver);

                if (objMaster.Current == null)
                {
                    ddlBookingType.SelectedValue = this.PickBookingTypeId;

                    PickVehicleDetails();

                    if (this.PickSubCompanyId != null && this.PickSubCompanyId != ddlSubCompany.SelectedValue.ToInt())
                        ddlSubCompany.SelectedValue = this.PickSubCompanyId;



                    if (this.CustomerPermanentNotes.ToStr().Trim().Length > 0)
                    {
                        txtSpecialRequirements.Text = this.CustomerPermanentNotes.ToStr();
                        chkPermanentCustNotes.Checked = true;
                    }

                    //if (this.PickVehicleTypeId != 0)
                    //    ddlVehicleType.SelectedValue = PickVehicleTypeId;


                    if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                    {
                        //   chkPermanentCustNotes.Checked = true;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var excludedDrvs = btnExcludeDrivers.Tag.ToStr().Trim().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);



                            var drivers = string.Join(",", (from a in db.Fleet_Drivers

                                                                // join b in excludedDrvs on a.Id equals b
                                                            where a.IsActive == true && excludedDrvs.Contains(a.Id.ToString())
                                                            select a.DriverNo).ToArray<string>());


                            btnExcludeDrivers.Text += Environment.NewLine + drivers;
                            //btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                        }
                    }

                    if (this.PickViaString.ToStr().Trim().Length > 0)
                    {
                        int cnt = 1;
                        try
                        {
                            ShowViaPoint(true);
                            foreach (var item in this.PickViaString.ToStr().Trim().Split(new char[] { ':' }))
                            {

                                if ((item.Contains("Via " + cnt) && item.Replace(("Via " + cnt), "").Trim().Length > 0) || item.Contains("Via " + cnt) == false)
                                {
                                    var row = grdVia.Rows.AddNew();

                                    row.Cells["VIALOCATIONVALUE"].Value = item.Replace(("Via " + cnt), "").Trim();

                                    if (row.Cells["VIALOCATIONVALUE"].Value.ToStr().Contains(","))
                                        row.Cells["VIALOCATIONVALUE"].Value = row.Cells["VIALOCATIONVALUE"].Value.ToStr().Replace(",", " ").Trim();

                                    row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;

                                    row.Cells["FROMTYPELABEL"].Value = "";

                                    //  row.Cells["FROMTYPEVALUE"].Value = "Address";

                                    row.Cells["VIALOCATIONID"].Value = null;
                                    row.Cells["VIALOCATIONLABEL"].Value = "Via Address";







                                }

                                cnt++;



                            }

                            ShowViaPoint(false);

                            // opt_one.TabIndexChanged += new EventHandler(opt_one_TabIndexChanged);

                        }
                        catch
                        {


                        }

                    }


                }
                else if (objMaster.Current != null && objMaster.Current.DriverId != null)
                {

                    ComboFunctions.FillDriverNoQueueCombo(ddlDriver, objMaster.Current.DriverId, objMaster.Current.Fleet_Driver.DriverNo + " - " + objMaster.Current.Fleet_Driver.DriverName);

                    //  chkAllocateDriver.Checked = objMaster.Current.IsConfirmedDriver.ToBool();
                    // this.chkAllocateDriver.CheckedChanged += new System.EventHandler(this.chkAllocateDriver_CheckedChanged);

                }




                InstallEventHandlers(this);
                InstallEventHandlers(pnlMain);
                InstallEventHandlers(pnlCustomer);
                InstallEventHandlers(pnlPaymentMode);
                InstallEventHandlers(pnlFares);
                InstallEventHandlers(pnlBookingFees);
                InstallEventHandlers(panel2);

                //  pnlPaymentMode.BackColor = Color.Orange;

                //  InitializeReturnFareControls();
                InitializeCompanyPrice();
                numReturnCompanyFares.Enabled = false;
                numCompanyFares.Enabled = false;




                this.StartPosition = FormStartPosition.CenterScreen;


                if (ddlDepartment != null && ddlDepartment.Items.Count > 0 && ddlDepartment.SelectedValue != null)
                    ddlDepartment.SelectedValue = null;
            }
            catch
            {


            }

            btn_notes.Leave += new EventHandler(btn_notes_Leave);
            opt_one.KeyDown += new KeyEventHandler(opt_one_KeyDown);
            /// 

            // this.Opacity = 0.09;


        }





        public class ComboboxItem
        {
            public string Text { get; set; }
            public object Value { get; set; }

            public override string ToString()
            {
                return Text;
            }
        }
        [DllImport("user32.dll")]
        private static extern bool GetWindowRect(IntPtr hWnd, ref Rectangle rect);
        private static IntPtr hWndThis;
        [StructLayout(LayoutKind.Sequential)]
        public struct ParentProcessUtilities
        {
            // These members must match PROCESS_BASIC_INFORMATION
            internal IntPtr Reserved1;
            internal IntPtr PebBaseAddress;
            internal IntPtr Reserved2_0;
            internal IntPtr Reserved2_1;
            internal IntPtr UniqueProcessId;
            internal IntPtr InheritedFromUniqueProcessId;

            [DllImport("ntdll.dll")]
            private static extern int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ref ParentProcessUtilities processInformation, int processInformationLength, out int returnLength);

            /// <summary>
            /// Gets the parent process of the current process.
            /// </summary>
            /// <returns>An instance of the Process class.</returns>
            public static Process GetParentProcess()
            {
                return GetParentProcess(Process.GetCurrentProcess().Handle);
            }

            /// <summary>
            /// Gets the parent process of specified process.
            /// </summary>
            /// <param name="id">The process id.</param>
            /// <returns>An instance of the Process class.</returns>
            public static Process GetParentProcess(int id)
            {
                Process process = Process.GetProcessById(id);
                return GetParentProcess(process.Handle);
            }

            /// <summary>
            /// Gets the parent process of a specified process.
            /// </summary>
            /// <param name="handle">The process handle.</param>
            /// <returns>An instance of the Process class.</returns>
            public static Process GetParentProcess(IntPtr handle)
            {
                ParentProcessUtilities pbi = new ParentProcessUtilities();
                int returnLength;
                int status = NtQueryInformationProcess(handle, 0, ref pbi, Marshal.SizeOf(pbi), out returnLength);
                if (status != 0)
                    throw new Win32Exception(status);

                try
                {
                    return Process.GetProcessById(pbi.InheritedFromUniqueProcessId.ToInt32());
                }
                catch (ArgumentException)
                {
                    // not found
                    return null;
                }
            }
        }

        /// <summary>

        void opt_one_TabIndexChanged(object sender, EventArgs e)
        {
            numFareRate.Focus();
        }

        void btn_notes_Leave(object sender, EventArgs e)
        {
            txtCustomerMobileNo.Focus();
        }






        private void FormatViaGrid()
        {


            grdVia.RowsChanged += new GridViewCollectionChangedEventHandler(grdVia_RowsChanged);
            grdVia.AutoSizeRows = true;
            grdVia.TableElement.TableHeaderHeight = 0;
            grdVia.ShowGroupPanel = false;
            grdVia.AllowAddNewRow = false;
            grdVia.AllowEditRow = false;
            grdVia.ShowRowHeaderColumn = false;

            grdVia.TableElement.BorderWidth = 0;
            grdVia.TableElement.BorderColor = Color.Transparent;

            grdVia.EnableHotTracking = false;
            grdVia.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
            grdVia.EnableAlternatingRowColor = true;
            grdVia.TableElement.AlternatingRowColor = Color.AliceBlue;

            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "ID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "IsUpdated";
            grdVia.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "MASTERID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "FROMVIALOCTYPEID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "VIALOCATIONID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "FROMTYPELABEL";
            col.HeaderText = "";
            col.Width = 100;
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "FROMTYPEVALUE";
            col.Width = 150;
            col.HeaderText = "";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "EMPTY";
            col.IsVisible = false;
            col.Width = 100;
            grdVia.Columns.Add(col);


            AddReverceFromColumn(grdVia);
            AddReverceDestinationColumn(grdVia);


            col = new GridViewTextBoxColumn();
            col.Name = "VIALOCATIONLABEL";
            col.HeaderText = "";
            col.Width = 120;
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "VIALOCATIONVALUE";
            col.Width = 280;
            col.HeaderText = "";
            grdVia.Columns.Add(col);

            AddColumn(grdVia, "ColMoveUp", "Delete", Resources.Resource1.lc_moveup);
            AddColumn(grdVia, "ColMoveDown", "Delete", Resources.Resource1.lc_movedown);

            AddColumn(grdVia, "ColDelete", "Delete", null);

            grdVia.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
            grdVia.CellFormatting += new CellFormattingEventHandler(grdVia_CellFormatting);
        }

        void grdVia_CellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                if (e.CellElement is GridDataCellElement)
                {
                    if (e.Column is GridViewCommandColumn)
                    {

                        if (e.Column.Name == "ColMoveUp")
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.lc_moveup;

                        else if (e.Column.Name == "ColMoveDown")
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.lc_movedown;
                    }


                }
            }
            catch
            {


            }
        }



        private void MoveRow(bool moveUp)
        {
            try
            {
                GridViewRowInfo currentRow = this.grdVia.CurrentRow;
                if (currentRow == null)
                {
                    return;
                }

                int index = moveUp ? currentRow.Index - 1 : currentRow.Index + 1;

                if (index < 0 || index >= this.grdVia.RowCount)
                {
                    return;
                }
                this.grdVia.Rows.Move(index, currentRow.Index);
                this.grdVia.CurrentRow = this.grdVia.Rows[index];
                this.grdVia.CurrentRow.Cells["IsUpdated"].Value = "1";
            }
            catch
            {


            }
        }

        public void AddColumn(RadGridView grid, string name, string headerText, Bitmap img)
        {
            try
            {
                GridViewCommandColumn col = new GridViewCommandColumn();
                col.Name = name;

                if (img == null)
                {
                    col.UseDefaultText = true;
                    col.DefaultText = headerText;
                    col.BestFit();
                }
                else
                {
                    col.Width = 30;
                }

                col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
                col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                grid.Columns.Add(col);

                grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
            }
            catch
            {


            }
        }




        void grid_CommandCellClick(object sender, EventArgs e)
        {
            try
            {

                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                if (gridCell.ColumnInfo.Name == "ColDelete")
                {
                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete a via Address ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {
                        RadGridView grid = gridCell.GridControl;
                        grid.CurrentRow.Delete();

                        CalculateAutoFares();
                    }
                }
                else if (gridCell.ColumnInfo.Name == "ColRervP")
                {
                    if (txtFromAddress.Text != "")
                    {
                        ReverceToPickUpPoint();

                        CalculateAutoFares();
                    }

                }
                else if (gridCell.ColumnInfo.Name == "ColRervD")
                {
                    if (txtToAddress.Text != "")
                    {
                        ReverceToDestination();
                        CalculateAutoFares();
                    }
                }
                else if (gridCell.ColumnInfo.Name == "ColMoveUp")
                {
                    MoveRow(true);
                }
                else if (gridCell.ColumnInfo.Name == "ColMoveDown")
                {
                    MoveRow(false);
                }
            }
            catch
            {


            }

        }


        void grdVia_RowsChanged(object sender, GridViewCollectionChangedEventArgs e)
        {
            if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
            {

                grdVia.CurrentRow = null;
            }
        }

        void ddlViaLocation_OnRefreshing(object sender, EventArgs e)
        {
            FillViaLocations();
        }

        private void AddNew()
        {
            OnNew();
        }


        private void OnNew()
        {
            ddlVehicleType.SelectedValue = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();


            SetCashPaymentType();

            chkQuotedPrice.Visible = true;
            chkQuotation.Visible = AppVars.objPolicyConfiguration.EnableQuotation.ToBool();

            SetJourneyWise(ToggleState.On);
            UseCompanyRates(ToggleState.Off);
            txtBookingNo.Text = "Not Allocated";


            FocusOnPickupTime();
         //   dtpPickupTime_txt.Focus();
           // dtpPickupTime.Focus();
           

            RadListDataItem item = new RadListDataItem();
            item.Text = "Percent";
            item.Value = "Percent";
            item.Selected = true;

            ddlCommissionType.Items.Add(item);

            item = new RadListDataItem();
            item.Text = "Amount";
            item.Value = "Amount";

            ddlCommissionType.Items.Add(item);


            if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
            {
                IsAutoDespatchEnabled(true);
                IsBiddingEnabled(true);
                // IsAutoDespatchEnabled(AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool());

                // IsBiddingEnabled(AppVars.objPolicyConfiguration.EnableBidding.ToBool());

            }
            else
            {
                chkAutoDespatch.Visible = false;
                chkAutoDespatch.Checked = false;
                //  pnlAutoDespatch.Height = 118;

                chkBidding.Visible = false;
                chkBidding.Checked = false;


            }

            if (AppVars.objPolicyConfiguration.EnableBabySeats.ToBool())
            {
                InitializeBabySeats();

                if (ddlBabyseat1 != null)
                {

                    ddlBabyseat1.SelectedIndex = 0;
                    ddlbabyseat2.SelectedIndex = 0;
                }
            }



            if (AppVars.objPolicyConfiguration.ShowBlankPickupDateAsDefault.ToBool() == false)
            {

                dtpPickupDate.Value = DateTime.Now.ToDate();
               
                dtpPickupTime.Value = DateTime.Now;
                dtpPickupDate.Leave += new EventHandler(dtpPickupDate_Leave);


                dtpPickupTime_txt.TextChanged += dtpPickupTime_txt_TextChanged;
                dtpPickupTime_txt.KeyDown += dtpPickupTime_txt_KeyDown;
                dtpPickupTime_txt.Leave += dtpPickupTime_txt_Leave;
             
                dtpPickupTime_txt.GotFocus += dtpPickupTime_txt_GotFocus;
        dtpPickupTime_txt.MouseUp += dtpPickupTime_txt_MouseUp;
               
            }


            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {

                dtpPickupDate.Enter += new EventHandler(dtpPickupDate_Enter);
            }



            if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 1)
            {
                lblPaymentRef.Visible = true;
                txtPaymentReference.Visible = true;




            }

            else if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 2)
            {
                lblPaymentRef.Visible = false;
                txtPaymentReference.Visible = false;


            }
            else if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 3)
            {


                lblPaymentRef.Visible = false;
                txtPaymentReference.Visible = false;
                InitializeAgentPanel();

                ddlAgentCommissionType.SelectedIndex = 1;
            }




        }

       

        DateTime? lastPickupDate = null;
        void dtpPickupDate_Enter(object sender, EventArgs e)
        {
            lastPickupDate = dtpPickupDate.Value.ToDateorNull();

        }



        private void InitializeBabySeats()
        {
            this.ddlBabyseat1 = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.ddlbabyseat2 = new System.Windows.Forms.ComboBox();
            this.label9 = new System.Windows.Forms.Label();


            this.pnlMain.Controls.Add(this.ddlbabyseat2);
            this.pnlMain.Controls.Add(this.label9);
            this.pnlMain.Controls.Add(this.ddlBabyseat1);
            this.pnlMain.Controls.Add(this.label8);


            // 
            // ddlBabyseat1
            // 
            this.ddlBabyseat1.BackColor = System.Drawing.Color.White;
            this.ddlBabyseat1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlBabyseat1.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlBabyseat1.FormattingEnabled = true;


            object[] arr = General.GetQueryable<Gen_BabySeat>(null).OrderBy(c => c.Id).Select(a => a.BabySeatName).ToArray<string>();


            this.ddlBabyseat1.Items.AddRange(arr);

            //this.ddlBabyseat1.Items.AddRange(new object[] {
            //"No child seat required",
            //"Rear-facing infant seat (suitable for babies)",
            //"Forward-facing upring child seat (for toddlers and smaller children)",
            //"Child booster seat"});
            this.ddlBabyseat1.Location = new System.Drawing.Point(132, 436);
            this.ddlBabyseat1.Name = "ddlBabyseat1";
            this.ddlBabyseat1.Size = new System.Drawing.Size(219, 24);
            this.ddlBabyseat1.TabIndex = 271;
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.BackColor = System.Drawing.Color.Transparent;
            this.label8.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label8.Location = new System.Drawing.Point(6, 437);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(103, 18);
            this.label8.TabIndex = 270;
            this.label8.Text = "First Child Seat";
            // 
            // ddlbabyseat2
            // 
            this.ddlbabyseat2.BackColor = System.Drawing.Color.White;
            this.ddlbabyseat2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlbabyseat2.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlbabyseat2.FormattingEnabled = true;
            //this.ddlbabyseat2.Items.AddRange(new object[] {
            //"No child seat required",
            //"Rear-facing infant seat (suitable for babies)",
            //"Forward-facing upring child seat (for toddlers and smaller children)",
            //"Child booster seat"});
            this.ddlbabyseat2.Items.AddRange(arr);


            this.ddlbabyseat2.Location = new System.Drawing.Point(132, 467);
            this.ddlbabyseat2.Name = "ddlbabyseat2";
            this.ddlbabyseat2.Size = new System.Drawing.Size(219, 24);
            this.ddlbabyseat2.TabIndex = 273;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.BackColor = System.Drawing.Color.Transparent;
            this.label9.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label9.Location = new System.Drawing.Point(6, 468);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(123, 18);
            this.label9.TabIndex = 272;
            this.label9.Text = "Second Child Seat";


        }

        private void IsBiddingEnabled(bool enabled)
        {

            if (enabled)
            {
                chkBidding.Visible = true;
                chkBidding.Checked = true;
            }
            else
            {
                // chkBidding.Visible = false;
                chkBidding.Checked = false;

            }
        }

        private void IsAutoDespatchEnabled(bool enabled)
        {
            if (enabled)
            {
                chkAutoDespatch.Visible = true;
                chkAutoDespatch.Checked = true;
                // pnlAutoDespatch.Height = 148;


            }
            else
            {
                // chkAutoDespatch.Visible = false;
                chkAutoDespatch.Checked = false;

                // pnlAutoDespatch.Height = 118;

                // pnlAutoDespatch.Height = 148;



            }

            ShowAutoDespatchLabels(enabled);

        }

        private void ShowAutoDespatchLabels(bool show)
        {

            //  numBeforeMinutes.Visible = show;


            numBeforeMinutes.Value = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt()
                                    + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();


        }

        UIX.AutoCompleteTextBox aTxt;



        private void ShowAddresses()
        {
            int sno = 1;

            var finalList = (from a in AppVars.zonesList
                             from b in res
                             where b.Contains(a) && (b.Substring(b.IndexOf(a), a.Length) == a && (b.IndexOf(a) - 1) >= 0 && b[b.IndexOf(a) - 1] == ' ' && GeneralBLL.GetHalfPostCodeMatch(b) == a)

                             select b).ToArray<string>();


            if (finalList.Count() > 0)
            {
                finalList = finalList.Union(res).ToArray<string>();

            }
            else
                finalList = res;



            if (finalList.Count() > 1 && AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
            {

                var list = General.GetQueryable<Gen_RecentAddress>(null).OrderByDescending(c => c.SearchedOn).Take(50)
                    .Where(c => c.AddressLine1.Contains(searchTxt) && (ddlCompany.SelectedValue == null || c.CompanyId == ddlCompany.SelectedValue.ToIntorNull()))
                    .Distinct().Select(c => c.AddressLine1).ToArray<string>();

                if (list.Count() > 0)
                {


                    try
                    {

                        list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                                where (a as XElement).Value.Contains(searchTxt)
                                select (a as XElement).Value).Distinct().ToArray<string>();


                        finalList = list.Union(finalList).ToArray<string>();
                    }
                    catch
                    {


                    }
                }
            }


            if (finalList.Count() < 10)
            {
                finalList = finalList.Select(args => (sno++) + ". " + args).ToArray();
            }


            aTxt.ListBoxElement.Items.Clear();
            aTxt.ListBoxElement.Items.AddRange(finalList);


            if (aTxt.ListBoxElement.Items.Count == 0)
                aTxt.ResetListBox();
            else
            {


                aTxt.ShowListBox();


            }

            if (searchTxt != aTxt.FormerValue.ToLower())
            {
                aTxt.FormerValue = aTxt.Text;

            }
        }





        private void FillToLocations()
        {



            int locTypeId = ddlToLocType.SelectedValue.ToInt();
            if (locTypeId == 0)
                return;

            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {
                // Live
                //SetReturnAirportJob(opt_JReturnWay.ToggleState);
                //DetachLocationsSelectionEvent(ddlToLocation);
                //ComboFunctions.FillLocationsCombo(ddlToLocation, c => c.LocationTypeId == locTypeId);
                //ddlToLocation.SelectedIndex = -1;
                //AttachLocationSelectionEvent(ddlToLocation);

                //SetReturnFrom(ToggleState.On);
                //


                // nEW

                SetReturnAirportJob(opt_return.Checked ? ToggleState.On : ToggleState.Off);
                //  DetachLocationsSelectionEvent(ddlToLocation);
                // ComboFunctions.FillLocationsCombo(ddlToLocation, c => c.LocationTypeId == locTypeId);
                // ddlToLocation.SelectedIndex = -1;
                //AttachLocationSelectionEvent(ddlToLocation);

                SetReturnFrom(ToggleState.Off);
                //
                //   txtToAddress.Height = 33;//58;
            }

            else
            {
                //   txtToAddress.Height = 33;// 80;
                lblToLoc.Text = "Destination";
                txtToAddress.Visible = true;

                //   DetachLocationsSelectionEvent(ddlToLocation);
                //     ddlToLocation.SelectedValue = null;
                //    ddlToLocation.Visible = false;
                //  AttachLocationSelectionEvent(ddlToLocation);

                txtToPostCode.Text = string.Empty;
                txtToPostCode.Visible = false;


                lblToDoorFlightNo.Text = "Notes";
                lblToDoorFlightNo.Visible = true;

                //needtouncomment
                // lblToDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, this.NewtoDoorNoLoc.Y + 1);

                txtToFlightDoorNo.MaxLength = 100;
                ////fwdkh1// txtToFlightDoorNo.Width = 170;

                txtToFlightDoorNo.Text = string.Empty;
                txtToFlightDoorNo.Visible = true;

                //needtouncomment
                // txtToFlightDoorNo.Location = this.NewtoDoorNoLoc;

                txtToStreetComing.Text = string.Empty;
                txtToStreetComing.Visible = false;


                // lblToDoorFlightNo.Visible = false;
                lblToStreetComing.Visible = false;


                if (locTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    //txtToAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                    txtToAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                    UpdateAutoCalculateFares();
                }
            }



            //else
            //{



            //    SetOthersToLocation();

            //    DetachLocationsSelectionEvent(ddlToLocation);
            //    ComboFunctions.FillLocationsCombo(ddlToLocation, c => c.LocationTypeId == locTypeId);
            //    ddlToLocation.SelectedIndex = -1;
            //    AttachLocationSelectionEvent(ddlToLocation);



            //    SetReturnFrom(ToggleState.Off);

            //    if (opt_JReturnWay.ToggleState == ToggleState.Off)
            //    {
            //       // btnReturnFrom.Text = "Drop Off Plot";
            //        txtReturnFrom.Visible = false;
            //        ddlDropOffPlot.Visible = true;

            //    }
            //}




        }




        private void SetOthersToLocation()
        {
            txtToPostCode.Text = string.Empty;
            txtToPostCode.Visible = false;

            //  txtToFlightDoorNo.Text = string.Empty;
            //  txtToFlightDoorNo.Visible = false;

            txtToStreetComing.Text = string.Empty;
            txtToStreetComing.Visible = false;

            // lblToDoorFlightNo.Visible = false;
            lblToStreetComing.Visible = false;

            // txtToAddress.Text = string.Empty;
            //txtToAddress.Visible = false;


            // ddlToLocation.Visible = true;
            // lblToLoc.Text = "To Location";





            lblToDoorFlightNo.Text = "Notes";
            lblToDoorFlightNo.Visible = true;




            lblToDoorFlightNo.Location = new Point(603, 134);
            txtToFlightDoorNo.Location = new Point(681, 129);

            lblToStreetComing.Location = new Point(602, 158);
            txtToStreetComing.Location = new Point(681, 153);


            lblFromDoorFlightNo.Location = new Point(602, 71);
            txtFromFlightDoorNo.Location = new Point(681, 70);









            // lblToDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, this.NewtoDoorNoLoc.Y + 1);

            txtToFlightDoorNo.MaxLength = 100;
            ////fwdkh1//  txtToFlightDoorNo.Width = 200;

            txtToFlightDoorNo.Text = string.Empty;
            txtToFlightDoorNo.Visible = true;

            //needtouncomment
            //  txtToFlightDoorNo.Location = this.NewtoDoorNoLoc;



            //

            if (ddlReturnFromAirport != null)
            {

                ddlReturnFromAirport.SelectedValue = null;
                ddlReturnFromAirport.Visible = false;
                lblReturnFromAirport.Visible = false;
            }
        }


        private void SetReturnAirportJob(ToggleState toggle)
        {
            if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            {

                if (toggle == ToggleState.On)
                {

                    //  txtToAddress.Text = string.Empty;
                    //   txtToAddress.Visible = false;

                    //  ddlToLocation.Visible = true;

                    //  txtToPostCode.Text = string.Empty;
                    //  txtToPostCode.Visible = false;

                    txtToFlightDoorNo.MaxLength = 100;
                    ////fwdkh1//  txtToFlightDoorNo.Width = 170;

                    //needtouncomment
                    // lblToDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, this.OldtoDoorNoLoc.Y);
                    //  txtToFlightDoorNo.Location = this.OldtoDoorNoLoc;
                    txtToFlightDoorNo.Visible = true;
                    txtToStreetComing.Visible = true;

                    lblToDoorFlightNo.Visible = true;
                    lblToStreetComing.Visible = true;

                   


                    lblToDoorFlightNo.Text = "Flight No";
                    lblToStreetComing.Text = "Coming From";

                    lblToDoorFlightNo.Location = lblFromDoorFlightNo.Location;
                    txtToFlightDoorNo.Location = txtFromFlightDoorNo.Location;

                    lblToStreetComing.Location = new Point(lblToDoorFlightNo.Location.X, lblToDoorFlightNo.Location.Y + 30);
                    txtToStreetComing.Location = new Point(txtToFlightDoorNo.Location.X, txtToFlightDoorNo.Location.Y + 30);


                    lblFromDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, lblToDoorFlightNo.Location.Y + 60);
                    txtFromFlightDoorNo.Location = new Point(txtToFlightDoorNo.Location.X, txtToFlightDoorNo.Location.Y + 60);


                 
                }
                else
                {


                    SetOthersToLocation();

                }



            }
        }



        private void FillFromLocations()
        {
            int locTypeId = ddlFromLocType.SelectedValue.ToInt();
            if (locTypeId == 0)
                return;

            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {
                /// live
                //txtFromAddress.Text = string.Empty;
                //txtFromAddress.Visible = false;

                //ddlFromLocation.Visible = true;

                //txtFromPostCode.Text = string.Empty;
                //txtFromPostCode.Visible = false;

                //txtFromFlightDoorNo.MaxLength = 100;
                //txtFromFlightDoorNo.Width = 170;


                ////needtouncomment
                //     lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
                //   txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
                //txtFromFlightDoorNo.Visible = true;
                //txtFromStreetComing.Visible = true;
                //lblFromDoorFlightNo.Visible = true;
                //lblFromStreetComing.Visible = true;

                //lblFromLoc.Text = "From Location";

                //lblFromDoorFlightNo.Text = "Flight No";
                //lblFromStreetComing.Text = "Coming From";
                //DetachLocationsSelectionEvent(ddlFromLocation);
                //ComboFunctions.FillLocationsCombo(ddlFromLocation, c => c.LocationTypeId == locTypeId);
                //ddlFromLocation.SelectedIndex = -1;
                //AttachLocationSelectionEvent(ddlFromLocation);
                //



                // New'

                //   txtFromAddress.Height = 33;//58;
                //txtFromAddress.Visible = false;

                // ddlFromLocation.Visible = true;

                txtFromPostCode.Text = string.Empty;
                txtFromPostCode.Visible = false;

                txtFromFlightDoorNo.MaxLength = 100;
                //     txtFromFlightDoorNo.Width = 170;


                //needtouncomment
                // lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
                // txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
                txtFromFlightDoorNo.Visible = true;
                txtFromStreetComing.Visible = true;
                lblFromDoorFlightNo.Visible = true;
                lblFromStreetComing.Visible = true;

                // lblFromLoc.Text = "From Location";

                lblFromDoorFlightNo.Text = "Flight No";
                lblFromStreetComing.Text = "Coming From";
                // btnSearchFlight.Visible = true;
                // DetachLocationsSelectionEvent(ddlFromLocation);
                //ComboFunctions.FillLocationsCombo(ddlFromLocation, c => c.LocationTypeId == locTypeId);
                //ddlFromLocation.SelectedIndex = -1;
                // AttachLocationSelectionEvent(ddlFromLocation);


                //
            }


            else
            {
                // txtFromAddress.Height = 33;// 80;
                txtFromAddress.Visible = true;

                //   DetachLocationsSelectionEvent(ddlFromLocation);
                //   ddlFromLocation.SelectedValue = null;
                //   ddlFromLocation.Visible = false;
                //  AttachLocationSelectionEvent(ddlFromLocation);

                txtFromPostCode.Text = string.Empty;
                txtFromPostCode.Visible = false;

                lblFromDoorFlightNo.Text = "Notes"; //"Notes";
                lblFromDoorFlightNo.Visible = true;


                //needtouncomment
                //   lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.NewFromDoorNoLoc.Y + 1);

                txtFromFlightDoorNo.MaxLength = 100;
                //  txtFromFlightDoorNo.Width = 170;

                txtFromFlightDoorNo.Text = string.Empty;
                txtFromFlightDoorNo.Visible = true;
                btnSearchFlight.Visible = false;

                //needtouncomment
                //   txtFromFlightDoorNo.Location = this.NewFromDoorNoLoc;


                txtFromStreetComing.Text = string.Empty;
                txtFromStreetComing.Visible = false;

                lblFromStreetComing.Visible = false;

                lblFromLoc.Text = "Pickup Point";

                if (locTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    PickFromBase();

                    SetPickupZone(txtFromAddress.Text);

                    UpdateAutoCalculateFares();
                }
            }
            //else if (locTypeId == Enums.LOCATION_TYPES.POSTCODE)
            //{

            //    LoadPostCodes();

            //    txtFromAddress.Text = string.Empty;
            //    txtFromAddress.Visible = false;

            //    DetachLocationsSelectionEvent(ddlFromLocation);
            //    ddlFromLocation.SelectedValue = null;
            //    ddlFromLocation.Visible = false;
            //    AttachLocationSelectionEvent(ddlFromLocation);

            //    txtFromFlightDoorNo.MaxLength = 100;
            //    txtFromFlightDoorNo.Width = 170;


            //    //needtouncomment
            //    lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
            //    txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
            //    txtFromPostCode.Visible = true;
            //    txtFromFlightDoorNo.Visible = true;
            //    txtFromStreetComing.Visible = true;
            //    lblFromDoorFlightNo.Visible = true;
            //    lblFromStreetComing.Visible = true;

            //    lblFromLoc.Text = "From PostCode";

            //    lblFromDoorFlightNo.Text = "Door #";
            //    lblFromStreetComing.Text = "From Street";

            //}

            //else if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            //{
            //    /// live
            //    //txtFromAddress.Text = string.Empty;
            //    //txtFromAddress.Visible = false;

            //    //ddlFromLocation.Visible = true;

            //    //txtFromPostCode.Text = string.Empty;
            //    //txtFromPostCode.Visible = false;

            //    //txtFromFlightDoorNo.MaxLength = 100;
            //    //txtFromFlightDoorNo.Width = 170;


            //    ////needtouncomment
            //    //lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
            //    //txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
            //    //txtFromFlightDoorNo.Visible = true;
            //    //txtFromStreetComing.Visible = true;
            //    //lblFromDoorFlightNo.Visible = true;
            //    //lblFromStreetComing.Visible = true;

            //    //lblFromLoc.Text = "From Location";

            //    //lblFromDoorFlightNo.Text = "Flight No";
            //    //lblFromStreetComing.Text = "Coming From";
            //    //DetachLocationsSelectionEvent(ddlFromLocation);
            //    //ComboFunctions.FillLocationsCombo(ddlFromLocation, c => c.LocationTypeId == locTypeId);
            //    //ddlFromLocation.SelectedIndex = -1;
            //    //AttachLocationSelectionEvent(ddlFromLocation);
            //    //



            //    // New'

            //    txtFromAddress.Height = 60;
            //    //txtFromAddress.Visible = false;

            //   // ddlFromLocation.Visible = true;

            //    txtFromPostCode.Text = string.Empty;
            //    txtFromPostCode.Visible = false;

            //    txtFromFlightDoorNo.MaxLength = 100;
            //    txtFromFlightDoorNo.Width = 170;


            //    //needtouncomment
            //   // lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
            //   // txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
            //    txtFromFlightDoorNo.Visible = true;
            //    txtFromStreetComing.Visible = true;
            //    lblFromDoorFlightNo.Visible = true;
            //    lblFromStreetComing.Visible = true;

            //   // lblFromLoc.Text = "From Location";

            //    lblFromDoorFlightNo.Text = "Flight No";
            //    lblFromStreetComing.Text = "Coming From";
            //   // DetachLocationsSelectionEvent(ddlFromLocation);
            //    //ComboFunctions.FillLocationsCombo(ddlFromLocation, c => c.LocationTypeId == locTypeId);
            //    //ddlFromLocation.SelectedIndex = -1;
            //   // AttachLocationSelectionEvent(ddlFromLocation);


            //    //
            //}


            //else
            //{
            //    lblFromLoc.Text = "From Location";

            //    txtFromPostCode.Text = string.Empty;
            //    txtFromPostCode.Visible = false;

            //    txtFromFlightDoorNo.Text = string.Empty;
            //    txtFromFlightDoorNo.Visible = false;

            //    txtFromStreetComing.Text = string.Empty;
            //    txtFromStreetComing.Visible = false;


            //    lblFromDoorFlightNo.Text = "Pickup Notes";
            //    lblFromDoorFlightNo.Visible = true;

            //    txtFromFlightDoorNo.MaxLength = 100;
            //    txtFromFlightDoorNo.Width = 200;

            //    txtFromFlightDoorNo.Text = string.Empty;
            //    txtFromFlightDoorNo.Visible = true;

            //    //needtouncomment
            //    txtFromFlightDoorNo.Location = this.NewFromDoorNoLoc;


            //    lblFromStreetComing.Visible = false;

            //    txtFromAddress.Text = string.Empty;
            //    txtFromAddress.Visible = false;

            //    ddlFromLocation.Visible = true;
            //    DetachLocationsSelectionEvent(ddlFromLocation);
            //    ComboFunctions.FillLocationsCombo(ddlFromLocation, c => c.LocationTypeId == locTypeId);
            //    ddlFromLocation.SelectedIndex = -1;
            //    AttachLocationSelectionEvent(ddlFromLocation);
            //    txtFromFlightDoorNo.MaxLength = 100;
            //    txtFromFlightDoorNo.Width = 120;

            //}
        }

        private void FillSubCompanyCombo(ComboBox cbo)
        {
            cbo.DisplayMember = "CompanyName";
            cbo.ValueMember = "Id";
            cbo.DataSource = General.GetQueryable<Gen_SubCompany>(null).OrderBy(c => c.CompanyName).ToList();

            cbo.DropDownStyle = ComboBoxStyle.DropDownList;
            cbo.SelectedValue = AppVars.objSubCompany.Id;


            if (cbo.Items.Count == 1 || AppVars.DefaultBookingSubCompanyId != 0)
            {
                cbo.Visible = false;

            }
        }
        private void FillPlotCombo(ComboBox cbo, DataTable list)
        {
            cbo.DisplayMember = "ZoneName";
            cbo.ValueMember = "Id";
            //   cbo.DataSource = General.GetQueryable<Gen_Zone>(c => c.MinLatitude != null).OrderBy(c => c.OrderNo).Select(args => new { args.Id, ZoneName = args.OrderNo + ". " + args.ZoneName }).ToList();
            cbo.DataSource = list;



            cbo.DropDownStyle = ComboBoxStyle.DropDown;

            cbo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            cbo.AutoCompleteSource = AutoCompleteSource.ListItems;
            cbo.SelectedIndex = -1;
        }

        private void FillPlotCombo(ComboBox cbo, IList list)
        {
            cbo.DisplayMember = "ZoneName";
            cbo.ValueMember = "Id";
            //   cbo.DataSource = General.GetQueryable<Gen_Zone>(c => c.MinLatitude != null).OrderBy(c => c.OrderNo).Select(args => new { args.Id, ZoneName = args.OrderNo + ". " + args.ZoneName }).ToList();
            cbo.DataSource = list;



            cbo.DropDownStyle = ComboBoxStyle.DropDown;

            cbo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            cbo.AutoCompleteSource = AutoCompleteSource.ListItems;
            cbo.SelectedIndex = -1;
        }






        private void FillCombo(DataTable dt, ComboBox dropdown, string DisplayMember, string ValueMember)
        {
            try
            {
                dropdown.DataSource = null;
                dropdown.Items.Clear();

                //  dropdown.Sorted = Telerik.WinControls.Enumerations.SortStyle.Ascending;
                dropdown.SelectedIndex = -1;
                dropdown.DisplayMember = DisplayMember;
                dropdown.ValueMember = ValueMember;
                dropdown.DataSource = dt;
                //  dropdown.NullText = "Select";

                //      dropdown.SortStyle = Telerik.WinControls.Enumerations.SortStyle.Ascending;
                dropdown.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                dropdown.DropDownStyle = ComboBoxStyle.DropDown;

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Drop Down = " + dropdown.Name + " " + ex.Message);

            }
        }



        public static void FillCombo(DataTable list, ComboBox dropdown, string DisplayMember, string ValueMember, bool IsSorted)
        {
            try
            {
                dropdown.DataSource = null;
                dropdown.Items.Clear();

                dropdown.DisplayMember = DisplayMember;
                dropdown.ValueMember = ValueMember;
                dropdown.DataSource = list;
                //   dropdown.NullText = "Select";


                //    if(IsSorted)
                //       dropdown.SortStyle = Telerik.WinControls.Enumerations.SortStyle.Ascending;

                dropdown.DropDownStyle = ComboBoxStyle.DropDown;
                dropdown.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                dropdown.AutoCompleteSource = AutoCompleteSource.ListItems;

                dropdown.SelectedIndex = -1;
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Drop Down = " + dropdown.Name + " " + ex.Message);

            }
        }


        private void FillCombos()
        {




            if (Program.dtCombos == null)
            {

                Program.dtCombos = new DataSet();
                using (System.Data.SqlClient.SqlConnection sqlconn = new System.Data.SqlClient.SqlConnection(Cryptography.Decrypt(System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr(), "softeuroconnskey", true)))
                {

                    sqlconn.Open();

                    using (System.Data.SqlClient.SqlCommand cmd = new System.Data.SqlClient.SqlCommand())
                    {

                        cmd.Connection = sqlconn;

                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "stp_fillbookingcombos";

                        using (System.Data.SqlClient.SqlDataAdapter da = new System.Data.SqlClient.SqlDataAdapter(cmd))
                        {

                            da.Fill(Program.dtCombos);
                        }

                    }


                    Program.dtCombos.WriteXml(Application.StartupPath + "\\booking.xml", XmlWriteMode.WriteSchema);



                }
            }



            FillCombo(Program.dtCombos.Tables[0].Copy(), ddlFromLocType, "LocationType", "Id");

            FillCombo(Program.dtCombos.Tables[0].Copy(), ddlToLocType, "LocationType", "Id");




            ddlSubCompany.DisplayMember = "CompanyName";
            ddlSubCompany.ValueMember = "Id";
            ddlSubCompany.DataSource = Program.dtCombos.Tables[1].Copy();

            ddlSubCompany.DropDownStyle = ComboBoxStyle.DropDownList;



            if (AppVars.objSubCompany == null)
            {
                AppVars.objSubCompany = new Gen_SubCompany();
                AppVars.objSubCompany.Id = 1;

            }

            ddlSubCompany.SelectedValue = AppVars.objSubCompany.Id;


            if (ddlSubCompany.Items.Count == 1 || AppVars.DefaultBookingSubCompanyId != 0)
                ddlSubCompany.Visible = false;


            if (ddlSubCompany.Items.Count > 1 && AppVars.CanTransferJob)
            {
                ddlSubCompany.Visible = true;

            }


            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;



            FillPlotCombo(ddlPickupPlot, Program.dtCombos.Tables[2].Copy());
            FillPlotCombo(ddlDropOffPlot, Program.dtCombos.Tables[2].Copy());


            ddlPickupPlot.TextChanged += new EventHandler(ddlPlot_TextChanged);
            ddlDropOffPlot.TextChanged += new EventHandler(ddlPlot_TextChanged);





            FillCombo(Program.dtCombos.Tables[3].Copy(), ddlBookingType, "BookingTypeName", "Id");



            if (PickBookingTypeId == null)
                PickBookingTypeId = Enums.BOOKING_TYPES.LOCAL;

            ddlBookingType.SelectedValue = PickBookingTypeId;


            FillCombo(Program.dtCombos.Tables[4].Copy(), ddlVehicleType, "VehicleType", "Id", false);



            FillCombo(Program.dtCombos.Tables[5].Copy(), ddlPaymentType, "PaymentType", "Id");



            


        }



        //private void FillCombos()
        //{




        //    using (TaxiDataContext db = new TaxiDataContext())
        //    {

        //        db.DeferredLoadingEnabled = false;

        //        var locTypeList = db.GetTable<Gen_LocationType>().OrderBy(c => c.LocationType).Select(args => new { args.Id, args.LocationType }).ToList();

        //        //if (locTypeList == null)
        //        //    locTypeList = db.GetTable<Gen_LocationType>().OrderBy(c => c.LocationType).Select(args => new { args.Id, args.LocationType }).ToList();

        //        ComboFunctions.FillCombo(locTypeList, ddlFromLocType, "LocationType", "Id");

        //        ComboFunctions.FillCombo(locTypeList.ToList(), ddlToLocType, "LocationType", "Id");




        //        ddlSubCompany.DisplayMember = "CompanyName";
        //        ddlSubCompany.ValueMember = "Id";
        //        ddlSubCompany.DataSource = db.GetTable<Gen_SubCompany>().Select(args => new { args.Id, args.CompanyName }).ToList();

        //        ddlSubCompany.DropDownStyle = ComboBoxStyle.DropDownList;




        //        ddlSubCompany.SelectedValue = AppVars.objSubCompany.Id;


        //        if (ddlSubCompany.Items.Count == 1 || AppVars.DefaultBookingSubCompanyId != 0)
        //            ddlSubCompany.Visible = false;


        //        if (ddlSubCompany.Items.Count > 1 && AppVars.CanTransferJob)
        //        {
        //            ddlSubCompany.Visible = true;

        //        }


        //        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
        //            ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

        //        if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
        //            ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

        //        if (AppVars.objPolicyConfiguration.EnablePDA.ToBool())
        //        {
        //            var zonesList = db.GetTable<Gen_Zone>().Where(c => c.MinLatitude != null).OrderBy(c => c.OrderNo).Select(args => new { args.Id, ZoneName = args.OrderNo + ". " + args.ZoneName }).ToList();

        //            FillPlotCombo(ddlPickupPlot, zonesList);
        //            FillPlotCombo(ddlDropOffPlot, zonesList.ToList());


        //            ddlPickupPlot.TextChanged += new EventHandler(ddlPlot_TextChanged);
        //            ddlDropOffPlot.TextChanged += new EventHandler(ddlPlot_TextChanged);

        //        }



        //        ComboFunctions.FillCombo<BookingType>(db.GetTable<BookingType>().Where(c => c.IsVisible == true).ToList(), ddlBookingType, "BookingTypeName", "Id");



        //        if (PickBookingTypeId == null)
        //            PickBookingTypeId = Enums.BOOKING_TYPES.LOCAL;

        //        ddlBookingType.SelectedValue = PickBookingTypeId;


        //        ComboFunctions.FillCombo(db.GetTable<Fleet_VehicleType>().OrderBy(c => c.OrderNo).Select(args => new { args.Id, args.VehicleType }).ToList(), ddlVehicleType, "VehicleType", "Id", false);



        //        ComboFunctions.FillCombo<Gen_PaymentType>(db.GetTable<Gen_PaymentType>().Where(c => c.IsVisible == true).OrderBy(c => c.PaymentType).ToList(), ddlPaymentType, "PaymentType", "Id");

        //        //  EnableRoomCharges(false);

        //    }

        //}

        private void FocusOnPickupPlot()
        {
            ddlPickupPlot.Focus();
        }

        private void FocusOnDropOffPlot()
        {
            ddlDropOffPlot.Focus();
        }

        private void FocusOnFromAddress()
        {
            txtFromAddress.Focus();

        }

        private void FocusOnFromPostCode()
        {
            txtFromPostCode.Focus();
        }

        //private void FocusOnFromLocation()
        //{
        //    ddlFromLocation.Focus();
        //}

        private Button btnConfirmationSMS;
        private Button btnSendInvoice;
        private Button btnPlayRecording;
        void frmBooking_Shown(object sender, EventArgs e)
        {
            try
            {



                txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);


                if (this.Size.Height == 750)
                    this.Size = new Size(this.Size.Width, 784);





                if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
                {
                    //numBookingFee.SpinElement.KeyDown += new KeyEventHandler(numBookingFee_KeyDown);//comment
                    numBookingFee.Validated += new EventHandler(numCustomerFares_Validated);
                    numReturnBookingFee.Validated += new EventHandler(numReturnCustFare_Validated);
                    // numReturnBookingFee.SpinElement.KeyDown += new KeyEventHandler(numReturnBookingFee_KeyDown);//comment
                }






                if (objMaster != null && objMaster.PrimaryKeyValue != null)
                {


                    //this.btnLostProperty = new System.Windows.Forms.Button();
                    //this.btnComplaint = new System.Windows.Forms.Button();


                    this.btnConfirmationSMS = new Button();
                    this.btnSendInvoice = new Button();

                    this.btnPlayRecording = new Button();

                    //// 
                    //// btnLostProperty
                    //// 
                    //this.btnLostProperty.BackColor = System.Drawing.Color.Lime;
                    //this.btnLostProperty.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    //this.btnLostProperty.ForeColor = System.Drawing.Color.Black;
                    //this.btnLostProperty.Location = new System.Drawing.Point(446, 0);
                    //this.btnLostProperty.Name = "btnLostProperty";
                    //this.btnLostProperty.Size = new System.Drawing.Size(78, 38);
                    //this.btnLostProperty.TabIndex = 2710;
                    //this.btnLostProperty.Text = "Lost Property";
                    //this.btnLostProperty.UseVisualStyleBackColor = false;
                    //this.btnLostProperty.Visible = true;
                    //this.btnLostProperty.Click += new System.EventHandler(this.btnLostProperty_Click);
                    //this.btnLostProperty.BringToFront();
                    //// 
                    //// btnComplaint
                    //// 
                    //this.btnComplaint.BackColor = System.Drawing.Color.Red;
                    //this.btnComplaint.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    //this.btnComplaint.ForeColor = System.Drawing.Color.White;
                    //this.btnComplaint.Location = new System.Drawing.Point(363, 0);
                    //this.btnComplaint.Name = "btnComplaint";
                    //this.btnComplaint.Size = new System.Drawing.Size(79, 38);
                    //this.btnComplaint.TabIndex = 270;
                    //this.btnComplaint.Text = "Complaint";
                    //this.btnComplaint.UseVisualStyleBackColor = false;
                    //this.btnComplaint.Visible = true;
                    //this.btnComplaint.Click += new System.EventHandler(this.btnComplaint_Click);
                    //this.btnComplaint.BringToFront();

                    // 
                    // btnPlayRecording
                    // 
                    this.btnPlayRecording.BackColor = System.Drawing.Color.LightGoldenrodYellow;
                    this.btnPlayRecording.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold);
                    this.btnPlayRecording.ForeColor = System.Drawing.Color.Black;
                    this.btnPlayRecording.Location = new System.Drawing.Point(500, 0);
                    this.btnPlayRecording.Name = "btnPlayRecording";
                    this.btnPlayRecording.Size = new System.Drawing.Size(142, 36);
                    this.btnPlayRecording.TabIndex = 0;
                    this.btnPlayRecording.Text = "Play Call Recording";
                    this.btnPlayRecording.UseVisualStyleBackColor = false;
                    this.btnPlayRecording.Visible = false;
                    this.btnPlayRecording.BringToFront();

                    //this.Controls.Add(this.btnLostProperty);
                    //this.Controls.Add(this.btnComplaint);
                    this.panel4.Controls.Add(this.btnPlayRecording);



                    // ((System.ComponentModel.ISupportInitialize)(this.btnConfirmationSMS)).BeginInit();
                    //  ((System.ComponentModel.ISupportInitialize)(this.btnSendInvoice)).BeginInit();
                    // 
                    // btnConfirmationSMS
                    // 
                    //this.btnConfirmationSMS.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //this.btnConfirmationSMS.ImageScalingSize = new System.Drawing.Size(16, 12);
                    this.btnConfirmationSMS.Location = new System.Drawing.Point(810, 4);
                    this.btnConfirmationSMS.Name = "btnConfirmationSMS";
                    this.btnConfirmationSMS.Font = new Font("Segoe UI", 8, FontStyle.Bold);
                    this.btnConfirmationSMS.Size = new System.Drawing.Size(110, 33);
                    this.btnConfirmationSMS.TabIndex = 0;
                    this.btnConfirmationSMS.Text = "Confirmation SMS";
                    this.btnConfirmationSMS.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                    //  this.btnConfirmationSMS.te = true;
                    this.btnConfirmationSMS.Visible = true;
                    this.btnConfirmationSMS.BackColor = Color.FromArgb(233, 240, 249);
                    this.btnConfirmationSMS.Click += new System.EventHandler(this.btnConfirmationSMS_Click);
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnConfirmationSMS.GetChildAt(0))).Image = null;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnConfirmationSMS.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnConfirmationSMS.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnConfirmationSMS.GetChildAt(0))).Text = "Confirmation SMS";
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnConfirmationSMS.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextWrap = true;
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnConfirmationSMS.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnConfirmationSMS.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    //// 
                    //// btnSendInvoice
                    //// 
                    //this.btnSendInvoice.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //this.btnSendInvoice.ImageScalingSize = new System.Drawing.Size(16, 12);
                    this.btnSendInvoice.Location = new System.Drawing.Point(695, 3);
                    this.btnSendInvoice.Name = "btnSendInvoice";
                    this.btnSendInvoice.Size = new System.Drawing.Size(93, 33);
                    this.btnSendInvoice.TabIndex = 269;
                    this.btnSendInvoice.Text = "Send Invoice";
                    this.btnSendInvoice.BackColor = Color.FromArgb(233, 240, 249);
                    this.btnSendInvoice.Font = new Font("Segoe UI", 8, FontStyle.Bold);
                    this.btnSendInvoice.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                    //  this.btnSendInvoice.TextWrap = true;
                    this.btnSendInvoice.Visible = false;
                    this.btnSendInvoice.Click += new System.EventHandler(this.btnSendInvoice_Click);
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnSendInvoice.GetChildAt(0))).Image = null;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnSendInvoice.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnSendInvoice.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //((Telerik.WinControls.UI.RadButtonElement)(this.btnSendInvoice.GetChildAt(0))).Text = "Send Invoice";
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnSendInvoice.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextWrap = true;
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnSendInvoice.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    //((Telerik.WinControls.Primitives.TextPrimitive)(this.btnSendInvoice.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));






                    //  ((System.ComponentModel.ISupportInitialize)(this.btnConfirmationSMS)).EndInit();
                    //((System.ComponentModel.ISupportInitialize)(this.btnSendInvoice)).EndInit();

                    this.Controls.Add(this.btnSendInvoice);
                    this.Controls.Add(this.btnConfirmationSMS);

                    btnConfirmationSMS.BringToFront();

                    if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                    {

                        btnSendInvoice.Visible = true;
                        btnSendInvoice.BringToFront();


                        if (objMaster.Current.PartyId != null)
                        {
                            try
                            {

                                this.ddlCompletedSubCompany = new System.Windows.Forms.ComboBox();
                                this.lblCompletedSubCompany = new System.Windows.Forms.Label();

                                // 
                                // ddlCompletedSubCompany
                                // 
                                this.ddlCompletedSubCompany.BackColor = System.Drawing.Color.White;
                                this.ddlCompletedSubCompany.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
                                this.ddlCompletedSubCompany.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                this.ddlCompletedSubCompany.FormattingEnabled = true;
                                this.ddlCompletedSubCompany.Location = new System.Drawing.Point(413, 7);
                                this.ddlCompletedSubCompany.Name = "ddlCompletedSubCompany";
                                this.ddlCompletedSubCompany.Size = new System.Drawing.Size(246, 27);
                                this.ddlCompletedSubCompany.TabIndex = 274;
                                // 
                                // lblCompletedSubCompany
                                // 
                                this.lblCompletedSubCompany.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                this.lblCompletedSubCompany.ForeColor = System.Drawing.Color.Blue;
                                this.lblCompletedSubCompany.Location = new System.Drawing.Point(284, 10);
                                this.lblCompletedSubCompany.Name = "lblCompletedSubCompany";
                                this.lblCompletedSubCompany.Size = new System.Drawing.Size(123, 21);
                                this.lblCompletedSubCompany.TabIndex = 275;
                                this.lblCompletedSubCompany.Text = "Completed By :";

                                this.Controls.Add(this.lblCompletedSubCompany);
                                this.Controls.Add(this.ddlCompletedSubCompany);

                                if (ddlCompletedSubCompany.DataSource == null)
                                {
                                    ddlCompletedSubCompany.DisplayMember = "CompanyName";
                                    ddlCompletedSubCompany.ValueMember = "Id";
                                    ddlCompletedSubCompany.DataSource = Program.dtCombos.Tables[1].Copy();
                                    ddlCompletedSubCompany.DropDownStyle = ComboBoxStyle.DropDownList;
                                }

                                ddlCompletedSubCompany.SelectedValue = objMaster.Current.PartyId;

                                this.Text = label1.Text + " -" + this.Text;
                                label1.Visible = false;
                                ddlCompletedSubCompany.Enabled = false;
                                ddlCompletedSubCompany.BringToFront();
                                this.lblCompletedSubCompany.BringToFront();
                            }
                            catch
                            {

                            }
                        }

                    }




                    if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0 &&
                 (txtCustomerMobileNo.Text.Length > 8 || txtCustomerPhoneNo.Text.Length > 8)
                 )
                    {
                        btnPlayRecording.Visible = true;
                        this.btnPlayRecording.Click += new System.EventHandler(this.btnPlayRecordingAsterisk_Click);
                    }








                }



                //pickupgrid
                if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool() && AppVars.objPolicyConfiguration.EnablePOI.ToBool())
                {
                    if (objMaster.Current == null || (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.DISPATCHED))
                    {

                        //comment
                        dtpPickupDate.ValueChanged += new EventHandler(DateTimePickerElement_ValueChanged);
                        dtpPickupTime.ValueChanged += new EventHandler(DateTimePickerElement_ValueChanged);
                        GetCurrentWaitingBookings(true);
                    }
                }


                pnlMain.Select();


                FocusOnPickupTime();
                //  dtpPickupTime_txt.Focus();
                //  dtpPickupTime.Focus();
                IsFormShown = true;
               
                BringToFront();


                if (objMaster.Current != null && objMaster.Current.CompanyId != null && numCompanyFares.Visible)
                {
                    if (IsAllowUpdating == true)
                        numCompanyFares.Enabled = true;
                    else
                    {
                        if (numParkingChrgs.Enabled)
                            numCompanyFares.Enabled = true;

                    }
                    if (ddlDepartment != null && objMaster.Current.DepartmentId != null)
                        ddlDepartment.SelectedValue = objMaster.Current.DepartmentId;

                }


                if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                {
                    btnExcludeDrivers.TextAlign = ContentAlignment.TopCenter;


                }

                if (btnAttributes.Tag.ToStr().Trim().Length > 0)
                {
                    btnAttributes.TextAlign = ContentAlignment.TopCenter;
                }
            }
            catch
            {
                btnPickFares.Enabled = true;
                IsFormShown = true;

            }

            //ddlSubCompany.DataSource = null;
            //ddlSubCompany.Items.Add("Select");
            //int x = ddlSubCompany.Items.IndexOf("Select");
            //ddlSubCompany.SelectedIndex = x;
        }


        ContextMenuStrip c = null;

        private void btnPlayRecordingAsterisk_Click(object sender, EventArgs e)
        {

            if (objMaster.PrimaryKeyValue != null)
            {
                //if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0)
                //{

                try
                {
                    if (Directory.Exists(Application.StartupPath + "\\Recordings") == false)
                    {
                        try
                        {

                            Directory.CreateDirectory(Application.StartupPath + "\\Recordings");
                        }
                        catch
                        {

                        }
                    }



                    if (File.Exists(Application.StartupPath + "\\Recordings\\" + objMaster.Current.CallRefNo.ToStr().Trim()))
                    {

                        Process.Start(Application.StartupPath + "\\Recordings\\" + objMaster.Current.CallRefNo.ToStr().Trim());

                    }
                    else
                    {

                        string phoneNo = objMaster.Current.CustomerMobileNo.ToStr().Trim().Length > 0 ? objMaster.Current.CustomerMobileNo.ToStr().Trim() : objMaster.Current.CustomerPhoneNo.ToStr().Trim();

                        if (phoneNo.StartsWith("44") == false)
                        {

                            phoneNo = phoneNo.Substring(1);
                            phoneNo = phoneNo.Insert(0, "44");
                        }


                        string baseurl = System.Configuration.ConfigurationManager.AppSettings["recordingurl"].ToStr();
                        string username = System.Configuration.ConfigurationManager.AppSettings["recordingusername"].ToStr();

                        if (baseurl.ToStr().Trim().Length == 0)
                        {
                            MessageBox.Show("Recording Url is not defined in Configurations");
                            return;
                        }
                        if (username.ToStr().Trim().Length == 0)
                        {
                            MessageBox.Show("Recording UserName is not defined in Configurations");
                            return;
                        }


                        string recordingPath =General.DownloadRecordingFile(Application.StartupPath + "\\Recordings", baseurl, username, objMaster.Current.CallRefNo.ToStr().Trim(), phoneNo,objMaster.Current.BookingDate.ToDate());


                        if (recordingPath.ToStr().Trim().Length > 0)
                        {

                            Process.Start(recordingPath);

                        }


                    }

                    GC.Collect();
                }
                catch (Exception ex)
                {

                    ENUtils.ShowMessage(ex.Message);

                }
                //  }

                //else if (pathwav.ToStr().Length > 0)
                //{
                //    if (File.Exists(pathwav))
                //    {

                //        System.Diagnostics.Process.Start(pathwav);
                //    }
                //    else
                //    {
                //        MessageBox.Show("Recording File not found : " + pathwav);

                //    }
                //}
            }
        }





        void opt_one_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnSpecialRequirement();

            //}
            if (e.KeyCode == Keys.Enter)
            {

                ////fwdkh   FocusOnCustomer();
                //fwdkh3  FocusOnFare();
                FocusOnDriver();
            }

        }
        void numBookingFee_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    if (numReturnBookingFee.Visible)
                    {
                        numReturnBookingFee.Focus();

                    }
                    else
                        FocusOnSpecialRequirement();


                }
            }
            catch
            {

            }
        }

        void numReturnBookingFee_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                FocusOnSpecialRequirement();
            }
        }

        private bool IsFormShown = false;
        void numReturnCustFare_Validated(object sender, EventArgs e)
        {

            CalculateTotalCharges();


        }

        void numCustomerFares_Validated(object sender, EventArgs e)
        {
            try
            {

                CalculateTotalCharges();

            }
            catch
            {

            }
        }


        private System.Windows.Forms.ErrorProvider errorProvider1;
        private System.Windows.Forms.ErrorProvider errorProvider2;

        private void txtCustomerMobileNo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtCustomerMobileNo.Text.Trim().Length == 11)
                {
                    if (IsBookingExistForContact())
                    {
                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);


                        if (General.GetQueryable<Customer>(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                        {
                            pnlCustomer.BackColor = Color.Red;
                            if (DialogResult.No == MessageBox.Show("This is a Black Listed customer" + Environment.NewLine + "Do you want to see Booking history ? ", "Warning!", MessageBoxButtons.YesNo))
                            {
                                txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                                txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                                return;

                            }

                        }
                        else
                        {
                            pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                        }

                        SearchBooking();

                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    }
                    else
                    {
                        pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                    }
                }
                else
                {
                    pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                }



                if (!string.IsNullOrEmpty(txtCustomerMobileNo.Text.Trim()))
                {

                    if (errorProvider1 == null)
                    {
                        this.errorProvider1 = new System.Windows.Forms.ErrorProvider();
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).BeginInit();

                        this.errorProvider1.ContainerControl = this;
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).EndInit();

                    }

                    if (txtCustomerMobileNo.Text.Trim().Length == 11)
                    {

                        errorProvider1.Icon = Resources.Resource1.verified2;
                        errorProvider1.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider1.SetError(txtCustomerMobileNo, "Mobile No is Verified");


                    }
                    else
                    {

                        errorProvider1.Icon = Resources.Resource1.warning;
                        errorProvider1.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider1.SetError(txtCustomerMobileNo, "Invalid " + "Mobile No!" + Environment.NewLine + "Please enter 11 digits number");


                    }
                }


            }
            catch (Exception ex)
            {


            }
        }



        void txtCustomerPhoneNo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtCustomerPhoneNo.Text.Trim().Length == 11)
                {
                    if (IsBookingExistForContact())
                    {



                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);


                        if (General.GetQueryable<Customer>(c => c.TelephoneNo == txtCustomerPhoneNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                        {
                            pnlCustomer.BackColor = Color.Red;
                            if (DialogResult.No == MessageBox.Show("This is a Black Listed customer" + Environment.NewLine + "Do you want to see Booking history ? ", "Warning!", MessageBoxButtons.YesNo))
                            {
                                txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                                txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                                return;
                            }
                        }
                        else
                        {
                            pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                        }


                        SearchBooking();


                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    }
                    else
                    {

                        pnlCustomer.BackColor = Color.AliceBlue;//Color.GhostWhite;
                    }




                }
                else
                {

                    pnlCustomer.BackColor = Color.AliceBlue;//Color.GhostWhite;
                }




                if (!string.IsNullOrEmpty(txtCustomerPhoneNo.Text.Trim()))
                {


                    if (errorProvider2 == null)
                    {
                        this.errorProvider2 = new System.Windows.Forms.ErrorProvider();
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider2)).BeginInit();

                        this.errorProvider2.ContainerControl = this;
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider2)).EndInit();

                    }

                    if (txtCustomerPhoneNo.Text.Trim().Length == 11)
                    {

                        errorProvider2.Icon = Resources.Resource1.verified2;
                        errorProvider2.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider2.SetError(txtCustomerPhoneNo, "Telephone No is Verified");


                    }
                    else
                    {

                        errorProvider2.Icon = Resources.Resource1.warning;
                        errorProvider2.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider2.SetError(txtCustomerPhoneNo, "Invalid " + "Telephone No!" + Environment.NewLine + "Please enter 11 digits number");


                    }
                }


            }
            catch (Exception ex)
            {


            }
        }

        private bool IsBookingExistForContact()
        {
            bool isExist = false;

            try
            {
                string telNo = txtCustomerPhoneNo.Text.Trim().ToLower();
                string mobNo = txtCustomerMobileNo.Text.Trim().ToLower();



                isExist = General.GetQueryable<Booking>(null).Count(c => (c.CustomerMobileNo != null && c.CustomerPhoneNo != null)
                         && (((c.CustomerPhoneNo == telNo || telNo == string.Empty) &&
                             (c.CustomerMobileNo == mobNo || mobNo == string.Empty))
                             ||

                              ((c.CustomerPhoneNo == mobNo || mobNo == string.Empty) &&
                             (c.CustomerMobileNo == telNo || telNo == string.Empty))
                             )
                             ) > 0;




                //= data1.Where(a => (a.CustomerPhoneNo == telNo || telNo == string.Empty) &&
                //            (a.CustomerMobileNo == mobNo || mobNo == string.Empty)).Count() > 0;




            }
            catch (Exception ex)
            {


            }
            return isExist;

        }




        //private decimal CalculateDistance(string origin, string destination)
        //{
        //    decimal miles = 0.00m;
        //    bool exist = false;
        //    try
        //    {


        //            //try
        //            //{


        //            //    if ( objTaxiService != null)
        //            //    {

        //            //        miles = objTaxiService.GetDistanceAndTime(origin, destination, ref estimatedTime);

        //            //        if (miles > 0)
        //            //            exist = true;

        //            //    }
        //            //}
        //            //catch (Exception ex)
        //            //{
        //            //    if (ex.Message.StartsWith("Could not connect"))
        //            //    {

        //            //        startserviceWCF();

        //            //    }

        //            //}


        //            if (exist == false)
        //            {

        //                string url2 = "https://maps.googleapis.com/maps/api/distancematrix/xml?origins=" + origin + ", UK&destinations=" + destination + ", UK&mode=driving&units=imperial";

        //                //string url2 = "http://maps.googleapis.com/maps/api/directions/xml?origin=" + origin + ", UK&destination=" + destination + ", UK&sensor=false";

        //                using (System.Data.DataSet ds = new System.Data.DataSet())
        //                {

        //                    using (XmlTextReader reader = new XmlTextReader(url2))
        //                    {
        //                        reader.WhitespaceHandling = WhitespaceHandling.Significant;

        //                        ds.ReadXml(reader);

        //                        reader.Close();
        //                    }

        //                    DataTable dt = ds.Tables["distance"];

        //                    if (dt != null)
        //                    {
        //                        miles = dt.Rows[0][1].ToStr().Replace("mi", "").ToStr().Trim().ToDecimal();
        //                        dt.Dispose();
        //                        dt = null;


        //                    }
        //                    else
        //                    {

        //                        mileageError = true;

        //                    }
        //                }
        //            }


        //    }
        //    catch
        //    {

        //        mileageError = true;
        //    }


        //    return miles;
        //}


        private void MileageError()
        {
            lblMap.Text = "Mileage not found";

        }




        //private decimal CalculateTotalDistance(string origin, string via, string destination)
        //{


        //    decimal miles = 0.00m;


        //    origin = General.GetPostCodeMatch(origin);
        //    destination = General.GetPostCodeMatch(destination);

        //    string url2 = "http://maps.googleapis.com/maps/api/directions/xml?origin=" + origin + "&destination=" + destination + "&sensor=false";

        //    if (!string.IsNullOrEmpty(via))
        //    {
        //        url2 += "&waypoints=" + via;

        //    }

        //    XmlTextReader reader = new XmlTextReader(url2);
        //    reader.WhitespaceHandling = WhitespaceHandling.Significant;
        //    System.Data.DataSet ds = new System.Data.DataSet();
        //    ds.ReadXml(reader);
        //    DataTable dt = ds.Tables["distance"];
        //    if (dt != null)
        //    {
        //        var rows = dt.Rows.OfType<DataRow>().Where(c => c[0].ToStr().Trim() == c[1].ToStr().Strip("m").Trim()).ToList();

        //        decimal distanceKm = dt.Rows.OfType<DataRow>().Where(c => c[1].ToStr().Contains("km")).Sum(c => c[1].ToStr().Strip("km").Trim().ToDecimal()).ToDecimal() / 2;
        //        decimal distanceMeter = dt.Rows.OfType<DataRow>().Where(c => c[1].ToStr().Contains(" m")).Sum(c => c[1].ToStr().Strip("m").Trim().ToDecimal()).ToDecimal() / 2;

        //        decimal milKM = 0.621m;
        //        decimal milMeter = 0.00062137119m;

        //        miles = (milKM * distanceKm) + (milMeter * distanceMeter);

        //    }


        //    return miles;

        //}




        private decimal CalculateTotalDistance(string origin, string[] via, string destination)
        {


            decimal miles = 0.00m;

            //if (AppVars.objPolicyConfiguration.AddFareCalculationType.ToInt() == 1)
            //{



            //       if( ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.TOWN)
            //           origin = General.GetPostCodeMatch(origin);



            //        if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.TOWN)
            //            destination = General.GetPostCodeMatch(destination);


            //}

            string actualOrigin = origin;
            string actualDestination = destination;



            //stp_getCoordinatesByAddressResult pickupCoord = null;
            //stp_getCoordinatesByAddressResult destCoord = null;


            //pickupCoord = db.stp_getCoordinatesByAddress(actualOrigin, General.GetPostCodeMatch(actualOrigin)).FirstOrDefault();
            //destCoord = db.stp_getCoordinatesByAddress(actualDestination, General.GetPostCodeMatch(actualDestination)).FirstOrDefault();



            //string originString = string.Empty;
            //string destString = string.Empty;
            //if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
            //{
            //    originString = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
            //}

            //if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
            //{
            //    destString = destCoord.Latitude + "," + destCoord.Longtiude;
            //}


            if (AppVars.objPolicyConfiguration.AddFareCalculationType.ToInt() == 1)
            {

                if (via != null)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        for (int i = 0; i < via.Count(); i++)
                        {



                            if (i == 0)
                            {
                                // destination = General.GetPostCodeMatch(via[i].ToStr());
                                destination = via[i].ToStr();
                            }
                            else
                            {
                                //origin = General.GetPostCodeMatch(via[i - 1].ToStr());
                                //destination = General.GetPostCodeMatch(via[i].ToStr());

                                origin = via[i - 1].ToStr();
                                destination = via[i].ToStr();
                            }


                            stp_getCoordinatesByAddressResult pickupCoord = null;
                            stp_getCoordinatesByAddressResult destCoord = null;



                            pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                            destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();




                            string originString = string.Empty;
                            string destString = string.Empty;
                            if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                            {
                                origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                            }

                            if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                            {
                                destination = destCoord.Latitude + "," + destCoord.Longtiude;
                            }





                            miles += General.CalculateDistanceVia(origin, destination);

                        }

                    }
                }
            }
            else
            {
                if (via != null)
                {
                    for (int i = 0; i < via.Count(); i++)
                    {
                        if (i == 0)
                        {
                            destination = via[i].ToStr();
                        }
                        else
                        {
                            origin = via[i - 1].ToStr();
                            destination = via[i].ToStr();
                        }

                        miles += General.CalculateDistance(origin, destination);
                    }
                }

            }




            if (via != null && via.Count() > 0)
            {
                origin = destination;
            }
            else
            {
                origin = actualOrigin;
            }

            destination = actualDestination;

            //if (originString.Length > 0)
            //{
            //    origin = originString;                  

            //}

            //if (destString.Length > 0)
            //{
            //    destination = destString;


            //}


            if (via != null && via.Count() > 0)
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    stp_getCoordinatesByAddressResult pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                    stp_getCoordinatesByAddressResult destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();


                    if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                    {
                        origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                    }

                    if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                    {
                        destination = destCoord.Latitude + "," + destCoord.Longtiude;
                    }

                    miles += General.CalculateDistanceVia(origin, destination);


                }
            }
            else
            {

                miles += General.CalculateDistance(origin, destination);
            }


            return miles;

        }



        private void ddlToLocType_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            FillToLocations();


        }

        private void btnDetailMap_Click(object sender, EventArgs e)
        {


            ShowMap();

        }


        private void ShowMap()
        {
            try
            {
                int? locTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                int? locId = null;

                bool fromNAT = false, toNAT = false;

                string origin = "";
                string destination = "";

                origin = txtFromAddress.Text.Trim();

                if (locTypeId == Enums.LOCATION_TYPES.TOWN)
                {
                    origin = txtFromAddress.Text.Trim();

                    fromNAT = true;
                }



                if (origin == string.Empty)
                {
                    ENUtils.ShowMessage("Map not found");
                    return;
                }


                locTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                locId = null;



                destination = txtToAddress.Text.Trim();

                if (locTypeId == Enums.LOCATION_TYPES.TOWN)
                {

                    toNAT = true;
                }



                if (destination == string.Empty)
                {
                    destination = origin;

                }




                if (General.GetPostCodeMatch(origin.ToStr().ToUpper()) == string.Empty)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == origin.ToUpper()).DefaultIfEmpty().PostCode.ToStr();

                        origin = (origin + " " + postcode).Trim();

                    }

                }


                if (General.GetPostCodeMatch(destination.ToStr().ToUpper()) == string.Empty)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == destination.ToUpper()).DefaultIfEmpty().PostCode.ToStr();

                        destination = (destination + " " + postcode).Trim();
                    }
                }





                stp_getCoordinatesByAddressResult pickupCoord = null;
                stp_getCoordinatesByAddressResult destCoord = null;

                try
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                        destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();

                    }

                }
                catch
                {


                }


                string originString = origin;
                string destString = destination;

                if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                {
                    origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                    fromNAT = true;
                    toNAT = true;

                }

                if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                {
                    destination = destCoord.Latitude + "," + destCoord.Longtiude;
                    fromNAT = true;
                    toNAT = true;
                }




                string[] viaLocs = new string[0];

                if (pnlVia != null)
                {
                    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();
                }



                //  string viaLocations = "";
                if (viaLocs.Count() > 0)
                {


                    if (fromNAT == false && toNAT == false && AppVars.objPolicyConfiguration.AddFareCalculationType.ToInt() == 1)
                    {

                        viaLocs = viaLocs.Select(c => General.GetPostCodeMatch(c)).Where(c => c.Length > 0).ToArray<string>();
                        if (viaLocs.Count() == 0)
                        {
                            ENUtils.ShowMessage("Map not found");
                            return;

                        }
                    }
                    else
                    {

                        List<string> listVia = new List<string>();
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            foreach (var item in viaLocs)
                            {
                                var viaCoord = db.stp_getCoordinatesByAddress(item, General.GetPostCodeMatch(item)).FirstOrDefault();

                                if (viaCoord != null && viaCoord.Latitude != null && viaCoord.Latitude != 0)
                                {


                                    listVia.Add((viaCoord.Latitude + "," + viaCoord.Longtiude).Trim());
                                }
                                else
                                {
                                    string postcode = General.GetPostCodeMatch(item);

                                    if (postcode.ToStr().Length == 0)
                                    {
                                        listVia.Add(item);

                                    }
                                    else
                                    {

                                        listVia.Add(postcode);
                                    }

                                }
                                //string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == item.ToUpper()).DefaultIfEmpty().PostCode.ToStr();



                            }

                        }

                        viaLocs = listVia.ToArray<string>();




                    }



                }




                string viaStr = "**";

                if (viaLocs != null && viaLocs.Count() > 0)
                {
                    viaStr = string.Join(">>>", viaLocs);

                    viaStr = viaStr.Replace(" ", "**").Trim();

                }


                string connString = Application.StartupPath + "\\TreasureRouteMap.exe";








                System.Diagnostics.Process proc = System.Diagnostics.Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }

                string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");

                string arg = "frmmap" + " " + conn + " " + origin.Replace(" ", "**") + " " + viaStr.Replace(" ", "**") + " " + destination.Replace(" ", "**") + " " + fromNAT + " " + toNAT + " " + originString.Replace(" ", "**") + " " + destString.Replace(" ", "**");

                System.Diagnostics.Process.Start(connString, arg);






            }
            catch (Exception ex)
            {


            }



        }




        private bool ValidateOptionalMandatoryFields()
        {

            bool rtn = true;

            if (numFareRate.Value == 0)
            {
                if ((ddlCompany.Enabled && numCompanyFares.Value == 0))
                {

                    if (DialogResult.No == MessageBox.Show("Please enter a Fares,Company Price..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        radLabel5.ForeColor = Color.Magenta;
                        lblCompanyPrice.ForeColor = Color.Magenta;

                        rtn = false;
                    }
                }
                else
                {

                    if (DialogResult.No == MessageBox.Show("Please enter a Fares..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {

                        radLabel5.ForeColor = Color.Magenta;
                        rtn = false;
                    }
                }
            }
            else if ((ddlCompany.Enabled && numCompanyFares.Value == 0))
            {

                if (DialogResult.No == MessageBox.Show("Please enter a Company Price..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {

                    lblCompanyPrice.ForeColor = Color.Magenta;

                    rtn = false;
                }
            }







            return rtn;

        }

        //fwd00
        void FetchBookingLimits()
        {

            //using (TaxiDataContext context = new TaxiDataContext())
            //{
            //    int x = Convert.ToInt32(DateTime.Now.DayOfWeek);

            //    var lst = context.BookingLimits.Where(w => w.LimitDayId == x + 1).OrderBy(w => w.LimitDateTime).ToList();
            //    List<BookingLimit> temp = new List<BookingLimit>();
            //    int y = 0;
            //    int z = 0;
            //    foreach (BookingLimit b in lst)
            //    {
            //        if (b.LimitDateTime.Value.Hour == DateTime.Now.Hour)
            //        {
            //            temp.Add(b);
            //            z = y;

            //        }
            //        y++;

            //    }
            //    BookingLimit req = new BookingLimit();
            //    if (DateTime.Now.Minute > 0 && DateTime.Now.Minute <= 30)
            //    {
            //        req = temp.ElementAt(1);
            //    }
            //    else
            //    {
            //        req = lst.ElementAt(z + 1);

            //    }


            //    DateTime date = new DateTime();//DateTime.Now.Date;
            //    //date = date.AddHours(req.LimitDateTime.Value.Hour);
            //    DateTime date0 = new DateTime();// date;
            //    // date = date.AddMinutes(req.LimitDateTime.Value.Minute);
            //    DateTime test = DateTime.Now.AddHours(10);
            //    int vvv = test.Hour;
            //    if (DateTime.Now.Minute <= 30)
            //    {
            //        date0 = DateTime.Now.Date;
            //        date0 = date0.AddHours(DateTime.Now.Hour);
            //        date = DateTime.Now.Date;
            //        date = date.AddHours(DateTime.Now.Hour);
            //        date = date.AddMinutes(30);

            //    }
            //    else if (DateTime.Now.Minute > 30)
            //    {
            //        date0 = DateTime.Now.Date;
            //        date0 = date0.AddHours(DateTime.Now.Hour);
            //        date0 = date0.AddMinutes(30);
            //        date = DateTime.Now.Date;
            //        date = date.AddHours(DateTime.Now.Hour + 1);
            //        date = date.AddMinutes(0);
            //    }


            //    var v = context.Bookings.Where(w => w.BookingDate >= date0 && w.BookingDate <= date).ToList();

            //    if (v.Count() >= req.LimitValue)
            //    {
            //        MessageBox.Show("Maximum Limit is exceed for this 30 minutes for bookings");
            //        frmBookingLimitsGraph frm3 = new frmBookingLimitsGraph(x + 1, DateTime.Now);
            //        frm3.ShowDialog();
            //        frm3.Dispose();


            //    }
            //    else
            //    {
            //        frmBookingLimitsGraph frm3 = new frmBookingLimitsGraph(x + 1, DateTime.Now);
            //        frm3.ShowDialog();
            //        frm3.Dispose();
            //    }
            //    //    var data=context.Bookings.Where(w=>w.BookingDate>DateTime.Now.Date)


            //}

        }

        #region Overridden Methods
        decimal OldTotalCharges = 0.00m;
        int? bookingstatusId;
        DateTime? OldPickupDateTime = null;
        private bool Save()
        {

           
            try
            {

             





                if (AppVars.objPolicyConfiguration.ValidateOptionalFaresOnBooking.ToBool() && ValidateOptionalMandatoryFields() == false)
                    return false;


                bool IsAddMode = false;
                DateTime nowDate = DateTime.Now;







                string accountName = "";
                string paymentType = "";
                string journeyType = "";


                string FromAdd = "";
                string ToAdd = "";
                string Customer = "";
                decimal FareRate = 0;
                string Vehicle = "";
                string From = "";
                string To = "";
                string Phone = "";
                string Mobile = "";
                int pickupZoneId = 0;
                int dropOffZoneId = 0;

                int? oldPaymentTypeId = null;
                string via = "";
                bool IsQuotedPrice = false;

                string special = string.Empty;
                //


                if (objMaster.PrimaryKeyValue == null)
                {


                    objMaster.New();

                    objMaster.Current.BookingDate = nowDate;
                    objMaster.Current.AddOn = nowDate;
                    objMaster.Current.AddBy = AppVars.LoginObj.LuserId.ToIntorNull();
                    objMaster.Current.AddLog = AppVars.LoginObj.UserName.ToStr();
                    objMaster.Current.CallRefNo = this.CallRefNo;
                    IsAddMode = true;
                    OldTotalCharges = -1;

                }
                else
                {





                    pickupZoneId = objMaster.Current.ZoneId.ToInt();
                    dropOffZoneId = objMaster.Current.DropOffZoneId.ToInt();
                    FromAdd = objMaster.Current.FromAddress.ToStr();
                    ToAdd = objMaster.Current.ToAddress.ToStr();


                    if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                        FromAdd = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                    if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                        ToAdd = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();



                    Customer = objMaster.Current.CustomerName.ToStr();
                    FareRate = objMaster.Current.FareRate.ToDecimal();
                    //  FareRate = objMaster.Current.TotalCharges.ToDecimal();


                    if (AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim() != "")
                        FareRate = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();


                    Vehicle = objMaster.Current.Fleet_VehicleType.VehicleType.ToStr();
                    From = objMaster.Current.FromLocTypeId != null ? objMaster.Current.Gen_LocationType.LocationType.ToStr() : "Address";
                    To = objMaster.Current.ToLocTypeId != null ? objMaster.Current.Gen_LocationType1.LocationType.ToStr() : "Address";
                    Phone = objMaster.Current.CustomerPhoneNo.ToStr();
                    Mobile = objMaster.Current.CustomerMobileNo.ToStr();
                    OldPickupDateTime = objMaster.Current.PickupDateTime;
                    special = objMaster.Current.SpecialRequirements.ToStr().Trim();


                    accountName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName.ToStr();
                    journeyType = "O/W";

                    if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                        journeyType = "Return";
                    else if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                        journeyType = "W/R";


                    oldPaymentTypeId = objMaster.Current.PaymentTypeId;
                    paymentType = objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr();
                    //paymentType = objMaster.Current.Gen_PaymentType.PaymentCategoryId == null ? objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr()
                    //            : objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();

                    if (objMaster.Current.Booking_ViaLocations.Count > 0)
                    {
                        int i = 1;
                        via = string.Join(" * ", objMaster.Current.Booking_ViaLocations.Select(c => "(" + i++.ToStr() + ")" + c.ViaLocValue.ToStr()).ToArray<string>());
                    }


                    if (chkQuotedPrice != null)
                        IsQuotedPrice = objMaster.Current.IsQuotedPrice.ToBool();

                    objMaster.Edit();

                    objMaster.Current.EditOn = nowDate;
                    objMaster.Current.EditBy = AppVars.LoginObj.LuserId.ToIntorNull();
                    objMaster.Current.EditLog = AppVars.LoginObj.UserName.ToStr();

                }

                objMaster.PermanentNotes = objMaster.Current.SpecialRequirements.ToStr().Trim();

                objMaster.ExcludedDriverIds = btnExcludeDrivers.Tag.ToStr().Trim();

                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD && this.objBookingPayment != null)
                {
                    if (objMaster.Current.BookingPayment == null)
                        objMaster.Current.BookingPayment = new Booking_Payment();




                    objMaster.Current.BookingPayment.OrderDescription = this.objBookingPayment.OrderDescription;
                    objMaster.Current.BookingPayment.NameOnCard = this.objBookingPayment.NameOnCard;
                    objMaster.Current.BookingPayment.CardNumber = this.objBookingPayment.CardNumber;
                    objMaster.Current.BookingPayment.CardExpiryDate = this.objBookingPayment.CardExpiryDate;
                    objMaster.Current.BookingPayment.CardStartDate = this.objBookingPayment.CardStartDate;
                    objMaster.Current.BookingPayment.IssueNumber = this.objBookingPayment.IssueNumber;
                    objMaster.Current.BookingPayment.CV2 = this.objBookingPayment.CV2;
                    objMaster.Current.BookingPayment.Email = this.objBookingPayment.Email;
                    objMaster.Current.BookingPayment.PhoneNo = this.objBookingPayment.PhoneNo;
                    objMaster.Current.BookingPayment.Address = this.objBookingPayment.Address;
                    objMaster.Current.BookingPayment.City = this.objBookingPayment.City;
                    objMaster.Current.BookingPayment.State = this.objBookingPayment.State;
                    objMaster.Current.BookingPayment.PostCode = this.objBookingPayment.PostCode;
                    objMaster.Current.BookingPayment.Status = this.objBookingPayment.Status;
                    objMaster.Current.BookingPayment.AuthCode = this.objBookingPayment.AuthCode;
                }



                //if (pnlComcab != null)
                //{

                //    //try
                //    //{
                //    //    objMaster.Current.CashRate = numComcab_Cash.Value.ToDecimal();
                //    //    objMaster.Current.AccountRate = numComcab_Account.Value.ToDecimal();
                //    //    //  objMaster.Current.ExtraMile = numComcab_ExtraMile.Value.ToDecimal();
                //    //    objMaster.Current.WaitingMins = numComcab_WaitingMin.Value.ToDecimal();
                //    //}
                //    //catch
                //    //{


                //    //}
                //}



                if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                {

                    string babyseats = string.Empty;



                    if (ddlBabyseat1.SelectedIndex > 0)
                        babyseats = ddlBabyseat1.SelectedItem.ToStr();


                    if (ddlbabyseat2.SelectedIndex > 0)
                        babyseats += "<<<" + ddlbabyseat2.SelectedItem.ToStr();

                    else
                    {
                        if (ddlBabyseat1.SelectedIndex > 0)
                            babyseats += "<<<";
                    }


                    objMaster.Current.BabySeats = babyseats;

                }


                objMaster.Current.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();


                int? driverId = ddlDriver.SelectedValue.ToIntorNull();


                if (objMaster.Current.Id > 0
                    && (driverId == null && objMaster.Current.DriverId != null)
                    && (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED))
                {

                    driverId = objMaster.Current.DriverId;
                    objMaster.Current.DriverId = driverId;

                }
                else
                {
                    objMaster.Current.DriverId = driverId;
                }


                objMaster.Current.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
                objMaster.Current.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
                objMaster.Current.CompanyId = ddlCompany.SelectedValue.ToIntorNull();

                //    objMaster.Current.CustomerCreditCardDetails = txtCustomerCreditCardNo.Text.Trim();
                //    objMaster.Current.CompanyCreditCardDetails = txtCompanyCreditCardNo.Text.Trim();


                // Added on 19/08/2015 Danish (For Half Card and Half Cash)
                if (chkSecondaryPaymentType != null)
                {
                    if (chkSecondaryPaymentType.Checked)
                    {

                        objMaster.Current.SecondaryPaymentTypeId = Enums.PAYMENT_TYPES.CASH;
                        objMaster.Current.CashFares = numCashPaymentFares.Value.ToDecimal();
                    }
                    else
                    {

                        objMaster.Current.SecondaryPaymentTypeId = null;
                        objMaster.Current.CashFares = 0.00m;
                    }

                }
                //



                if (ddlDepartment != null)
                    objMaster.Current.DepartmentId = ddlDepartment.SelectedValue.ToLongorNull();



                if (ddlEscort != null)
                {
                    objMaster.Current.EscortId = ddlEscort.SelectedValue.ToLongorNull();

                    objMaster.Current.EscortPrice = numEscortPrice.Value.ToDecimal();

                }

                objMaster.Current.IsCompanyWise = chkIsCompanyRates.Checked;

                int journeyTypeId = Enums.JOURNEY_TYPES.ONEWAY;

                if (opt_return.Checked)
                {
                    journeyTypeId = Enums.JOURNEY_TYPES.RETURN;

                }
                else if (opt_waitreturn.Checked)
                {

                    journeyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;
                }


                objMaster.Current.JourneyTypeId = journeyTypeId;


                objMaster.Current.IsQuotation = chkQuotation.Checked;


                if (pnlOrderNo != null)
                {

                    objMaster.Current.OrderNo = txtOrderNo.Text.ToStr().Trim();
                    objMaster.Current.PupilNo = txtPupilNo.Text.ToStr().Trim();
                }


                if (dtpPickupDate.Enabled)
                {

                        objMaster.Current.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();

                }


                if (chkLead.Checked)
                {
                    objMaster.Current.AutoDespatchTime = objMaster.Current.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                    objMaster.Current.DeadMileage = numLead.Value;
                }
                else
                {
                    objMaster.Current.AutoDespatchTime = null;
                    objMaster.Current.DeadMileage = 0;

                }



                if (dtpReturnPickupDate != null)
                {
                    if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null)
                    {
                        objMaster.Current.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDateorNull() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                    }
                    else
                        objMaster.Current.ReturnPickupDateTime = null;

                    objMaster.Current.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();


                    objMaster.AddedBy = AppVars.LoginObj.UserName.ToStr();



                    if (txtReturnSpecialReq != null)
                    {

                        objMaster.ReturnSpecialRequirement = txtReturnSpecialReq.Text.Trim();
                    }


                    if (ddlReturnVehicleType != null)
                    {
                        objMaster.ReturnVehicleTypeId = ddlReturnVehicleType.SelectedValue.ToIntorNull();
                    }


                    if (ddlReturnPaymentType != null)
                        objMaster.ReturnPaymentTypeId = ddlReturnPaymentType.SelectedValue.ToIntorNull();

                }

                if (objMaster.Current.MasterJobId != null && objMaster.Current.Booking1 != null)
                {
                    objMaster.Current.Booking1.ReturnPickupDateTime = objMaster.Current.PickupDateTime;

                }

                objMaster.Current.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();

                objMaster.Current.NoofPassengers = num_TotalPassengers.Value.ToInt();
                objMaster.Current.NoofLuggages = numTotalLuggages.Value.ToInt();

                objMaster.Current.SMSType = optSMSThirdParty != null && optSMSThirdParty.Checked ? Enums.SMSACCOUNT_TYPE.CLICKATELL : Enums.SMSACCOUNT_TYPE.MODEMSMS;

                //    objMaster.Current.EnableFareMeter = chkHasFareMeter.Checked;

                objMaster.Current.FareRate = numFareRate.Value.ToDecimal();

                if (numReturnFare != null)
                    objMaster.Current.ReturnFareRate = numReturnFare.Value.ToDecimal();


                objMaster.Current.CompanyPrice = numCompanyFares != null ? numCompanyFares.Value.ToDecimal() : 0;
                objMaster.Current.CustomerPrice = objMaster.Current.FareRate;
                objMaster.Current.ServiceCharges = numBookingFee.Visible ? numBookingFee.Value : 0.00m;
                if (opt_return.Checked)
                {
                    if (numReturnCompanyFares != null)
                        objMaster.Current.WaitingMins = numReturnCompanyFares.Value;

                    if (numReturnFare != null)
                        objMaster.ReturnCustomerPrice = numReturnBookingFee.Value;
                }

                objMaster.Current.ParkingCharges = numParkingChrgs.Value.ToDecimal();
                objMaster.Current.WaitingCharges = numWaitingChrgs.Value.ToDecimal();
                objMaster.Current.ExtraDropCharges = numExtraChrgs.Value.ToDecimal();
                objMaster.Current.MeetAndGreetCharges = numMeetCharges.Value.ToDecimal();
                objMaster.Current.CongtionCharges = numCongChrgs.Value.ToDecimal();

                // Add Drv Waiting Mins (Request of Double o cars)
                objMaster.Current.DriverWaitingMins = numDrvWaitingMins.Value.ToInt();


                objMaster.OldCustomerName = objMaster.Current.CustomerName.ToStr().Trim();


                if (IsExistingCustomer)
                {
                    objMaster.OldCustomerName = CallerCustomerName.ToStr();

                    objMaster.IsExistingCustomer = true;

                }
                objMaster.Current.CustomerId = ddlCustomerName.Tag.ToIntorNull();
                objMaster.Current.CustomerName = ddlCustomerName.Text.ToStr().Trim();


                objMaster.OldPhoneNo = objMaster.Current.CustomerPhoneNo.ToStr().Trim();
                objMaster.OldMobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();

                objMaster.Current.CustomerPhoneNo = txtCustomerPhoneNo.Text.Trim();
                objMaster.Current.CustomerMobileNo = txtCustomerMobileNo.Text.Trim();


                objMaster.OldEmail = objMaster.Current.CustomerEmail.ToStr().Trim();
                objMaster.Current.CustomerEmail = txtEmail.Text.Trim();

                objMaster.Current.SpecialRequirements = txtSpecialRequirements.Text.Trim();


                int FromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int ToLocTypeId = ddlToLocType.SelectedValue.ToInt();

                if (FromLocTypeId == 0)
                    FromLocTypeId = Enums.LOCATION_TYPES.ADDRESS;

                if (ToLocTypeId == 0)
                    ToLocTypeId = Enums.LOCATION_TYPES.ADDRESS;

                objMaster.Current.FromLocTypeId = FromLocTypeId;
                objMaster.Current.ToLocTypeId = ToLocTypeId;
                //    objMaster.Current.FromLocId = ddlFromLocation.SelectedValue.ToIntorNull();
                //    objMaster.Current.ToLocId = ddlToLocation.SelectedValue.ToIntorNull();


                objMaster.Current.PaymentComments = txtPaymentReference.Text.Trim();

                if (ddlReturnFromAirport != null)
                    objMaster.Current.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();


                //if (FromLocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromLocTypeId == Enums.LOCATION_TYPES.BASE)
                objMaster.Current.FromAddress = txtFromAddress.Text.Trim();

                //else if (FromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    objMaster.Current.FromAddress = txtFromPostCode.Text.Trim();
                //else
                //{
                //    objMaster.Current.FromAddress = ddlFromLocation.ComboBoxElement.TextBoxElement.TextBoxItem.Text.Trim();
                //}



                objMaster.Current.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
                objMaster.Current.FromStreet = txtFromStreetComing.Text.Trim();
                objMaster.Current.FromPostCode = txtFromPostCode.Text.Trim();



                //   if (ToLocTypeId == Enums.LOCATION_TYPES.ADDRESS || ToLocTypeId == Enums.LOCATION_TYPES.BASE)
                objMaster.Current.ToAddress = txtToAddress.Text.StripNewLine().Trim();

                //else if (ToLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    objMaster.Current.ToAddress = txtToPostCode.Text.Trim();
                //else
                //{
                //    objMaster.Current.ToAddress = ddlToLocation.ComboBoxElement.TextBoxElement.TextBoxItem.Text.Trim();
                //}

                objMaster.Current.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();
                objMaster.Current.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();


                //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
                //{

                //    if (ddlPickupPlot.SelectedValue == null)
                //        objMaster.Current.ZoneId = GetZoneId(objMaster.Current.FromAddress.ToStr());
                //    else
                //        objMaster.Current.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

                //    if (ddlDropOffPlot.SelectedValue == null)
                //        objMaster.Current.DropOffZoneId = GetZoneId(objMaster.Current.ToAddress.ToStr());
                //    else
                //        objMaster.Current.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
                //}


                objMaster.Current.ToDoorNo = txtToFlightDoorNo.Text.Trim();
                objMaster.Current.ToStreet = txtToStreetComing.Text.Trim();
                objMaster.Current.ToPostCode = txtToPostCode.Text.Trim();


                objMaster.Current.AutoDespatch = chkAutoDespatch.Checked;
                objMaster.Current.IsBidding = chkBidding.Checked;

                objMaster.Current.DisableDriverSMS = chkDisableDriverSMS.Checked;
                objMaster.Current.DisablePassengerSMS = chkDisablePassengerSMS.Checked;


                objMaster.Current.IsCommissionWise = chkIsCommissionWise.Checked;
                objMaster.Current.DriverCommission = numDriverCommission.Value.ToDecimal();
                objMaster.Current.DriverCommissionType = ddlCommissionType.SelectedValue.ToStr().Trim();
                objMaster.Current.DistanceString = lblMap.Text.ToStr();

                if (chkTakenByAgent != null)
                {

                    objMaster.Current.JobTakenByCompany = chkTakenByAgent.Checked;
                    objMaster.Current.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                    objMaster.Current.AgentCommission = numAgentCommission.Value.ToDecimal();
                    objMaster.Current.FromFlightNo = ddlAgentCommissionType.Text.Trim();
                }


                if (numJourneyTime != null)
                {
                    objMaster.Current.JourneyTimeInMins = numJourneyTime.Value.ToDecimal();

                }



                objMaster.Current.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";

                if (ddlDirection != null)
                    objMaster.Current.BoundType = ddlDirection.Text.ToStr().Trim();






                if (grdVia != null)
                {

                    if (grdVia.Rows.Count(c => c.Cells["IsUpdated"].Value.ToInt() == 1) > 0)
                    {
                        objMaster.Current.Booking_ViaLocations.Clear();

                        grdVia.Rows.ToList().ForEach(c => c.Cells["ID"].Value = 0);

                    }
                    string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                    IList<Booking_ViaLocation> savedList = objMaster.Current.Booking_ViaLocations;
                    List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                              select new Booking_ViaLocation
                                                              {
                                                                  Id = r.Cells["ID"].Value.ToLong(),
                                                                  BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                                  ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                                  ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                                  ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                                  ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                                  ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                                  ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                              }).ToList();


                    Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);
                }





                // AUDIT SECTION
                if (objMaster.PrimaryKeyValue != null)
                {
                    try
                    {
                        OldTotalCharges = objMaster.Current.TotalCharges.ToDecimal();

                        string A_FromAdd = objMaster.Current.FromAddress.ToStr();
                        string A_ToAdd = objMaster.Current.ToAddress.ToStr();


                        if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            A_FromAdd = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                        if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            A_ToAdd = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();


                        string A_Customer = objMaster.Current.CustomerName.ToStr();
                        decimal A_FareRate = objMaster.Current.FareRate.ToDecimal();

                        //if (AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim().Length > 0)
                        //{
                        //    A_FareRate = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();
                        //}                 

                        string A_Vehicle = objMaster.Current.Fleet_VehicleType.VehicleType.ToStr();
                        string A_From = objMaster.Current.Gen_LocationType.LocationType.ToStr();
                        string A_To = objMaster.Current.Gen_LocationType1.LocationType.ToStr();
                        string A_Phone = objMaster.Current.CustomerPhoneNo.ToStr();
                        string A_Mobile = objMaster.Current.CustomerMobileNo.ToStr();


                        string A_journeyType = "O/W";

                        if (opt_return.Checked)
                            A_journeyType = "Return";
                        else if (opt_waitreturn.Checked)
                            A_journeyType = "W/R";



                        string Get = "";
                        string old = "";


                        if (chkQuotedPrice != null && IsQuotedPrice != chkQuotedPrice.Checked)
                        {
                            Get += " Quoted Price " + (chkQuotedPrice.Checked ? "checked" : "un-checked") + Environment.NewLine;
                            old += " Quoted Price : " + (IsQuotedPrice ? "checked" : "un-checked") + Environment.NewLine;

                        }

                        if (FromAdd != A_FromAdd)
                        {
                            Get += " Pickup Point: " + A_FromAdd + Environment.NewLine;
                            old += " Pickup Point: " + FromAdd + Environment.NewLine;
                        }
                        if (ToAdd != A_ToAdd)
                        {
                            Get += " Destination: " + A_ToAdd + Environment.NewLine;
                            old += " Destination: " + ToAdd + Environment.NewLine;

                        }
                        if (Customer != A_Customer)
                        {
                            Get += " Customer Name: " + objMaster.Current.CustomerName.ToStr() + Environment.NewLine;
                            old += " Customer Name: " + Customer + Environment.NewLine;
                        }
                        if (FareRate != A_FareRate)
                        {
                            Get += " Fares: " + objMaster.Current.FareRate.ToDecimal() + Environment.NewLine;
                            old += " Fares: " + FareRate + Environment.NewLine;
                        }
                        if (Vehicle != A_Vehicle)
                        {
                            Get += " Vehicle: " + objMaster.Current.Fleet_VehicleType.VehicleType.ToStr() + Environment.NewLine;
                            old += " Vehicle: " + Vehicle + Environment.NewLine;
                        }
                        if (From != A_From)
                        {
                            Get += " From: " + objMaster.Current.Gen_LocationType.LocationType.ToStr() + Environment.NewLine;
                            old += " From: " + From + Environment.NewLine;
                        }
                        if (To != A_To)
                        {
                            Get += " To: " + objMaster.Current.Gen_LocationType1.LocationType.ToStr() + Environment.NewLine;
                            old += " To: " + To + Environment.NewLine;


                        }

                        if (Phone != A_Phone)
                        {
                            Get += " Phone No: " + objMaster.Current.CustomerPhoneNo.ToStr() + Environment.NewLine;
                            old += " Phone No: " + Phone + Environment.NewLine;
                        }

                        if (Mobile != A_Mobile)
                        {
                            Get += " Mobile No: " + objMaster.Current.CustomerMobileNo.ToStr() + Environment.NewLine;
                            old += " Mobile No: " + Mobile + Environment.NewLine;
                        }

                        if (dtpPickupDate.Value != null && OldPickupDateTime.Value != null &&
                            (OldPickupDateTime.Value.Date != dtpPickupDate.Value.ToDate())
                            || (dtpPickupTime.Value != null && OldPickupDateTime.Value.TimeOfDay != dtpPickupTime.Value.ToDateTime().TimeOfDay))
                        {
                            Get += " PickupDate/Time: " + string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay) + "| ";
                            old += " PickupDate/Time: " + string.Format("{0:dd/MM/yyyy HH:mm}", OldPickupDateTime.Value) + Environment.NewLine;
                        }




                        if (ddlPickupPlot.SelectedValue != null && ddlPickupPlot.SelectedValue.ToInt() != pickupZoneId)
                        {
                            Get += " PickupPlot: " + ddlPickupPlot.Text.ToStr().ToUpper() + Environment.NewLine;
                            old += " PickupPlot: " + objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr() + Environment.NewLine;

                        }


                        if (ddlDropOffPlot.SelectedValue != null && ddlDropOffPlot.SelectedValue.ToInt() != dropOffZoneId)
                        {
                            Get += " DropOffPlot: " + ddlDropOffPlot.Text.ToStr().ToUpper() + Environment.NewLine;
                            old += " DropOffPlot: " + objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr() + Environment.NewLine;

                        }


                        if (accountName != ddlCompany.Text.Trim())
                        {
                            Get += " Account: " + ddlCompany.Text.Trim() + Environment.NewLine;
                            old += " Account: " + accountName + Environment.NewLine;

                        }


                        if (paymentType != ddlPaymentType.Text.Trim())
                        {
                            Get += " Payment Type: " + ddlPaymentType.Text.Trim() + Environment.NewLine;
                            old += " Payment Type: " + paymentType + Environment.NewLine;



                            //if (objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentCategoryId != null)
                            //{
                            //    paymentType = General.GetObject<Gen_PaymentType>(c => c.PaymentType == ddlPaymentType.Text.Trim()).DefaultIfEmpty().Gen_PaymentCategory.DefaultIfEmpty().CategoryName.ToStr().Trim();

                            //    if (string.IsNullOrEmpty(paymentType.ToStr().Trim()))
                            //        paymentType = ddlPaymentType.Text.Trim();

                            //}
                            //else
                            //{

                            paymentType = ddlPaymentType.Text.Trim();
                            //   }

                        }
                        //else
                        //{
                        //    if (objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentCategoryId != null)
                        //    {

                        //        paymentType = objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();
                        //    }


                        //}



                        if (journeyType != A_journeyType)
                        {
                            Get += " Journey Type: " + A_journeyType + Environment.NewLine;
                            old += " Journey Type: " + journeyType + Environment.NewLine;

                        }


                        if (special != txtSpecialRequirements.Text.Trim())
                        {
                            Get += " Special Instruction: " + txtSpecialRequirements.Text.Trim() + Environment.NewLine;
                            old += " Special Instruction: " + special + Environment.NewLine;
                        }


                        string A_Via = " ";

                        if (grdVia != null && grdVia.Rows.Count > 0)
                        {
                            int i = 1;
                            A_Via = string.Join(" * ", grdVia.Rows.Select(c => "(" + i++.ToStr() + ")" + c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>());
                        }



                        if (via != A_Via.ToStr().Trim())
                        {
                            Get += " Via: " + via + Environment.NewLine;
                            old += " Via: " + A_Via + Environment.NewLine;
                        }

                        var NewRec = Get.TrimEnd('\r', '\n', ' ');
                        var oldRec = old.TrimEnd('\r', '\n', ' ');

                        if (NewRec != "" && old != "" && btnPayment.Tag==null)
                        {
                            if (DialogResult.No == MessageBox.Show("Do you want to save these changes ?", "Edit Changes Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                            {
                                return false;

                            }



                            //  int? LoginID = AppVars.LoginObj.LgroupId.ToInt();
                            long BokingID = objMaster.PrimaryKeyValue.ToLong();
                            DateTime now = DateTime.Now.ToDateTime();

                            objMaster.Current.Booking_Logs.Add(new Booking_Log { BookingId = BokingID, User = AppVars.LoginObj.LoginName, BeforeUpdate = oldRec, AfterUpdate = NewRec, UpdateDate = now });

                            string msg = string.Empty;
                            string pickUpPlot = string.Empty;
                            string dropOffPlot = string.Empty;


                            string mobNo = objMaster.Current.CustomerMobileNo;
                            if (string.IsNullOrEmpty(mobNo))
                                mobNo = " ";


                            else if (!string.IsNullOrEmpty(A_Phone))
                            {
                                mobNo = mobNo + "/" + A_Phone;
                            }


                            string A_Special = txtSpecialRequirements.Text.Trim();

                            if (string.IsNullOrEmpty(A_Special))
                            {
                                A_Special = " ";

                            }


                            //if (objMaster.Current.SecondaryPaymentTypeId != null && objMaster.Current.CashFares.ToDecimal() > 0)
                            //{
                            //    A_Special += " , Additional Cash Payment : " + objMaster.Current.CashFares.ToDecimal();
                            //}


                            string A_Account = ddlCompany.Text.Trim();

                            if (string.IsNullOrEmpty(A_Account))
                            {
                                A_Account = " ";
                            }





                        }
                    }
                    catch
                    {


                    }
                }


                // END AUDIT SECTION






                if (bookingstatusId != null)
                    objMaster.Current.BookingStatusId = bookingstatusId;


                objMaster.AutoDespatchBeforeMins = numBeforeMinutes.Value.ToInt();



                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                {
                    if (!string.IsNullOrEmpty(txtReturnFrom.Text.Trim()))
                    {
                        objMaster.ReturnFromAddress = txtReturnFrom.Text.Trim();
                    }
                    else if (ddlReturnFromAirport != null && ddlReturnFromAirport.SelectedValue != null)
                    {
                        objMaster.Current.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();

                    }


                    if (!string.IsNullOrEmpty(txtReturnTo.Text.Trim()))
                    {
                        objMaster.ReturnToAddress = txtReturnTo.Text.Trim();
                    }
                    //else if (ddlReturnTo.SelectedValue != null)
                    //{
                    //    objMaster.ReturnToLocIdv = ddlReturnTo.SelectedValue.ToIntorNull();

                    //}
                }

                objMaster.Current.IsReverse = chkReverse.Checked;


                //if (chkGenerateToken.Checked && txtTokenNo.Text.Length > 0)
                //    objMaster.Current.JobCode = txtTokenNo.Text.Trim();

                objMaster.Current.TipAmount = numTipAmount.Value.ToDecimal();

                objMaster.CheckServiceCharges = AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool();


                objMaster.Current.IsQuotedPrice = chkQuotedPrice.Checked;
                objMaster.Current.NoOfChilds = chkPermanentCustNotes.Checked ? 1 : 0;



                objMaster.Current.AttributeValues = btnAttributes.Tag.ToStr().Trim();
                objMaster.Current.ExcludedDriverIds = btnExcludeDrivers.Tag.ToStr().Trim();

                objMaster.AllowUpdateTransaction = IsAllowUpdating;
                objMaster.Save();




                //if (objMaster.Current.CompanyId != null && AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && AppVars.objPolicyConfiguration.HasWebAccounts.ToBool())
                //{
                //    new Thread(delegate()
                //    {



                //        try
                //        {
                //            if (General.GetQueryable<Gen_Company_WebAccount>(null).Count(c => c.CompanyId == objMaster.Current.CompanyId) > 0)
                //            {

                //                long Id = objMaster.Current.Id.ToInt();

                //                List<Booking> querylist = new List<Booking>();

                //                querylist.Add(objMaster.Current);

                //                if (objMaster.Current.MasterJobId != null)
                //                    querylist.Add(objMaster.Current.Booking1);
                //                else
                //                {
                //                    if (objMaster.Current.JourneyTypeId == 2)
                //                    {
                //                        querylist.Add(objMaster.Current.BookingReturns[0]);

                //                    }

                //                }

                //                //var querylist = General.GetQueryable<Booking>(c => c.Id == Id || c.MasterJobId == Id).ToList();
                //                using (DataClassesOnlineVehicleDataContext onlinedb = new DataClassesOnlineVehicleDataContext())
                //                {

                //                    long clientId = 0;
                //                    //if (AppVars.ClientId == 0)
                //                    //{
                //                    clientId = onlinedb.Clients.FirstOrDefault(c => c.Name == AppVars.objPolicyConfiguration.DefaultClientId).DefaultIfEmpty().ID;
                //                    //   }

                //                    foreach (var item in querylist)
                //                    {
                //                        // Booking 
                //                        // string companyName = ddlCompany.Text.Trim().ToLower();


                //                        Id = item.Id.ToInt();


                //                        long webbookingId = onlinedb.OnlineBookings.Where(x => x.SystemJobID == Id && x.ClientID == clientId).FirstOrDefault().DefaultIfEmpty().ID;

                //                        if (webbookingId.ToLong() > 0)
                //                        {

                //                            UpdateOnlineWebBooking(onlinedb, item, webbookingId.ToInt(), objMaster.Current.CompanyId, clientId);
                //                        }
                //                        else
                //                        {
                //                            //AddOnlineWebBooking(onlinedb,objOnlineAccount,item);
                //                            AddOnlineWebBooking(onlinedb, objMaster.Current.CompanyId.ToInt(), item, clientId);
                //                        }

                //                    }
                //                }
                //            }
                //        }
                //        catch (Exception ex)
                //        {

                //        }

                //    }).Start();
                //}





                saved = true;
                string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();


                UpdateSetFareLog(setFareLogMsg.ToStr().Trim());

                if (driverId != null
                    && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING || objMaster.Current.BookingStatusId == null))
                {

                    frm = new frmDespatchJob(objMaster.Current);
                    frm.ShowDialog();
                    this.IsDespatched = frm.SuccessDespatched;
                }





                // Advance Booking Confirmation Text


                DateTime? pickupdateTime = objMaster.Current.PickupDateTime;
                if (AppVars.objPolicyConfiguration.EnableAdvanceBookingSMSConfirmation.ToBool() && AppVars.listofSMSTags != null
                    && IsAddMode && pickupdateTime != null && objMaster.Current.IsQuotation.ToBool() == false
                    && (objMaster.Current.CompanyId == null || objMaster.Current.Gen_Company.DefaultIfEmpty().DisableAdvanceText.ToBool() == false))
                {

                    // string msg=string.Empty;
                    string msg = AppVars.objPolicyConfiguration.AdvanceBookingSMSText.ToStr().Trim();

                    string advancemsg = msg;



                    //using (TaxiDataContext db = new TaxiDataContext())
                    //{
                    //    msg = db.Gen_SysPolicy_Configurations.FirstOrDefault().AdvanceBookingSMSText.ToStr();
                    //    AppVars.listofSMSTags = db.SMSTags.ToList();
                    //      advancemsg=msg;
                    //}





                    string pickupSpan = string.Format("{0:HH:mm}", pickupdateTime);

                    TimeSpan picktime = TimeSpan.Parse(pickupSpan);

                    string nowP = string.Format("{0:HH:mm}", nowDate);
                    TimeSpan nowSpantime = TimeSpan.Parse(nowP);

                    int afterMins = AppVars.objPolicyConfiguration.AdvanceBookingSMSConfirmationMins.ToInt();
                    double minDifference = picktime.Subtract(nowSpantime).TotalMinutes;
                    //  int dayDiff = pickupdateTime.Value.Date.Subtract(DateTime.Now.Date).Days;
                    if (afterMins == 0 || minDifference >= afterMins)
                    {
                        object propertyValue = string.Empty;

                        foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                        {
                            switch (tag.TagObjectName)
                            {
                                case "booking":

                                    if (tag.TagPropertyValue.Contains('.'))
                                    {

                                        string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                        object parentObj = objMaster.Current.GetType().GetProperty(val[0]).GetValue(objMaster.Current, null);

                                        if (parentObj != null)
                                        {
                                            propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                        }
                                        else
                                            propertyValue = string.Empty;


                                        break;
                                    }
                                    else
                                    {
                                        propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current, null);
                                    }


                                    if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                    {
                                        propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objMaster.Current, null);
                                    }
                                    break;


                                case "Booking_ViaLocations":
                                    if (tag.TagPropertyValue == "ViaLocValue")
                                    {


                                        string[] VilLocs = null;
                                        int cnt = 1;
                                        VilLocs = objMaster.Current.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                        if (VilLocs.Count() > 0)
                                        {

                                            string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                            propertyValue = Locations;
                                        }
                                        else
                                            propertyValue = string.Empty;

                                    }
                                    break;




                                default:
                                    if (objMaster.Current.SubcompanyId != null)
                                    {

                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyName>")
                                        {
                                            string companyName = ddlSubCompany.Text.Trim();

                                            if (CompanyName.ToStr().Trim().Length > 0)
                                            {
                                                propertyValue = companyName;

                                            }
                                            else
                                            {
                                                if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                {

                                                    propertyValue = AppVars.objSubCompany.CompanyName.ToStr().Trim();
                                                }
                                                else
                                                {
                                                    propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                }
                                            }

                                        }


                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyTelNo>")
                                        {


                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                            {

                                                propertyValue = AppVars.objSubCompany.TelephoneNo.ToStr().Trim();
                                            }
                                            else
                                            {
                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                            }


                                        }

                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyEmail>")
                                        {


                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                            {

                                                propertyValue = AppVars.objSubCompany.EmailAddress.ToStr().Trim();
                                            }
                                            else
                                            {
                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                            }


                                        }



                                    }
                                    else
                                        propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);


                                    break;



                            }


                            msg = msg.Replace(tag.TagMemberValue,
                                tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                        }


                        msg.Replace("\n\n", "\n");

                        string refMsg = "";
                        if (General.SendAdvanceBookingSMS(mobileNo, ref refMsg, msg, objMaster.Current.SMSType.ToInt()))
                        {
                            try
                            {

                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && objMaster.Current.BookingReturns.Count > 0)
                                {
                                    msg = advancemsg;

                                    Booking objReturn = objMaster.Current.BookingReturns[0];

                                    foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                                    {
                                        switch (tag.TagObjectName)
                                        {
                                            case "booking":

                                                if (tag.TagPropertyValue.Contains('.'))
                                                {

                                                    string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                                    object parentObj = objReturn.GetType().GetProperty(val[0]).GetValue(objReturn, null);

                                                    if (parentObj != null)
                                                    {
                                                        propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                                    }
                                                    else
                                                        propertyValue = string.Empty;


                                                    break;
                                                }
                                                else
                                                {
                                                    propertyValue = objReturn.GetType().GetProperty(tag.TagPropertyValue).GetValue(objReturn, null);
                                                }


                                                if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                                {
                                                    propertyValue = objReturn.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objReturn, null);
                                                }
                                                break;


                                            case "Booking_ViaLocations":
                                                if (tag.TagPropertyValue == "ViaLocValue")
                                                {


                                                    string[] VilLocs = null;
                                                    int cnt = 1;
                                                    VilLocs = objReturn.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                                    if (VilLocs.Count() > 0)
                                                    {

                                                        string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                                        propertyValue = Locations;
                                                    }
                                                    else
                                                        propertyValue = string.Empty;

                                                }
                                                break;


                                            default:
                                                if (objMaster.Current.SubcompanyId != null)
                                                {

                                                    if (tag.TagMemberValue.ToStr().Trim() == "<CompanyName>")
                                                    {
                                                        string companyName = ddlSubCompany.Text.Trim();

                                                        if (CompanyName.ToStr().Trim().Length > 0)
                                                        {
                                                            propertyValue = companyName;

                                                        }
                                                        else
                                                        {
                                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                            {

                                                                propertyValue = AppVars.objSubCompany.CompanyName.ToStr().Trim();
                                                            }
                                                            else
                                                            {
                                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                            }
                                                        }

                                                    }


                                                    if (tag.TagMemberValue.ToStr().Trim() == "<CompanyTelNo>")
                                                    {


                                                        if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                        {

                                                            propertyValue = AppVars.objSubCompany.TelephoneNo.ToStr().Trim();
                                                        }
                                                        else
                                                        {
                                                            propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                        }


                                                    }



                                                }

                                                else
                                                    propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);


                                                break;



                                        }


                                        msg = msg.Replace(tag.TagMemberValue,
                                            tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                                    }

                                    msg.Replace("\n\n", "\n");

                                    Thread.Sleep(1000);
                                    General.SendAdvanceBookingSMS(mobileNo, ref refMsg, msg, objMaster.Current.SMSType.ToInt());
                                    Thread.Sleep(1000);

                                }
                            }
                            catch
                            {


                            }


                            if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                            {

                                RadDesktopAlert alert = new RadDesktopAlert();
                                alert.CaptionText = "Booking saved and Confirmation Text Sent successfully!";


                                string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                     "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                    + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                                alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                                alert.ContentImage = Resources.Resource1.email;
                                alert.Show();
                            }

                        }
                        else
                        {

                            if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                            {

                                RadDesktopAlert alert = new RadDesktopAlert();
                                alert.CaptionText = "Booking saved successfully!";


                                string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                     "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                    + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                                alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                                //    alert.ContentImage = Resources.Resource1save_Tick; // comment
                                alert.Show();
                            }

                        }

                    }
                    else
                    {
                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {

                            RadDesktopAlert alert = new RadDesktopAlert();
                            alert.CaptionText = "Booking saved successfully!";


                            string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                 "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                            alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                            alert.ContentImage = Resources.Resource1.save_Tick;
                            alert.Show();
                        }


                    }
                }
                else
                {
                    if (IsAddMode)
                    {
                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {
                            RadDesktopAlert alert = new RadDesktopAlert();
                            alert.CaptionText = "Booking saved successfully!";




                            string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                 "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                            alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                            alert.ContentImage = Resources.Resource1.save_Tick;
                            alert.Show();
                        }





                    }

                }





                //if (frm != null && frm.SuccessDespatched && frm.IsPDADriver.ToBool() == false)
                //{
                //    General.RefreshDriversGrids();
                //}


                if (IsAddMode)
                {




                    //if ((txtEmail.Text.Trim().Length > 0 || objMaster.Current.CompanyId != null) && AppVars.listUserRights.Count(c => c.functionId == "SEND DIRECT CONFIRMATION EMAIL") > 0)
                    //{

                    //    SendEmail(false);


                    //}

                    // For PinkApple cars
                    //else if (AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool())
                    //{

                    //    if (chkQuotation.Checked)
                    //    {
                    //        SendBookingQuotationEmail();

                    //        General.AddUserLog("Quotation Saved", 4);
                    //    }
                    //    else
                    //    {

                    //        SendBookingConfirmationEmail();
                    //    }
                    //}

                    if (objMaster.Current.JobCode.ToStr().Trim().Length > 0)
                    {


                        if (File.Exists(Application.StartupPath + "\\Configuration.xml"))
                        {

                            XmlDocument d = new XmlDocument();
                            d.Load(Application.StartupPath + "\\Configuration.xml");

                            if (d.GetElementsByTagName("ENABLEPRINTER").Count > 0)
                            {

                                PrintBookingNo(objMaster.Current.JobCode);
                            }

                        }

                    }
                }
                else
                {

                    if (objMaster.Current.PaymentTypeId.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID && oldPaymentTypeId != objMaster.Current.PaymentTypeId.ToInt())
                    {

                        SendLaterPaymentEmail();
                    }


                }


                UpdateRecentAddresses();

                UpdateCustomAddresses();


                if (IsAddMode == false)
                {
                    UpdateJobToDriverPDA();
                }


                IsSave = true;
                return IsSave;
            }
            catch (Exception ex)
            {
                IsSave = false;
                if (objMaster.Errors.Count > 0)
                    MessageBox.Show(objMaster.ShowErrors());
                else
                {
                    MessageBox.Show(ex.Message);
                }
                return IsSave;
            }
        }

        private void UpdateCustomAddresses()
        {
            try
            {
                string pickup = txtFromAddress.Text.Trim();
                int fromZoneId = ddlPickupPlot.SelectedValue.ToInt();

                string destination = txtToAddress.Text.Trim();
                int toZoneId = ddlDropOffPlot.SelectedValue.ToInt();


                using (TaxiDataContext db = new TaxiDataContext())
                {
                    if (General.GetPostCodeMatch(pickup).Length == 0 && fromZoneId != 0)
                    {
                        if (db.Gen_Locations.Count(c => c.LocationName == pickup) == 0)
                        {
                            Gen_Location loc = new Gen_Location();
                            loc.LocationTypeId = Enums.LOCATION_TYPES.ADDRESS;
                            loc.LocationName = pickup;
                            loc.Address = pickup;
                            loc.PostCode = "";
                            loc.ZoneId = fromZoneId;
                            loc.CustomShortKey = true;
                            loc.ShortCutKey = pickup.Length >= 4 ? pickup.Substring(0, 3) : pickup;
                            db.Gen_Locations.InsertOnSubmit(loc);
                            db.SubmitChanges();
                        }
                        else
                        {


                        }
                    }


                    if (General.GetPostCodeMatch(destination).Length == 0 && toZoneId != 0)
                    {
                        if (db.Gen_Locations.Count(c => c.LocationName == destination) == 0)
                        {
                            Gen_Location loc = new Gen_Location();
                            loc.LocationTypeId = Enums.LOCATION_TYPES.ADDRESS;
                            loc.LocationName = destination;
                            loc.Address = destination;
                            loc.PostCode = "";
                            loc.ZoneId = toZoneId;
                            loc.CustomShortKey = true;
                            loc.ShortCutKey = destination.Length >= 4 ? destination.Substring(0, 3) : destination;
                            db.Gen_Locations.InsertOnSubmit(loc);
                            db.SubmitChanges();
                        }
                        else
                        {


                        }
                    }
                }
            }
            catch
            {


            }




        }


        private void UpdateJobToDriverPDA()
        {
            try
            {



                if (objMaster.Current.DriverId != null &&
                   (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.FOJ
                   )
                      && (objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings.Count > 0 && objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings[0].CurrentPdaVersion > 15.40m)
                      && AppVars.objPolicyConfiguration.IsListenAll.ToBool() && !string.IsNullOrEmpty(AppVars.objPolicyConfiguration.ListenerIP.ToStr().Trim()))
                {

                    AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(c => c.Id != 0);


                    string paymentType = objMaster.Current.Gen_PaymentType.PaymentCategoryId == null ? objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr()
                            : objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();


                    string journey = "O/W";


                    if (objMaster.Current.JourneyTypeId.ToInt() == 3)
                    {
                        journey = "W/R";
                    }


                    string IsExtra = (objMaster.Current.CompanyId != null || objMaster.Current.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId == Enums.LOCATION_TYPES.AIRPORT) ? "1" : "0";
                    int i = 1;
                    string viaP = "";



                    if (objMaster.Current.Booking_ViaLocations.Count > 0)
                    {

                        viaP = string.Join(" * ", objMaster.Current.Booking_ViaLocations.Select(c => "(" + i++.ToStr() + ")" + c.ViaLocValue.ToStr()).ToArray<string>());
                    }


                    string mobileNo = objMaster.Current.CustomerMobileNo.ToStr();
                    string telNo = objMaster.Current.CustomerPhoneNo.ToStr();



                    if (string.IsNullOrEmpty(mobileNo) && !string.IsNullOrEmpty(telNo))
                    {
                        mobileNo = telNo;
                    }
                    else if (!string.IsNullOrEmpty(mobileNo) && !string.IsNullOrEmpty(telNo))
                    {
                        mobileNo += "/" + telNo;
                    }


                    string pickUpPlot = "";
                    string dropOffPlot = "";
                    string companyName = string.Empty;

                    if (objMaster.Current.CompanyId != null && objMaster.Current.Gen_Company.DefaultIfEmpty().AccountTypeId.ToInt() != Enums.ACCOUNT_TYPE.CASH)
                        companyName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName;
                    else
                        companyName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName.ToStr();


                    //error in 13.4 => if its a plot job, then pickup point is hiding in pda.

                    pickUpPlot = objMaster.Current.ZoneId != null ? "<<<" + objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr() : "";
                    dropOffPlot = objMaster.Current.DropOffZoneId != null ? "<<<" + objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr() : "";


                    string fromAddress = objMaster.Current.FromAddress.ToStr().Trim();
                    string toAddress = objMaster.Current.ToAddress.ToStr().Trim();

                    if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        fromAddress = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                    }

                    if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        toAddress = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();
                    }

                    //half card and cash
                    string specialRequirements = objMaster.Current.SpecialRequirements.ToStr();
                    if (objMaster.Current.SecondaryPaymentTypeId != null && objMaster.Current.CashFares.ToDecimal() > 0)
                    {

                        specialRequirements += " , Additional Cash Payment : " + objMaster.Current.CashFares.ToDecimal();
                    }

                    decimal pdafares = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();





                    string showFaresValue = objMaster.Current.Gen_PaymentType.ShowFaresOnPDA.ToStr().Trim();

                    string showFares = ",\"ShowFares\":\"" + showFaresValue + "\"";
                    string showSummary = ",\"ShowSummary\":\"" + showFaresValue + "\"";


                    //string showFares = ",\"ShowFares\":\"" + objMaster.Current.Gen_PaymentType.ShowFaresOnPDA.ToStr().Trim() + "\"";
                    //string showSummary = ",\"ShowSummary\":\"" + "1" + "\"";


                    string agentDetails = string.Empty;
                    string parkingandWaiting = string.Empty;
                    if (objMaster.Current.CompanyId != null)
                    {
                        agentDetails = ",\"AgentFees\":\"" + String.Format("{0:0.00}", objMaster.Current.AgentCommission) + "\"";
                        parkingandWaiting = ",\"Parking\":\"" + string.Format("{0:0.00}", objMaster.Current.ParkingCharges) + "\",\"Waiting\":\"" + String.Format("{0:0.00}", objMaster.Current.WaitingCharges) + "\"";

                    }
                    else
                    {

                        parkingandWaiting = ",\"Parking\":\"" + string.Format("{0:0.00}", objMaster.Current.CongtionCharges) + "\",\"Waiting\":\"" + String.Format("{0:0.00}", objMaster.Current.MeetAndGreetCharges) + "\"";
                        //

                    }


                    string fromdoorno = objMaster.Current.FromDoorNo.ToStr().Trim();
                    if (fromdoorno.Length > 0 && fromdoorno.WordCount() > 2 && fromdoorno.Contains(" "))
                    {

                        try
                        {

                            fromdoorno = fromdoorno.Replace(" ", "-");
                        }
                        catch
                        {


                        }
                    }


                    if (fromAddress.ToStr().Trim().Contains("-") && objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings[0].CurrentPdaVersion.ToDecimal() == 23.50m)
                    {
                        fromAddress = fromAddress.Replace("-", "  ");

                    }


                    string msg = "Update Job>>" + "{ \"JobId\" :\"" + objMaster.Current.Id.ToStr() +
                                           "\", \"Pickup\":\"" + (!string.IsNullOrEmpty(objMaster.Current.FromDoorNo) ? fromdoorno + "-" + fromAddress + pickUpPlot : fromAddress + pickUpPlot) +
                                           "\", \"Destination\":\"" + (!string.IsNullOrEmpty(objMaster.Current.ToDoorNo) ? objMaster.Current.ToDoorNo + "-" + toAddress + dropOffPlot : toAddress + dropOffPlot) + "\"," +
                                           "\"PickupDateTime\":\"" + string.Format("{0:dd/MM/yyyy   HH:mm}", objMaster.Current.PickupDateTime) + "\"" +
                                           ",\"Cust\":\"" + objMaster.Current.CustomerName + "\",\"Mob\":\"" + mobileNo + " " + "\",\"Fare\":\"" + string.Format("{0:0.00}", pdafares) + "\",\"Vehicle\":\"" + objMaster.Current.Fleet_VehicleType.VehicleType + "\",\"Account\":\"" + companyName + " " + "\"" +
                                             ",\"Lug\":\"" + objMaster.Current.NoofLuggages.ToInt() + "\",\"Passengers\":\"" + objMaster.Current.NoofPassengers.ToInt() + "\",\"Journey\":\"" + journey + "\",\"Payment\":\"" + paymentType + "\",\"Special\":\"" + specialRequirements + " " + "\",\"Extra\":\"" + IsExtra + "\",\"Via\":\"" + viaP + " " + "\"" +
                                       ",\"CompanyId\":\"" + objMaster.Current.CompanyId.ToInt() + "\",\"SubCompanyId\":\"" + objMaster.Current.SubcompanyId.ToInt() + "\",\"QuotedPrice\":\"" + (objMaster.Current.IsQuotedPrice.ToBool() ? "1" : "0") + "\"" +

                                             parkingandWaiting + ",\"DriverFares\":\"" + String.Format("{0:0.00}", objMaster.Current.FareRate) + "\"" +
                                          agentDetails +
                                             ",\"Did\":\"" + objMaster.Current.DriverId + "\",\"BabySeats\":\"" + objMaster.Current.BabySeats.ToStr() + "\"" + showFares + showSummary + " }";





                    new Thread(delegate ()
                    {

                        General.SendMessageToPDA("request pda=" + objMaster.Current.DriverId + "=" + objMaster.Current.Id + "=" + msg + "=8");
                    }).Start();



                    if (AppVars.objPolicyConfiguration.DespatchOfflineJobs.ToBool())
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.stp_SaveOfflineMessage(objMaster.Current.Id, objMaster.Current.DriverId, "", AppVars.LoginObj.LoginName.ToStr(), "Update Job>>" + objMaster.Current.DriverId + ">>" + objMaster.Current.Id + ">>" + msg + "=8");
                        }

                    }
                }
            }
            catch (Exception ex)
            {


            }


        }


        private void UpdateSetFareLog(string msg)
        {


            try
            {
                if (objMaster.Current.Id > 0 && msg.Length > 0)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_BookingLog(objMaster.Current.Id, AppVars.LoginObj.LoginName.ToStr().Trim(), msg);

                    }


                }
            }
            catch
            {

            }

        }

        private void PrintBookingNo(string JobNo)
        {
            //try
            //{
            //    rptfrmJobNo frm = null;

            //    if (!string.IsNullOrEmpty(JobNo))
            //    {

            //        ReportPrintDocument rpt = null;

            //        frm = new rptfrmJobNo(JobNo);

            //        frm.LaodReport();
            //        rpt = new ReportPrintDocument(frm.reportViewer1.LocalReport);
            //        rpt.Print();
            //        rpt.Dispose();
            //    }


            //}
            //catch (Exception ex)
            //{
            //    ENUtils.ShowMessage(ex.Message);
            //}
        }

        private void UpdateRecentAddresses()
        {

            if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
            {

                try
                {


                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        if ((ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || lblFromDoorFlightNo.Text.ToLower().StartsWith("flight")) && ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        {
                            db.stp_SaveRecentAddresses("<add>" + objMaster.Current.ToAddress + "</add>", objMaster.Current.ToAddress, objMaster.Current.CompanyId);

                        }
                        else if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || lblToDoorFlightNo.Text.ToLower().StartsWith("flight")))
                        {
                            db.stp_SaveRecentAddresses("<add>" + objMaster.Current.FromAddress + "</add>", "", objMaster.Current.CompanyId);

                        }
                        else if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        {

                            db.stp_SaveRecentAddresses("<add>" + objMaster.Current.FromAddress + "</add><add>" + objMaster.Current.ToAddress + "</add>", objMaster.Current.ToAddress, objMaster.Current.CompanyId);
                        }
                    }
                }
                catch
                {


                }
            }
        }


        private void SendDirectPaymentEmail()
        {

            //if (objMaster.PrimaryKeyValue != null && (AppVars.listUserRights.Count(c => c.functionId == "EMAIL - PC") > 0))
            //{

            //    new Thread(delegate()
            //    {

            //        JATEmail.SendDirectPaymentConfirmationEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
            //    }).Start();

            //}
        }



        private void SendPendingPaymentEmail()
        {

            //if (objMaster.PrimaryKeyValue != null && (AppVars.listUserRights.Count(c => c.functionId == "EMAIL - PP") > 0))
            //{

            //    new Thread(delegate()
            //    {

            //        JATEmail.SendPaymentPendingEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
            //    }).Start();

            //}
        }

        private void SendLaterPaymentEmail()
        {

            //if (objMaster.PrimaryKeyValue != null && (AppVars.listUserRights.Count(c => c.functionId == "EMAIL - PC") > 0))
            //{

            //    new Thread(delegate()
            //    {

            //        JATEmail.SendPaymentLaterConfirmationEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
            //    }).Start();

            //}
        }

        // For pinkapple cars
        private void SendBookingConfirmationEmail()
        {

            //if (objMaster.PrimaryKeyValue != null)
            //{

            //    new Thread(delegate()
            //    {

            //        JATEmail.SendDirectBookingConfirmationEmail(objMaster.Current);
            //    }).Start();

            //}
        }



        private void SendBookingQuotationEmail()
        {

            //if (objMaster.PrimaryKeyValue != null)
            //{

            //    new Thread(delegate()
            //    {

            //        JATEmail.SendBookingQuotationEmail(objMaster.Current);
            //    }).Start();

            //}
        }


        // For jewel airports
        //private void SendBookingConfirmationEmail()
        //{

        //    if (objMaster.PrimaryKeyValue != null && (AppVars.listUserRights.Count(c => c.functionId == "EMAIL - BC") > 0))
        //    {

        //        new Thread(delegate()
        //        {

        //            JATEmail.SendBookingConfirmationEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
        //        }).Start();

        //    }
        //}


        DateTime? leadZoneDueTime = null;

        private int? GetZoneId(string address)
        {
            if (address.ToStr().Trim().Length == 0)
                return null;

            if (address.ToStr().Trim().Length == 0)
                return null;





            if (address != "AS DIRECTED" && string.IsNullOrEmpty(General.GetPostCodeMatch(address)))
            {

                int? zId = null;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    zId = db.Gen_Locations.FirstOrDefault(c => c.LocationName == address || (c.FullLocationName != null && c.FullLocationName == address)).DefaultIfEmpty().ZoneId;

                }

                if (zId != null)
                    return zId;
                else
                    return null;



            }


            if (address.Contains(", UK"))
                address = address.Remove(address.LastIndexOf(", UK"));



            int? zoneId = null;

            try
            {
                if (address == "AS DIRECTED")
                {
                    zoneId = General.GetObject<Gen_Zone>(c => c.ZoneName == address).DefaultIfEmpty().Id;

                    if (zoneId == 0)
                        zoneId = null;
                }
                else
                {
                    // if (AppVars.listOfAddress.Count(c=>c.AddressLine1.Contains(address.ToStr().ToUpper()))

                    if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Trim().Length > 0)
                        zoneId = AppVars.listOfAddress.FirstOrDefault(c => c.AddressLine1.Contains(address.ToStr().ToUpper())).DefaultIfEmpty().ZoneId;

                    if (zoneId == null)
                    {

                        string postCode = General.GetPostCode(address);


                        if (address.Contains(",") && AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Trim().Length > 0)
                        {

                            string addr = address.Substring(0, address.LastIndexOf(',')).Trim();

                            if (addr.ToStr().Trim() != string.Empty)
                            {
                                zoneId = General.GetObject<Gen_Location>(c => c.PostCode == postCode && c.LocationName == addr).DefaultIfEmpty().ZoneId;
                            }
                        }

                        if (zoneId == null)
                        {

                            stp_getCoordinatesByAddressResult objCoord = null;


                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    objCoord = db.stp_getCoordinatesByAddress(address, postCode).FirstOrDefault();


                                }
                            }
                            catch
                            {

                            }


                            // Gen_Coordinate objCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == postCode);
                            if (objCoord != null)
                            {
                                double latitude = 0, longitude = 0;

                                latitude = Convert.ToDouble(objCoord.Latitude);
                                longitude = Convert.ToDouble(objCoord.Longtiude);


                                //  int[] plot = null;

                                //if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt()==2)
                                //{

                                //    plot = (from a in General.GetQueryable<Gen_Zone>(c => (c.ShapeType != null && c.ShapeType == "circle") || (c.MinLatitude != null && (latitude >= c.MinLatitude && latitude <= c.MaxLatitude)
                                //                                     && (longitude <= c.MaxLongitude && longitude >= c.MinLongitude)))
                                //            orderby a.PlotKind descending

                                //            select a.Id).ToArray<int>();

                                //}
                                //else
                                //{




                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    db.DeferredLoadingEnabled = false;

                                    var plot = (from a in db.Gen_Zones.Where(c => (c.ShapeType != null && c.ShapeType == "circle") || (c.MinLatitude != null && (latitude >= c.MinLatitude && latitude <= c.MaxLatitude)
                                                                       && (longitude <= c.MaxLongitude && longitude >= c.MinLongitude)))
                                                orderby a.PlotKind

                                                select new
                                                {
                                                    a.Id,
                                                    a.JobDueTime

                                                }
                                              ).ToList();
                                    // select a.Id).ToArray<int>();
                                    //    }

                                    if (plot.Count() > 0)
                                    {
                                        using (TaxiDataContext DB = new TaxiDataContext())
                                        {
                                            foreach (var item in plot)
                                            {

                                                if (FindPoint(latitude, longitude, DB.Gen_Zone_PolyVertices.Where(c => c.ZoneId == item.Id).ToList()))
                                                {
                                                    zoneId = item.Id;
                                                    leadZoneDueTime = item.JobDueTime;
                                                    break;
                                                }
                                            }
                                        }


                                    }
                                    else
                                    {

                                        if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Length > 0)
                                        {
                                            Gen_Coordinate objCoord2 = General.GetObject<Gen_Coordinate>(c => c.PostCode == postCode);

                                            double distPick = Convert.ToDouble(AppVars.objPolicyConfiguration.CreditCardExtraCharges.ToDecimal());

                                            if (distPick > 0)
                                            {

                                                string[] arr = AppVars.objPolicyConfiguration.PriorityPostCodes.Split(new char[] { ',' });

                                                if (objCoord2.PostCode.ToStr().Contains(" ") && arr.Contains(objCoord2.PostCode.Split(new char[] { ' ' })[0]))
                                                {
                                                    var zone = (from a in General.GetQueryable<Gen_Zone_PolyVertice>(null).AsEnumerable()
                                                                select new
                                                                {

                                                                    a.Gen_Zone.Id,
                                                                    a.Gen_Zone.ZoneName,
                                                                    DistanceMin = new DotNetCoords.LatLng(Convert.ToDouble(a.Latitude), Convert.ToDouble(a.Longitude)).DistanceMiles(new DotNetCoords.LatLng(Convert.ToDouble(objCoord2.Latitude), Convert.ToDouble(objCoord2.Longitude))),


                                                                }).OrderBy(c => c.DistanceMin).Where(c => c.DistanceMin <= distPick).FirstOrDefault();



                                                    if (zone != null)
                                                        zoneId = zone.Id;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                }


            }
            catch (Exception ex)
            {


            }

            return zoneId;

        }










        private bool IsDisplayingRecord = false;

        public void OnDisplayRecord(long Id)
        {

            objMaster.GetByPrimaryKey(Id);
            DisplayRecord();

        }


        private void DisplayRecord()
        {
            if (objMaster.Current == null) return;


            try
            {


                IsDisplayingRecord = true;

                int notesCnt = objMaster.Current.Booking_Notes.Count;

                if (notesCnt > 0)
                {
                    btn_notes.Text = "Notes(" + notesCnt + ") [F5]";

                    //btn_notes.ButtonElement.ButtonFillElement.BackColor = Color.Red;
                    //btn_notes.ButtonElement.ButtonFillElement.NumberOfColors = 1;
                    //btn_notes.ButtonElement.ForeColor = Color.White;
                }
                else
                {
                    btn_notes.Text = "Notes(0) [F5]";
                }

                //    btnPasteBooking.Visible = false;
                //btnComplaint.Visible = true;
                //btnLostProperty.Visible = true;

                btnCancelBooking.Enabled = true;
                btnJobInformation.Enabled = true;
                btnJobInformation.Click += new EventHandler(btnPrintJob_Click);
                //     btnSearch.Enabled = false;
                btnMultiBooking.Enabled = false;
                btnSms.Visible = true;



                chkReverse.CheckStateChanged -= new EventHandler(chkReverse_ToggleStateChanging);//comment

                chkReverse.Checked = objMaster.Current.IsReverse.ToBool();
                chkReverse.CheckStateChanged += new EventHandler(chkReverse_ToggleStateChanging);//comment




                txtVehicleNo.Text = objMaster.Current.Fleet_Master.DefaultIfEmpty().Plateno.ToStr();

                ddlSubCompany.SelectedValue = objMaster.Current.SubcompanyId.ToInt();



                try
                {
                    ddlBookingType.SelectedValue = objMaster.Current.BookingTypeId;
                }
                catch
                {


                }

                if (objMaster.Current.BookingTypeId != null && ddlBookingType.SelectedValue.ToInt() != objMaster.Current.BookingTypeId)
                {

                    var list = (DataTable)ddlBookingType.DataSource;

                    // list.Add(new BookingType { Id = objMaster.Current.BookingTypeId.ToInt(), BookingTypeName = objMaster.Current.BookingType.BookingTypeName });

                    DataRow row = list.NewRow();
                    row["Id"] = objMaster.Current.BookingTypeId.ToInt();
                    row["BookingTypeName"] = objMaster.Current.BookingType.BookingTypeName;


                    list.Rows.Add(row);

                    ddlBookingType.DataSource = null;

                    FillCombo(list, ddlBookingType, "BookingTypeName", "Id");

                    //   ComboFunctions.FillCombo<BookingType>(list, ddlBookingType, "BookingTypeName", "Id");


                    ddlBookingType.SelectedValue = objMaster.Current.BookingTypeId.ToInt();
                    ddlBookingType.Enabled = false;

                }



                // chkQuotation.Location = new Point(chkQuotation.Location.X, chkQuotation.Location.Y + 20);
                //chkQuotation.Checked = objMaster.Current.IsQuotation.ToBool();
                chkQuotation.Checked = objMaster.Current.IsQuotation.ToBool();
                WasQuotiation = chkQuotation.Checked;

                txtBookingNo.Text = objMaster.Current.BookingNo.ToStr();

                

                this.Text = "Ref # " + txtBookingNo.Text;

                if (objMaster.Current.AddLog.ToStr().ToLower() == "customer")
                {
                    this.Text += " , Online Ref # " + objMaster.Current.Id;
                }

                ddlFromLocType.SelectedValue = objMaster.Current.FromLocTypeId;
                ddlToLocType.SelectedValue = objMaster.Current.ToLocTypeId;

                // DetachLocationsSelectionEvent(ddlFromLocation);
                //    ddlFromLocation.SelectedValue = objMaster.Current.FromLocId;
                //  AttachLocationSelectionEvent(ddlFromLocation);

                // DetachLocationsSelectionEvent(ddlToLocation);
                //    ddlToLocation.SelectedValue = objMaster.Current.ToLocId;
                // AttachLocationSelectionEvent(ddlToLocation);

                ddlVehicleType.SelectedValue = objMaster.Current.VehicleTypeId;


                ddlCustomerName.Text = objMaster.Current.CustomerName;
                txtCustomerMobileNo.Text = objMaster.Current.CustomerMobileNo;
                txtCustomerPhoneNo.Text = objMaster.Current.CustomerPhoneNo;
                txtEmail.Text = objMaster.Current.CustomerEmail.ToStr().Trim();
                numBookingFee.Value = objMaster.Current.ServiceCharges.ToDecimal();

                txtSpecialRequirements.Text = objMaster.Current.SpecialRequirements;


                int journeyTypeId = objMaster.Current.JourneyTypeId.ToInt();

                //opt_JOneWay.ToggleStateChanging -= opt_JOneWay_ToggleStateChanging;
                opt_one.CheckedChanged -= opt_one_CheckedChanged;

                if (journeyTypeId == Enums.JOURNEY_TYPES.ONEWAY)
                    opt_one.Checked = true;
                else if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                {
                    opt_return.Checked = true;
                    //  opt_JReturnWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;

                    label1.Text = " Booking(Return)";



                }
                else if (journeyTypeId == Enums.JOURNEY_TYPES.WAITANDRETURN)
                {
                    opt_waitreturn.Checked = true;
                    //  opt_WaitandReturn.ToggleState = ToggleState.On;
                }

                if (ddlReturnFromAirport != null)
                    ddlReturnFromAirport.SelectedValue = objMaster.Current.ReturnFromLocId;



                if (objMaster.Current.MasterJobId != null)
                {
                    pnlReturnJobNo.Visible = true;
                    pnlReturnJobNo.Text = "Return From Job # " + objMaster.Current.Booking1.DefaultIfEmpty().BookingNo.ToStr();



                    if (objMaster.Current.BookingTypeId.ToInt() == Enums.BOOKING_TYPES.WEB && objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        lblToDoorFlightNo.Text = "Flight No";

                    }


                }

                opt_one.CheckedChanged += new EventHandler(opt_one_CheckedChanged);
                //  opt_JOneWay.ToggleStateChanging += new StateChangingEventHandler(opt_JOneWay_ToggleStateChanging);

                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                {
                    btnCancelBooking.Text = "Cancel Notes";
                    //   IsCancel = true;

                }

                chkIsCompanyRates.Checked = objMaster.Current.IsCompanyWise.ToBool();

                if (objMaster.Current.CompanyId != null && objMaster.Current.Gen_Company.IsClosed.ToBool())
                {

                    //List<ClsCompanyComboDataSource> list =(List<ClsCompanyComboDataSource>) ddlCompany.DataSource;
                    //list.Add(new ClsCompanyComboDataSource { Id = objMaster.Current.CompanyId.ToInt(), CompanyName = objMaster.Current.Gen_Company.CompanyName });
                    ddlCompany.SelectedValueChanged -= new EventHandler(ddlCompany_SelectedValueChanged);
                    ComboFunctions.FillCompanyComboX(ddlCompany, objMaster.Current.CompanyId.ToInt());


                    ddlCompany.SelectedIndex = -1;

                    //   ComboFunctions.FillCompanyCombo(ddlCompany, data);
                    ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                }


                ddlCompany.SelectedValue = objMaster.Current.CompanyId;

                ddlPaymentType.SelectedValue = objMaster.Current.PaymentTypeId;

                if ((ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD || ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                    && !string.IsNullOrEmpty(objMaster.Current.BookingPayment.DefaultIfEmpty().AuthCode))
                {
                    btnPayment.Visible = false;
                    //     lblPaymentHeading.Text += "(Payment AuthCode is : " + objMaster.Current.BookingPayment.DefaultIfEmpty().AuthCode + ")";
                    ddlPaymentType.Enabled = false;
                }



                //txtCustomerCreditCardNo.Text = objMaster.Current.CustomerCreditCardDetails.ToStr().Trim();
                //txtCompanyCreditCardNo.Text = objMaster.Current.CompanyCreditCardDetails.ToStr().Trim();


                // Added on 18/08/2015 Danish (For Half Card and Half Cash)
                if (chkSecondaryPaymentType != null)
                {
                    if (objMaster.Current.SecondaryPaymentTypeId != null)
                    {
                        chkSecondaryPaymentType.Checked = true;
                        numCashPaymentFares.Value = objMaster.Current.CashFares.ToDecimal();
                    }
                }
                //




                if (pnlOrderNo != null)
                {

                    txtOrderNo.Text = objMaster.Current.OrderNo.ToStr();
                    txtPupilNo.Text = objMaster.Current.PupilNo.ToStr();

                }

                if (txtAccountBookedBy != null)
                {
                    txtAccountBookedBy.Text = objMaster.Current.BookedBy.ToStr().Trim();
                }


                if (chkTakenByAgent != null)
                {

                    chkTakenByAgent.Checked = objMaster.Current.JobTakenByCompany.ToBool();
                    numAgentCommissionPercent.Value = objMaster.Current.AgentCommissionPercent.ToInt();
                    ddlAgentCommissionType.SelectedIndex = objMaster.Current.FromFlightNo.ToStr().Trim() == "Percent" ? 0 : 1;
                    numAgentCommission.Value = objMaster.Current.AgentCommission.ToDecimal();
                }

                if (numJourneyTime != null)
                {
                    numJourneyTime.Value = objMaster.Current.JourneyTimeInMins.ToDecimal();

                }

                if (ddlDepartment != null && objMaster.Current.DepartmentId != null)
                    ddlDepartment.SelectedValue = objMaster.Current.DepartmentId;


                if (ddlEscort != null)
                {
                    if (objMaster.Current.EscortId != null)
                        ddlEscort.SelectedValue = objMaster.Current.EscortId;

                    numEscortPrice.Value = objMaster.Current.EscortPrice.ToDecimal();

                }

                dtpPickupDate.Value = objMaster.Current.PickupDateTime.ToDate();
                dtpPickupTime.Value = objMaster.Current.PickupDateTime.ToDateTime();
                SetPickupTimeHourAndMin(dtpPickupTime.Value.ToDateTime());


                numLead.Value = objMaster.Current.DeadMileage.ToDecimal();

                if (numLead.Value > 0)
                    chkLead.Checked = true;


                if (dtpReturnPickupDate != null)
                {
                    dtpReturnPickupDate.Value = objMaster.Current.ReturnPickupDateTime.ToDate();
                    dtpReturnPickupTime.Value = objMaster.Current.ReturnPickupDateTime.ToDateTime();


                    if (objMaster.Current.ReturnDriverId != null)
                        ddlReturnDriver.SelectedValue = objMaster.Current.ReturnDriverId;
                }


                num_TotalPassengers.Value = objMaster.Current.NoofPassengers.ToDecimal();
                numTotalLuggages.Value = objMaster.Current.NoofLuggages.ToDecimal();

                numFareRate.Value = objMaster.Current.FareRate.ToDecimal();

                if (numReturnFare != null)
                    numReturnFare.Value = objMaster.Current.ReturnFareRate.ToDecimal();

                if (numCompanyFares != null)
                {
                    numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();

                    if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                    {
                        numReturnCompanyFares.Value = objMaster.Current.WaitingMins.ToDecimal();

                    }
                }

                numParkingChrgs.Value = objMaster.Current.ParkingCharges.ToDecimal();
                numWaitingChrgs.Value = objMaster.Current.WaitingCharges.ToDecimal();
                numExtraChrgs.Value = objMaster.Current.ExtraDropCharges.ToDecimal();
                numMeetCharges.Value = objMaster.Current.MeetAndGreetCharges.ToDecimal();
                numCongChrgs.Value = objMaster.Current.CongtionCharges.ToDecimal();

                numTotalChrgs.Value = objMaster.Current.TotalCharges.ToDecimal();

                //  numDrvWaitingMins.Enabled = true;

                numDrvWaitingMins.Value = objMaster.Current.DriverWaitingMins.ToDecimal();


                //if (pnlComcab != null)
                //{
                //    try
                //    {
                //        numComcab_Cash.Value = objMaster.Current.CashRate.ToDecimal();
                //        numComcab_Account.Maximum = 5000;
                //        numComcab_Account.Value = objMaster.Current.AccountRate.ToDecimal();
                //        //    numComcab_ExtraMile.Value = objMaster.Current.ExtraMile.ToDecimal();
                //        numComcab_WaitingMin.Value = objMaster.Current.WaitingMins.ToDecimal();
                //    }
                //    catch
                //    {
                //        //

                //    }
                //}


                txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtFromAddress.Text = objMaster.Current.FromAddress.ToStr();
                txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                txtFromFlightDoorNo.Text = objMaster.Current.FromDoorNo.ToStr();
                txtFromStreetComing.Text = objMaster.Current.FromStreet.ToStr();

                txtFromPostCode.Text = objMaster.Current.FromPostCode.ToStr();

                txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtToAddress.Text = objMaster.Current.ToAddress.ToStr();
                txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                txtToFlightDoorNo.Text = objMaster.Current.ToDoorNo.ToStr();
                txtToStreetComing.Text = objMaster.Current.ToStreet.ToStr();

                txtToPostCode.Text = objMaster.Current.ToPostCode.ToStr();



                chkIsCommissionWise.Checked = objMaster.Current.IsCommissionWise.ToBool();
                ddlCommissionType.SelectedValue = objMaster.Current.DriverCommissionType.ToStr().Trim();
                numDriverCommission.Value = objMaster.Current.DriverCommission.ToDecimal();

                chkAutoDespatch.Checked = objMaster.Current.AutoDespatch.ToBool();
                chkBidding.Checked = objMaster.Current.IsBidding.ToBool();

                DateTime? pickUpDate = objMaster.Current.PickupDateTime;


                //if (objMaster.Current.AutoDespatchTime != null)
                //{
                //    DateTime? autoDespatchDate = objMaster.Current.AutoDespatchTime;
                //    int mins = pickUpDate.Value.TimeOfDay.Subtract(autoDespatchDate.Value.TimeOfDay).Minutes.ToInt();
                //    numBeforeMinutes.Value = mins < 0 ? 10 : mins;
                //}
                //else
                //    numBeforeMinutes.Value = 10;

                //    ShowAutoDespatchLabels(AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool());


                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    chkDisableDriverSMS.Enabled = false;
                    chkDisablePassengerSMS.Enabled = false;

                    chkQuotation.Enabled = false;


                    //if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" &&
                    //    (c.functionId == "LOCK COMPLETED BOOKING" || c.functionId == "LOCK CANCELLED BOOKING"
                    //    || c.functionId == "LOCK NOFARE BOOKING")) > 0)
                    //{


                    //    btnSaveNew.Enabled = false;
                    //    btnCancelBooking.Enabled = false;
                    //    btnMultiVehicle.Enabled = false;

                    //}


                    //if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                    //{
                    //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" && (c.functionId == "LOCK COMPLETED BOOKING")) > 0)
                    //    {

                    //        btnSaveNew.Enabled = false;
                    //        btnCancelBooking.Enabled = false;
                    //        btnMultiVehicle.Enabled = false;

                    //    }



                    //}
                    //else if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                    //{
                    //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" && (c.functionId == "LOCK CANCELLED BOOKING")) > 0)
                    //    {

                    //        btnSaveNew.Enabled = false;
                    //        btnCancelBooking.Enabled = false;
                    //        btnMultiVehicle.Enabled = false;

                    //    }

                    //}
                    //else if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                    //{
                    //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" && (c.functionId == "LOCK NOFARE BOOKING")) > 0)
                    //    {

                    //        btnSaveNew.Enabled = false;
                    //        btnCancelBooking.Enabled = false;
                    //        btnMultiVehicle.Enabled = false;

                    //    }

                    //}


                    //if (objMaster.Current.Fleet_DriverCommision_Charges.Count > 0)
                    //{
                    //    btnSaveNew.Enabled = false;
                    //    btnCancelBooking.Enabled = false;
                    //    btnMultiVehicle.Enabled = false;
                    //    chkIsCompanyRates.Enabled = false;
                    //    ddlCompany.Enabled = false;

                    //}

                }




                int fromLocTypeId = objMaster.Current.FromLocTypeId.ToInt();

                //  if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                txtFromAddress.Focus();
                //else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    txtFromPostCode.Focus();
                //else
                //    ddlFromLocation.Focus();


                chkDisableDriverSMS.Checked = objMaster.Current.DisableDriverSMS.ToBool();
                chkDisablePassengerSMS.Checked = objMaster.Current.DisablePassengerSMS.ToBool();

                if (optSMSGsm != null)
                {
                    if (objMaster.Current.SMSType.ToInt() == Enums.SMSACCOUNT_TYPE.CLICKATELL)
                    {
                        optSMSThirdParty.Checked = true;

                    }
                    else
                        optSMSGsm.Checked = true;


                }


                if (chkAutoDespatch.Enabled)
                {
                    ddlPickupPlot.SelectedValue = objMaster.Current.ZoneId.ToInt();
                    ddlDropOffPlot.SelectedValue = objMaster.Current.DropOffZoneId.ToInt();
                    // txtPickupPlot.Text = objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr();
                    // txtDropOffZone.Text = objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr();

                }

                if (objMaster.Current.PartyId != null && objMaster.Current.TransferJobId != null)
                {
                    lblBookedBy.Text = "Job Received from : " + objMaster.Current.Gen_Party.CompanyName.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.AddOn.ToDateTime());
                    ddlBookingType.Enabled = false;
                }
                else
                {
                    lblBookedBy.Text = "Job booked by : " + objMaster.Current.AddLog.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.AddOn.ToDateTime());


                }

                if (!string.IsNullOrEmpty(objMaster.Current.EditLog))
                {
                    lblBookedBy.Text += " , Edit by : " + objMaster.Current.EditLog.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.EditOn.ToDateTime());
                }


                if (!string.IsNullOrEmpty(objMaster.Current.Despatchby))
                {
                    lblBookedBy.Text += " , Despatched by : " + objMaster.Current.Despatchby.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.DespatchDateTime.ToDateTime());
                }






                if (ddlDirection != null)
                    ddlDirection.Text = objMaster.Current.BoundType.ToStr().Trim();

                if (objMaster.Current.FaresPostedFrom.ToStr().Trim().Length == 0 && objMaster.Current.CompanyId != null && objMaster.Current.AccountRate.ToDecimal() > 0)
                {
                    txtFaresPostedFrom.Text = "Mileage " + objMaster.Current.AccountRate.ToDecimal();
                }
                else
                {



                    txtFaresPostedFrom.Text = objMaster.Current.FaresPostedFrom.ToStr();

                    if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED && txtFaresPostedFrom.Text.ToLower().Contains("meter"))
                    {
                        chkQuotedPrice.Location = new Point(chkQuotedPrice.Location.X + 10, chkQuotedPrice.Location.Y + 50);
                        chkQuotedPrice.BringToFront();
                    }


                }
                if (!string.IsNullOrEmpty(txtFaresPostedFrom.Text))
                    txtFaresPostedFrom.Visible = true;



                if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                {
                    string babyseats = objMaster.Current.BabySeats.ToStr();
                    if (!string.IsNullOrEmpty(babyseats) && babyseats.Contains("<<<"))
                    {

                        string[] arr = babyseats.Split(new string[] { "<<<" }, StringSplitOptions.None);

                        if (arr.Count() == 2)
                        {
                            ddlBabyseat1.SelectedItem = arr[0].ToStr().Trim();
                            ddlbabyseat2.SelectedItem = arr[1].ToStr().Trim();

                        }
                    }
                }

                DisplayBooking_ViaLocations();




                if (txtReturnSpecialReq != null)
                {
                    if (objMaster.Current.BookingReturns.Count > 0)
                    {
                        txtReturnSpecialReq.Text = objMaster.Current.BookingReturns[0].DefaultIfEmpty().SpecialRequirements.ToStr();

                        if (ddlReturnVehicleType != null)
                        {
                            int? returnVehicleId = objMaster.Current.BookingReturns[0].DefaultIfEmpty().VehicleTypeId;

                            if (returnVehicleId == null)
                                returnVehicleId = objMaster.Current.VehicleTypeId;

                            ddlReturnVehicleType.SelectedValue = returnVehicleId;

                        }

                        if (ddlReturnPaymentType != null)
                        {
                            try
                            {
                                int? returnPaymentTypeId = objMaster.Current.BookingReturns[0].DefaultIfEmpty().PaymentTypeId;

                                if (returnPaymentTypeId == null)
                                    returnPaymentTypeId = objMaster.Current.PaymentTypeId;

                                ddlReturnPaymentType.SelectedValue = returnPaymentTypeId;

                            }
                            catch
                            {



                            }

                        }



                        //// txtReturnTo.Visible = true;
                        //

                        //if (dtpReturnPickupDate != null)
                        //{
                        //    dtpReturnPickupDate.Visible = true;
                        //}


                        //SetReturnFrom(ToggleState.Off);

                        //

                        txtReturnTo.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        txtReturnTo.Text = objMaster.Current.BookingReturns[0].ToAddress.ToStr().Trim();
                        txtReturnTo.TextChanged += new EventHandler(TextBoxElement_TextChanged);



                     


                        txtReturnFrom.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        txtReturnFrom.Text = objMaster.Current.BookingReturns[0].FromAddress.ToStr().Trim();
                        txtReturnFrom.TextChanged += new EventHandler(TextBoxElement_TextChanged);





                        numReturnBookingFee.Value = objMaster.Current.BookingReturns[0].ServiceCharges.ToDecimal();

                        if (numReturnBookingFee.Visible == false)
                        {
                            lblReturnCustFare.Visible = true;
                            numReturnBookingFee.Visible = true;


                        }
                    }
                }







                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                {

                    //  btnSendInvoice.Visible = true;
                    btnDespatchView.Visible = false;

                    ddlDriver.Enabled = false;
                    if (ddlReturnDriver != null)
                        ddlReturnDriver.Enabled = false;

                    //if (objMaster.Current.IsProcessed.ToBool())
                    //{




                    //    ddlVehicleType.Enabled = false;
                    //    if (ddlReturnVehicleType != null)
                    //        ddlReturnVehicleType.Enabled = false;

                    //    dtpPickupDate.Enabled = false;
                    //    dtpPickupTime.Enabled = false;


                    //    if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                    //    {
                    //        dtpReturnPickupDate.Enabled = false;
                    //        dtpReturnPickupTime.Enabled = false;
                    //    }

                    //    numFareRate.Enabled = false;

                    //    if (numCompanyFares != null)
                    //        numCompanyFares.Enabled = false;
                    //    numBookingFee.Enabled = false;
                    //    numParkingChrgs.Enabled = false;
                    //    numWaitingChrgs.Enabled = false;
                    //    numExtraChrgs.Enabled = false;
                    //    numMeetCharges.Enabled = false;
                    //    numCongChrgs.Enabled = false;

                    //    txtFromAddress.ReadOnly = false;
                    //    txtToAddress.ReadOnly = false;
                       

                    //    btnSaveNew.Enabled = false;
                    //    btnCancelBooking.Enabled = false;
                    //}
                  
                }



                if (this.openedFrom == 1)
                {
                    btnMultiBooking.Visible = false;
                    btnMultiVehicle.Visible = false;
                    ddlDriver.Enabled = false;
                    // opt_JOneWay.Enabled = false;
                    //  opt_JReturnWay.Enabled = false;
                    //  opt_WaitandReturn.Enabled = false;
                    opt_one.Enabled = false;
                    opt_return.Enabled = false;
                    opt_waitreturn.Enabled = false;
                    chkQuotation.Enabled = false;
                }


                if (objMaster.Current.DriverId != null &&
                    (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING_START))
                {
                    ddlDriver.Enabled = false;

                    if (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.PENDING && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.PENDING_START)
                    {
                        btnTrackDriver.Visible = true;

                        btnTrackDriver.Click += new EventHandler(btnTrackDriver_Click);

                    }
                }

                //    DisableAccountCheck();

                numTipAmount.Value = objMaster.Current.TipAmount.ToDecimal();


                // Enable for elite cars

                if (objMaster.Current.DriverId != null && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.WAITING && AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "Elt.Cbs")
                {
                    lblTip.Visible = true;
                    numTipAmount.Visible = true;
                }



                chkIsCommissionWise.Enabled = !AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool();
                txtPaymentReference.Text = objMaster.Current.PaymentComments.ToStr().Trim();
                chkQuotedPrice.Checked = objMaster.Current.IsQuotedPrice.ToBool();


                //if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0 && AppVars.listUserRights.Count(c => c.functionId == "SHOW RECORDING") > 0)
                //{
                //    btnPlayRecording.Visible = true;
                //    this.btnPlayRecording.Click += new System.EventHandler(this.btnPlayRecording_Click);
                //    this.CallRefNo = objMaster.Current.CallRefNo.ToStr().Trim();
                //}
                // if (AppVars.objPolicyConfiguration.CallRecordingToken.ToStr().Trim().Length > 0
                //    && ( txtCustomerMobileNo.Text.Length>8 || txtCustomerPhoneNo.Text.Length >8)
                //     && AppVars.listUserRights.Count(c =>c.formId==7 && c.functionId == "SHOW RECORDING") > 0)
                //{
                //    btnPlayRecording.Visible = true;
                //    this.btnPlayRecording.Click += new System.EventHandler(this.btnPlayRecordingAsterisk_Click);
                //}


                chkPermanentCustNotes.Checked = objMaster.Current.NoOfChilds.ToInt() == 1 ? true : false;


                IsDisplayingRecord = false;

                DisplayCourierSignature();


                //if (objMaster.Current.ToAddress.ToStr().Trim() == "AS DIRECTED")
                //{

                //    InitializeJourneyTimePanel();//comment
                //}


                if (objMaster.Current.DriverId != null)
                {
                    this.btnViewMapReport.Click += new System.EventHandler(this.btnJobRoutePath_Click);
                    btnViewMapReport.Visible = true;

                }

                btnAttributes.Text += objMaster.Current.AttributeValues.ToStr().Trim().Length > 0 ? Environment.NewLine + objMaster.Current.AttributeValues.ToStr().Trim().TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' }) : "";
                btnAttributes.Tag = objMaster.Current.AttributeValues.ToStr().Trim();

                btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                {
                    //   chkPermanentCustNotes.Checked = true;
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        var excludedDrvs = btnExcludeDrivers.Tag.ToStr().Trim().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);



                        var drivers = string.Join(",", (from a in db.Fleet_Drivers

                                                            // join b in excludedDrvs on a.Id equals b
                                                        where a.IsActive == true && excludedDrvs.Contains(a.Id.ToString())
                                                        select a.DriverNo).ToArray<string>());


                        btnExcludeDrivers.Text += Environment.NewLine + drivers;
                        //btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                    }
                }


                btnPasteBooking.Visible = false;
                c = new System.Windows.Forms.ContextMenuStrip();
                c.Items.Add("Job Receipt", null, JobReport_Click);
                //   c.Items.Add("Job Receipt", null, menu_JobReceipt_Click);
                btnJobInformation.ContextMenuStrip = c;





              

                    if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED
                  || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED
                  || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    chkDisableDriverSMS.Enabled = false;
                    chkDisablePassengerSMS.Enabled = false;

                    chkQuotation.Enabled = false;

                    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" && (c.functionId == "LOCK BOOKING AFTER TRANSACTION")) > 0)
                    {

                        long bookingId = objMaster.Current.Id;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (db.Fleet_DriverCommision_Charges.Count(c => c.BookingId == bookingId) > 0 || db.DriverRent_Charges.Count(c => c.BookingId == bookingId) > 0)
                            {

                                btnPickFares.Enabled = false;
                                // btnSaveNew.Enabled = false;
                                btnCancelBooking.Enabled = false;
                                btnMultiVehicle.Enabled = false;
                                btnMultiBooking.Enabled = false;
                                btnAccountCode.Enabled = false;
                                btnCustomerLister.Enabled = false;
                                btnExcludeDrivers.Enabled = false;
                                btnAttributes.Enabled = false;
                                btnPickAccountBooking.Enabled = false;
                                btnSearch.Enabled = false;

                                chkIsCompanyRates.Enabled = false;
                               // ddlCompany.Enabled = false;
                                ddlCompany.Validating += DdlCompany_Validating;
                                numBookingFee.Enabled = false;
                                DisableFieldsForDriverInvoice();
                                btnPickFares.Enabled = false;
                                IsAllowUpdating = false;
                                ddlPaymentType.Enabled = false;
                            }


                            if (objMaster.Current.CompanyId != null && db.Invoice_Charges.Count(c => c.BookingId == bookingId) > 0)
                            {
                                btnPickFares.Enabled = false;
                                btnSaveNew.Enabled = false;
                                btnCancelBooking.Enabled = false;
                                btnMultiVehicle.Enabled = false;
                                btnMultiBooking.Enabled = false;
                                btnAccountCode.Enabled = false;
                                btnCustomerLister.Enabled = false;
                                btnExcludeDrivers.Enabled = false;
                                btnAttributes.Enabled = false;
                                btnPickAccountBooking.Enabled = false;
                                btnSearch.Enabled = false;

                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;
                                IsAllowUpdating = false;
                                numBookingFee.Enabled = false;
                                ddlPaymentType.Enabled = false;
                                DisableFieldsForCompanyInvoice();
                            }
                        }

                    }
                    else
                    {

                        if (objMaster.Current.IsProcessed.ToBool())
                        {




                            ddlVehicleType.Enabled = false;
                            if (ddlReturnVehicleType != null)
                                ddlReturnVehicleType.Enabled = false;

                            dtpPickupDate.Enabled = false;
                            dtpPickupTime.Enabled = false;


                            if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                            {
                                dtpReturnPickupDate.Enabled = false;
                                dtpReturnPickupTime.Enabled = false;
                            }

                            numFareRate.Enabled = false;

                            if (numCompanyFares != null)
                                numCompanyFares.Enabled = false;
                            numBookingFee.Enabled = false;
                            numParkingChrgs.Enabled = false;
                            numWaitingChrgs.Enabled = false;
                            numExtraChrgs.Enabled = false;
                            numMeetCharges.Enabled = false;
                            numCongChrgs.Enabled = false;

                            txtFromAddress.ReadOnly = false;
                            txtToAddress.ReadOnly = false;


                            btnSaveNew.Enabled = false;
                            btnCancelBooking.Enabled = false;
                        }
                    }

                }


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
                IsDisplayingRecord = false;

            }

        }

        private void DdlCompany_Validating(object sender, CancelEventArgs e)
        {
            try
            {
                if (ddlCompany.SelectedValue.ToInt() == 0)
                {
                    MessageBox.Show("Required : Account");
                    e.Cancel = true;

                }
            }
            catch
            {

            }
        }

        //private void menu_JobReceipt_Click(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        long Id = objMaster.Current.Id;


        //        rptfrmJobReceiptDetails frm4 = new rptfrmJobReceiptDetails();
        //        frm4.DataSource = General.GetQueryable<Vu_BookingDetail>(d => d.Id == Id).ToList(); ;
        //        frm4.GenerateReport();

        //        if (frm4 != null)
        //        {
        //            frm4.FormBorderStyle = FormBorderStyle.FixedSingle;
        //            frm4.Size = new Size(800, 800);
        //            frm4.ControlBox = true;
        //            frm4.MaximizeBox = true;
        //            frm4.MinimizeBox = true;
        //            frm4.ShowDialog();
        //            frm4.Dispose();
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}





        private void DisplayCourierSignature()
        {


            if (objMaster.Current.Booking_CourierSignatures != null && objMaster.Current.Booking_CourierSignatures.CourierSignature.Length > 1)
            {



                if (objMaster.Current.Booking_CourierSignatures.CourierSignature != null)
                {
                    InitializeCourierPanel();


                    pic_Signature.Image = General.byteArrayToImage(objMaster.Current.Booking_CourierSignatures.CourierSignature.ToArray());


                    if (objMaster.Current.Booking_CourierSignatures.SignatureDateTime != null)
                        txtCourierSignedOn.Text = "Signed on :" + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.Booking_CourierSignatures.SignatureDateTime);

                }

                //if (txtCourierSignaturedBy != null)
                //{

                //    txtCourierSignaturedBy.Text = objMaster.Current.Booking_CourierSignatures.SignaturedBy.ToStr();
                //    dtpCourierSignatureDate.Value = objMaster.Current.Booking_CourierSignatures.SignatureDateTime.ToDateorNull();
                //    dtpCourierSignatureTime.Value = objMaster.Current.Booking_CourierSignatures.SignatureDateTime.ToDateTimeorNull();
                //    numCourierItems.Value = objMaster.Current.Booking_CourierSignatures.NoOfItems.ToDecimal();
                //}


            }

        }



        private void InitializeCourierPanel()
        {


            this.pnlSignature = new System.Windows.Forms.Panel();
            this.tableLayoutPanel1.Controls.Add(this.pnlSignature, 1, 0);
            // 
            // pnlSignature
            // 
            this.pnlSignature.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlSignature.Location = new System.Drawing.Point(911, 3);
            this.pnlSignature.Name = "pnlSignature";
            
            this.pnlSignature.Size = new System.Drawing.Size(370, 469);
            this.pnlSignature.TabIndex = 108;
            // this.tabNearestDrivers.Controls.Add(this.webBrowser1);
            //  tableLayoutPanel1.Visible = false;

            this.pic_Signature = new System.Windows.Forms.PictureBox();
            this.lblCourierHeader = new System.Windows.Forms.Label();
            this.txtCourierSignedOn = new System.Windows.Forms.Label();


            this.pnlSignature.Controls.Add(this.txtCourierSignedOn);
            this.pnlSignature.Controls.Add(this.lblCourierHeader);
            this.pnlSignature.Controls.Add(this.pic_Signature);


            ((System.ComponentModel.ISupportInitialize)(this.pic_Signature)).BeginInit();
            // 
            // pic_Signature
            // 
            this.pic_Signature.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pic_Signature.Location = new System.Drawing.Point(5, 220);
            this.pic_Signature.Name = "pic_Signature";
            this.pic_Signature.Size = new System.Drawing.Size(278, 151);
            this.pic_Signature.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pic_Signature.TabIndex = 266;
         //   pic_Signature.BackColor = Color.Black;
            this.pic_Signature.TabStop = false;
            // 
            // lblCourierHeader
            // 
            this.lblCourierHeader.BackColor = System.Drawing.Color.Crimson;
            this.lblCourierHeader.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.lblCourierHeader.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCourierHeader.ForeColor = System.Drawing.Color.White;
            this.lblCourierHeader.Location = new System.Drawing.Point(5, 200);
            this.lblCourierHeader.Name = "lblCourierHeader";
            this.lblCourierHeader.Size = new System.Drawing.Size(278, 22);
            this.lblCourierHeader.TabIndex = 267;
            this.lblCourierHeader.Text = "Customer Signature";
            this.txtCourierSignedOn.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // txtCourierSignedOn
            // 
            this.txtCourierSignedOn.BackColor = System.Drawing.Color.Crimson;
            this.txtCourierSignedOn.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.txtCourierSignedOn.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtCourierSignedOn.ForeColor = System.Drawing.Color.White;
            this.txtCourierSignedOn.Location = new System.Drawing.Point(5, 370);
            this.txtCourierSignedOn.Name = "txtCourierSignedOn";
            this.txtCourierSignedOn.Size = new System.Drawing.Size(278, 22);
            this.txtCourierSignedOn.TabIndex = 268;
            this.txtCourierSignedOn.Text = "Signed On :";
            this.txtCourierSignedOn.TextAlign = System.Drawing.ContentAlignment.TopCenter;


            ((System.ComponentModel.ISupportInitialize)(this.pic_Signature)).EndInit();
        }



        delegate void DisplayMilesHandler();


        private void DisplayBooking_ViaLocations()
        {
            if (objMaster.Current.Booking_ViaLocations.Count > 0)
            {
                CreateViaPanel();



                GridViewRowInfo row = null;
                foreach (var item in objMaster.Current.Booking_ViaLocations)
                {
                    row = grdVia.Rows.AddNew();
                    row.Cells["ID"].Value = item.Id;
                    row.Cells["MASTERID"].Value = item.BookingId;
                    //   row.Cells["FROMTYPELABEL"].Value = "Via";
                    row.Cells["FROMTYPELABEL"].Value = item.ViaLocTypeLabel;
                    row.Cells["FROMTYPEVALUE"].Value = item.ViaLocTypeValue;
                    row.Cells["FROMVIALOCTYPEID"].Value = item.ViaLocTypeId;

                    row.Cells["VIALOCATIONID"].Value = item.ViaLocId;
                    row.Cells["VIALOCATIONLABEL"].Value = item.ViaLocLabel;
                    row.Cells["VIALOCATIONVALUE"].Value = item.ViaLocValue;

                }

                ClearViaDetails();


                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                btnSelectVia.BackColor = Color.DarkOrange;
                //  btnSelectVia.NumberOfColors = 1;

            }

        }


        #endregion

        private void opt_JOneWay_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {


            if (CheckReturnBooking(args.NewValue) == false)
                args.Canceled = true;

            //   FocusToPassenger();
            //  FocusOnCustomer();
        }

        private void FocusToPassenger()
        {

            //num_TotalPassengers.Focus();
            num_TotalPassengers.Select();
        }




        private bool CheckReturnBooking(ToggleState toggle)
        {
            bool rtn = true;

            try
            {
                if (objMaster.PrimaryKeyValue != null && objMaster.Current.BookingReturns.Count > 0 && toggle == ToggleState.On)
                {
                    if (DialogResult.OK == MessageBox.Show("There is a Return Job '" + objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().BookingNo
                                                        + "' exist against this Job" + Environment.NewLine
                                                        + "If you press OK then Return Job will be delete" + Environment.NewLine
                                                        + "Are you sure you want to Delete its Return Job?", "Booking and Dispatch System"
                                                            , MessageBoxButtons.OKCancel, MessageBoxIcon.Warning))
                    {

                        new TaxiDataContext().stp_DeleteFullReturnBooking(objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().MasterJobId, true);

                        //  new TaxiDataContext().stp_DeleteReturnBooking(objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().MasterJobId);

                    }
                    else
                    {
                        rtn = false;

                    }


                }
            }
            catch (Exception ex)
            {
                rtn = false;
                ENUtils.ShowMessage(ex.Message);

            }

            return rtn;


        }


        private void SetJourneyWise(ToggleState toggle)
        {


            if (toggle == ToggleState.On)
            {

                if (dtpReturnPickupTime != null)
                {

                    lblReturnDriver.Visible = false;
                    ddlReturnDriver.Visible = false;

                    //fwd00  ddlReturnDriver.SelectedValue = null;
                    ddlReturnDriver.Text = "";
                    //fwd00

                    lblReturnPickupDate.Visible = false;
                    lblReturnPickupTime.Visible = false;
                    dtpReturnPickupDate.Visible = false;
                    dtpReturnPickupTime.Visible = false;
                    //  dtpReturnPickupDate.Value = null;
                    //  dtpReturnPickupTime.Value = null;


                    lblReturnCustFare.Visible = false;
                    numReturnBookingFee.Visible = false;

                    if (txtReturnSpecialReq != null)
                    {
                        lblReturnSpecialReq.Visible = false;
                        txtReturnSpecialReq.Visible = false;
                    }


                    if (ddlReturnVehicleType != null)
                    {
                        lblReturnVehicle.Visible = false;
                        ddlReturnVehicleType.Visible = false;
                    }


                    if (lblRetFares != null)
                    {
                        //fwdkh
                        // lblRetFares.Visible = false;
                        //numReturnFare.Visible = false;
                        numReturnFare.Enabled = false;


                    }


                }

                if (lblRetFares != null)
                {
                    numReturnFare.Enabled = false;
                    numReturnFare.Value = 0;
                }

                if (numReturnCompanyFares != null)
                {
                    numReturnCompanyFares.Enabled = false;

                }


                //  btn_notes.Location = new Point(749, 282);
                // pnlAutoDespatch.Location = new Point(749, 332);



                ddlPickupPlot.Visible = true;
                ddlDropOffPlot.Visible = true;
                lblPickupPlot.Text = "";
                lblDropOffPlot.Text = "";
                //  btnReturnFrom.Visible = false;
                // btnReturnTo.Visible = false;

                if (txtReturnFrom != null)
                {
                    txtReturnFrom.Visible = false;
                    lblretfrom.Visible = false;
                }
                    txtFromAddress.Width = 465;

                if (txtReturnTo != null)
                {
                    txtReturnTo.Visible = false;
                    lblretto.Visible = false;
                }

                    txtToAddress.Width = 465;
                    lblReturnAddress.Visible = false;

                if (txtOrderNo != null && txtOrderNo.Visible == true && txtPupilNo != null)
                {
                    lblPupilNo.Visible = false;
                    txtPupilNo.Visible = false;

                }

            }
            else
            {
                InitializeReturnPanel();


                //  ddlPickupPlot.Visible = false;
                //   ddlDropOffPlot.Visible = false;
                lblPickupPlot.Text = "Return To";
                lblDropOffPlot.Text = "Return From";
                //btnReturnFrom.Visible = true;
                // btnReturnTo.Visible = true;

                lblReturnDriver.Visible = true;
                ddlReturnDriver.Visible = true;
                //fwd00  ddlReturnDriver.SelectedValue = null;
                ddlReturnDriver.Text = "";
                //fwd00

                lblReturnPickupDate.Visible = true;
                lblReturnPickupTime.Visible = true;

                dtpReturnPickupDate.Visible = true;
                dtpReturnPickupTime.Visible = true;


                if (numBookingFee.Visible)
                {
                    lblReturnCustFare.Visible = true;
                    numReturnBookingFee.Visible = true;
                }


                if (AppVars.objPolicyConfiguration.ShowBlankPickupDateAsDefault.ToBool() == false)
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();
                    dtpReturnPickupTime.Value = DateTime.Now;
                }


                if (lblRetFares != null)
                {
                    numReturnFare.Enabled = true;


                    lblRetFares.Visible = true;
                    numReturnFare.Visible = true;



                }
                if (numReturnCompanyFares != null)
                {
                    numReturnCompanyFares.Enabled = true;

                }

                //  btn_notes.Location = new Point(749, 222);
                //  pnlAutoDespatch.Location = new Point(749, 282);


                if (txtReturnSpecialReq != null)
                {

                    lblReturnSpecialReq.Visible = true;
                    txtReturnSpecialReq.Visible = true;
                }


                if (ddlReturnVehicleType != null)
                {
                    if (ddlReturnVehicleType.DataSource == null)
                    {
                        try
                        {
                            FillCombo(Program.dtCombos.Tables[4].Copy(), ddlReturnVehicleType, "VehicleType", "Id");
                            ddlReturnVehicleType.SelectedIndex = -1;
                        }
                        catch
                        {


                        }
                    }
                    // ComboFunctions.FillVehicleTypeCombo(ddlReturnVehicleType);


                    if (ddlReturnVehicleType.SelectedValue == null)
                    {
                        if (ddlVehicleType.SelectedValue != null)
                            ddlReturnVehicleType.SelectedValue = ddlVehicleType.SelectedValue;



                    }
                    lblReturnVehicle.Visible = true;
                    ddlReturnVehicleType.Visible = true;



                    if (ddlReturnPaymentType.DataSource == null)
                    {
                        try
                        {

                            FillCombo(Program.dtCombos.Tables[5].Copy(), ddlReturnPaymentType, "PaymentType", "Id");
                            ddlReturnPaymentType.SelectedIndex = -1;
                        }
                        catch
                        {


                        }
                    }


                    if (ddlReturnPaymentType.SelectedValue == null)
                    {
                        try
                        {
                            if (ddlPaymentType.SelectedValue != null)
                                ddlReturnPaymentType.SelectedValue = ddlPaymentType.SelectedValue;
                        }
                        catch
                        {

                        }


                    }

                    lblReturnPaymentType.Visible = true;
                    ddlReturnPaymentType.Visible = true;

                }


                if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    if (ddlReturnFromAirport != null)
                    {

                        SetReturnFrom(ToggleState.Off);
                        //lblReturnFromAirport.Visible = true;
                        //ddlReturnFromAirport.Visible = true;
                        //if (ddlReturnFromAirport.DataSource == null)
                        //{
                        //    ComboFunctions.FillLocationsCombo(ddlReturnFromAirport, c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT);
                        //    ddlReturnFromAirport.SelectedIndex = -1;
                        //}

                    }

                }
                else
                {
                    SetReturnFrom(ToggleState.Off);

                }

                if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    SetReturnTo(ToggleState.Off);

                    //if (ddlReturnTo.DataSource == null)
                    //{
                    //    ComboFunctions.FillLocationsCombo(ddlReturnTo, c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT);
                    //    ddlReturnTo.SelectedIndex = -1;
                    //}


                }
                else
                {

                    SetReturnTo(ToggleState.Off);
                }



                if (txtOrderNo != null && txtOrderNo.Visible == true && txtPupilNo != null)
                {
                    //lblPupilNo.Visible = true;
                    // txtPupilNo.Visible = true;

                    txtPupilNo.AutoCompleteCustomSource.Clear();
                    txtPupilNo.AutoCompleteCustomSource.AddRange(txtOrderNo.AutoCompleteCustomSource.OfType<string>().ToArray<string>());
                    txtPupilNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                    txtPupilNo.AutoCompleteSource = AutoCompleteSource.CustomSource;
                }
            }


        }

        private void chkIsCompanyRates_CheckedChanged(object sender, EventArgs args)
        {
            UseCompanyRates(chkIsCompanyRates.Checked ? ToggleState.On : ToggleState.Off);
        }

        private void UseCompanyRates(ToggleState toggle)
        {

            try
            {

                if (toggle == ToggleState.On)
                {
                    if (numCompanyFares != null)
                        numCompanyFares.Enabled = true;

                    if (numReturnCompanyFares != null)
                        numReturnCompanyFares.Enabled = true;
                    if (ddlCompany.DataSource == null)
                    {

                        InitializeCompanyPrice();






                        ComboFunctions.FillCompanyComboX(ddlCompany);
                        ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);


                    }

                    //   SetAccountPaymentType();

                    if (numCompanyFares != null)
                        numCompanyFares.Enabled = true;



                    if (AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId != null && ddlVehicleType.SelectedValue.ToInt() != AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt())
                    {
                        SetDefaultVehicleType(AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt());
                    }


                    EnableAccCharges(true);
                }
                else
                {
                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Enabled = false;
                        numReturnCompanyFares.Enabled = false;
                    }

                    //  SetCashPaymentType();

                    if (pnlOrderNo != null)
                    {
                        txtOrderNo.Text = string.Empty;
                        txtPupilNo.Text = string.Empty;
                        pnlOrderNo.Visible = false;
                    }

                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Value = 0;
                        numCompanyFares.Enabled = false;
                    }


                    if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                    {
                        ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;

                        try
                        {
                            if (ddlReturnPaymentType != null && ddlReturnPaymentType.Visible)
                            {
                                ddlReturnPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;
                            }
                        }
                        catch
                        {

                        }

                    }

                    ShowAgentDetails(false);
                    ShowPaymentReference();


                    if (AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId != null && ddlVehicleType.SelectedValue.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt()
                        && ddlVehicleType.SelectedValue.ToInt() == AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt())
                    {
                        SetDefaultVehicleType(AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt());
                    }

                    EnableAccCharges(false);

                }





                try
                {

                    if (toggle == ToggleState.Off)
                    {
                        ddlCompany.SelectedIndex = -1;
                        ddlCompany.SelectedIndex = -1;
                    }
                    else
                    {
                        ddlCompany.SelectedValue = ddlCompany.SelectedValue;
                    }
                }
                catch
                {

                }

                ddlCompany.Enabled = toggle == ToggleState.On;
                InstallEventHandlers(this);
            }
            catch
            {


            }
        }

        private void InitializeCompanyPrice()
        {
            if (lblCompanyPrice != null)
                return;

            try
            {

                this.lblCompanyPrice = new Label();
                this.numCompanyFares = new NumericUpDown();
                //  ((System.ComponentModel.ISupportInitialize)(this.lblCompanyPrice)).BeginInit();
                //     ((System.ComponentModel.ISupportInitialize)(this.numCompanyFares)).BeginInit();


                // 
                // lblCompanyPrice
                // 
                this.lblCompanyPrice.AutoSize = false;
                this.lblCompanyPrice.BackColor = System.Drawing.Color.Lavender;
                this.lblCompanyPrice.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.lblCompanyPrice.ForeColor = System.Drawing.Color.Black;
                this.lblCompanyPrice.Location = new System.Drawing.Point(210, 8);//(716, 63);
                this.lblCompanyPrice.Name = "lblCompanyPrice";
                pnlFares.Controls.Add(lblCompanyPrice);
                // 
                // 
                // 
                //   this.lblCompanyPrice.RootElement.ForeColor = System.Drawing.Color.Black;
                this.lblCompanyPrice.Size = new System.Drawing.Size(135, 19);
                this.lblCompanyPrice.TabIndex = 242;
                this.lblCompanyPrice.Text = "Company Price  £";
                this.lblCompanyPrice.Visible = true;
                //  lblCompanyPrice.BackColor = Color.FromArgb(233, 240, 249);
                // 
                // numCompanyFares
                // 
                this.numCompanyFares.DecimalPlaces = 2;
                //   this.numCompanyFares.EnableKeyMap = true;
                this.numCompanyFares.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numCompanyFares.ForeColor = System.Drawing.Color.Red;
                this.numCompanyFares.InterceptArrowKeys = false;
                this.numCompanyFares.Location = new System.Drawing.Point(340, 8);//(854, 61);
                this.numCompanyFares.Maximum = new decimal(new int[] { 99999999, 0, 0, 0 });
                this.numCompanyFares.Name = "numCompanyFares";
                pnlFares.Controls.Add(numCompanyFares);

                InstallEventHandlers(pnlFares);

                this.numCompanyFares.Size = new System.Drawing.Size(65, 24);
                this.numCompanyFares.TabIndex = 241;
                this.numCompanyFares.TabStop = false;
                this.numCompanyFares.Visible = true;

                //    if(AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                this.numCompanyFares.Validated += new EventHandler(numCompanyFares_Validated);

                this.numCompanyFares.Enter += new EventHandler(numCompanyFares_Enter);



                this.radPanel1.Controls.Add(this.lblCompanyPrice);
                this.radPanel1.Controls.Add(this.numCompanyFares);

                this.lblCompanyPrice.BringToFront();
                this.numCompanyFares.BringToFront();



                this.lblReturnCompanyPrice = new Label();
                this.numReturnCompanyFares = new NumericUpDown();

                this.lblReturnCompanyPrice.AutoSize = false;
                this.lblReturnCompanyPrice.BackColor = System.Drawing.Color.Lavender;
                this.lblReturnCompanyPrice.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.lblReturnCompanyPrice.ForeColor = System.Drawing.Color.Black;
                this.lblReturnCompanyPrice.Location = new System.Drawing.Point(208, 41);//(702, 93);
                this.lblReturnCompanyPrice.Name = "lblCompanyPrice";
                pnlFares.Controls.Add(lblReturnCompanyPrice);

                this.lblReturnCompanyPrice.Size = new System.Drawing.Size(135, 19);
                this.lblReturnCompanyPrice.TabIndex = 242;
                this.lblReturnCompanyPrice.Text = "Ret Company Price £";
                this.lblReturnCompanyPrice.Visible = true;
                // lblReturnCompanyPrice.BackColor = Color.FromArgb(233, 240, 249);
                // 
                // numCompanyFares
                // 
                this.numReturnCompanyFares.DecimalPlaces = 2;
                //    this.numReturnCompanyFares.EnableKeyMap = true;
                this.numReturnCompanyFares.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numReturnCompanyFares.ForeColor = System.Drawing.Color.Red;
                this.numReturnCompanyFares.InterceptArrowKeys = false;
                this.numReturnCompanyFares.Location = new System.Drawing.Point(339, 41);//(860, 89);
                this.numReturnCompanyFares.ForeColor = Color.Red;
                pnlFares.Controls.Add(numReturnCompanyFares);
                this.numReturnCompanyFares.Maximum = new decimal(new int[] { 99999999, 0, 0, 0 });
                this.numReturnCompanyFares.Name = "numReturnCompanyFares";
                //  this.numReturnCompanyFares.Controls[0].Visible = false;
                if (AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                    this.numReturnCompanyFares.Validated += new EventHandler(numReturnCompanyFares_Validated);




                this.numReturnCompanyFares.Size = new System.Drawing.Size(65, 24);
                this.numReturnCompanyFares.TabIndex = 241;
                this.numReturnCompanyFares.TabStop = false;
                this.numReturnCompanyFares.Visible = true;


                this.numReturnCompanyFares.Enabled = opt_return.Checked;
                InstallEventHandlers(pnlFares);



                this.radPanel1.Controls.Add(this.lblReturnCompanyPrice);
                this.radPanel1.Controls.Add(this.numReturnCompanyFares);
                InstallEventHandlers(radPanel1);
                this.lblReturnCompanyPrice.BringToFront();
                this.numReturnCompanyFares.BringToFront();
            }
            catch (Exception ex)
            {


            }

        }





        private void SetAccountPaymentType()
        {
            ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.BANK_ACCOUNT;

            try
            {
                if (ddlReturnPaymentType != null && ddlReturnPaymentType.Visible)
                {

                    if (ddlReturnPaymentType.SelectedValue == null || ddlReturnPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH)
                        ddlReturnPaymentType.SelectedValue = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                }
            }
            catch
            {


            }


        }


        private void SetCashPaymentType()
        {

            if (objMaster.PrimaryKeyValue == null)
            {

                if (AppVars.objPolicyConfiguration.ShowBlankPaymentTypeAsDefault.ToBool() == false)
                    ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;

            }
            else
            {
                ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;

            }



        }

        bool IsClickableFares = false;
        private void btnPickFares_Click(object sender, EventArgs e)
        {
            IsClickableFares = true;
            CalculateTotalFares();
        }


        private void CalculateTotalFares()
        {

            try
            {

                int? vehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();

                int? fromLocationId = null;
                int? fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();

                int? toLocTypeId = ddlToLocType.SelectedValue.ToInt();
                int? toLocationId = null;

                string fromLocName = string.Empty;
                string toLocName = string.Empty;


                if (string.IsNullOrEmpty(fromLocName))
                {
                    fromLocName = txtFromAddress.Text; //txtFromAddress.ListBoxElement.SelectedItem.ToStr().Trim();

                }

                if (string.IsNullOrEmpty(toLocName))
                {
                    toLocName = txtToAddress.Text;//txtToAddress.ListBoxElement.SelectedItem.ToStr().Trim();


                }

                string fromAddress = txtFromAddress.Text.Trim().ToUpper();
                string toAddress = txtToAddress.Text.Trim().ToUpper();
                string fromPostCode = txtFromPostCode.Text.Trim().ToUpper();
                string toPostCode = txtToPostCode.Text.Trim().ToUpper();

                string tempFromPostCode = string.Empty;
                string tempToPostCode = string.Empty;


                tempFromPostCode = General.GetPostCodeMatch(fromAddress);


                if (string.IsNullOrEmpty(tempFromPostCode) && !string.IsNullOrEmpty(fromLocName))
                    tempFromPostCode = General.GetPostCodeMatch(fromLocName);





                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    tempToPostCode = General.GetPostCodeMatch(toAddress);


                    if (string.IsNullOrEmpty(tempToPostCode) && !string.IsNullOrEmpty(toLocName))
                        tempToPostCode = General.GetPostCodeMatch(toLocName);
                }
                else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    tempToPostCode = toPostCode;
                }
                else
                {
                    tempToPostCode = General.GetPostCodeMatch(toLocName);
                }


                if (objMaster.PrimaryKeyValue != null && objMaster.Current != null)
                {



                    if ((objMaster.Current.FromAddress.ToStr().ToUpper().Equals(fromAddress)
                        && objMaster.Current.ToAddress.ToStr().ToUpper().Equals(toAddress)) && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                    {

                        if (objMaster.Current.CompanyId != ddlCompany.SelectedValue.ToIntorNull())
                        {
                            IsClickableFares = true;
                        }

                        if (objMaster.Current.VehicleTypeId != ddlVehicleType.SelectedValue.ToIntorNull())
                        {
                            IsClickableFares = true;
                        }

                        if (IsClickableFares == false)
                        {
                            return;
                        }

                    }

                }

                lblMap.Text = string.Empty;

                IsClickableFares = false;
                mileageError = false;
                CalculateFares();

                if (worker_fares == null)
                {

                    string via = string.Empty;

                    if (AppVars.objPolicyConfiguration.EnableOfflineDistance.ToBool() == false && grdVia != null && grdVia.Rows.Count > 0)
                    {
                        via = "&waypoints=";
                        via += string.Join("|", grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()) + ", UK").ToArray<string>());
                        estimatedTime = General.CalculateEstimatedTime(tempFromPostCode, tempToPostCode, via);
                    }

                    if (estimatedTime.ToStr().Length > 0)
                        estimatedTime = "Time :" + estimatedTime;

                    lblMap.Text = "Distance : " + string.Format("{0:#.##}", milesList.Sum()) + " miles " + estimatedTime;

                    CalculateTotalCharges();
                }

            }
            catch (Exception ex)
            {

            }
        }





        string estimatedTime = string.Empty;
        string setFareLogMsg = string.Empty;


        private bool ResetFaresOnBlankPaymentType()
        {
            if (ddlCompany.SelectedValue.ToInt() != 0 && ResetAllFares)
                return false;

            if (ddlVehicleType.SelectedValue == null)
                return false;

            if (ddlCompany.SelectedValue.ToInt() != 0 && ddlPaymentType.SelectedValue.ToInt() == 0)
            {

                numFareRate.Value = 0.00m;
                numBookingFee.Value = 0.00m;

                if (numCompanyFares != null)
                    numCompanyFares.Value = 0.00m;


                if (numAgentCommission != null)
                    numAgentCommission.Value = 0.00m;


                if (numReturnFare != null)
                    numReturnFare.Value = 0.00m;


                if (numReturnBookingFee != null)
                    numReturnBookingFee.Value = 0.00m;


                if (numReturnCompanyFares != null)
                    numReturnCompanyFares.Value = 0.00m;

                return false;
            }
            else
                return true;

        }


        private bool CheckCustomJourneyFares(int? fromLocTypeId, int? toLocTypeId, string fromAddress, string toAddress, int? vehicleTypeId)
        {
            //  return false;

            string fromSetFareVal = fromAddress;
            string toSetFareVal = toAddress;

            if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                fromSetFareVal = txtFromPostCode.Text;





            if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                toSetFareVal = txtToPostCode.Text;


            string via = string.Empty;
            if (grdVia != null)
            {
                via = string.Join(",", grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()).ToArray<string>());
            }


            int? tCompanyId = ddlCompany.SelectedValue.ToIntorNull();

            var objCustomFare = General.GetQueryable<Fare_CustomJourney>(c => c.VehicleTypeId == vehicleTypeId

                && (c.Pickup == fromSetFareVal && c.Destination == toSetFareVal)
                && (c.CompanyId == tCompanyId || tCompanyId == null)
                && (c.ViaPoints == via || via == string.Empty)).OrderByDescending(c => c.Id).FirstOrDefault();


            if (objCustomFare != null)
            {
                numFareRate.Value = objCustomFare.DriverFares.ToDecimal();
                numFareRate.BackColor = Color.Pink;

                string msg = "Drv Fare : " + numFareRate.Value;
                if (numReturnFare != null)
                {
                    numReturnFare.Value = objCustomFare.DriverRtnFares.ToDecimal();
                    numReturnFare.BackColor = Color.Pink;

                }

                numBookingFee.Value = objCustomFare.CustomerFares.ToDecimal();
                numBookingFee.BackColor = Color.Pink;
                msg += " , Cust Fare : " + numBookingFee.Value;

                if (numReturnBookingFee != null)
                {
                    numReturnBookingFee.Value = objCustomFare.CustomerRtnFares.ToDecimal();
                    numReturnBookingFee.BackColor = Color.Pink;
                }

                if (numCompanyFares != null)
                {
                    numCompanyFares.Value = objCustomFare.CompanyFares.ToDecimal();
                    numCompanyFares.BackColor = Color.Pink;
                    msg += " , Company Fare : " + numCompanyFares.Value;
                    if (numReturnCompanyFares != null)
                    {
                        numReturnCompanyFares.Value = objCustomFare.CompanyRtnFares.ToDecimal();
                        numReturnCompanyFares.BackColor = Color.Pink;
                    }
                }

                decimal miles = CalculateTotalDistance(fromSetFareVal, via.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToArray<string>(), toSetFareVal);

                milesList.Add(miles);
                if (objMaster.Current == null)
                {
                    setFareLogMsg = "Calculate Fares from (Set Fare : " + msg + ")";
                }
                else
                {
                    UpdateSetFareLog("Calculate Fares from (Set Fare : " + msg + ")");
                }

                return false;

            }
            else
            {
                numFareRate.BackColor = Color.White;
                if (numReturnFare != null)
                    numReturnFare.BackColor = Color.White;

                numBookingFee.BackColor = Color.White;

                if (numReturnBookingFee != null)
                    numReturnBookingFee.BackColor = Color.White;

                if (numCompanyFares != null)
                    numCompanyFares.BackColor = Color.White;

                if (numCompanyFares != null)
                    numReturnCompanyFares.BackColor = Color.White;
                return true;




            }
        }


        private bool HasFareIncrementCharges = true;

        //private decimal GetFareIncrementCharges(decimal faresToIncrement)
        //{

        //    var objInc = General.GetObject<Fare_IncrementSetting>(c => c.Id != 0 && c.EnableIncrement != null && c.EnableIncrement == true);

        //    if (objInc != null)
        //    {
        //        HasFareIncrementCharges = true;

        //        bool IsExist = false;

        //        DateTime? pickupDateTime = (dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();

        //        if ((objInc.CriteriaBy.ToInt() == 1 && pickupDateTime >= objInc.FromDate && pickupDateTime <= objInc.TillDate)
        //        || (objInc.CriteriaBy.ToInt() == 2 && pickupDateTime.ToDate() >= objInc.FromDate.ToDate() && pickupDateTime.ToDate() <= objInc.TillDate.ToDate())
        //            )
        //        {

        //            IsExist = true;

        //        }
        //        else if (objInc.CriteriaBy.ToInt() == 3)
        //        {
        //            string str = dtpPickupTime.Value.Value.TimeOfDay.ToStr();

        //            str = str.Substring(0, str.LastIndexOf(':'));
        //            str = str.Replace(":", "").Trim();

        //            int time = str.ToInt();


        //            str = objInc.FromDate.Value.TimeOfDay.ToStr();
        //            str = str.Substring(0, str.LastIndexOf(':'));
        //            str = str.Replace(":", "").Trim();
        //            int fromTime = str.ToInt();


        //            str = objInc.TillDate.Value.TimeOfDay.ToStr();
        //            str = str.Substring(0, str.LastIndexOf(':'));
        //            str = str.Replace(":", "").Trim();
        //            int toTime = str.ToInt();


        //            if (time < 1000)
        //            {

        //                // PEAK FARES

        //                if (fromTime < 1000 && toTime < 1000)
        //                {
        //                    if (time >= fromTime && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }
        //                // 6 AM (600) TO 15 PM (1500)
        //                else if (fromTime < 1000 && toTime > 1000)
        //                {
        //                    if (time >= fromTime && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }

        //                // 6 PM (1800) TO 6 AM (600)
        //                else if (fromTime > 1000 && toTime < 1000)
        //                {

        //                    if (time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }

        //                // OFF PEAK FARES

        //                if (fromTime < 1000 && toTime < 1000)
        //                {
        //                    if (time >= fromTime
        //                            && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }
        //                // 6 AM (600) TO 15 PM (1500)
        //                else if (fromTime < 1000 && toTime > 1000)
        //                {
        //                    if (time >= fromTime
        //                            && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }

        //                // 6 PM (1800) TO 6 AM (600)
        //                else if (fromTime > 1000 && toTime < 1000)
        //                {

        //                    if (time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }
        //                }

        //            }

        //            else if (time >= 1000)
        //            {
        //                if ((fromTime < 1000 && toTime >= 1000)
        //                        || (fromTime >= 1000 && toTime >= 1000))
        //                {

        //                    // 6 AM (600) TO 6PM (1700)
        //                    if (time >= fromTime && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }

        //                    else if ((fromTime >= 1000 && toTime < 1000))
        //                    {

        //                        if (time >= fromTime)
        //                        {
        //                            IsExist = true;
        //                        }
        //                    }
        //                    else if ((toTime > fromTime && time < (toTime - fromTime))
        //                        || (fromTime > toTime && time > (fromTime - toTime)))
        //                    {
        //                        IsExist = true;

        //                    }

        //                }

        //                else if ((fromTime < 1000 && toTime >= 1000)
        //                        || (fromTime >= 1000 && toTime >= 1000))
        //                {

        //                    // 6 AM (600) TO 6PM (1700)
        //                    if (time >= fromTime
        //                            && time <= toTime)
        //                    {
        //                        IsExist = true;
        //                    }

        //                }

        //                else if ((fromTime >= 1000 && toTime < 1000))
        //                {

        //                    // 6 AM (600) TO 6PM (1700)
        //                    if (time >= fromTime)
        //                    {
        //                        IsExist = true;
        //                    }

        //                }
        //            }
        //        }



        //        if (IsExist)
        //        {

        //            if (objInc.IncrementType.ToStr() == "percent")
        //            {
        //                faresToIncrement = ((faresToIncrement * objInc.IncrementRate.ToDecimal()) / 100);

        //                if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
        //                {
        //                    faresToIncrement = Math.Ceiling(faresToIncrement);
        //                }
        //            }
        //            else
        //            {
        //                faresToIncrement = objInc.IncrementRate.ToDecimal();
        //            }
        //        }
        //        else
        //        {

        //            faresToIncrement = 0;
        //        }
        //    }
        //    else
        //    {

        //        faresToIncrement = 0;
        //    }

        //    return faresToIncrement;

        //}


        private decimal GetFareIncrementCharges(decimal faresToIncrement, DateTime? datetime)
        {
            if (datetime == null)
                return 0.00m;

            try
            {

              

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var objIncList =db.GetTable<Fare_IncrementSetting>().Where(c => c.Id != 0 && c.EnableIncrement != null && c.EnableIncrement == true);


                    int cnt = 0;
                    foreach (var objInc in objIncList)
                    {



                        if (objInc != null)
                        {

                            HasFareIncrementCharges = true;

                            bool IsExist = false;

                            DateTime? pickupDateTime = datetime;
                            pickupDateTime = new DateTime(datetime.Value.Year, datetime.Value.Month, datetime.Value.Day, datetime.Value.Hour, datetime.Value.Minute,0);

                            if ((objInc.CriteriaBy.ToInt() == 1 && pickupDateTime >= objInc.FromDate && pickupDateTime <= objInc.TillDate)
                            || (objInc.CriteriaBy.ToInt() == 2 && pickupDateTime.ToDate() >= objInc.FromDate.ToDate() && pickupDateTime.ToDate() <= objInc.TillDate.ToDate())
                                )
                            {

                                IsExist = true;

                            }
                            else if (objInc.CriteriaBy.ToInt() == 3)
                            {
                                string str = pickupDateTime.ToDateTime().TimeOfDay.ToStr();

                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();

                                int time = str.ToInt();


                                str = objInc.FromDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int fromTime = str.ToInt();


                                str = objInc.TillDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int toTime = str.ToInt();


                                if (time < 1000)
                                {

                                    // PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // OFF PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                }



                                else if (time >= 1000)
                                {
                                    if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                        else if ((fromTime >= 1000 && toTime < 1000))
                                        {

                                            if (time >= fromTime)
                                            {
                                                IsExist = true;
                                            }
                                        }
                                        else if ((toTime > fromTime && time < (toTime - fromTime))
                                            || (fromTime > toTime && time > (fromTime - toTime)))
                                        {
                                            IsExist = true;

                                        }

                                    }

                                    else if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                    }

                                    else if ((fromTime >= 1000 && toTime < 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime)
                                        {
                                            IsExist = true;
                                        }

                                    }
                                }
                            }



                            if (IsExist)
                            {

                                if (objInc.IncrementType.ToLower().ToStr() == "percent")
                                {
                                    faresToIncrement = ((faresToIncrement * objInc.IncrementRate.ToDecimal()) / 100);

                                    if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                    {
                                        faresToIncrement = Math.Ceiling(faresToIncrement);
                                    }
                                }
                                else
                                {
                                    faresToIncrement = objInc.IncrementRate.ToDecimal();
                                }

                                break;
                            }
                            else
                            {

                                cnt++;

                            }
                            //else
                            //{

                            //    faresToIncrement = 0;
                            //}
                        }
                        else
                        {

                            faresToIncrement = 0;
                        }
                    }


                    if(cnt==objIncList.Count())
                    {
                        faresToIncrement = 0;

                    }
                }
            }
            catch
            {

            }

            return faresToIncrement;

        }


        private void CalculateFares()
        {
            if (ResetFaresOnBlankPaymentType() == false)
                return;



            DateTime bookingDate = DateTime.Now.ToDate();
            int? vehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
            int companyId = ddlCompany.SelectedValue.ToInt();
            int? fromLocationId = null;
            int? fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();


            int? toLocTypeId = ddlToLocType.SelectedValue.ToInt();
            int? toLocationId = null;

            //string fromLocName = ddlFromLocation.SelectedItem != null ? (ddlFromLocation.SelectedItem as RadComboBoxItem).Text.Trim() : ddlFromLocation.Text.Trim();
            //string toLocName = ddlToLocation.SelectedItem != null ? (ddlToLocation.SelectedItem as RadComboBoxItem).Text.Trim() : ddlToLocation.Text.Trim();

            string fromAddress = txtFromAddress.Text.Trim().ToUpper();
            string toAddress = txtToAddress.Text.Trim().ToUpper();

            if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtFromAddress.Text != null && txtFromAddress.Text.ToStr().Contains(".") && General.GetPostCodeMatch(fromAddress).Contains(" ") == false)
            {

                fromAddress = txtFromAddress.SelectedItem.ToStr().ToUpper().Trim();
            }


            if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtToAddress.Text != null && txtToAddress.Text.ToStr().Contains(".") && General.GetPostCodeMatch(toAddress).Contains(" ") == false)
            {

                toAddress = txtToAddress.SelectedItem.ToStr().ToUpper().Trim();
            }


            string fromPostCode = txtFromPostCode.Text.Trim().ToUpper();
            string toPostCode = txtToPostCode.Text.Trim().ToUpper();

            int paymentTypeId = ddlPaymentType.SelectedValue.ToInt();

            milesList.Clear();


            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {

                if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS && string.IsNullOrEmpty(General.GetPostCodeMatch(fromAddress)) && !string.IsNullOrEmpty(txtFromAddress.ListBoxElement.Text))
                    fromAddress = txtFromAddress.ListBoxElement.Text.Trim();


                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS && string.IsNullOrEmpty(General.GetPostCodeMatch(toAddress)) && !string.IsNullOrEmpty(txtToAddress.ListBoxElement.Text))
                    toAddress = txtToAddress.ListBoxElement.Text.Trim();

            }



            //      if (CheckCustomJourneyFares(fromLocTypeId,toLocTypeId,fromAddress,toAddress,vehicleTypeId) == false)
            //         return;



            int fromZoneId = ddlPickupPlot.SelectedValue.ToInt();
            int toZoneId = ddlDropOffPlot.SelectedValue.ToInt();

            DateTime? pickupdateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
            int orderId = 2;


            bool IsCompanyFareExist = false;


            int tempFromLocId = 0;
            int tempToLocId = 0;

            decimal deadMileage = AppVars.objPolicyConfiguration.DeadMileage.ToDecimal();

            estimatedTime = string.Empty;
            string errorMsg = string.Empty;
            string tempFromPostCode = string.Empty;
            string tempToPostCode = string.Empty;

            decimal fareVal = 0.00m;


            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
            {

                if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                {
                    tempFromLocId = fromLocationId.ToInt();
                    //if (tempFromLocId != 0)
                    //{
                    //    tempFromPostCode = fromLocName;
                    //}
                    //else
                    tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                }
                else
                {
                    tempFromLocId = tempToLocId;
                    tempFromPostCode = tempToPostCode;

                }

                tempToLocId = toLocationId.ToInt();
                //if (tempToLocId != 0)
                //    tempToPostCode = toLocName;
                //else
                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;





                // NEW

                if (worker_fares != null && worker_fares.IsBusy)
                    worker_fares.CancelAsync();


                // InitializeFares  background worker
                InitializeFaresWorker();


                bool hasVia = false;

                if (pnlVia != null)
                    hasVia = grdVia.Rows.Count > 0;


                tempFromLocId = fromLocationId.ToInt();
                //if (tempFromLocId != 0)
                //    tempFromPostCode = fromLocName;
                //else
                tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;


                tempToLocId = toLocationId.ToInt();
                //if (tempToLocId != 0)
                //    tempToPostCode = toLocName;
                //else
                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;


                int defaultVehicleId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                bool IsMoreFareWise = false;



                clsfaresworker cls = new clsfaresworker();
                cls.defaultVehicleId = defaultVehicleId;
                cls.vehicleTypeId = vehicleTypeId;
                cls.fromZoneId = fromZoneId;
                cls.toZoneId = toZoneId;

                cls.IsMoreFareWise = IsMoreFareWise;
                cls.hasVia = hasVia;

                cls.tempFromPostCode = tempFromPostCode;
                cls.tempToPostCode = tempToPostCode;
                //cls.fromLocName = fromLocName;
                // cls.toLocName = toLocName;
                cls.fromPostCode = fromPostCode;
                cls.toPostCode = toPostCode;
                cls.fromLocationId = fromLocationId;
                cls.toLocationId = toLocationId;
                cls.fromLocTypeId = fromLocTypeId;
                cls.toLocTypeId = toLocTypeId;
                cls.fromAddress = fromAddress;
                cls.toAddress = toAddress;
                cls.tempFromLocId = tempFromLocId;
                cls.tempToLocId = tempToLocId;
                cls.CompanyId = companyId;
                cls.PaymentTypeId = paymentTypeId;
                cls.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;


                if (opt_return.Checked)
                {
                    cls.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                }


                if (hasVia)
                {
                    cls.ViaLocations = (from r in grdVia.Rows
                                        select new ClsViaLocations
                                        {
                                            OrderNo = orderId++,
                                            LocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToInt(),
                                            LocId = r.Cells["VIALOCATIONID"].Value.ToInt(),
                                            ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()
                                        }).ToList();
                }

                //  cls.viaList = hasVia ? grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>() : null;
                cls.SubCompanyId = ddlSubCompany.SelectedValue.ToInt();
                cls.IsReverse = chkReverse.Checked;
                cls.pickupDateTime = dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay;

                if (opt_return.Checked && dtpReturnPickupDate != null && dtpReturnPickupDate.Value != null
                                      && dtpReturnPickupTime != null && dtpReturnPickupTime.Value != null)
                {

                    cls.returnpickupdateTime = dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay;
                    //   returnpickupTime = new TimeSpan(returnpickupdateTime.Value.TimeOfDay.Hours, returnpickupdateTime.Value.Minute, 0);
                    //  returnpickupDay = (int)pickupdateTime.Value.DayOfWeek;
                }

                DisableCalculateFaresButton();
                worker_fares.RunWorkerAsync(cls);


                return;


            }
            else
            {
                int defaultVehicleId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                bool IsMoreFareWise = false;

                bool hasVia = false;
                decimal returnFares = 0.00m;

                if (pnlVia != null)
                {
                    hasVia = grdVia.Rows.Count > 0;
                }


                if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                {
                    tempFromLocId = fromLocationId.ToInt();
                    //if (tempFromLocId != 0)
                    //{
                    //    tempFromPostCode = fromLocName;
                    //}
                    //else
                    tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                }
                else
                {
                    tempFromLocId = tempToLocId;
                    tempFromPostCode = tempToPostCode;

                }

                tempToLocId = toLocationId.ToInt();
                //if (tempToLocId != 0)
                //    tempToPostCode = toLocName;
                //else
                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;


                if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 1)
                {
                    if (vehicleTypeId != defaultVehicleId)
                    {
                        vehicleTypeId = defaultVehicleId;
                        IsMoreFareWise = true;
                    }

                    if (ddlPickupPlot.SelectedValue == null)
                        fromZoneId = GetZoneId(tempFromPostCode).ToInt();
                    else
                        fromZoneId = ddlPickupPlot.SelectedValue.ToInt();


                    if (ddlDropOffPlot.SelectedValue == null)
                        toZoneId = GetZoneId(tempToPostCode).ToInt();
                    else
                        toZoneId = ddlDropOffPlot.SelectedValue.ToInt();



                    if ((fromZoneId != 0 && toZoneId != 0))
                    {

                        var objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId);

                        if (objPlotFare == null)
                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);


                        if (objPlotFare != null)
                        {
                            fareVal = objPlotFare.Price.ToDecimal();


                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);
                            if (objPlotFare == null)
                            {

                                returnFares = fareVal;
                            }
                            else
                                returnFares = objPlotFare.Price.ToDecimal();
                        }


                        milesList.Clear();


                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;

                        }

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                        if (hasVia)
                        {
                            var viaList = grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();
                            milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));

                            fareVal = fareVal + (viaList.Count() * 2.00m);

                        }
                        else
                        {
                            milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                        }
                    }
                    else if (hasVia == false)
                    {
                        var objVeh = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty();
                        decimal startRate = objVeh.StartRate.ToDecimal();
                        decimal startRateMiles = objVeh.StartRateValidMiles.ToDecimal();


                        milesList.Clear();
                        decimal miles = 0.00m;

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;
                        }


                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        if ((fromZoneId != 0 && toZoneId == 0) || (fromZoneId == 0 && toZoneId != 0))
                        {

                            if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                int? locId = 0;

                                if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                                    locId = fromLocationId;

                                else if (toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                                    locId = toLocationId;


                                fareVal = General.GetObject<Fare_ChargesDetail>(c => c.DestinationId == locId).DefaultIfEmpty().Rate.ToDecimal();
                                returnFares = fareVal;

                                milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                            }
                            else
                            {




                                if ((lastOrigin.Length > 0 && lastDestination.Length > 0
                                   && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination) && lastMileage > 0 && lastJourneyMileage > 0)
                                {


                                    miles = lastMileage;
                                    milesList.Add(lastJourneyMileage);
                                }
                                else
                                {
                                    decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                                    decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                                    decimal journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                    milesList.Add(journeyMilage);

                                    //  miles = journeyMilage;
                                    //  miles += (General.CalculateDistance(tempToPostCode, General.GetPostCodeMatch(AppVars.objPolicyConfiguration.BaseAddress.ToStr().ToUpper().Trim())) / 2);

                                    //    miles = invisibileMiles + journeyMilage;

                                    if ((towntoPickup + destToTown) > journeyMilage)
                                    {


                                        miles = (towntoPickup + journeyMilage + destToTown) / 2;
                                    }
                                    else
                                    {
                                        //     miles = journeyMilage;
                                        miles = journeyMilage + ((destToTown) / 2);
                                        // miles = journeyMilage + ((destToTown) / 2);
                                    }


                                    miles = Math.Round(miles, 1);
                                }


                                var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());
                                if (fare != null)
                                {
                                    fareVal = startRate + fare.FirstOrDefault().DefaultIfEmpty().totalFares;

                                }

                                returnFares = fareVal;


                                lastOrigin = tempFromPostCode;
                                lastDestination = tempToPostCode;
                                lastMileage = miles;
                                lastJourneyMileage = milesList.Sum();



                            }
                        }
                        else if (fromZoneId == 0 && toZoneId == 0)
                        {


                            tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                            tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                            if ((lastOrigin.Length > 0 && lastDestination.Length > 0
                             && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination) && lastMileage > 0 && lastJourneyMileage > 0)
                            {


                                miles = lastMileage;
                                milesList.Add(lastJourneyMileage);
                            }
                            else
                            {


                                decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                                decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                                decimal journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                milesList.Add(journeyMilage);



                                if ((towntoPickup + destToTown) > journeyMilage)
                                {


                                    miles = (towntoPickup + journeyMilage + destToTown) / 2;
                                }
                                else
                                {

                                    miles = journeyMilage + ((destToTown) / 2);
                                    //    miles = journeyMilage;
                                }



                                miles = Math.Round(miles, 1);


                            }

                            var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());

                            if (fare != null)
                            {
                                fareVal = startRate + fare.FirstOrDefault().DefaultIfEmpty().totalFares;


                                lastOrigin = tempFromPostCode;
                                lastDestination = tempToPostCode;
                                lastMileage = miles;
                                lastJourneyMileage = milesList.Sum();
                            }


                            returnFares = fareVal;
                            //    }

                        }
                    }

                    else if (hasVia == true)
                    {

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;

                        }

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
                        var viaList = grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();


                        milesList.Clear();

                        var objVeh = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty();
                        decimal startRate = objVeh.StartRate.ToDecimal();

                        decimal miles = 0.00m;

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;


                            temp = fromAddress;
                            fromAddress = toAddress;
                            toAddress = temp;

                        }


                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                        decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                        decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                        decimal journeyMilage = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);
                        milesList.Add(journeyMilage);



                        if ((towntoPickup + destToTown) > journeyMilage)
                        {


                            miles = (towntoPickup + journeyMilage + destToTown) / 2;
                        }
                        else
                        {
                            //  miles = journeyMilage;
                            miles = journeyMilage + ((destToTown) / 2);
                        }



                        miles = Math.Round(miles, 1);

                        var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());


                        if (fare != null)
                        {
                            fareVal = fare.FirstOrDefault().DefaultIfEmpty().totalFares;

                            fareVal = startRate + fareVal + (viaList.Count() * 2.00m);

                        }


                        returnFares = fareVal;
                    }


                }



                else
                {
                    try
                    {

                        if (worker_fares != null && worker_fares.IsBusy)
                            worker_fares.CancelAsync();


                        // InitializeFares  background worker
                        InitializeFaresWorker();

                        if (pnlVia != null)
                            hasVia = grdVia.Rows.Count > 0;






                        tempFromLocId = fromLocationId.ToInt();
                        //if (tempFromLocId != 0)
                        //    tempFromPostCode = fromLocName;
                        //else
                        tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;


                        tempToLocId = toLocationId.ToInt();
                        //if (tempToLocId != 0)
                        //    tempToPostCode = toLocName;
                        //else
                        tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;



                        if (ddlPickupPlot.SelectedValue == null)
                            fromZoneId = GetZoneId(tempFromPostCode).ToInt();
                        else
                            fromZoneId = ddlPickupPlot.SelectedValue.ToInt();


                        if (fromZoneId == 0 && fromLocTypeId != Enums.LOCATION_TYPES.ADDRESS && fromLocationId != null && fromLocationId != 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                fromZoneId = db.Gen_Locations.FirstOrDefault(c => c.Id == fromLocationId).DefaultIfEmpty().ZoneId.ToInt();
                            }
                        }


                        if (ddlDropOffPlot.SelectedValue == null)
                            toZoneId = GetZoneId(tempToPostCode).ToInt();
                        else
                            toZoneId = ddlDropOffPlot.SelectedValue.ToInt();



                        if (toZoneId == 0 && toLocTypeId != Enums.LOCATION_TYPES.ADDRESS && toLocationId != null && toLocationId != 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                toZoneId = db.Gen_Locations.FirstOrDefault(c => c.Id == toLocationId).DefaultIfEmpty().ZoneId.ToInt();
                            }
                        }

                        clsfaresworker cls = new clsfaresworker();
                        cls.defaultVehicleId = defaultVehicleId;
                        cls.vehicleTypeId = vehicleTypeId;
                        cls.fromZoneId = fromZoneId;
                        cls.toZoneId = toZoneId;
                        cls.CompanyId = companyId;
                        cls.IsMoreFareWise = IsMoreFareWise;
                        cls.hasVia = hasVia;

                        cls.tempFromPostCode = tempFromPostCode;
                        cls.tempToPostCode = tempToPostCode;
                        //  cls.fromLocName = fromLocName;
                        // cls.toLocName = toLocName;
                        cls.fromPostCode = fromPostCode;
                        cls.toPostCode = toPostCode;
                        cls.fromLocationId = fromLocationId;
                        cls.toLocationId = toLocationId;
                        cls.fromLocTypeId = fromLocTypeId;
                        cls.toLocTypeId = toLocTypeId;
                        cls.fromAddress = fromAddress;
                        cls.toAddress = toAddress;
                        cls.tempFromLocId = tempFromLocId;
                        cls.tempToLocId = tempToLocId;

                        cls.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;


                        if (opt_return.Checked)
                        {
                            cls.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                        }


                        cls.viaList = hasVia ? grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>() : null;
                        cls.SubCompanyId = ddlSubCompany.SelectedValue.ToInt();
                        cls.IsReverse = chkReverse.Checked;
                        cls.pickupDateTime =(dtpPickupDate.DateTimePickerElement.Value!=null ? dtpPickupDate.DateTimePickerElement.Value.ToDate() : dtpPickupDate.Value.ToDate() )+ dtpPickupTime.Value.ToDateTime().TimeOfDay;

                        if (opt_return.Checked && dtpReturnPickupDate != null && dtpReturnPickupDate.Value != null
                                              && dtpReturnPickupTime != null && dtpReturnPickupTime.Value != null)
                        {

                            cls.returnpickupdateTime = dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay;
                            //   returnpickupTime = new TimeSpan(returnpickupdateTime.Value.TimeOfDay.Hours, returnpickupdateTime.Value.Minute, 0);
                            //  returnpickupDay = (int)pickupdateTime.Value.DayOfWeek;


                        }

                        DisableCalculateFaresButton();
                        worker_fares.RunWorkerAsync(cls);
                        //
                    }
                    catch
                    {

                        EnableCalculateFaresButton();

                    }

                }

            }




            //return true;

        }


        private void EnableCalculateFaresButton()
        {

            btnPickFares.Enabled = true;
        }

        private void DisableCalculateFaresButton()
        {

            btnPickFares.Enabled = false;
        }


        private bool mileageError = false;

        private string lastOrigin = string.Empty;
        private string lastDestination = string.Empty;
        private decimal lastMileage = 0.00m;
        private decimal lastJourneyMileage = 0.00m;

        private void ResetBookingStatusId()
        {

            this.bookingstatusId = null;

        }

        private void btnSaveNew_Click(object sender, EventArgs e)
        {



            ResetBookingStatusId();


            SaveAndClose();
        }

        private void SaveAndClose()
        {
            if (CheckDefaultValidation())
            {
                if (Save())
                    Close();


            }

        }


        private bool CheckDefaultValidation()
        {
            try
            {



                if (ddlPickupPlot.SelectedValue == null && AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() && ddlPickupPlot.Tag == null)
                {
                    try
                    {
                        if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
                        {
                            SetPickupZone(txtFromAddress.Text.ToStr().Trim().ToUpper());


                        }

                    }
                    catch
                    {


                    }

                    //if (ddlPickupPlot.SelectedValue == null)
                    //{

                    //    MessageBox.Show("Please check Pickup Plot");
                    //    ddlPickupPlot.Tag = "validated";
                    //    ddlPickupPlot.Focus();
                    //    return false;

                    //}
                }




                //      AppVars.objPolicyConfiguration.DisableWebBookingAlertPopup


                //if (chkQuotation.Checked==false && ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT
                //    && txtFromFlightDoorNo.Text.Trim().Length == 0 && ddlPaymentType.Items.Count(c => c.Value.ToInt() == Enums.PAYMENT_TYPES.ROOM_CHARGE) > 0)
                //{

                //    ENUtils.ShowMessage("Required : Flight No");
                //    return false;

                //}


                //if (ddlFromLocType.SelectedValue==null)
                //{

                //    ENUtils.ShowMessage("Required : Pickup Location Type");
                //    return false;

                //}

                //if (ddlToLocType.SelectedValue == null)
                //{

                //    ENUtils.ShowMessage("Required : DropOff Location Type");
                //    return false;

                //}


                if (AppVars.objPolicyConfiguration.PeakTimeIncPercent.ToInt() == 1)
                {
                    if (ddlCustomerName.Text.Trim().Length == 0)
                    {
                        MessageBox.Show("Required : Passenger Name");
                        return false;
                    }
                    if(txtCustomerMobileNo.Text.Trim().Length==0 && txtCustomerPhoneNo.Text.Trim().Length==0)
                    {
                        MessageBox.Show("Required : Passenger Contact Number");
                        return false;

                    }
                    if (ddlFromLocType!=null && ddlFromLocType.SelectedValue.ToInt()==Enums.LOCATION_TYPES.AIRPORT && txtFromFlightDoorNo.Text.Trim().Length==0)
                    {
                        MessageBox.Show("Required : Flight No");
                        return false;

                    }
                }


                //if (objMaster.PrimaryKeyValue == null && ddlPaymentType.Tag == null
                //    && AppVars.listUserRights.Count(c => c.functionId == "CHECK PAYMENT TYPE MESSAGE ON NEWBOOKING") > 0)
                //{
                //    ddlPaymentType.Tag = "1";
                //    ENUtils.ShowMessage("Check Payment Type");
                //    return false;

                //}


                if (chkQuotation.Checked && txtEmail.Text.Trim().Length == 0 && AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool())
                {
                    if (DialogResult.No == MessageBox.Show("Customer Email is required for Quotation Email" + Environment.NewLine + "do you still want to save a booking without Quotation Email ?", "Warning", MessageBoxButtons.YesNo))
                    {
                        return false;
                    }
                }




                if (chkIsCompanyRates.Checked && ddlCompany.SelectedValue.ToInt() == 0)
                {
                    MessageBox.Show("Required : Account");
                    ddlCompany.Focus();
                    return false;

                }
                else
                {
                    if (ddlCompany.SelectedValue.ToIntorNull() != null)
                    {


                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            db.DeferredLoadingEnabled = false;



                            int? companyId = ddlCompany.SelectedValue.ToIntorNull();
                            Gen_Company obj = null;

                            if (txtOrderNo != null && txtOrderNo.Visible == true && txtOrderNo.Text.ToStr().Trim().Length == 0)
                            {
                                obj = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                                if (obj.HasOrderNo.ToBool() && obj.MandatoryOrderNo.ToBool())
                                {
                                    MessageBox.Show("Required : Order No");
                                    return false;
                                }

                            }



                            if (companyId != null && txtAccountBookedBy != null)
                            {
                                if (txtAccountBookedBy.Visible == true)
                                {

                                    if (txtAccountBookedBy.Text.Trim().Length == 0)
                                    {

                                        if (obj.MandatoryOrderNo.ToBool())
                                        {
                                            MessageBox.Show("Required : Booked By");
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        if (txtAccountBookedBy.AutoCompleteCustomSource.Count > 0 && txtAccountBookedBy.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtAccountBookedBy.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Booked By is incorrect");
                                            return false;
                                        }
                                    }

                                }
                            }



                            if (companyId != null && txtOrderNo != null)
                            {
                                try
                                {
                                    if (txtOrderNo.Visible == true && txtOrderNo.Text.Length > 0)
                                    {


                                        if (txtOrderNo.AutoCompleteCustomSource.Count > 0 && txtOrderNo.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtOrderNo.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Order No is incorrect");
                                            return false;
                                        }
                                    }


                                    if (txtPupilNo != null && txtPupilNo.Visible == true && txtPupilNo.Text.Length > 0)
                                    {


                                        if (txtPupilNo.AutoCompleteCustomSource.Count > 0 && txtPupilNo.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtPupilNo.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Return Order No is incorrect");
                                            return false;
                                        }
                                    }
                                }
                                catch
                                {


                                }
                            }

                            if (pnlAccpassword != null && pnlAccpassword.Visible == true)
                            {



                                if (obj == null)
                                    obj = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                                if (obj != null)
                                {

                                    string AccountPassword = obj.PasswordAccount.ToStr();

                                    if (txtAccPassword.Text.ToStr().ToLower() == AccountPassword.ToStr().ToLower())
                                    {
                                        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                                        {
                                            ddlCustomerName.Text = ddlCompany.Text.Trim();


                                        }

                                        return true;
                                        //  this.SaveAndClose();
                                    }
                                    else
                                    {
                                        MessageBox.Show("Please Enter Correct Company Password!");
                                        return false;
                                    }
                                }


                            }
                        }
                    }
                }





                //if ((string.IsNullOrEmpty(txtCustomerMobileNo.Text.Trim()) && string.IsNullOrEmpty(txtCustomerPhoneNo.Text.Trim()))
                //    && AppVars.listUserRights.Count(c => c.functionId == Enums.UM_FUNCTIONS.BOOKING_MANDATORY_CUSTOMERCONTACTNO) > 0)
                //{
                //    MessageBox.Show("Required : Telephone (or) Mobile No");

                //    return false;
                //}






                if (dtpPickupDate.Value == null || dtpPickupTime.Value == null)
                {
                    MessageBox.Show("Required : Pickup Date Time");
                    return false;
                }
                else
                {

                    if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
                    {
                        DateTime? pickupDateTime = dtpPickupDate.Value.ToDateorNull() + dtpPickupTime.Value.ToDateTime().TimeOfDay;
                        DateTime? returnDateTime = dtpReturnPickupDate.Value.ToDateorNull() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay;


                        if (returnDateTime != null && pickupDateTime > returnDateTime)
                        {
                            MessageBox.Show("Pickup Date/Time cannot be greater than Return Pickup Date/Time");
                            dtpReturnPickupDate.Focus();
                            return false;
                        }


                    }


                    if (dtpPickupDate.Value.ToDate() < DateTime.Now.Date)
                    {



                        if (DialogResult.No == MessageBox.Show("do you want to save the booking for previous date?", "Warning", MessageBoxButtons.YesNo))
                        {

                            return false;
                        }
                        else
                        {

                            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                            {
                                ddlCustomerName.Text = ddlCompany.Text.Trim();


                            }

                            return true;


                        }
                    }
                    else
                    {

                        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                        {
                            ddlCustomerName.Text = ddlCompany.Text.Trim();


                        }

                        return true;
                    }
                }





            }

            catch (Exception ex)
            {

                return true;
            }







        }


        Label lblViaCustName = null;
        Label lblViaCustMobName = null;
        TextBox txtViaCustName = null;
        TextBox txtViaCustMobName = null;
        private void CreateViaPanel()
        {

            if (pnlVia != null)
                return;






            this.pnlVia = new Panel();

            this.label7 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.txtViaAddress = new UIX.AutoCompleteTextBox();
            this.btnClear = new Button();
            this.btnAddVia = new Button();
            this.ddlViaLocation = new UI.MyDropDownList();
            this.grdVia = new Telerik.WinControls.UI.RadGridView();
            this.txtviaPostCode = new UIX.AutoCompleteTextBox();
            this.lblViaLoc = new Label();
            this.lblFromViaPoint = new Label();
            ddlViaFromLocType = new ComboBox();

            //this.ddlViaFromLocType = new UI.MyDropDownList();


            // ((System.ComponentModel.ISupportInitialize)(this.pnlVia)).BeginInit();
            this.pnlVia.SuspendLayout();
            // ((System.ComponentModel.ISupportInitialize)(this.txtViaAddress)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.btnClear)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.btnAddVia)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlViaLocation)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia.MasterTemplate)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.txtviaPostCode)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblViaLoc)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblFromViaPoint)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlViaFromLocType)).BeginInit();



            this.pnlMain.Controls.Add(this.pnlVia);



            // Add Via Customer Name and Mobile No Controls
            lblViaCustName = new Label();
            lblViaCustMobName = new Label();
            txtViaCustName = new TextBox();
            txtViaCustMobName = new TextBox();



            this.lblViaCustName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaCustName.Location = new System.Drawing.Point(4, 30);
            this.lblViaCustName.Name = "lblViaCustName";
            this.lblViaCustName.Size = new System.Drawing.Size(80, 22);
            this.lblViaCustName.TabIndex = 137;
            this.lblViaCustName.Text = "Name";


            this.lblViaCustMobName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaCustMobName.Location = new System.Drawing.Point(4, 65);
            this.lblViaCustMobName.Name = "lblViaCustMobName";
            this.lblViaCustMobName.Size = new System.Drawing.Size(80, 22);
            this.lblViaCustMobName.TabIndex = 137;
            this.lblViaCustMobName.Text = "Mobile No";



            this.txtViaCustName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaCustName.Location = new System.Drawing.Point(90, 30);
            this.txtViaCustName.Name = "lblViaCustName";
            this.txtViaCustName.Size = new System.Drawing.Size(200, 22);
            this.txtViaCustName.TabIndex = 137;
            this.txtViaCustName.Text = "";


            this.txtViaCustMobName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaCustMobName.Location = new System.Drawing.Point(90, 65);
            this.txtViaCustMobName.Name = "lblViaCustName";
            this.txtViaCustMobName.Size = new System.Drawing.Size(200, 22);
            this.txtViaCustMobName.TabIndex = 137;
            this.txtViaCustMobName.Text = "";


            this.pnlVia.Controls.Add(this.lblViaCustName);
            this.pnlVia.Controls.Add(this.lblViaCustMobName);
            this.pnlVia.Controls.Add(this.txtViaCustName);
            this.pnlVia.Controls.Add(this.txtViaCustMobName);


            //


            this.pnlVia.BackColor = System.Drawing.Color.GhostWhite;
            this.pnlVia.Controls.Add(this.label7);
            this.pnlVia.Controls.Add(this.label3);
            this.pnlVia.Controls.Add(this.txtViaAddress);
            this.pnlVia.Controls.Add(this.btnClear);
            this.pnlVia.Controls.Add(this.btnAddVia);
            this.pnlVia.Controls.Add(this.ddlViaLocation);
            this.pnlVia.Controls.Add(this.grdVia);
            this.pnlVia.Controls.Add(this.txtviaPostCode);
            this.pnlVia.Controls.Add(this.lblViaLoc);
            this.pnlVia.Controls.Add(this.lblFromViaPoint);
            this.pnlVia.Controls.Add(this.ddlViaFromLocType);
            this.pnlVia.Location = new System.Drawing.Point(9, 230);
            this.pnlVia.Name = "pnlVia";
            // 
            // 
            // 
            //  this.pnlVia.RootElement.Opacity = 1;
            this.pnlVia.Size = new System.Drawing.Size(910, 220);
            this.pnlVia.TabIndex = 1;
            this.pnlVia.Visible = false;
            txtViaAddress.ListBoxElement.Font = new Font("Tahoma", 11, FontStyle.Bold);
            //   ((Telerik.WinControls.UI.RadPanelElement)(this.pnlVia.GetChildAt(0))).Text = "";
            // ((Telerik.WinControls.Primitives.BorderPrimitive)(this.pnlVia.GetChildAt(0).GetChildAt(1))).Width = 2F;
            //  ((Telerik.WinControls.Primitives.BorderPrimitive)(this.pnlVia.GetChildAt(0).GetChildAt(1))).BottomWidth = 1F;
            // 
            // label7
            // 
            this.label7.BackColor = System.Drawing.Color.Navy;
            this.label7.Image = Resources.Resource1.delete; //comment
            this.label7.Location = new System.Drawing.Point(864, 0);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(35, 24);
            this.label7.TabIndex = 8;
            this.label7.Click += new System.EventHandler(this.label7_Click);
            // 
            // label3
            // 
            this.label3.BackColor = System.Drawing.Color.Navy;
            this.label3.Dock = System.Windows.Forms.DockStyle.Top;
            this.label3.Font = new System.Drawing.Font("Segoe UI", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label3.ForeColor = System.Drawing.Color.White;
            this.label3.Location = new System.Drawing.Point(0, 0);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(910, 25);
            this.label3.TabIndex = 7;
            this.label3.Text = "Via Locations";
            this.label3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;




            // 
            // txtViaAddress
            // 
            this.txtViaAddress.BackColor = System.Drawing.Color.White;
            this.txtViaAddress.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
            this.txtViaAddress.DefaultHeight = 60;
            this.txtViaAddress.DefaultWidth = 370;
            this.txtViaAddress.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaAddress.ForceListBoxToUpdate = false;
            this.txtViaAddress.FormerValue = "";
            this.txtViaAddress.Location = new System.Drawing.Point(491, 38);
            this.txtViaAddress.Multiline = true;
            this.txtViaAddress.Name = "txtViaAddress";
            // 
            // 
            // 
            // this.txtViaAddress.RootElement.StretchVertically = true;
            this.txtViaAddress.SelectedItem = null;
            this.txtViaAddress.Size = new System.Drawing.Size(257, 53);
            this.txtViaAddress.TabIndex = 2;
            this.txtViaAddress.TabStop = false;
            this.txtViaAddress.Values = null;
            this.txtViaAddress.KeyDown += new System.Windows.Forms.KeyEventHandler(this.txtViaAddress_KeyDown);
            this.txtViaAddress.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtFromAddress_KeyPress);
            //   ((Telerik.WinControls.UI.RadTextBoxElement)(this.txtViaAddress.GetChildAt(0))).StretchVertically = true;
            ////    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).Width = 1F;
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            ////    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor3 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor4 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).InnerColor = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    // 
            // btnClear
            // 
            this.btnClear.Location = new System.Drawing.Point(771, 65);
            this.btnClear.Name = "btnClear";
            this.btnClear.Size = new System.Drawing.Size(82, 24);
            this.btnClear.TabIndex = 4;
            this.btnClear.Text = "Clear";
            this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
            // 
            // btnAddVia
            // 
            this.btnAddVia.Image = Resources.Resource1.add;
            this.btnAddVia.Location = new System.Drawing.Point(771, 33);
            this.btnAddVia.Name = "btnAddVia";
            this.btnAddVia.Size = new System.Drawing.Size(82, 24);
            this.btnAddVia.TabIndex = 3;
            this.btnAddVia.Text = "Add";
            this.btnAddVia.TextAlign = ContentAlignment.MiddleCenter;
            this.btnAddVia.ImageAlign = ContentAlignment.MiddleLeft;
            this.btnAddVia.Click += new System.EventHandler(this.btnAddVia_Click);
            // 
            // ddlViaLocation
            // 
            this.ddlViaLocation.Caption = null;
            this.ddlViaLocation.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlViaLocation.Location = new System.Drawing.Point(491, 38);
            this.ddlViaLocation.Name = "ddlViaLocation";
            this.ddlViaLocation.Property = null;
            this.ddlViaLocation.ShowDownArrow = true;
            this.ddlViaLocation.Size = new System.Drawing.Size(250, 27);
            this.ddlViaLocation.TabIndex = 0;
            // 
            // grdVia
            // 
            this.grdVia.Location = new System.Drawing.Point(7, 93);
            this.grdVia.Name = "grdVia";
            this.grdVia.Size = new System.Drawing.Size(881, 120);
            this.grdVia.TabIndex = 5;
            this.grdVia.Text = "radGridView1";
            this.grdVia.CellDoubleClick += new Telerik.WinControls.UI.GridViewCellEventHandler(this.grdVia_CellDoubleClick);
            // 
            // txtviaPostCode
            // 
            this.txtviaPostCode.BackColor = System.Drawing.Color.White;
            this.txtviaPostCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
            this.txtviaPostCode.DefaultHeight = 90;
            this.txtviaPostCode.DefaultWidth = 185;
            this.txtviaPostCode.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtviaPostCode.ForceListBoxToUpdate = false;
            this.txtviaPostCode.FormerValue = "";
            this.txtviaPostCode.Location = new System.Drawing.Point(492, 40);
            this.txtviaPostCode.MaxLength = 100;
            this.txtviaPostCode.Name = "txtviaPostCode";
            this.txtviaPostCode.SelectedItem = null;
            this.txtviaPostCode.Size = new System.Drawing.Size(195, 26);
            this.txtviaPostCode.TabIndex = 0;
            this.txtviaPostCode.TabStop = false;
            this.txtviaPostCode.Values = null;
            this.txtviaPostCode.TextChanged += new System.EventHandler(this.txtviaPostCode_TextChanged);
            // 
            // lblViaLoc
            // 
            this.lblViaLoc.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaLoc.Location = new System.Drawing.Point(349, 41);
            this.lblViaLoc.Name = "lblViaLoc";
            this.lblViaLoc.Size = new System.Drawing.Size(90, 22);
            this.lblViaLoc.TabIndex = 138;
            this.lblViaLoc.Text = "Via Location";
            // 
            // lblFromViaPoint
            // 
            this.lblFromViaPoint.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblFromViaPoint.Location = new System.Drawing.Point(4, 42);
            this.lblFromViaPoint.Name = "lblFromViaPoint";
            this.lblFromViaPoint.Size = new System.Drawing.Size(28, 22);
            this.lblFromViaPoint.TabIndex = 137;
            this.lblFromViaPoint.Text = "Via";
            this.lblFromViaPoint.Visible = false;
            // 
            // ddlViaFromLocType
            // 
            // this.ddlViaFromLocType.Caption = null;
            this.ddlViaFromLocType.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlViaFromLocType.Location = new System.Drawing.Point(1, 2);
            this.ddlViaFromLocType.Name = "ddlViaFromLocType";
            //  this.ddlViaFromLocType.Property = null;
            // this.ddlViaFromLocType.ShowDownArrow = true;
            this.ddlViaFromLocType.Size = new System.Drawing.Size(100, 18);
            this.ddlViaFromLocType.TabIndex = 1;
            this.ddlViaFromLocType.SelectedIndexChanged += new EventHandler(ddlViaFromLocType_SelectedIndexChanged);


            txtViaAddress.ListBoxElement.Width = 425;
            txtViaAddress.ListBoxElement.Height = 130;
            this.txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            txtViaAddress.DefaultHeight = 110;

            // ((System.ComponentModel.ISupportInitialize)(this.pnlVia)).EndInit();
            this.pnlVia.ResumeLayout(false);
            this.pnlVia.PerformLayout();
            //   ((System.ComponentModel.ISupportInitialize)(this.txtViaAddress)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.btnClear)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.btnAddVia)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlViaLocation)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.txtviaPostCode)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblViaLoc)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblFromViaPoint)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlViaFromLocType)).EndInit();



            FormatViaGrid();


            if (Program.dtCombos != null && Program.dtCombos.Tables.Count > 0)
            {

                FillCombo(Program.dtCombos.Tables[0].Copy(), ddlViaFromLocType, "LocationType", "Id");
            }
            else
            {
                ComboFunctions.FillLocationTypeCombo(ddlViaFromLocType);

            }
            ddlViaFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

            this.ddlViaFromLocType.BringToFront();

            pnlVia.BringToFront();
        }

        void btnViaNAT_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            if (txtViaAddress != null && txtViaAddress.Text.Trim().Length > 0 && args.ToggleState == ToggleState.On)
            {

                SearchNAT();
            }
        }

        private void SearchNAT()
        {
            try
            {

                if (EnablePOI)
                {

                    InitializeSearchPOIWorker();

                    if (POIWorker.IsBusy)
                    {
                        POIWorker.CancelAsync();
                        POIWorker.Dispose();
                        POIWorker = null;
                        GC.Collect();
                        InitializeSearchPOIWorker();

                    }


                    AddressTextChangePOI();
                }
            }
            catch
            {


            }
        }


        private void btnSelectVia_Click(object sender, EventArgs args)
        {
            btnSelectVia.Tag = btnSelectVia.Tag != null ? null : "1";


            ShowViaPoint(btnSelectVia.Tag != null ? true : false);
        }


        private void ShowViaPoint(bool show)
        {

            CreateViaPanel();

            if (show)
            {


                //btnSelectVia.Text = "Hide Via Point";
                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = true;
                //pnlBottom.Location = this.PnlNewBottomLocation;
                txtViaAddress.Select();
            }
            else
            {
                //btnSelectVia.Text = "Show Via Point";
                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = false;
                //    pnlMain.RootElement.Opacity = 1;
                //pnlBottom.Location = this.PnlOldBottomLocation;

                ddlCustomerName.Select();

            }

        }

        private void FocusOnViaAddress()
        {
            txtViaAddress.Select();

        }

        private void ddlViaFromLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillViaLocations();
        }

        private void FillViaLocations()
        {


            int locTypeId = ddlViaFromLocType.SelectedValue.ToInt();


            lblViaLoc.Text = "Via Address";
            txtViaAddress.Visible = true;

            ddlViaLocation.SelectedValue = null;
            // ddlViaLocation.Visible = false;

            // txtviaPostCode.Text = string.Empty;
            // txtviaPostCode.Visible = false;


            if (locTypeId == Enums.LOCATION_TYPES.BASE)
            {
                txtViaAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                //   txtViaAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                txtViaAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
                txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            }







        }



        private void btnAddVia_Click(object sender, EventArgs e)
        {
            AddViaPoint();
            FocusOnViAddress();
        }

        private void FocusOnViAddress()
        {
            ddlViaFromLocType.Select();
            SendKeys.Send("{TAB}");
            //txtViaAddress.Select();
        }

        private void AddViaPoint()
        {

            try
            {
                int LocTypeId = ddlViaFromLocType.SelectedValue.ToInt();

                string fromViaLabel = lblFromViaPoint.Text.Trim();
                string fromViaValue = ddlViaFromLocType.Text.Trim();

                int? toViaLocId = ddlViaLocation.SelectedValue.ToIntorNull();
                string ToViaLocLabel = lblViaLoc.Text.Trim();
                string toViaLoc = "";

                string viaCustName = txtViaCustName.Text.Trim().ToProperCase();
                string viaMobNo = txtViaCustMobName.Text.Trim();

                string msg = string.Empty;
                string msg2 = string.Empty;

                if (LocTypeId == 0)
                {
                    msg += "Required : Via Point." + Environment.NewLine;

                }
                else
                {
                    toViaLoc = txtViaAddress.Text.Trim();

                    if (toViaLoc.Length == 0)
                    {
                        //  toViaLoc = txtViaAddress.Text.Trim();
                        msg2 += "Required : Via Address." + Environment.NewLine;
                    }
                    //else if (LocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                    //{
                    //    toViaLoc = txtviaPostCode.Text.Trim();
                    //    msg2 += "Required : Via PostCode." + Environment.NewLine;

                    //}
                    //else
                    //{

                    //    toViaLoc = ddlViaLocation.Text.Trim();
                    //    msg2 += "Required : Via Location." + Environment.NewLine;

                    //}

                    if (string.IsNullOrEmpty(toViaLoc))
                    {
                        msg += msg2;
                    }

                }

                if (!string.IsNullOrEmpty(msg))
                {
                    ENUtils.ShowMessage(msg);
                    return;

                }

                GridViewRowInfo row;

                if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                    grdVia.CurrentRow = null;


                if (grdVia.CurrentRow != null)
                    row = grdVia.CurrentRow;
                else
                    row = grdVia.Rows.AddNew();



                row.Cells["FROMVIALOCTYPEID"].Value = LocTypeId;
                //  row.Cells[COLS.FROMTYPELABEL].Value = fromViaLabel;
                row.Cells["FROMTYPELABEL"].Value = viaCustName;

                row.Cells["FROMTYPEVALUE"].Value = viaMobNo;

                row.Cells["VIALOCATIONID"].Value = toViaLocId;
                row.Cells["VIALOCATIONLABEL"].Value = ToViaLocLabel;
                row.Cells["VIALOCATIONVALUE"].Value = toViaLoc;





                ClearViaDetails();


                CalculateAutoFares();


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void ClearViaDetails()
        {
            ddlViaFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
            grdVia.CurrentRow = null;
            txtViaAddress.Text = string.Empty;
            txtviaPostCode.Text = string.Empty;
            ddlViaLocation.SelectedValue = null;
            txtViaCustName.Text = string.Empty;
            txtViaCustMobName.Text = string.Empty;

            pnlVia.Select();
            txtViaAddress.Focus();
        }

        private void grdVia_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewDataRowInfo)
            {
                GridViewRowInfo row = grdVia.CurrentRow;

                ddlViaFromLocType.SelectedValue = row.Cells["FROMVIALOCTYPEID"].Value.ToInt();

                string locValue = row.Cells["VIALOCATIONVALUE"].Value.ToStr();

                txtViaAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtViaAddress.Text = locValue;
                txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                txtviaPostCode.TextChanged -= new EventHandler(txtviaPostCode_TextChanged);
                txtviaPostCode.Text = locValue;
                txtviaPostCode.TextChanged += new EventHandler(txtviaPostCode_TextChanged);

                ddlViaLocation.SelectedValue = row.Cells["VIALOCATIONID"].Value.ToInt();



                txtViaCustName.Text = row.Cells["FROMTYPELABEL"].Value.ToStr();
                txtViaCustMobName.Text = row.Cells["FROMTYPEVALUE"].Value.ToStr();


            }
        }



        private void btnSearch_Click(object sender, EventArgs e)
        {
            SearchBooking();

        }


        private void SearchBooking()
        {
            try
            {


                frmSearchBooking frm = new frmSearchBooking(ddlCustomerName.Text, txtCustomerPhoneNo.Text.Trim(), txtCustomerMobileNo.Text.Trim());

                frm.IsBookingEditMode = objMaster.PrimaryKeyValue == null ? false : true;
                frm.ShowDialog();


                if (frm.IsPickDetails && frm.IsSelected)
                {

                    ddlCustomerName.Text = frm.CustomerName.ToStr().Trim();
                    txtCustomerMobileNo.Text = frm.mobileNo.ToStr().Trim();
                    txtCustomerPhoneNo.Text = frm.phoneNo.ToStr().Trim();


                    if (frm.IsPermanentNotes.ToInt() == 1)
                    {
                        txtSpecialRequirements.Text = frm.SpecialReq.ToStr().Trim();
                        chkPermanentCustNotes.Checked = true;
                    }

                }
                else
                {

                    if (frm.IsSelected)
                    {

                        if (frm.SelectedCompanyId != null)
                        {
                            chkIsCompanyRates.Checked = true;
                            ddlCompany.SelectedValue = frm.SelectedCompanyId;
                        }


                        if (ddlBookingType.SelectedValue != null)
                        {

                            frm.bookingTypeId = ddlBookingType.SelectedValue.ToInt();

                        }

                        PickBookingComplete(frm.CustomerName, frm.phoneNo, frm.mobileNo, frm.fromLocTypeId, frm.toLocTypeId, frm.fromLocId, frm.toLocId, frm.from, frm.to, frm.fare, false, frm.bookingTypeId, frm.CustEmail);

                        numBookingFee.Value = frm.customerFare;


                        if (numCompanyFares != null)
                            numCompanyFares.Value = frm.companyFare;


                        if (frm.viaString.ToStr().Trim().Length > 0)
                        {

                            if (grdVia == null)
                            {
                                CreateViaPanel();

                            }

                            string[] viaArr = frm.viaString.ToStr().Trim().Split(new char[] { ',' });

                            grdVia.Rows.Clear();

                            GridViewRowInfo row = null;
                            for (int i = 0; i < viaArr.Count(); i++)
                            {


                                row = grdVia.Rows.AddNew();
                                row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;
                                row.Cells["FROMTYPELABEL"].Value = "";

                                row.Cells["FROMTYPEVALUE"].Value = "";

                                row.Cells["VIALOCATIONID"].Value = null;
                                row.Cells["VIALOCATIONLABEL"].Value = "Address";
                                row.Cells["VIALOCATIONVALUE"].Value = viaArr[i].Replace("Via " + (i + 1) + " : ", "").Trim();
                            }

                            btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                            btnSelectVia.BackColor = Color.DarkOrange;
                            //      btnSelectVia.NumberOfColors = 1;
                        }

                        if (frm.IsPermanentNotes.ToInt() == 1)
                        {
                            txtSpecialRequirements.Text = frm.SpecialReq.ToStr().Trim();
                            chkPermanentCustNotes.Checked = true;
                        }

                    }
                }

                frm.Dispose();

            }
            catch (Exception ex)
            {

            }

        }






        private void ddlDriver_SelectedIndexChanged(object sender, EventArgs e)
        {
            int? driverId = ddlDriver.SelectedValue.ToIntorNull();
            if (objMaster != null && objMaster.PrimaryKeyValue == null && driverId != null && chkAutoDespatch.Checked == false)
            {
                btnSaveNew.Text = "Save and Dispatch";

            }
            else
            {
                btnSaveNew.Text = "Save Booking    (HOME)";
            }




        }

        private void btnMultiBooking_Click(object sender, EventArgs e)
        {
            ShowMultiBooking();

        }

        private void ShowMultiBooking()
        {
            ResetBookingStatusId();

            string customerName = ddlCustomerName.Text.ToStr().Trim();
            string MobileNo = txtCustomerMobileNo.Text.Trim();
            string telephoneNo = txtCustomerPhoneNo.Text.Trim();

            string error = string.Empty;
            if (string.IsNullOrEmpty(customerName))
            {

                error += "Required : Customer Name " + Environment.NewLine;
            }
            if (string.IsNullOrEmpty(MobileNo) && string.IsNullOrEmpty(telephoneNo))
            {
                error += "Required : Phone No" + Environment.NewLine;
            }

            if (ddlPaymentType.SelectedValue == null)
            {

                error += "Required : Payment Type";
            }


            // ADDED ON 19/APRIL/2016 ON REQUEST OF DOUBLE O CARS (BOOKED BY SHOULD BE MANDATORY)
            if (ddlCompany.SelectedValue != null && txtAccountBookedBy != null && txtAccountBookedBy.Text.Trim().Length == 0 && txtAccountBookedBy.Visible == true)
            {
                error += "Required : Booked By";
            }


            if (!string.IsNullOrEmpty(error))
            {
                ENUtils.ShowMessage(error);
                return;

            }


            Booking obj = new Booking();

            obj.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();


            int FromlocTypeId = ddlFromLocType.SelectedValue.ToInt();
            int TolocTypeId = ddlToLocType.SelectedValue.ToInt();

            obj.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();

            obj.FromLocTypeId = FromlocTypeId.ToIntorNull();
            obj.ToLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
            // obj.FromLocId = ddlFromLocation.SelectedValue.ToIntorNull();
            //  obj.ToLocId = ddlToLocation.SelectedValue.ToIntorNull();
            obj.DriverId = ddlDriver.SelectedValue.ToIntorNull();


            obj.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
            obj.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
            obj.CompanyId = ddlCompany.SelectedValue.ToIntorNull();
            obj.DepartmentId = ddlDepartment != null ? ddlDepartment.SelectedValue.ToIntorNull() : null;
            obj.IsQuotation = chkQuotation.Checked;

            obj.IsCompanyWise = chkIsCompanyRates.Checked;

            obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


            obj.OrderNo = txtOrderNo != null ? txtOrderNo.Text.Trim() : "";
            obj.PupilNo = txtPupilNo != null ? txtPupilNo.Text.Trim() : "";


            if (opt_one.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;
            }
            else if (opt_return.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
            }
            else if (opt_waitreturn.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;

            }


            obj.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();




            if (dtpReturnPickupDate != null)
            {

                if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null && opt_return.Checked)
                {
                    obj.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                }
                else
                    obj.ReturnPickupDateTime = null;

                obj.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();

                if (numReturnFare != null)
                    obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

            }


            obj.FareRate = numFareRate.Value.ToDecimal();


            if (numReturnFare != null)
                obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

            obj.CustomerPrice = numBookingFee.Value.ToDecimal();


            obj.CompanyPrice = numCompanyFares != null ? numCompanyFares.Value.ToDecimal() : 0.00m;

            if (lblReturnCompanyPrice != null && opt_return.Checked)
            {

                obj.WaitingMins = numReturnCompanyFares.Value;
                //   obj.ReturnCustomerPrice = numReturnCustFare.Value.ToDecimal();
            }



            obj.CustomerId = ddlCustomerName.Tag.ToIntorNull();

            obj.CustomerName = customerName;

            obj.CustomerEmail = txtEmail.Text.Trim();
            obj.CustomerPhoneNo = telephoneNo;
            obj.CustomerMobileNo = MobileNo;

            obj.SpecialRequirements = txtSpecialRequirements.Text.Trim();


            // if (FromlocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromlocTypeId == Enums.LOCATION_TYPES.BASE)
            obj.FromAddress = txtFromAddress.Text.Trim();

            //else if (FromlocTypeId == Enums.LOCATION_TYPES.POSTCODE)
            //    obj.FromAddress = txtFromPostCode.Text.Trim();
            //else
            //{
            //    obj.FromAddress = ddlFromLocation.Text.Trim();
            //}



            obj.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
            obj.FromStreet = txtFromStreetComing.Text.Trim();
            obj.FromPostCode = txtFromPostCode.Text.Trim();


            //if (TolocTypeId == Enums.LOCATION_TYPES.ADDRESS || TolocTypeId == Enums.LOCATION_TYPES.BASE)
            obj.ToAddress = txtToAddress.Text.Trim();

            //else if (TolocTypeId == Enums.LOCATION_TYPES.POSTCODE)
            //    obj.ToAddress = txtToPostCode.Text.Trim();
            //else
            //{
            //    obj.ToAddress = ddlToLocation.Text.Trim();
            //}


            //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
            //{

            if (ddlPickupPlot.SelectedValue == null)
                obj.ZoneId = GetZoneId(obj.FromAddress);
            else
                obj.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

            if (ddlDropOffPlot.SelectedValue == null)
                obj.DropOffZoneId = GetZoneId(obj.ToAddress);
            else
                obj.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
            //    }




            obj.ToDoorNo = txtToFlightDoorNo.Text.Trim();
            obj.ToStreet = txtToStreetComing.Text.Trim();
            obj.ToPostCode = txtToPostCode.Text.Trim();

            obj.DistanceString = lblMap.Text;
            obj.AutoDespatch = chkAutoDespatch.Checked;


            int mins = numBeforeMinutes.Value.ToInt();

            //if (mins == 0)
            //{

            //    if (obj.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            //    {
            //        mins = AppVars.objPolicyConfiguration.AirportBookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
            //    }
            //    else
            //    {
            //        mins = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
            //    }

            //}

            //obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-mins);

            obj.AutoDespatch = chkAutoDespatch.Checked;
            obj.IsBidding = chkBidding.Checked;

            obj.IsCommissionWise = chkIsCommissionWise.Checked;
            obj.DriverCommission = numDriverCommission.Value.ToDecimal();
            obj.DriverCommissionType = ddlCommissionType.SelectedValue.ToStr().Trim();
            obj.CallRefNo = this.CallRefNo;



            if (chkTakenByAgent != null)
            {


                obj.AgentCommission = numAgentCommission.Value;
                obj.JobTakenByCompany = chkTakenByAgent.Checked;
                obj.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                obj.FromFlightNo = ddlAgentCommissionType.Text.Trim();
            }

            //if (AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool())
            //{

            //    decimal mile = General.CalculateDistanceFromBaseFull(obj.FromAddress.ToStr());

            //    obj.DeadMileage = mile;

            //    if (mile > 0 && mile < 1)
            //    {
            //        mile = 1;
            //    }
            //    else
            //    {
            //        mile = Math.Round(mile, 0);
            //    }

            //    obj.ExtraMile = mile;

            //}




            obj.SMSType = optSMSThirdParty != null && optSMSThirdParty.Checked ? Enums.SMSACCOUNT_TYPE.CLICKATELL : Enums.SMSACCOUNT_TYPE.MODEMSMS;

            if (pnlVia != null)
            {
                string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                IList<Booking_ViaLocation> savedList = obj.Booking_ViaLocations;
                List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                          select new Booking_ViaLocation
                                                          {
                                                              Id = r.Cells["ID"].Value.ToLong(),
                                                              BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                              ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                              ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                              ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                              ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                              ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                              ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                          }).ToList();


                Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);
            }

            obj.ServiceCharges = numBookingFee.Visible ? numBookingFee.Value : 0.00m;

            if (chkLead.Checked)
            {
                obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                obj.DeadMileage = numLead.Value;
            }



            if (chkQuotedPrice != null)
                obj.IsQuotedPrice = chkQuotedPrice.Checked;
            frmMultiBooking frm = new frmMultiBooking(obj);


            frm.ReturnCustomerFares = numReturnBookingFee.Value.ToDecimal();




            frm.ShowDialog();


            if (frm.Saved)
            {

                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                //  AppVars.frmMDI.RefreshRequiredDashBoard();




                this.Close();
            }

            frm.Dispose();
            frm = null;

            GC.Collect();

        }



        private void chkAutoDespatch_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {


            if (args.NewValue == ToggleState.On)
            {

                numBeforeMinutes.Enabled = true;

            }
            else
            {
                numBeforeMinutes.Enabled = false;

            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {

            ClearViaDetails();

        }



        private void txtFromPostCode_Validated(object sender, EventArgs e)
        {

            try
            {

                if (MapType == Enums.MAP_TYPE.NONE) return;




                string text = txtFromPostCode.Text.ToStr().Trim();
                string street = string.Empty;
                if (!string.IsNullOrEmpty(text))
                {
                    //if (UseGoogleMap)
                    //{
                    FillStreetFromPostCode(txtFromStreetComing, text, ref street);


                    if (!string.IsNullOrEmpty(street)) return;

                    string url = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + text + " UK&sensor=false";

                    string xml = string.Empty;
                    using (System.Net.WebClient wc = new System.Net.WebClient())
                    {
                        xml = wc.DownloadString(new Uri(url));

                    }

                    var xmlElm = System.Xml.Linq.XElement.Parse(xml);

                    street = (from elm in xmlElm.Descendants()
                              where elm.Name == "formatted_address"
                              select elm.Value).FirstOrDefault().ToStr();


                    street = street.Replace(text, "");
                    txtFromStreetComing.Text = street;


                    UpdateAutoCalculateFares();
                }

            }
            catch
            {


            }
        }



        private void FillStreetFromPostCode(TextBox streetTextBox, string text, ref string street)
        {
            try
            {
                if (EnablePOI)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        street = db.stp_GetByRoadLevelData(text, "", "", "s=").FirstOrDefault().DefaultIfEmpty().AddressLine1.ToStr().ToUpper();

                    }

                }
                //else
                //{
                //    street = AppVars.listOfAddress.FirstOrDefault(c => c.PostalCode.ToLower() == text.ToLower()).DefaultIfEmpty().AddressLine1;
                //}

                if (!string.IsNullOrEmpty(street) && street.Contains(text))
                {
                    street = street.Remove(street.IndexOf(text)).Trim();

                }

                if (string.IsNullOrEmpty(streetTextBox.Text))
                    streetTextBox.Text = street;
            }
            catch
            {


            }

        }




        private void txtToPostCode_Validated(object sender, EventArgs e)
        {
            try
            {
                if (MapType == Enums.MAP_TYPE.NONE) return;


                string text = txtToPostCode.Text.ToStr().Trim();
                string street = string.Empty;
                if (!string.IsNullOrEmpty(text))
                {

                    //if (UseGoogleMap)
                    //{
                    FillStreetFromPostCode(txtToStreetComing, text, ref street);

                    if (street.ToStr().Trim().Length > 0) return;

                    string url = "http://maps.googleapis.com/maps/api/geocode/xml?address=" + text + " UK&sensor=false";
                    string xml = string.Empty;

                    using (System.Net.WebClient wc = new System.Net.WebClient())
                    {
                        xml = wc.DownloadString(new Uri(url));

                    }

                    var xmlElm = System.Xml.Linq.XElement.Parse(xml);


                    street = (from elm in xmlElm.Descendants()
                              where elm.Name == "formatted_address"
                              select elm.Value).FirstOrDefault().ToStr();


                    street = street.Replace(text, "");


                    if (string.IsNullOrEmpty(txtToStreetComing.Text))
                        txtToStreetComing.Text = street;



                    UpdateAutoCalculateFares();

                }
            }
            catch
            {


            }
        }








        private void radToggleButton1_ToggleStateChanged_1(object sender, StateChangedEventArgs args)
        {
            SetFromBase();
        }




        private void FillKeyLocations(RadDropDownList combo, IList datasource)
        {

            combo.DataSource = datasource;
            combo.DisplayMember = "Location";
            combo.ValueMember = "Id";

            combo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            combo.DropDownStyle = RadDropDownStyle.DropDown;
            combo.SelectedIndex = -1;
            combo.NullText = "Select";
        }


        //private bool isTab = false;
        //private bool isEnter = false;


        //protected override void OnKeyDown(System.Windows.Forms.KeyEventArgs args)
        //{
        //    if (args.KeyCode == System.Windows.Forms.Keys.Enter)
        //    {
        //        isEnter = true;
        //    }
        //    else
        //        isEnter = false;

        //    base.OnKeyDown(args);
        //}

        //protected override bool ProcessCmdKey(ref System.Windows.Forms.Message msg, Keys keyData)
        //{
        //    if (keyData == Keys.Tab && keyData != Keys.Enter)
        //    {
        //        if (isEnter)
        //        {
        //            isTab = false;

        //            isEnter = false;
        //        }
        //        else
        //            isTab = true;

        //      //  isTab = !isTab;

        //    }
        //    else
        //        isTab =false;

        //    return base.ProcessCmdKey(ref msg, keyData);
        //}

        //protected override bool ProcessTabKey(bool forward)
        //{
        //    if (isTab)
        //    {
        //        isEnter = false;
        //        if (ddlVehicleType.ContainsFocus)
        //        {

        //            FocusOnToAddress();

        //        }
        //        else if (opt_one.ContainsFocus)
        //        {
        //            FocusOnVehicle();

        //        }
        //    }

        //    //if (isTab)
        //    //{
        //    //    if (forward)            // [Keys.Shift] was not used
        //    //    {
        //    //        // do something
        //    //    }
        //    //    else                    // [Keys.Shift] was used
        //    //    {
        //    //        // do something
        //    //    }

        //    //    // [return true;]  -- To indicate that a control is selected.
        //    //    // [return false;] -- Also, it happens that [return false;] causes the TabKey 
        //    //    //                    to be processed by the [OnKeyDown()] and related methods.
        //    //    return true;
        //    //    //return false;
        //    //}

        //    //if (isEnter && ddlVehicleType.ContainsFocus)
        //    //{
        //    //    isTab = true;

        //    //}

        //    return !isTab;
        //}



        private void frmBooking_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Control)
                {
                    if (e.KeyCode == Keys.S)
                    {

                        if (objMaster.Current != null && btnSaveNew.Enabled == false)
                        {
                            return;
                        }

                        //if (objMaster.Current != null && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP))
                        //{
                        //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" &&
                        //    (c.functionId == "LOCK COMPLETED BOOKING" || c.functionId == "LOCK CANCELLED BOOKING" || c.functionId == "LOCK NOFARE BOOKING")) > 0)
                        //    {
                        //        return;
                        //    }
                        //}

                        SaveAndClose();
                    }

                    if (e.KeyCode == Keys.M)
                    {

                        MapReport();
                    }
                    if (e.KeyCode == Keys.T)
                    {

                        TrackDriver();
                    }
                    
                    else if (e.KeyCode == Keys.A)
                    {

                        //  if (DisableAccountCheck() == false)
                        // {

                        if (chkIsCompanyRates.Checked == false)
                        {
                            chkIsCompanyRates.Checked = true;
                            // ddlCompany.ShowDropDown();
                            ddlCompany.Select();
                        }
                        else
                        {
                            chkIsCompanyRates.Checked = false;
                            //  ddlCompany.CloseDropDown();

                        }
                        //  }
                    }
                    //if (e.KeyCode == Keys.OemQuestion && ddlCustomerName.Text.Trim().Length == 0)
                    //{
                    //    ddlCustomerName.Text = "XXX";
                    //    FocusOnCustomer();

                    //}
                }
                else if (e.Alt)
                {


                    if (e.KeyCode == Keys.M)
                    {
                        if (chkAutoDespatch.Checked)
                        {
                            chkAutoDespatch.Checked = false;

                        }
                        else
                        {

                            chkAutoDespatch.Checked = true;
                        }
                    }
                    else if (e.KeyCode == Keys.B)
                    {
                        if (chkBidding.Checked)
                        {
                            chkBidding.Checked = false;

                        }
                        else
                        {

                            chkBidding.Checked = true;
                        }

                    }
                    else if (e.KeyCode == Keys.Q)
                    {

                        SearchLocation();
                    }
                    else if (e.KeyCode == Keys.F)
                    {

                        FocusOnFare();
                    }
                    else if (e.KeyCode == Keys.D)
                    {

                        SetAsDirected();
                    }
                    else if (e.KeyCode == Keys.P)
                    {

                        FocusOnFromAddress();

                    }
                    else if (e.KeyCode == Keys.O)
                    {

                        FocusOnToAddress();

                    }
                    else if (e.KeyCode == Keys.V)
                    {

                        FocusOnVehicle();


                    }
                    else if (e.KeyCode == Keys.L)
                    {

                        chkLead.Checked = true;
                        numLead.Focus();

                    }

                }


                else
                {

                    if (e.KeyCode == Keys.F1)
                    {
                        if (txtToAddress.Focused)
                        {
                            SetToBase();
                        }
                        else
                        {
                            SetFromBase();
                        }

                        UpdateAutoCalculateFares();
                    }
                    else if (e.KeyCode == Keys.F2)
                    {


                        btnSelectVia.Tag = btnSelectVia.Tag != null ? null : "1";
                        ShowViaPoint(btnSelectVia.Tag != null ? true : false);
                    }

                    else if (e.KeyCode == Keys.F3)
                    {

                        //InitializeStationsPanel();

                        //btnStations.ToggleState = btnHospital.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;
                        //ShowStations(btnStations.ToggleState);
                        ShowMap();
                    }
                    else if (e.KeyCode == Keys.F4)
                    {
                        if (IsClickableFares)
                            return;

                        IsClickableFares = true;
                        IsF4 = true;
                        UpdateAutoCalculateFares();
                        IsF4 = false;
                        FocusOnFare();
                    }

                    else if (e.KeyCode == Keys.F5)
                    {
                        //InitializeHospitalPanel();

                        //btnHospital.ToggleState = btnHospital.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                        //ShowHospitals(btnHospital.ToggleState);
                        AddNotes();

                    }
                    else if (e.KeyCode == Keys.F6)
                    {

                        //InitializeHotelPanel();

                        //btnHotels.ToggleState = btnHotels.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                        //ShowHotels(btnHotels.ToggleState);

                        chkQuotation.Checked = !chkQuotation.Checked;


                    }
                    else if (e.KeyCode == Keys.F7)
                    {
                        SearchBooking();
                    }
                    else if (e.KeyCode == Keys.F8)
                    {
                        if (btnMultiBooking.Enabled)
                        {
                            ShowMultiBooking();
                        }
                    }
                    else if (e.KeyCode == Keys.F9)
                    {

                        if (chkReverse.Checked == false)
                        {
                            chkReverse.Checked = true;
                        }
                        else
                        {
                            chkReverse.Checked = false;
                        }



                    }
                    //else if (e.KeyCode == Keys.Insert)
                    //{
                    //    SetAsDirected();
                    //}
                    else if (e.KeyCode == Keys.F10)
                    {


                        AccountCode();
                    }
                    else if (e.KeyCode == Keys.Escape)
                    {





                        if (pnlVia == null || pnlVia.Visible == false)
                        {
                            if (DialogResult.Yes == MessageBox.Show("Are you sure you want to close?? ", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                            {
                                this.Close();
                            }
                        }
                        else
                        {

                            btnSelectVia.Tag = null;

                            if (pnlVia != null)
                            {
                                // pnlVia.Visible = false;
                                ShowViaPoint(false);

                            }
                        }


                    }
                    else if (e.KeyCode == Keys.F11)
                    {
                        if (CheckDefaultValidation())
                        {
                            SendEmail(true);
                        }
                    }
                    //else if (e.KeyCode == Keys.F4)
                    //{
                    //    //if (AppVars.objPolicyConfiguration.EnablePDA.ToBool())
                    //    //{
                    //    //    object o = "LoadNearestMap";
                    //    //    SendAsyncRequest(o);
                    //    //}
                    //    //  LoadNearestMap();

                    //   // InitializetownsPanel();

                    //   // btnTowns.ToggleState = btnTowns.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                    //   // Showtowns(btnTowns.ToggleState);



                    //}
                    else if (e.KeyCode == Keys.F12)
                    {
                        if (radPageView1.SelectedTab == tabCurrentBooking)
                            radPageView1.SelectedTab = this.tabNearestDrivers;
                        else
                            radPageView1.SelectedTab = this.tabCurrentBooking;
                        // LoadNearestMap();
                    }
                    else if (e.KeyCode == Keys.Home || e.KeyCode == Keys.End)
                    {


                        if (objMaster.Current != null &&  btnSaveNew.Enabled == false)
                        {
                            return;
                        }


                        //if (objMaster.Current != null && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP))
                        //{
                        //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" &&
                        //    (c.functionId == "LOCK COMPLETED BOOKING" || c.functionId == "LOCK CANCELLED BOOKING" || c.functionId == "LOCK NOFARE BOOKING")) > 0)
                        //    {

                        //        return;
                        //    }
                        //}


                        if (objMaster.Current == null || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING)
                            this.bookingstatusId = Enums.BOOKINGSTATUS.WAITING;

                        else
                            ResetBookingStatusId();

                        FocusOnCustomer();



                        if (objMaster.PrimaryKeyValue == null ||
                            (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.DISPATCHED
                            && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.CANCELLED
                            && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.NOPICKUP))
                        {



                            if (pnlAutoDespatch.Visible)
                            {

                                if (e.KeyCode == Keys.End)
                                {

                                    chkAutoDespatch.Checked = true;
                                    chkBidding.Checked = true;

                                }
                                else
                                {
                                    chkAutoDespatch.Checked = false;
                                    chkBidding.Checked = false;
                                }
                            }

                        }

                        SaveAndClose();

                    }


                }
            }
            catch
            {


            }

        }

        int lastFocusOnAccounAddress = 0;
        private void AccountCode()
        {

            try
            {
                //if (DisableAccountCheck() == false)
                //{



                if (txtFromAddress.Focused)
                {
                    lastFocusOnAccounAddress = 1;

                }
                else if (txtToAddress.Focused)
                {

                    lastFocusOnAccounAddress = 2;
                }
                else
                    lastFocusOnAccounAddress = 0;

                frmBookingAccountCode Acccode = new frmBookingAccountCode();
                Acccode.ShowDialog();

                if (Acccode.ID != 0)
                {
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = Acccode.ID;
                }
                Acccode.Dispose();
                //  }
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }
        private void SetLastFocus()
        {

            if (LastFocus == 1)
            {
                FocusOnFromAddress();

            }
            else if (LastFocus == 2)
            {
                FocusOnToAddress();

            }
            else
            {
                FocusOnCustomer();

            }


        }

        private void SetAsDirected()
        {
            if (txtToAddress.Focused)
            {
                txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtToAddress.Text = "AS DIRECTED";
                SetDropOffZone("AS DIRECTED");
                FocusOnCustomer();
                txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                InitializeJourneyTimePanel();

            }

        }

        private void InitializeJourneyTimePanel()
        {

            if (lblJourneyTime != null) return;

            this.lblJourneyTime = new Label();
            this.numJourneyTime = new NumericUpDown();

            //  ((System.ComponentModel.ISupportInitialize)(this.lblJourneyTime)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.numJourneyTime)).BeginInit();



            // 
            // lblJourneyTime
            // 
            this.lblJourneyTime.BackColor = this.pnlOtherCharges.BackColor;
            this.lblJourneyTime.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
            this.lblJourneyTime.ForeColor = System.Drawing.Color.Black;
            this.lblJourneyTime.Location = new System.Drawing.Point(350, 5);
            this.lblJourneyTime.Name = "lblJourneyTime";
            this.lblJourneyTime.Visible = true;
            // 
            // 
            // 
            // this.lblJourneyTime.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblJourneyTime.Size = new System.Drawing.Size(149, 20);
            this.lblJourneyTime.TabIndex = 240;
            this.lblJourneyTime.Text = "Journey Time(mins)";
            //  this.lblJourneyTime.TextAlignment = System.Drawing.ContentAlignment.TopRight;
            // 
            // numJourneyTime
            // 
            //   this.numJourneyTime.EnableKeyMap = true;
            this.numJourneyTime.Font = new System.Drawing.Font("Tahoma", 10.25F);
            this.numJourneyTime.InterceptArrowKeys = false;
            this.numJourneyTime.Visible = true;
            this.numJourneyTime.Location = new System.Drawing.Point(500, 5);
            this.numJourneyTime.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numJourneyTime.Name = "numJourneyTime";
            // 
            // 
            // 
            //  this.numJourneyTime.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //  this.numJourneyTime.ShowBorder = true;
            //  this.numJourneyTime.ShowUpDownButtons = false;
            this.numJourneyTime.Size = new System.Drawing.Size(64, 24);
            this.numJourneyTime.TabIndex = 239;
            this.numJourneyTime.TabStop = false;
            this.numJourneyTime.DecimalPlaces = 0;
            //  this.numJourneyTime.SpinElement.ValueChanging += new ValueChangingEventHandler(SpinElement_ValueChanging); //comment
            //   ((Telerik.WinControls.UI.RadSpinElement)(this.numJourneyTime.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
            //   ((Telerik.WinControls.Primitives.FillPrimitive)(this.numJourneyTime.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // //  ((Telerik.WinControls.UI.RadTextBoxItem)(this.numJourneyTime.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0";
            //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numJourneyTime.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));


            this.pnlPaymentMode.Controls.Add(lblJourneyTime);
            this.pnlPaymentMode.Controls.Add(numJourneyTime);


            //  ((System.ComponentModel.ISupportInitialize)(this.lblJourneyTime)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.numJourneyTime)).EndInit();
            // this.ResumeLayout(false);




        }

        private void GetFareByJourneyTime(decimal journeyMins)
        {

            if (IsDisplayingRecord) return;

            try
            {

                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();
                int companyId = ddlCompany.SelectedValue.ToInt();


                decimal fares = 0.00m;
                decimal agentFares = 0.00m;
                decimal companyFares = 0.00m;

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    //  var objFare = db.Fares.FirstOrDefault(c => c.VehicleTypeId == vehicleTypeId && (companyId == 0 || c.CompanyId == companyId));
                    var objFare = db.Fares.FirstOrDefault(c => c.VehicleTypeId == vehicleTypeId && ((companyId == 0 && c.CompanyId == null) || c.CompanyId == companyId));

                    if (objFare != null)
                    {

                        decimal charges = journeyMins * objFare.PerMinJourneyCharges.ToDecimal();

                        if (companyId != 0)
                        {
                            var objCompany = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                            if (objCompany != null)
                            {
                                if (objCompany.IsAgent.ToBool() && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH)
                                {
                                    companyFares = charges;

                                    if (objCompany.IsAmountWiseComm.ToBool())
                                        agentFares = objCompany.CommissionPerBooking.ToDecimal();

                                    else
                                        agentFares = (charges * objCompany.CommissionPerBooking.ToDecimal()) / 100;


                                    agentFares = Math.Round(agentFares * 4, MidpointRounding.ToEven) / 4;

                                    fares = companyFares - agentFares;

                                }
                                else
                                {
                                    companyFares = charges;

                                    if (objCompany.DriverFareReductionType.ToStr().ToLower() == "percent")
                                        fares = charges - (charges * objCompany.DriverFareReductionValue.ToDecimal()) / 100;
                                    else
                                        fares = charges - objCompany.DriverFareReductionValue.ToDecimal();


                                    fares = Math.Round(fares * 4, MidpointRounding.ToEven) / 4;
                                }



                            }


                        }
                        else
                        {

                            fares = charges;

                        }


                        numFareRate.Value = fares;

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = fares;

                        }


                        numBookingFee.Value = fares;

                        if (numReturnBookingFee != null)
                        {
                            numReturnBookingFee.Value = fares;
                        }


                        if (numAgentCommission != null)
                        {
                            numAgentCommission.Value = agentFares;

                        }


                        if (numCompanyFares != null)
                        {
                            numCompanyFares.Value = companyFares;

                        }

                        if (numReturnCompanyFares != null)
                        {
                            numReturnCompanyFares.Value = companyFares;

                        }



                    }


                }

            }
            catch
            {


            }


        }


        private void SetFromBase()
        {

            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.BASE)
            {
                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
            }
            else
            {
                PickFromBase();

                //txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                //txtFromAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                //txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            }

        }


        private void SetSubCompany()
        {
            try
            {
                if (AppVars.objSubCompany == null || AppVars.objSubCompany.CompanyName.ToStr().Trim().Length == 0)
                {


                    AppVars.objSubCompany = General.GetObject<Gen_SubCompany>(c => c.Id == 1);



                }

            }
            catch
            {


            }


        }

        private void PickFromBase()
        {
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            SetSubCompany();
            txtFromAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


        }


        private void SetToBase()
        {

            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.BASE)
            {
                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
            }
            else
            {
                PickToBase();
            }

        }


        private void PickToBase()
        {
            txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            SetSubCompany();
            txtToAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
            txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        }



        private void btnCancelBooking_Click(object sender, EventArgs e)
        {

            try
            {


                if (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.CANCELLED)
                {

                    //if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to Cancel Booking ?", "Cancel Booking", MessageBoxButtons.YesNo))
                    //{

                    if (objMaster.PrimaryKeyValue != null)
                    {

                        frmCancelReason frm = new frmCancelReason(objMaster.PrimaryKeyValue.ToLong(), objMaster.Current.CancelReason.ToStr());
                        frm.StartPosition = FormStartPosition.CenterParent;
                        frm.ShowDialog();
                        frm.Dispose();

                        GC.Collect();


                        //  RefreshBookingList();
                        //  AppVars.frmMDI.RefreshDashBoard();

                    }

                    //}
                }
                else
                {
                    if (objMaster.PrimaryKeyValue != null)
                    {

                        frmCancelReason frm = new frmCancelReason(objMaster.PrimaryKeyValue.ToLong(), objMaster.Current.CancelReason.ToStr());
                        frm.ShowDialog();
                        frm.Dispose();
                    }
                }

            }

            catch (Exception ex)
            {


            }

        }



        private void ddlFromLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillFromLocations();

        }

        private void ddlToLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillToLocations();

            if (ddlBookingType.SelectedValue != null)
                SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());
        }

        private void ddlCustomerName_Validated(object sender, EventArgs e)
        {
            SetCustomerNameInProperCase(ddlCustomerName.Text.ToStr().Trim());


        }

        private void SetCustomerNameInProperCase(string customerName)
        {
            ddlCustomerName.Text = customerName.ToUpper();


            //  SetAccountByCustomer();

        }


        //private void SetAccountByCustomer()
        //{
        //    if (ddlPaymentType.Items.Count(c => c.Text.Contains("Room Charge")) > 0)
        //    {

        //        if (ddlCustomerName.Text.Trim().Length > 0 && ddlCompany.SelectedValue == null)
        //        {


        //            int? companyId = General.GetObject<Customer>(c => c.CompanyId != null && c.Name.ToUpper() == ddlCustomerName.Text.Trim()).DefaultIfEmpty().CompanyId;


        //            if (companyId != null)
        //            {
        //                chkIsCompanyRates.Checked = true;
        //                ddlCompany.SelectedValue = companyId;

        //            }

        //        }
        //    }

        //}





        private void txtviaPostCode_TextChanged(object sender, EventArgs e)
        {

            if (MapType == Enums.MAP_TYPE.NONE) return;

            AutoCompleteTextBox viaPostCode = (AutoCompleteTextBox)sender;


            string temp = string.Empty;
            string text = viaPostCode.Text;
            //  if (text.Length > 0)
            if (text.Length > 2)
            {


                temp = text.ToUpper();



                if (viaPostCode.SelectedItem != null && viaPostCode.SelectedItem == viaPostCode.Text)
                {
                    viaPostCode.Values = null;
                    viaPostCode.ResetListBox();
                    return;


                }


                text = text.ToLower();
                viaPostCode.ListBoxElement.Items.Clear();

                //viaPostCode.ListBoxElement.Items.AddRange((from a in AppVars.listOfAddress
                //                                           where a.PostalCode.ToLower().StartsWith(text)
                //                                           select a.PostalCode
                //              ).OrderBy(a => a).Distinct().ToArray<string>());

                //if (viaPostCode.ListBoxElement.Items.Count > 0)
                //{

                //    viaPostCode.ShowListBox();
                //}
                //else
                //    viaPostCode.ResetListBox();

            }
        }

        private void btnCustomerLister_Click(object sender, EventArgs e)
        {
            SearchBooking();
        }

        private void txtFromAddress_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {

                if (e.KeyCode == Keys.Enter)
                {

                    if (txtFromAddress.Text == "BASX")
                    {
                        ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;

                    }

                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtFromAddress.Text.ToStr().ToLower().Trim()) && txtFromAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtFromAddress.SelectedItem = txtFromAddress.ListBoxElement.Items[0].ToStr();
                        txtFromAddress.Text = txtFromAddress.SelectedItem;
                    }


                    e.SuppressKeyPress = true;

                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        FocusOnFromDoor();
                    }
                    else
                    {

                        FocusOnToAddress();
                    }
                }
                //if (e.KeyCode == Keys.Home)
                //{
                //    ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                //    txtFromAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                //}
                if (e.KeyCode == Keys.Up && !txtFromAddress.ListBoxElement.Visible)
                {
                    SendKeys.Send("{Left}");
                }
                else if (e.KeyCode == Keys.Left)
                {
                    int Position = txtFromAddress.SelectionStart;
                    if (Position == 0)
                    {

                        FocusOnFromDoor();
                    }
                }
                else if (e.KeyCode == Keys.Down && !txtFromAddress.ListBoxElement.Visible)
                {
                    e.SuppressKeyPress = true;
                    FocusOnToAddress();
                }
                else if (e.KeyCode == Keys.Right)
                {
                    if (txtFromAddress.Text.Length == 0)
                    {
                        FocusOnFromDoor();
                        // FocusOnToAddress();
                    }
                }

            }
            catch (Exception ex)
            {


            }
        }

        private void button1_Click(object sender, EventArgs e)
        {

        }



        int LastFocus = 0;

        private void txtFromAddress_Enter(object sender, EventArgs e)
        {
            LastFocus = 1;

            txtFromAddress.Tag = txtFromAddress.Text;
        }

        private void txtToAddress_Enter(object sender, EventArgs e)
        {
            LastFocus = 2;
            txtToAddress.Tag = txtToAddress.Text;

        }






        private void txtToAddress_KeyDown(object sender, KeyEventArgs e)
        {

            try
            {

                if (e.KeyCode == Keys.Enter)
                {

                    if (txtToAddress.Text == "BASX")
                    {
                        ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                    }
                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtToAddress.Text.ToStr().ToLower().Trim()) && txtToAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtToAddress.SelectedItem = txtToAddress.ListBoxElement.Items[0].ToStr();
                        txtToAddress.Text = txtToAddress.SelectedItem;
                    }

                    e.SuppressKeyPress = true;
                    ddlCustomerName.Focus();
                    //fwdkh3 FocusOnVehicle();

                    ////   ddlCustomerName.Focus();
                }
                else if (e.KeyCode == Keys.Insert)
                {

                    FocusOnFromAddress();
                }

                else if (e.KeyCode == Keys.Left)
                {
                    int Position = txtToAddress.SelectionStart;
                    if (Position == 0)
                    {
                        FocusOnFromAddress();
                    }
                }
                else if (e.KeyCode == Keys.Up)
                {
                    //int Position = txtToAddress.SelectionStart;
                    //if (Position == 0)
                    //{
                    //    e.SuppressKeyPress = true;
                    //    //  FocusOnFromAddress();
                    //    SendKeys.Send("{Up}");
                    //    ////   ddlCustomerName.Focus();
                    //    //   SendKeys.Send("{Right}");
                    //}
                    //   FocusOnFromDoor();
                    // SendKeys.Send("{Up}");
                }
                //if (e.KeyCode == Keys.Up && !txtToAddress.ListBoxElement.Visible)
                //{
                //    FocusOnToDoor();
                //   // SendKeys.Send("{Up}");
                //}
                else if (e.KeyCode == Keys.Down)
                {


                    if (txtToAddress.ListBoxElement.Visible == false)
                    {
                        // int a = txtToAddress.SelectionStart = txtToAddress.Text.Length;
                        e.SuppressKeyPress = true;
                        ddlCustomerName.Focus();
                    }
                }
                //fwdkh3

            }
            catch (Exception ex)
            {


            }
        }

        private void FocusOnVehicle()
        {
            ddlVehicleType.Focus();

        }


        private void FocusOnToDoor()
        {
            txtToFlightDoorNo.Focus();

        }

        private void btnMultiVehicle_Click(object sender, EventArgs e)
        {
            ShowMultiVehicleBooking();
        }


        private void ShowMultiVehicleBooking()
        {

            try
            {
                ResetBookingStatusId();

                string customerName = ddlCustomerName.Text.ToStr().Trim();
                string MobileNo = txtCustomerMobileNo.Text.Trim();
                string telephoneNo = txtCustomerPhoneNo.Text.Trim();

                string error = string.Empty;
                if (string.IsNullOrEmpty(customerName))
                {

                    error += "Required : Customer Name " + Environment.NewLine;
                }
                if (string.IsNullOrEmpty(MobileNo) && string.IsNullOrEmpty(telephoneNo))
                {
                    error += "Required : Phone No" + Environment.NewLine;
                }

                if (ddlPaymentType.SelectedValue == null)
                {

                    error += "Required : Payment Type";
                }

                // ADDED ON 19/APRIL/2016 ON REQUEST OF DOUBLE O CARS (BOOKED BY SHOULD BE MANDATORY)
                if (ddlCompany.SelectedValue != null && txtAccountBookedBy != null && txtAccountBookedBy.Text.Trim().Length == 0 && txtAccountBookedBy.Visible == true)
                {
                    error += "Required : Booked By";
                }


                if (!string.IsNullOrEmpty(error))
                {
                    ENUtils.ShowMessage(error);
                    return;

                }


                Booking obj = new Booking();





                obj.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();
                obj.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();

                int FromlocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int TolocTypeId = ddlToLocType.SelectedValue.ToInt();

                obj.BookingDate = DateTime.Now;

                obj.FromLocTypeId = FromlocTypeId.ToIntorNull();
                obj.ToLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                obj.FromLocId = null;
                obj.ToLocId = null;


                if (ddlReturnFromAirport != null)
                    obj.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();

                obj.DriverId = ddlDriver.SelectedValue.ToIntorNull();

                obj.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
                obj.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
                obj.CompanyId = ddlCompany.SelectedValue.ToIntorNull();
                obj.DepartmentId = ddlDepartment != null ? ddlDepartment.SelectedValue.ToIntorNull() : null;


                obj.IsQuotation = chkQuotation.Checked;

                obj.IsCompanyWise = chkIsCompanyRates.Checked;


                obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


                obj.OrderNo = txtOrderNo != null ? txtOrderNo.Text.Trim() : "";
                obj.PupilNo = txtPupilNo != null ? txtPupilNo.Text.Trim() : "";


                if (opt_one.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;
                }
                else if (opt_return.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                }
                else if (opt_waitreturn.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;

                }





                obj.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();




                if (dtpReturnPickupDate != null)
                {

                    if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null && opt_return.Checked)
                    {
                        obj.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                    }
                    else
                        obj.ReturnPickupDateTime = null;

                    obj.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();

                    if (numReturnFare != null)
                        obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

                }




                obj.FareRate = numFareRate.Value.ToDecimal();


                if (numCompanyFares != null)
                    obj.CompanyPrice = numCompanyFares.Value.ToDecimal();


                obj.CustomerPrice = numBookingFee.Value.ToDecimal();

                if (numReturnFare != null)
                    obj.ReturnFareRate = numReturnFare.Value.ToDecimal();


                if (lblReturnCompanyPrice != null && opt_return.Checked)
                {
                    obj.WaitingMins = numReturnCompanyFares.Value;
                    //  obj.ReturnCustomerPrice = numReturnCustFare.Value.ToDecimal();
                }

                obj.CustomerId = ddlCustomerName.Tag.ToIntorNull();

                obj.CustomerName = customerName;
                obj.CustomerPhoneNo = telephoneNo;
                obj.CustomerMobileNo = MobileNo;
                obj.CustomerEmail = txtEmail.Text.Trim();

                obj.SpecialRequirements = txtSpecialRequirements.Text.Trim();


                //    if (FromlocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromlocTypeId == Enums.LOCATION_TYPES.BASE)
                obj.FromAddress = txtFromAddress.Text.Trim();

                //else if (FromlocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    obj.FromAddress = txtFromPostCode.Text.Trim();
                //else
                //{
                //    obj.FromAddress = ddlFromLocation.Text.Trim();
                //}



                obj.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
                obj.FromStreet = txtFromStreetComing.Text.Trim();
                obj.FromPostCode = txtFromPostCode.Text.Trim();


                //  if (TolocTypeId == Enums.LOCATION_TYPES.ADDRESS || TolocTypeId == Enums.LOCATION_TYPES.BASE)
                obj.ToAddress = txtToAddress.Text.Trim();

                //else if (TolocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    obj.ToAddress = txtToPostCode.Text.Trim();
                //else
                //{
                //    obj.ToAddress = ddlToLocation.Text.Trim();
                //}


                //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
                //{

                if (ddlPickupPlot.SelectedValue == null)
                    obj.ZoneId = GetZoneId(obj.FromAddress);
                else
                    obj.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

                if (ddlDropOffPlot.SelectedValue == null)
                    obj.DropOffZoneId = GetZoneId(obj.ToAddress);
                else
                    obj.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
                //    }


                obj.ToDoorNo = txtToFlightDoorNo.Text.Trim();
                obj.ToStreet = txtToStreetComing.Text.Trim();
                obj.ToPostCode = txtToPostCode.Text.Trim();


                obj.IsCommissionWise = chkIsCommissionWise.Checked;
                obj.DriverCommission = numDriverCommission.Value.ToDecimal();
                obj.DriverCommissionType = ddlCommissionType.SelectedValue.ToStr().Trim();
                obj.CallRefNo = this.CallRefNo;

                obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


                if (chkTakenByAgent != null)
                {


                    obj.AgentCommission = numAgentCommission.Value;
                    obj.JobTakenByCompany = chkTakenByAgent.Checked;
                    obj.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                    obj.FromFlightNo = ddlAgentCommissionType.Text.Trim();
                }


                if (string.IsNullOrEmpty(obj.FromAddress))
                {
                    error += "Required : Pickup Point" + Environment.NewLine;
                }

                if (string.IsNullOrEmpty(obj.ToAddress))
                {
                    error += "Required : Destination" + Environment.NewLine;
                }



                if (!string.IsNullOrEmpty(error))
                {
                    ENUtils.ShowMessage(error);
                    return;

                }


                obj.AutoDespatch = chkAutoDespatch.Checked;


                //int mins = numBeforeMinutes.Value.ToInt();

                //if (mins == 0)
                //{

                //    if (obj.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                //    {
                //        mins = AppVars.objPolicyConfiguration.AirportBookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
                //    }
                //    else
                //    {
                //        mins = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
                //    }

                //}

                //obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-mins);

                obj.AutoDespatch = chkAutoDespatch.Checked;
                obj.IsBidding = chkBidding.Checked;

                //if (AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool())
                //{

                //    decimal mile = General.CalculateDistanceFromBaseFull(obj.FromAddress.ToStr());

                //    obj.DeadMileage = mile;

                //    if (mile > 0 && mile < 1)
                //    {
                //        mile = 1;
                //    }
                //    else
                //    {
                //        mile = Math.Round(mile, 0);
                //    }

                //    obj.ExtraMile = mile;

                //}


                if (chkLead.Checked)
                {
                    obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                    obj.DeadMileage = numLead.Value;
                }


                obj.SMSType = optSMSThirdParty != null && optSMSThirdParty.Checked ? Enums.SMSACCOUNT_TYPE.CLICKATELL : Enums.SMSACCOUNT_TYPE.MODEMSMS;

                obj.DistanceString = lblMap.Text;

                if (pnlVia != null)
                {
                    string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                    IList<Booking_ViaLocation> savedList = obj.Booking_ViaLocations;
                    List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                              select new Booking_ViaLocation
                                                              {
                                                                  Id = r.Cells["ID"].Value.ToLong(),
                                                                  BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                                  ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                                  ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                                  ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                                  ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                                  ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                                  ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                              }).ToList();


                    Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);

                }


                if (chkQuotedPrice != null)
                    obj.IsQuotedPrice = chkQuotedPrice.Checked;

                frmMultiVehicleBooking frm = new frmMultiVehicleBooking(obj);



                if (txtReturnSpecialReq != null)
                {
                    frm.ReturnSpecialReq = txtReturnSpecialReq.Text.Trim();
                    frm.ReturnCustomerFares = numReturnBookingFee.Value.ToDecimal();


                }



                frm.ShowDialog();


                if (frm.Saved)
                {


                    new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                    //   AppVars.frmMDI.RefreshRequiredDashBoard();


                    this.Close();
                }

                frm.Dispose();

                frm = null;

                GC.Collect();
            }
            catch (Exception ex)
            {


            }
        }




        bool IsAutoCalcFares = false;
        private void chkReverse_ToggleStateChanging(object sender, EventArgs args)
        {
            //  CancelWebClientAsync();



            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                IsAutoCalcFares = true;
                AppVars.objPolicyConfiguration.AutoCalculateFares = false;

            }

            SetReverseAddress(ddlFromLocType.SelectedValue.ToIntorNull(), ddlToLocType.SelectedValue.ToIntorNull(),
                            null, null, txtFromFlightDoorNo.Text.ToStr(),
                               txtFromAddress.Text.ToStr(), txtFromPostCode.Text.ToStr(), txtFromStreetComing.Text.ToStr(), txtToFlightDoorNo.Text.ToStr(), txtToAddress.Text.ToStr(),
                               txtToStreetComing.Text.ToStr(), txtToPostCode.Text.ToStr());



            AppVars.objPolicyConfiguration.AutoCalculateFares = IsAutoCalcFares;

            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                CalculateAutoFares();

            }
        }


        private void SetReverseAddress(int? fromLocTypeId, int? toLocTypeId, int? fromLocId, int? toLocId, string fromDoorNo, string fromAddress, string fromPostCode,
                                        string fromStreet, string toDoorNo, string toAddress, string toStreet, string toPostCode)
        {

            fromLocTypeId = fromLocTypeId ^ toLocTypeId;
            toLocTypeId = toLocTypeId ^ fromLocTypeId;
            fromLocTypeId = fromLocTypeId ^ toLocTypeId;

            if (fromLocId != null && toLocId != null)
            {

                fromLocId = fromLocId ^ toLocId;
                toLocId = toLocId ^ fromLocId;
                fromLocId = fromLocId ^ toLocId;
            }

            if (fromLocId == null)
                fromLocId = toLocId;

            if (toLocId == null)
                toLocId = fromLocId;

            string temp = fromAddress;
            fromAddress = toAddress;
            toAddress = temp;


            temp = fromDoorNo;
            fromDoorNo = toDoorNo;
            toDoorNo = temp;


            temp = fromStreet;
            fromStreet = toStreet;
            toStreet = temp;


            temp = fromPostCode;
            fromPostCode = toPostCode;
            toPostCode = temp;


            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            txtFromFlightDoorNo.Text = fromDoorNo;
            txtFromStreetComing.Text = fromStreet;
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            txtFromFlightDoorNo.Text = fromDoorNo;

            SetPickupZone(fromAddress.ToStr().ToUpper());
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            //{
            //  ddlFromLocation.SelectedValue = fromLocId;
            //  txtFromFlightDoorNo.Text = fromDoorNo;
            //  txtFromStreetComing.Text = fromStreet;
            // }
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{

            //    txtFromPostCode.Text = fromPostCode;
            //    SetPickupZone(fromPostCode.ToStr().ToUpper());


            //    txtFromFlightDoorNo.Text = fromDoorNo;
            //    txtFromStreetComing.Text = fromStreet;

            //}
            //else
            //{
            //    ddlFromLocation.SelectedValue = fromLocId;
            //}


            //if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(toAddress.ToStr().ToUpper());
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


            txtToFlightDoorNo.Text = toDoorNo;
            txtToStreetComing.Text = toStreet;

            //   }
            //else if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{

            //    txtToPostCode.Text = toPostCode;

            //    SetDropOffZone(toPostCode);
            //    txtToFlightDoorNo.Text = toDoorNo;
            //    txtToStreetComing.Text = toStreet;
            //}
            //else
            //{
            //    ddlToLocation.SelectedValue = toLocId;
            //}




            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }



        private void txtToFlightDoorNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();

                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                {

                    FocusOnCustomer();
                }
                else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    FocusOnToStreet();
                }
                else
                {

                    FocusOnCustomer();
                }

            }
            else if (e.KeyCode == Keys.Left)
            {
                txtFromFlightDoorNo.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtFromAddress.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtToAddress.Focus();
            }

        }


        private void FocusOnCustomer()
        {
            ddlCustomerName.Focus();
        }

        private void FocusOnToStreet()
        {
            txtToStreetComing.Focus();

        }

        private void FocusOnFromStreet()
        {
            txtFromStreetComing.Focus();

        }

        private void FocusOnFromDoor()
        {

            txtFromFlightDoorNo.Focus();


        }

        private void txtFromFlightDoorNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                int? LocTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                if ((LocTypeId == Enums.LOCATION_TYPES.ADDRESS || LocTypeId == Enums.LOCATION_TYPES.BASE || LocTypeId == Enums.LOCATION_TYPES.AIRPORT))
                {
                    // SetPickupZone(txtFromAddress.Text);



                    // FocusToPassenger();
                    if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        FocusOnFromStreet();
                    }

                    else if ((toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE))
                    {


                        FocusOnToAddress();

                    }
                    else if ((toLocTypeId == Enums.LOCATION_TYPES.POSTCODE))
                    {
                        FocusOnToPostCode();

                    }



                }



                //else if (LocTypeId == Enums.LOCATION_TYPES.POSTCODE || LocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                //{
                //    SetPickupZone(ddlFromLocation.Text);
                //    FocusOnFromStreet();
                //}
                else
                {
                    //  SetPickupZone(txtFromAddress.Text);

                    FocusToPassenger();

                    //if ((toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE))
                    //{
                    //    FocusOnToAddress();

                    //}
                    //else if ((toLocTypeId == Enums.LOCATION_TYPES.POSTCODE))
                    //{
                    //    FocusOnToPostCode();

                    //}
                    //else
                    //{

                    //    FocusOnToLocation();
                    //}
                }

            }
            else if (e.KeyCode == Keys.Right)
            {
                txtToFlightDoorNo.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtFromAddress.Focus();
            }

        }

        private void FocusOnToAddress()
        {
            txtToAddress.Focus();

        }





        private void FocusOnToPostCode()
        {
            txtToPostCode.Focus();

        }

        private void txtFromStreetComing_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                int? LocTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT || LocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                    {
                        FocusOnToAddress();
                    }
                    else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                    {
                        FocusOnToPostCode();
                    }


                    else if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        FocusOnToAddress();
                    }


                }

            }
        }

        private void txtToPostCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnToDoor();

            }
        }

        private void txtToStreetComing_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnCustomer();

            }
        }

        private void txtFromPostCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnFromDoor();

            }
        }

        private void ddlCustomerName_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {

                if (e.KeyCode == Keys.Enter)
                {
                 
                    FocusOnTelNo();


                }
                else if (e.KeyCode == Keys.Insert)
                {
                    FocusOnVehicle();


                }
                else if (e.KeyCode == Keys.Up)
                {

                    if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                    {

                        txtToAddress.Focus();
                    }
                    else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                    {
                        FocusOnToPostCode();
                    }
                    else
                    {
                        FocusOnToDoor();

                    }
                }
                else if (e.KeyCode == Keys.Left)
                {

                    int Position = ddlCustomerName.SelectionStart;
                    if (Position == 0)
                    {
                        ddlVehicleType.Focus();
                    }
                }
                //else if (e.KeyCode == Keys.ShiftKey)
                //{
                //    FocusOnToAddress();

                //}
                else if (e.KeyCode == Keys.Down)
                {
                    txtCustomerPhoneNo.Focus();
                }
            }
            catch
            {


            }


        }

        private void FocusOnTelNo()
        {
            txtCustomerPhoneNo.Focus();

        }

        private void FocusOnMobNo()
        {
            txtCustomerMobileNo.Focus();

        }

        private void FocusOnPickupDate()
        {
            dtpPickupDate.Focus();

        }

        private void FocusOnPickupTime()
        {
            dtpPickupTime_txt.Focus();
            //dtpPickupTime.Focus();

        }

        private void FocusOnReturnPickupTime()
        {
            if (dtpReturnPickupTime != null)
                dtpReturnPickupTime.Focus();

        }


        private void FocusOnFare()
        {
            numFareRate.Focus();

        }

        private void FocusOnDriver()
        {
            ddlDriver.Focus();

        }

        private void txtCustomerPhoneNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string telNo = txtCustomerPhoneNo.Text.ToStr().Trim();
                string mobNo = txtCustomerMobileNo.Text.ToStr().Trim();

                if (!string.IsNullOrEmpty(telNo) && !string.IsNullOrEmpty(mobNo))
                {

                    FocusOnVehicle();
                }
                else if (string.IsNullOrEmpty(telNo) && string.IsNullOrEmpty(mobNo))
                {
                    FocusOnMobNo();
                }
                else if (!string.IsNullOrEmpty(telNo) && string.IsNullOrEmpty(mobNo))
                {
                    FocusOnVehicle();
                }

                else if (string.IsNullOrEmpty(telNo) && !string.IsNullOrEmpty(mobNo))
                {
                    FocusOnVehicle();
                }

            }
            else if (e.KeyCode == Keys.Up)
            {
                ddlCustomerName.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtCustomerMobileNo.Focus();
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnCustomer();
            //}
        }

        private void txtCustomerMobileNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                // FocusOnPickupDate();
                txtEmail.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtCustomerPhoneNo.Focus();
            }

            else if (e.KeyCode == Keys.Left)
            {
                if (txtCustomerMobileNo.SelectionStart == 0)
                {
                    numTotalLuggages.Focus();
                }

            }
            else if (e.KeyCode == Keys.Down)
            {
                txtEmail.Focus();
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    txtCustomerPhoneNo.Focus();

            //}
        }

        private void dtpPickupDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                // FocusOnPickupTime();
                FocusOnFromAddress();
                SetReturnPickupDate();
                dtpPickupDate.Tag = null;

            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnCustomer();

            }

           
            else if (e.KeyCode == Keys.Right)
            {
                //if (dtpPickupDate.Tag.ToStr() == "left")
                //    dtpPickupDate.Tag = null;

                //comment
                //int position = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectionStart;
                //if (position == 6)
                //{
                //    if (dtpPickupDate.Tag == null || dtpPickupDate.Tag.ToStr() == "left")
                //        dtpPickupDate.Tag = "right";
                //    else if (dtpPickupDate.Tag.ToStr() == "right")
                //        FocusOnPickupTime();
                //}
            }
            else
                dtpPickupDate.Tag = null;

        }

        private void FocusOnSpecialRequirement()
        {

            txtSpecialRequirements.Focus();
        }





        private void FocusOnSave()
        {
            btnSaveNew.Focus();

            //btnSaveNew.ButtonElement.Focus();

        }

        private void ddlDriver_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //btnSaveOn.TabIndex = 234;
                //btnSaveAndClose.TabIndex = 235;
                //btnSaveNew.TabIndex = 236;
                //btnSaveAndNew.TabIndex = 238;
                //  radPanel3.Focus();
                // SendKeys.Send("{TAB}");
                ////fwdkh3
                //// FocusOnSave();
                FocusOnFare();
                //  chkIsCompanyRates.Focus();


                //ddlDriver_Leave(ddlDriver, new EventArgs());




            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnJourney();

            //}

        }






        void TextBoxItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if ((sender as NumericUpDown).Name == "numFareRate")
                {
                    FocusOnSpecialRequirement();
                    return;
                }

                if ((sender as TextBox).Name == "txtCustomerMobileNo")
                {
                    txtEmail.Focus();

                }
                //  FocusOnDriver();
            }
            else if (e.KeyCode == Keys.Up)
            {

                FocusOnPickupTime();
                // ddlCustomerName.Focus();

            }

            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    //comment
            //    //int position = numFareRate.SpinElement.TextBoxItem.SelectionStart;
            //    //if (position == 0)
            //    //{
            //    if ((sender as NumericUpDown).Name == "numFareRate")
            //    {
            //        FocusOnVehicle();
            //        return;
            //    }
            //    FocusOnPickupTime();
            //    //    // ddlCustomerName.Focus();
            //    //}
            //}
        }





        //private void opt_JReturnWay_ToggleStateChanging(object sender, StateChangingEventArgs args)
        //{
        //    if (opt_one.Checked==false)
        //    {
        //        SetJourneyWise(args.NewValue == ToggleState.On ? ToggleState.Off : ToggleState.On);
        //    }

        //    SetReturnAirportJob(args.NewValue);

        //    FocusToPassenger();

        //    if (args.NewValue == ToggleState.On && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
        //    {
        //        UpdateAutoCalculateFares();
        //    }
        //}

        int companyPricePercentage = 0;
        bool companyPriceAdditionType;
        decimal drvFareReductionValue = 0.00m;
        string drvFareReductionType = "Amount";


        private void ShowSecondaryPaymentType(bool show)
        {
            if (chkIsCommissionWise.Enabled == true || (objMaster.Current != null && objMaster.Current.ToAddress.ToStr() == "AS DIRECTED") || (AppVars.objPolicyConfiguration.DrvCommissionCalculationType.ToInt() == 4 || AppVars.objPolicyConfiguration.DrvCommissionCalculationType.ToInt() == 7))
                return;


            //fwdkh7  chkSecondaryPaymentType.Visible = show;
            // numCashPaymentFares.Visible = show;


        }

        private void ShowPaymentReference()
        {
            if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 1)
            {

                txtPaymentReference.Visible = true;
                lblPaymentRef.Visible = true;

            }
        }

        private void ClearBookedByDataSource()
        {

            if (txtAccountBookedBy != null)
            {
                txtAccountBookedBy.AutoCompleteCustomSource.Clear();


            }

        }


        private void ClearOrderNoDataSource()
        {

            if (txtOrderNo != null)
            {
                txtOrderNo.AutoCompleteCustomSource.Clear();


                if (txtPupilNo != null)
                {
                    txtPupilNo.AutoCompleteCustomSource.Clear();
                }

            }

        }


        private void SetPaymentTypeByAccount(List<Gen_Company_PaymentType> listofPaymentTypes)
        {
            if (listofPaymentTypes.Count > 0)
            {

               // foreach (var item in ddlPaymentType.Items)
                //{

                 


                //    if (listofPaymentTypes.Count(c => c.PaymentTypeId == item.Value.ToInt()) == 0)
                //    {

                //        item = false;


                //        if (ddlPaymentType.SelectedValue.ToInt() == item.Value.ToInt())
                //        {
                //            ddlPaymentType.SelectedValue = null;
                //        }

                        

                //    }
                //    else
                //    {

                //        item.Enabled = true;
                //    }


                //}
            }


        }


        private void EnableAllPaymentTypes(bool enable)
        {
            //foreach (var item in ddlPaymentType.Items)
            //{
            //    item.Enabled = enable;
            //}


        }


        private void EnableAccCharges(bool enabled)
        {
            lblAccParkingCharges.Enabled = enabled;
            lblAccWaitingCharges.Enabled = enabled;
            numParkingChrgs.Enabled = enabled;
            numWaitingChrgs.Enabled = enabled;


            if (enabled == false)
            {
                numParkingChrgs.Value = 0;
                numWaitingChrgs.Value = 0;

            }

        }


        private bool ResetAllFares = false;
        private void ddlCompany_SelectedValueChanged(object sender, EventArgs e)
        {
            try
            {
      //          return;
                if (txtPupilNo != null)
                {
                    txtPupilNo.Visible = false;
                    lblPupilNo.Visible = false;
                }
                ResetAllFares = false;
                if (numCompanyFares != null && IsDisplayingRecord == false)
                    numCompanyFares.Value = 0.00m;



                if (chkIsCompanyRates.Checked)
                {


                    int? companyId = ddlCompany.SelectedValue.ToIntorNull();


                    if (companyId == null)
                    {
                        HideOrderNoPanel();
                        ClearDepartment();

                        //fwdxyz txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
                        txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
                        //fwdxyz   lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);
                        ShowSecondaryPaymentType(false);



                        //    txtCompanyCreditCardNo.Text = string.Empty;
                        ResetFareReductionValues();

                        UpdateAutoCalculateFares();

                        ClearOrderNoDataSource();
                        ddlCompany.Tag = false;
                        //   EnableRoomCharges(false);
                        EnableAllPaymentTypes(true);
                    }
                    else
                    {
                        ShowSecondaryPaymentType(true);

                        Gen_Company obj = General.GetObject<Gen_Company>(c => c.Id == companyId);
                        if (obj != null)
                        {

                            if (ddlSubCompany != null && obj.SubCompanyId != null)
                                ddlSubCompany.SelectedValue = obj.SubCompanyId;

                            if (IsDisplayingRecord == false && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
                            {
                                string address = obj.Address.ToStr().ToUpper().Trim();

                                if (address.Contains(","))
                                {
                                    address = address.Replace(",", "").Trim().Replace("  ", " ").Trim();

                                }

                                if (lastFocusOnAccounAddress == 2)
                                {
                                    ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                                    txtToAddress.Text = address;

                                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                                    SetDropOffZone(txtToAddress.Text.ToStr().ToUpper().Trim());

                                }
                                else
                                {

                                    ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);




                                    txtFromAddress.Text = address;
                                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                    SetPickupZone(txtFromAddress.Text.ToStr().Trim().ToUpper());
                                }

                            }


                            //       txtCompanyCreditCardNo.Text = obj.CreditCardDetails.ToStr().Trim();

                            if (obj.HasEscort.ToBool())
                            {
                                InitializeEscort();

                                lblEscort.Visible = true;
                                ddlEscort.Visible = true;


                                lblEscortPrice.Visible = true;
                                numEscortPrice.Visible = true;

                                FillEscortsCombo();

                                if (obj.IsAgent.ToBool())
                                {

                                    txtPaymentReference.Visible = false;
                                    lblPaymentRef.Visible = false;
                                }
                                else
                                {
                                    ShowPaymentReference();

                                    // txtPaymentReference.Visible = true;
                                    // lblPaymentRef.Visible = true;
                                }





                                if (ddlDepartment != null)
                                {
                                    lblDepartment.Visible = false;
                                    ddlDepartment.Visible = false;

                                }

                                //fwdxyz   txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 100);
                                txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 40);
                                //fwdxyz lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 85);



                            }
                            else
                            {

                                if (lblEscort != null)
                                {

                                    lblEscort.Visible = false;
                                    ddlEscort.Visible = false;


                                    lblEscortPrice.Visible = false;
                                    numEscortPrice.Visible = false;
                                }

                                InitializeDepartmentCombo();

                                FillDepartmentsCombo(obj.Id);

                                if (ddlDepartment != null)
                                {
                                    try
                                    {
                                        if (ddlDepartment.DataSource == null || (ddlDepartment.DataSource as List<Gen_Company_Department>).Count == 0)
                                        {
                                            lblDepartment.Visible = false;
                                            ddlDepartment.Visible = false;
                                        }
                                        else
                                        {

                                            lblDepartment.Visible = true;
                                            ddlDepartment.Visible = true;
                                        }
                                    }
                                    catch
                                    {


                                    }

                                }


                                if (obj.IsAgent.ToBool())
                                {

                                    txtPaymentReference.Visible = false;
                                    lblPaymentRef.Visible = false;
                                }
                                else
                                {

                                    ShowPaymentReference();
                                    //  txtPaymentReference.Visible = true;
                                    //  lblPaymentRef.Visible = true;
                                }



                                //fwdxyz txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
                                txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
                                //fwdxyz    lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);

                            }
                            // FillCostCentersCombo(obj.Id);

                            companyPricePercentage = obj.CompanyPricePercent.ToInt();
                            companyPriceAdditionType = obj.HasRoomCharge.ToBool();
                            drvFareReductionType = obj.DriverFareReductionType.ToStr().Trim().ToLower();
                            drvFareReductionValue = obj.DriverFareReductionValue.ToDecimal();

                            bool orderNo = obj.HasOrderNo.ToBool();
                            bool pupilNo = obj.HasPupilNo.ToBool();
                            bool HasSingleOrderNo = obj.HasSingleOrderNo.ToBool();


                            if (orderNo || pupilNo)
                            {



                                InitializeOrderNoPanel();
                                //fwdkh0
                                InitializePupilNo();
                                pnlOrderNo.Visible = false;
                                if (orderNo == false || HasSingleOrderNo)
                                {
                                    lblOrderNo.Visible = false;
                                    txtOrderNo.Visible = false;

                                }


                                ClearOrderNoDataSource();

                                if (orderNo == true)
                                {
                                    lblOrderNo.Visible = true;
                                    txtOrderNo.Visible = true;

                                    txtOrderNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
                                    txtOrderNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                    txtOrderNo.AutoCompleteSource = AutoCompleteSource.CustomSource;


                                    if (txtPupilNo != null && txtPupilNo.Visible)
                                    {
                                        txtPupilNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
                                        txtPupilNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                        txtPupilNo.AutoCompleteSource = AutoCompleteSource.CustomSource;

                                    }

                                }


                                if (opt_return.Checked)
                                {
                                    // lblPupilNo.Visible = true;
                                    // txtPupilNo.Visible = true;

                                }
                                else
                                {
                                    lblPupilNo.Visible = false;
                                    txtPupilNo.Visible = false;

                                }

                                //fwdkh0  pnlOrderNo.Visible = true;

                                //  txtSpecialRequirements.Location = new Point(111, 488);
                                // txtSpecialRequirements.Size = new Size(240, 80);

                            }
                            else
                            {
                                HideOrderNoPanel();

                            }

                            if (obj.HasComcabCharges.ToBool())
                            {
                                HideOrderNoPanel();
                                //   ShowHideCostCenter();
                                ShowComcabCharges(true);
                            }
                            else
                            {
                                ShowComcabCharges(false);

                            }

                            SetCashAccount(obj.AccountTypeId.ToInt());

                            InitializeAccPassowrdPanel();


                            if(obj.PasswordEnable.ToBool())
                            {
                                pnlAccpassword.Visible = true;

                                radLabel33.Visible = true;
                                txtAccPassword.Visible = true;
                            }
                            else
                            {
                                pnlAccpassword.Visible = false;

                                radLabel33.Visible = false;
                                txtAccPassword.Visible = false;

                            }

                            //pnlAccpassword.Visible = obj.PasswordEnable.ToBool();

                            //radLabel33.Visible = pnlAccpassword.Visible;
                            //txtAccPassword.Visible = pnlAccpassword.Visible;



                            string[] bookedByDataSource = null;

                            if (obj.HasBookedBy.ToBool())
                            {
                                bookedByDataSource = obj.Gen_Company_BookedBies.Select(c => c.BookedBy).ToArray<string>();

                            }



                            InitializeAccountBookedBy(obj.HasBookedBy.ToBool(), bookedByDataSource);


                            if (obj.IsAgent.ToBool())
                            {
                                InitializeAgentPanel();

                                ddlAgentCommissionType.SelectedIndex = 1;

                            }


                            ShowAgentDetails(obj.IsAgent.ToBool());

                            // EnableRoomCharges(obj.HasRoomCharge.ToBool());

                            SetPaymentTypeByAccount(obj.Gen_Company_PaymentTypes.ToList());



                            if (obj.DisableCompanyFaresForController.ToBool() && AppVars.LoginObj.LgroupId == 2)
                            {

                                if (numCompanyFares != null)
                                {
                                    lblCompanyPrice.Visible = false;
                                    numCompanyFares.Visible = false;
                                }

                                if (numReturnCompanyFares != null)
                                {
                                    lblReturnCompanyPrice.Visible = false;
                                    numReturnCompanyFares.Visible = false;
                                }
                            }
                            else
                            {
                                if (numCompanyFares != null)
                                {
                                    lblCompanyPrice.Visible = true;
                                    numCompanyFares.Visible = true;
                                }

                                if (numReturnCompanyFares != null)
                                {
                                    lblReturnCompanyPrice.Visible = true;
                                    numReturnCompanyFares.Visible = true;
                                }


                            }

                            if (obj.ShowExtraCharges.ToBool())
                            {

                                //   numWaitingChrgs.Enabled = false;
                                //   numParkingChrgs.Enabled = false;
                                // numExtraChrgs.Enabled = false;

                                foreach (var item in obj.Gen_Company_ExtraCharges)
                                {
                                    if (item.Charges.ToInt() == 2)
                                    {
                                        numWaitingChrgs.Enabled = true;

                                    }
                                    else if (item.Charges.ToInt() == 3)
                                    {
                                        numParkingChrgs.Enabled = true;

                                    }
                                    else if (item.Charges.ToInt() == 4)
                                    {
                                        numExtraChrgs.Enabled = true;

                                    }
                                }
                            }




                            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                            {

                                if (obj.ResetAllFares.ToBool())
                                {
                                    ResetAllFares = true;
                                    numFareRate.Value = 0.00m;

                                    if (numReturnFare != null)
                                        numReturnFare.Value = 0.00m;

                                    numBookingFee.Value = 0.00m;
                                    if (numReturnBookingFee != null)
                                    {
                                        numReturnBookingFee.Value = 0.00m;
                                    }

                                    if (numCompanyFares != null)
                                    {
                                        numCompanyFares.Value = 0.00m;

                                        if (numReturnCompanyFares != null)
                                        {

                                            numReturnCompanyFares.Value = 0.00m;
                                        }
                                        ddlCompany.Tag = true;
                                    }


                                }
                                else
                                {
                                    ddlCompany.Tag = false;
                                    UpdateAutoCalculateFares();

                                }
                            }



                            if (IsDisplayingRecord == false)
                            {

                                if (obj.CompanyInformation.ToStr().Trim().Length > 0)
                                {

                                    frmInformation frmInfo = new frmInformation(obj.Id, obj.CompanyName, obj.CompanyInformation.ToStr().Trim());
                                    frmInfo.StartPosition = FormStartPosition.CenterScreen;
                                    frmInfo.ShowDialog();

                                    frmInfo.Dispose();
                                }

                                if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() && obj.Gen_Company_Addresses.Count > 0)
                                {


                                    if (lastFocusOnAccounAddress == 2)
                                    {
                                        txtToAddress.ListBoxElement.Items.Clear();
                                        txtToAddress.ListBoxElement.Items.AddRange(obj.Gen_Company_Addresses.Select(args => args.Address).ToArray<string>());
                                        txtToAddress.ShowListBox();
                                        txtToAddress.BringToFront();

                                    }
                                    else
                                    {

                                        txtFromAddress.ListBoxElement.Items.Clear();
                                        txtFromAddress.ListBoxElement.Items.AddRange(obj.Gen_Company_Addresses.Select(args => args.Address).ToArray<string>());
                                        txtFromAddress.ShowListBox();
                                        txtFromAddress.BringToFront();
                                    }
                                }
                            }


                            ddlCompany.BackColor = Color.Red;
                            ddlCompany.ForeColor = Color.White;
                        }
                    }
                }
                else
                {

                    HideOrderNoPanel();
                    ClearDepartment();
                    //   ClearCostCenter();
                    ShowComcabCharges(false);

                    ShowSecondaryPaymentType(false);


                    ResetFareReductionValues();

                    ddlCompany.Tag = false;
                    // EnableRoomCharges(false);



                    EnableAllPaymentTypes(true);

                    UpdateAutoCalculateFares();

                }
            }
            catch (Exception ex)
            {


            }

            InstallEventHandlers(pnlCustomer);

        }

        //private void ddlCompany_SelectedValueChanged(object sender, EventArgs e)
        //{
        //    try
        //    {

        //        ResetAllFares = false;
        //        if (numCompanyFares != null && IsDisplayingRecord == false)
        //            numCompanyFares.Value = 0.00m;



        //        if (chkIsCompanyRates.Checked)
        //        {


        //            int? companyId = ddlCompany.SelectedValue.ToIntorNull();


        //            if (companyId == null)
        //            {
        //                HideOrderNoPanel();
        //                ClearDepartment();

        //                txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
        //                txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
        //                lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);
        //                ShowSecondaryPaymentType(false);



        //                //    txtCompanyCreditCardNo.Text = string.Empty;
        //                ResetFareReductionValues();

        //                UpdateAutoCalculateFares();

        //                ClearOrderNoDataSource();
        //                ddlCompany.Tag = false;
        //                //   EnableRoomCharges(false);
        //                EnableAllPaymentTypes(true);
        //            }
        //            else
        //            {
        //                ShowSecondaryPaymentType(true);

        //                Gen_Company obj = General.GetObject<Gen_Company>(c => c.Id == companyId);
        //                if (obj != null)
        //                {

        //                    if (ddlSubCompany != null && obj.SubCompanyId != null)
        //                        ddlSubCompany.SelectedValue = obj.SubCompanyId;

        //                    if (IsDisplayingRecord == false && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
        //                    {
        //                        string address = obj.Address.ToStr().ToUpper().Trim();

        //                        if (address.Contains(","))
        //                        {
        //                            address = address.Replace(",", "").Trim().Replace("  ", " ").Trim();

        //                        }

        //                        if (lastFocusOnAccounAddress == 2)
        //                        {
        //                            ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
        //                            txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

        //                            txtToAddress.Text = address;

        //                            txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
        //                            SetDropOffZone(txtToAddress.Text.ToStr().ToUpper().Trim());

        //                        }
        //                        else
        //                        {

        //                            ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
        //                            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);




        //                            txtFromAddress.Text = address;
        //                            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        //                            SetPickupZone(txtFromAddress.Text.ToStr().Trim().ToUpper());
        //                        }

        //                    }


        //                    //       txtCompanyCreditCardNo.Text = obj.CreditCardDetails.ToStr().Trim();

        //                    if (obj.HasEscort.ToBool())
        //                    {
        //                        InitializeEscort();

        //                        lblEscort.Visible = true;
        //                        ddlEscort.Visible = true;


        //                        lblEscortPrice.Visible = true;
        //                        numEscortPrice.Visible = true;

        //                        FillEscortsCombo();

        //                        if (obj.IsAgent.ToBool())
        //                        {

        //                            txtPaymentReference.Visible = false;
        //                            lblPaymentRef.Visible = false;
        //                        }
        //                        else
        //                        {
        //                            ShowPaymentReference();

        //                            // txtPaymentReference.Visible = true;
        //                            // lblPaymentRef.Visible = true;
        //                        }





        //                        if (ddlDepartment != null)
        //                        {
        //                            lblDepartment.Visible = false;
        //                            ddlDepartment.Visible = false;

        //                        }

        //                        txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 100);
        //                        txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 40);
        //                        lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 85);



        //                    }
        //                    else
        //                    {

        //                        if (lblEscort != null)
        //                        {

        //                            lblEscort.Visible = false;
        //                            ddlEscort.Visible = false;


        //                            lblEscortPrice.Visible = false;
        //                            numEscortPrice.Visible = false;
        //                        }

        //                        InitializeDepartmentCombo();

        //                        FillDepartmentsCombo(obj.Id);

        //                        if (ddlDepartment != null)
        //                        {
        //                            lblDepartment.Visible = true;
        //                            ddlDepartment.Visible = true;

        //                        }


        //                        if (obj.IsAgent.ToBool())
        //                        {

        //                            txtPaymentReference.Visible = false;
        //                            lblPaymentRef.Visible = false;
        //                        }
        //                        else
        //                        {

        //                            ShowPaymentReference();
        //                            //  txtPaymentReference.Visible = true;
        //                            //  lblPaymentRef.Visible = true;
        //                        }



        //                        txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
        //                        txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
        //                        lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);

        //                    }
        //                    // FillCostCentersCombo(obj.Id);

        //                    companyPricePercentage = obj.CompanyPricePercent.ToInt();
        //                    companyPriceAdditionType = obj.HasRoomCharge.ToBool();
        //                    drvFareReductionType = obj.DriverFareReductionType.ToStr().Trim().ToLower();
        //                    drvFareReductionValue = obj.DriverFareReductionValue.ToDecimal();

        //                    bool orderNo = obj.HasOrderNo.ToBool();
        //                    bool pupilNo = obj.HasPupilNo.ToBool();
        //                    bool HasSingleOrderNo = obj.HasSingleOrderNo.ToBool();


        //                    if (orderNo || pupilNo)
        //                    {



        //                        InitializeOrderNoPanel();
        //                        InitializePupilNo();

        //                        if (orderNo == false || HasSingleOrderNo)
        //                        {
        //                            lblOrderNo.Visible = false;
        //                            txtOrderNo.Visible = false;

        //                        }


        //                        ClearOrderNoDataSource();

        //                        if (orderNo == true)
        //                        {
        //                            lblOrderNo.Visible = true;
        //                            txtOrderNo.Visible = true;

        //                            txtOrderNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
        //                            txtOrderNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //                            txtOrderNo.AutoCompleteSource = AutoCompleteSource.CustomSource;


        //                            if (txtPupilNo != null && txtPupilNo.Visible)
        //                            {
        //                                txtPupilNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
        //                                txtPupilNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //                                txtPupilNo.AutoCompleteSource = AutoCompleteSource.CustomSource;

        //                            }

        //                        }


        //                        if (opt_return.Checked)
        //                        {
        //                            lblPupilNo.Visible = true;
        //                            txtPupilNo.Visible = true;

        //                        }
        //                        else
        //                        {
        //                            lblPupilNo.Visible = false;
        //                            txtPupilNo.Visible = false;

        //                        }

        //                        pnlOrderNo.Visible = true;

        //                        //  txtSpecialRequirements.Location = new Point(111, 488);
        //                        // txtSpecialRequirements.Size = new Size(240, 80);

        //                    }
        //                    else
        //                    {
        //                        HideOrderNoPanel();

        //                    }

        //                    if (obj.HasComcabCharges.ToBool())
        //                    {
        //                        HideOrderNoPanel();
        //                        //   ShowHideCostCenter();
        //                        ShowComcabCharges(true);
        //                    }
        //                    else
        //                    {
        //                        ShowComcabCharges(false);

        //                    }

        //                    SetCashAccount(obj.AccountTypeId.ToInt());

        //                    InitializeAccPassowrdPanel();
        //                    pnlAccpassword.Visible = obj.PasswordEnable.ToBool();


        //                    pnlAccpassword.Visible = false;
        //                    string[] bookedByDataSource = null;

        //                    if (obj.HasBookedBy.ToBool())
        //                    {
        //                        bookedByDataSource = obj.Gen_Company_BookedBies.Select(c => c.BookedBy).ToArray<string>();

        //                    }



        //                    InitializeAccountBookedBy(obj.HasBookedBy.ToBool(), bookedByDataSource);


        //                    if (obj.IsAgent.ToBool())
        //                    {
        //                        InitializeAgentPanel();

        //                        ddlAgentCommissionType.SelectedIndex = 1;

        //                    }


        //                    ShowAgentDetails(obj.IsAgent.ToBool());

        //                    // EnableRoomCharges(obj.HasRoomCharge.ToBool());

        //                    SetPaymentTypeByAccount(obj.Gen_Company_PaymentTypes.ToList());



        //                    if (obj.DisableCompanyFaresForController.ToBool() && AppVars.LoginObj.LgroupId == 2)
        //                    {

        //                        if (numCompanyFares != null)
        //                        {
        //                            lblCompanyPrice.Visible = false;
        //                            numCompanyFares.Visible = false;
        //                        }

        //                        if (numReturnCompanyFares != null)
        //                        {
        //                            lblReturnCompanyPrice.Visible = false;
        //                            numReturnCompanyFares.Visible = false;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (numCompanyFares != null)
        //                        {
        //                            lblCompanyPrice.Visible = true;
        //                            numCompanyFares.Visible = true;
        //                        }

        //                        if (numReturnCompanyFares != null)
        //                        {
        //                            lblReturnCompanyPrice.Visible = true;
        //                            numReturnCompanyFares.Visible = true;
        //                        }


        //                    }

        //                    if (obj.ShowExtraCharges.ToBool())
        //                    {

        //                        //   numWaitingChrgs.Enabled = false;
        //                        //   numParkingChrgs.Enabled = false;
        //                        // numExtraChrgs.Enabled = false;

        //                        foreach (var item in obj.Gen_Company_ExtraCharges)
        //                        {
        //                            if (item.Charges.ToInt() == 2)
        //                            {
        //                                numWaitingChrgs.Enabled = true;

        //                            }
        //                            else if (item.Charges.ToInt() == 3)
        //                            {
        //                                numParkingChrgs.Enabled = true;

        //                            }
        //                            else if (item.Charges.ToInt() == 4)
        //                            {
        //                                numExtraChrgs.Enabled = true;

        //                            }
        //                        }
        //                    }




        //                    if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
        //                    {

        //                        if (obj.ResetAllFares.ToBool())
        //                        {
        //                            ResetAllFares = true;
        //                            numFareRate.Value = 0.00m;

        //                            if (numReturnFare != null)
        //                                numReturnFare.Value = 0.00m;

        //                            numBookingFee.Value = 0.00m;
        //                            if (numReturnBookingFee != null)
        //                            {
        //                                numReturnBookingFee.Value = 0.00m;
        //                            }

        //                            if (numCompanyFares != null)
        //                            {
        //                                numCompanyFares.Value = 0.00m;

        //                                if (numReturnCompanyFares != null)
        //                                {

        //                                    numReturnCompanyFares.Value = 0.00m;
        //                                }
        //                                ddlCompany.Tag = true;
        //                            }


        //                        }
        //                        else
        //                        {
        //                            ddlCompany.Tag = false;
        //                            UpdateAutoCalculateFares();

        //                        }
        //                    }



        //                    if (IsDisplayingRecord == false)
        //                    {

        //                        if (obj.CompanyInformation.ToStr().Trim().Length > 0)
        //                        {

        //                            frmInformation frmInfo = new frmInformation(obj.Id, obj.CompanyName, obj.CompanyInformation.ToStr().Trim());
        //                            frmInfo.StartPosition = FormStartPosition.CenterScreen;
        //                            frmInfo.ShowDialog();

        //                            frmInfo.Dispose();
        //                        }

        //                        if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() && obj.Gen_Company_Addresses.Count > 0)
        //                        {


        //                            if (lastFocusOnAccounAddress == 2)
        //                            {
        //                                txtToAddress.ListBoxElement.Items.Clear();
        //                                txtToAddress.ListBoxElement.Items.AddRange(obj.Gen_Company_Addresses.Select(args => args.Address).ToArray<string>());
        //                                txtToAddress.ShowListBox();
        //                                txtToAddress.BringToFront();

        //                            }
        //                            else
        //                            {

        //                                txtFromAddress.ListBoxElement.Items.Clear();
        //                                txtFromAddress.ListBoxElement.Items.AddRange(obj.Gen_Company_Addresses.Select(args => args.Address).ToArray<string>());
        //                                txtFromAddress.ShowListBox();
        //                                txtFromAddress.BringToFront();
        //                            }
        //                        }
        //                    }


        //                    ddlCompany.BackColor = Color.Red;
        //                    ddlCompany.ForeColor = Color.White;
        //                }
        //            }
        //        }
        //        else
        //        {

        //            HideOrderNoPanel();
        //            ClearDepartment();
        //            //   ClearCostCenter();
        //            ShowComcabCharges(false);

        //            ShowSecondaryPaymentType(false);


        //            ResetFareReductionValues();

        //            ddlCompany.Tag = false;
        //            // EnableRoomCharges(false);



        //            EnableAllPaymentTypes(true);

        //            UpdateAutoCalculateFares();

        //        }
        //    }
        //    catch (Exception ex)
        //    {


        //    }

        //}

        private void SetDefaultVehicleType(int vehicleTypeId)
        {
            if (IsDisplayingRecord)
                return;

            ddlVehicleType.SelectedValueChanged -= new EventHandler(ddlVehicleType_SelectedValueChanged);
            ddlVehicleType.SelectedValue = vehicleTypeId;
            ddlVehicleType.SelectedValueChanged += new EventHandler(ddlVehicleType_SelectedValueChanged);

        }

        private void ResetFareReductionValues()
        {

            companyPricePercentage = 0;
            drvFareReductionType = "amount";
            drvFareReductionValue = 0.00m;
        }



        UI.MyDropDownList ddlEscort = null;
        private void InitializeEscort()
        {
            if (lblEscort != null)
                return;

            this.lblEscort = new Label();
            this.ddlEscort = new UI.MyDropDownList();

            this.lblEscortPrice = new Label();
            this.numEscortPrice = new NumericUpDown();

            // ((System.ComponentModel.ISupportInitialize)(this.lblEscort)).BeginInit();
            //     ((System.ComponentModel.ISupportInitialize)(this.ddlEscort)).BeginInit();


            this.pnlMain.Controls.Add(this.lblEscort);
            this.pnlMain.Controls.Add(this.ddlEscort);

            this.radPanel1.Controls.Add(this.numEscortPrice);
            this.radPanel1.Controls.Add(this.lblEscortPrice);

            //  ((System.ComponentModel.ISupportInitialize)(this.lblEscortPrice)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.numEscortPrice)).BeginInit();


            // 
            // lblEscort
            // 
            this.lblEscort.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblEscort.Location = new System.Drawing.Point(17, 356);
            this.lblEscort.Name = "lblEscort";
            this.lblEscort.Size = new System.Drawing.Size(49, 22);
            this.lblEscort.TabIndex = 271;
            this.lblEscort.Text = "Escort";
            // 
            // ddlEscort
            // 
            this.ddlEscort.Caption = null;
            this.ddlEscort.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlEscort.Location = new System.Drawing.Point(111, 353);
            this.ddlEscort.Name = "ddlDepartment";
            this.ddlEscort.Property = null;
            this.ddlEscort.ShowDownArrow = true;
            this.ddlEscort.Size = new System.Drawing.Size(208, 26);
            this.ddlEscort.TabIndex = 241;
            this.ddlEscort.KeyDown += new KeyEventHandler(ddlEscort_KeyDown);




            // 
            // lblEscortPrice
            // 
            this.lblEscortPrice.AutoSize = false;
            this.lblEscortPrice.BackColor = System.Drawing.Color.Orange;
            this.lblEscortPrice.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
            this.lblEscortPrice.ForeColor = System.Drawing.Color.Black;
            this.lblEscortPrice.Location = new System.Drawing.Point(923, 57);
            this.lblEscortPrice.Name = "lblEscortPrice";
            // 
            // 
            // 
            //   this.lblEscortPrice.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblEscortPrice.Size = new System.Drawing.Size(289, 30);
            this.lblEscortPrice.TabIndex = 245;
            this.lblEscortPrice.Text = "     Escort Price  £";
            // this.lblEscortPrice.TextAlignment = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // numEscortPrice
            // 
            this.numEscortPrice.DecimalPlaces = 2;
            //  this.numEscortPrice.EnableKeyMap = true;
            this.numEscortPrice.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.numEscortPrice.ForeColor = System.Drawing.Color.Red;
            this.numEscortPrice.InterceptArrowKeys = false;
            this.numEscortPrice.Location = new System.Drawing.Point(1078, 60);
            this.numEscortPrice.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numEscortPrice.Name = "numEscortPrice";
            // 
            // 
            // 
            //  this.numEscortPrice.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //  this.numEscortPrice.RootElement.ForeColor = System.Drawing.Color.Red;
            ////   this.numEscortPrice.ShowBorder = true;
            //   this.numEscortPrice.ShowUpDownButtons = false;
            this.numEscortPrice.Size = new System.Drawing.Size(59, 24);
            this.numEscortPrice.TabIndex = 244;
            this.numEscortPrice.TabStop = false;
            //   ((Telerik.WinControls.UI.RadSpinElement)(this.numEscortPrice.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
            //   ((Telerik.WinControls.Primitives.FillPrimitive)(this.numEscortPrice.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numEscortPrice.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0.00";
            //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numEscortPrice.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));




            // ((System.ComponentModel.ISupportInitialize)(this.lblEscort)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.ddlEscort)).EndInit();


            //    ((System.ComponentModel.ISupportInitialize)(this.lblEscortPrice)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.numEscortPrice)).EndInit();
        }


        private void InitializeDepartmentCombo()
        {
            if (lblDepartment != null)
                return;

            this.lblDepartment = new Label();
            this.ddlDepartment = new UI.MyDropDownList();

            //  ((System.ComponentModel.ISupportInitialize)(this.lblDepartment)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlDepartment)).BeginInit();


            //////fwdkh  this.pnlMain.Controls.Add(this.lblDepartment);
            //////  this.pnlMain.Controls.Add(this.ddlDepartment);



            // 
            // lblDepartment
            // 
            this.lblDepartment.BackColor = System.Drawing.Color.Transparent;
            this.lblDepartment.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblDepartment.ForeColor = System.Drawing.Color.Black;
            this.lblDepartment.Location = new System.Drawing.Point(411, 150);//(417, 324);//(5, 354);
            this.lblDepartment.Name = "lblDepartment";
            // 
            // 
            // 
            //  this.lblDepartment.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblDepartment.Size = new System.Drawing.Size(88, 22);
            this.lblDepartment.TabIndex = 250;
            this.lblDepartment.Text = "Department";
            lblDepartment.BringToFront();
            pnlCustomer.Controls.Add(lblDepartment);
            lblDepartment.BringToFront();
            // 
            // ddlDepartment
            // 
            this.ddlDepartment.Caption = null;
            this.ddlDepartment.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlDepartment.Location = new System.Drawing.Point(487, 147);//(505, 324);//(111, 353);
            this.ddlDepartment.Name = "ddlDepartment";
            this.ddlDepartment.Property = null;
            this.ddlDepartment.ShowDownArrow = true;
            this.ddlDepartment.Size = new System.Drawing.Size(208, 26);
            this.ddlDepartment.TabIndex = 241;
            this.ddlDepartment.KeyDown += new KeyEventHandler(ddlDepartment_KeyDown);
            pnlCustomer.Controls.Add(ddlDepartment);
            ddlDepartment.BringToFront();

            // ((System.ComponentModel.ISupportInitialize)(this.lblDepartment)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlDepartment)).EndInit();
        }

        private void InitializeAccountBookedBy(bool hasBookedBy, string[] bookedByDataSource)
        {
            try
            {
                if (hasBookedBy)
                {

                    if (lblAccountBookedBy != null)
                    {
                        lblAccountBookedBy.Visible = true;
                        txtAccountBookedBy.Visible = true;


                        if (pnlAccpassword != null)
                        {

                            this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);
                            this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);


                        }
                        else
                        {
                            this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);
                            this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);
                        }

                        // txtSpecialRequirements.Location = new Point(111, 458);
                        //  txtSpecialRequirements.Location = new Point(111, 488);
                        //  txtSpecialRequirements.Size = new Size(240, 50);
                    }
                    else
                    {

                        if (this.lblAccountBookedBy == null)
                        {

                            this.lblAccountBookedBy = new Label();
                            this.txtAccountBookedBy = new TextBox();


                            //    ((System.ComponentModel.ISupportInitialize)(this.lblAccountBookedBy)).BeginInit();
                            //   ((System.ComponentModel.ISupportInitialize)(this.txtAccountBookedBy)).BeginInit();

                            // 
                            // lblAccountBookedBy
                            // 
                            this.lblAccountBookedBy.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                            this.lblAccountBookedBy.Name = "lblAccountBookedBy";
                            this.lblAccountBookedBy.Size = new System.Drawing.Size(76, 22);
                            this.lblAccountBookedBy.TabIndex = 267;
                            this.lblAccountBookedBy.Text = "Booked By";
                            // 
                            // txtAccountBookedBy
                            // 
                            this.txtAccountBookedBy.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                            this.txtAccountBookedBy.MaxLength = 30;
                            this.txtAccountBookedBy.Name = "txtAccountBookedBy";
                            this.txtAccountBookedBy.Size = new System.Drawing.Size(208, 24);
                            this.txtAccountBookedBy.TabIndex = 266;
                            this.txtAccountBookedBy.TabStop = false;

                            // ((System.ComponentModel.ISupportInitialize)(this.lblAccountBookedBy)).EndInit();
                            // ((System.ComponentModel.ISupportInitialize)(this.txtAccountBookedBy)).EndInit();


                            this.pnlMain.Controls.Add(this.lblAccountBookedBy);
                            this.pnlMain.Controls.Add(this.txtAccountBookedBy);
                        }




                        //if (pnlAccpassword != null)
                        //{

                            this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);//438
                            this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);//437


                        //}
                        //else
                        //{
                        //    this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);//(6, 385);
                        //    this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);//(112, 384);
                        //}




                        // txtSpecialRequirements.Location = new Point(111, 458);
                        //txtSpecialRequirements.Location = new Point(111, 488);
                        //  txtSpecialRequirements.Size = new Size(240, 50);
                    }


                    if (bookedByDataSource != null)
                    {
                        txtAccountBookedBy.AutoCompleteCustomSource.Clear();
                        txtAccountBookedBy.AutoCompleteCustomSource.AddRange(bookedByDataSource);
                        txtAccountBookedBy.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                        txtAccountBookedBy.AutoCompleteSource = AutoCompleteSource.CustomSource;
                    }
                    else
                    {
                        ClearBookedByDataSource();

                    }

                }
                else if (hasBookedBy == false && lblAccountBookedBy != null)
                {



                    lblAccountBookedBy.Visible = false;
                    txtAccountBookedBy.Visible = false;

                    txtAccountBookedBy.Text = string.Empty;

                    ClearBookedByDataSource();

                    //txtSpecialRequirements.Location = new Point(111, 458);
                    //  txtSpecialRequirements.Size = new Size(240, 90);


                }

                this.lblAccountBookedBy.Location = new System.Drawing.Point(411, 204);
                this.txtAccountBookedBy.Location = new System.Drawing.Point(487, 202);
                pnlCustomer.Controls.Add(lblAccountBookedBy);
                pnlCustomer.Controls.Add(txtAccountBookedBy);
            }
            catch (Exception ex)
            {


            }

        }



        private void ShowAgentDetails(bool IsAgent)
        {
            if (chkTakenByAgent != null)
            {

                if (IsAgent == true && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                    IsAgent = false;

                chkTakenByAgent.Visible = IsAgent;
                radLabel32.Visible = IsAgent;
                radLabel34.Visible = IsAgent;
                numAgentCommissionPercent.Visible = IsAgent;
                numAgentCommission.Visible = IsAgent;
                ddlAgentCommissionType.Visible = IsAgent;


                if (IsAgent == false && ddlCompany.SelectedValue != null)
                {
                    numAgentCommission.Value = 0.00m;
                }
            }
        }

        private void ShowComcabCharges(bool show)
        {
            //if (pnlComcab == null)
            //    InitializeComCabCharges();

            //pnlComcab.Visible = show;
        }


        void InitializeReturnFareControls()
        {
            this.lblRetFares = new Label();
            this.numReturnFare = new NumericUpDown();
            this.lblRetFares.BackColor = System.Drawing.Color.Lavender;
            this.lblRetFares.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
            this.lblRetFares.ForeColor = System.Drawing.Color.Black;
            this.pnlFares.Controls.Add(this.lblRetFares);
            this.lblRetFares.Location = new System.Drawing.Point(1, 36);//(525, 92);
            this.lblRetFares.Name = "lblRetFares";

            // 
            // 
            // 
            //       this.lblRetFares.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblRetFares.Size = new System.Drawing.Size(91, 20);
            this.lblRetFares.TabIndex = 239;
            this.lblRetFares.Text = "Ret. Fares £";

            // lblRetFares.BackColor = Color.FromArgb(233, 240, 249);
            // 
            // numReturnFare
            // 
            this.numReturnFare.DecimalPlaces = 2;
            this.numReturnFare.Enabled = false;
            // this.numReturnFare.EnableKeyMap = true;
            this.numReturnFare.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.numReturnFare.InterceptArrowKeys = false;
            this.pnlFares.Controls.Add(numReturnFare);
            this.numReturnFare.ForeColor = Color.Red;
            this.numReturnFare.Location = new System.Drawing.Point(98, 36);//(620, 89);
            this.numReturnFare.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numReturnFare.Name = "numReturnFare";
            numReturnFare.Enabled = false;
            // 
            // 
            // 
            // this.numReturnFare.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //   this.numReturnFare.ShowBorder = true;
            //   this.numReturnFare.ShowUpDownButtons = false;
            this.numReturnFare.Size = new System.Drawing.Size(65, 26);

            this.numReturnFare.TabIndex = 238;
            this.numReturnFare.Validated += new EventHandler(numReturnFare_Validated);
            this.numReturnFare.TabStop = false;
            //this.lblRetFares.BringToFront();
            //////fwdkh2  this.radPanel1.Controls.Add(this.lblRetFares);
            this.pnlFares.Controls.Add(this.lblRetFares);
            //////fwdkh2  this.radPanel1.Controls.Add(this.numReturnFare);
            this.pnlFares.Controls.Add(this.numReturnFare);


            if (lblRetFares != null)
            {
                this.lblRetFares.BringToFront();
                this.numReturnFare.BringToFront();
            }

            //if (numReturnFare != null)
            //    numReturnFare.Enabled = true;

        }
        private void InitializeReturnPanel()
        {

            if (lblReturnDriver != null)
                return;


            this.lblReturnDriver = new Label();
            this.ddlReturnDriver = new UI.MyDropDownList();
            this.lblReturnPickupDate = new Label();
            this.dtpReturnPickupDate = new UI.MyDatePicker();
            this.dtpReturnPickupDate.KeyDown += new KeyEventHandler(dtpReturnPickupDate_KeyDown);
            this.dtpReturnPickupDate.Enter += new EventHandler(dtpReturnPickupDate_Enter);
            this.dtpReturnPickupDate.Leave += new EventHandler(dtpReturnPickupDate_Leave);
            this.dtpReturnPickupTime = new UI.MyDatePicker();
            this.lblReturnPickupTime = new Label();

            //////fwdkh2  this.lblRetFares = new Label();
            ////////this.numReturnFare = new NumericUpDown();

            this.lblReturnVehicle = new Label();
            this.ddlReturnVehicleType = new ComboBox();

            //this.ddlReturnVehicleType = new UI.MyDropDownList();

            this.lblReturnFromAirport = new Label();
            this.ddlReturnFromAirport = new ComboBox();

            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnDriver)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.ddlReturnDriver)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupDate)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupDate)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupTime)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupTime)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.lblRetFares)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.numReturnFare)).BeginInit();
            //((System.ComponentModel.ISupportInitialize)(this.lblReturnVehicle)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlReturnVehicleType)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnFromAirport)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlReturnFromAirport)).BeginInit();



            //fwd00 this.pnlFares.Controls.Add(this.lblReturnDriver);
            this.pnlCustomer.Controls.Add(this.lblReturnDriver);
            // this.pnlFares.Controls.Add(this.ddlReturnDriver);//452, 206
            this.pnlCustomer.Controls.Add(this.ddlReturnDriver);
            //this.pnlMain.Controls.Add(this.lblReturnDriver);
            // this.pnlMain.Controls.Add(this.ddlReturnDriver);
            this.panel2.Controls.Add(this.lblReturnPickupDate);
            this.panel2.Controls.Add(this.dtpReturnPickupDate);
            this.panel2.Controls.Add(this.dtpReturnPickupTime);
            this.panel2.Controls.Add(this.lblReturnPickupTime);
            //this.pnlFares.Controls.Add(this.lblReturnVehicle);
            this.pnlCustomer.Controls.Add(this.lblReturnVehicle);
            // this.pnlFares.Controls.Add(this.ddlReturnVehicleType);
            this.pnlCustomer.Controls.Add(this.ddlReturnVehicleType);
            this.panel2.Controls.Add(this.lblReturnFromAirport);
            this.panel2.Controls.Add(this.ddlReturnFromAirport);

            ////fwdkh2
            //////this.radPanel1.Controls.Add(this.lblRetFares);
            //////this.radPanel1.Controls.Add(this.numReturnFare);



            // 
            // lblReturnDriver
            // 
            this.lblReturnDriver.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnDriver.Location = new System.Drawing.Point(lblDriver.Location.X, lblDriver.Location.Y + 28);//(405, 28);//(408, 38);//(362, 424);
            this.lblReturnDriver.Name = "lblReturnDriver";
            this.lblReturnDriver.Size = new System.Drawing.Size(95, 22);
            this.lblReturnDriver.TabIndex = 168;
            this.lblReturnDriver.Text = "Return Driver";

            // 
            // ddlReturnDriver
            // 
            this.ddlReturnDriver.Caption = null;
            this.ddlReturnDriver.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlReturnDriver.Location = new System.Drawing.Point(ddlDriver.Location.X, ddlDriver.Location.Y + 28);//(515, 28);//(513, 38);//(510, 36);//(610, 422);//(495, 422);
            this.ddlReturnDriver.Name = "ddlReturnDriver";
            this.ddlReturnDriver.Property = null;
            this.ddlReturnDriver.ShowDownArrow = true;
            this.ddlReturnDriver.Size = new System.Drawing.Size(220, 26);
            this.ddlReturnDriver.TabIndex = 23;
            this.ddlReturnDriver.Enter += new EventHandler(ddlReturnDriver_Enter);
            // 
            // lblReturnPickupDate
            // 
            this.lblReturnPickupDate.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnPickupDate.Font = new System.Drawing.Font("Tahoma", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnPickupDate.Location = new System.Drawing.Point(565, 44);//(528, 41);//(603, 396);// new System.Drawing.Point(380, 41);//(362, 396);
            this.lblReturnPickupDate.Name = "lblReturnPickupDate";
            this.lblReturnPickupDate.Size = new System.Drawing.Size(41, 22);
            this.lblReturnPickupDate.TabIndex = 159;
            this.lblReturnPickupDate.Text = "Date";
            this.lblReturnPickupDate.ForeColor = Color.Red;

            panel2.Controls.Add(lblReturnPickupDate);
            // 
            // dtpReturnPickupDate
            // 
            //  this.dtpReturnPickupDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpReturnPickupDate.CustomFormat = "ddd dd/MM/yyyy";
            this.dtpReturnPickupDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpReturnPickupDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpReturnPickupDate.Location = new System.Drawing.Point(610, 40);//(649, 39);//(650, 393);// new System.Drawing.Point(502, 39);//(495, 393);
            this.dtpReturnPickupDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpReturnPickupDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupDate.Name = "dtpReturnPickupDate";
            //this.dtpReturnPickupDate.NullDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupDate.Size = new System.Drawing.Size(135, 25);//(105, 24);
            this.dtpReturnPickupDate.TabIndex = 21;
            this.dtpReturnPickupDate.TabStop = false;
            panel2.Controls.Add(dtpReturnPickupDate);
            //  this.dtpReturnPickupDate.Text = "myDatePicker1";
            //   this.dtpReturnPickupDate.Value = null;
            // 
            // dtpReturnPickupTime
            // 
            //  this.dtpReturnPickupTime.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpReturnPickupTime.CustomFormat = "HH:mm";
            this.dtpReturnPickupTime.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpReturnPickupTime.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpReturnPickupTime.Location = new System.Drawing.Point(493, 40);//(495, 39);//(432, 39);//(495, 393);//new System.Drawing.Point(649, 39);//(650, 393);
            this.dtpReturnPickupTime.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpReturnPickupTime.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupTime.Name = "dtpReturnPickupTime";
            // this.dtpReturnPickupTime.NullDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupTime.ShowUpDown = true;
            this.dtpReturnPickupTime.Size = new System.Drawing.Size(73, 25);
            this.dtpReturnPickupTime.TabIndex = 22;
            this.dtpReturnPickupTime.TabStop = false;



            panel2.Controls.Add(dtpReturnPickupTime);
            // this.dtpReturnPickupTime.TabIndexChanged += new EventHandler(dtpReturnPickupTime_TabIndexChanged);
            //  this.dtpReturnPickupTime.Text = "myDatePicker2";

            //  this.dtpReturnPickupTime.Value = null;

            this.dtpReturnPickupTime.Leave += new EventHandler(dtpPickupTime_Leave);
            // this.dtpReturnPickupTime.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
            this.dtpReturnPickupTime.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
            // 
            // lblReturnPickupTime
            // 
            this.lblReturnPickupTime.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnPickupTime.Font = new System.Drawing.Font("Tahoma", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnPickupTime.Location = new System.Drawing.Point(367, 44);//(370, 44);//(389, 41);// new System.Drawing.Point(604, 41);//(603, 396);
            this.lblReturnPickupTime.Name = "lblReturnPickupTime";
            this.lblReturnPickupTime.Size = new System.Drawing.Size(135, 22);
            this.lblReturnPickupTime.TabIndex = 161;
            this.lblReturnPickupTime.Text = "Ret. Pickup Time";
            this.lblReturnPickupTime.ForeColor = Color.Red;

            panel2.Controls.Add(lblReturnPickupTime);//pnlMain

            // ((System.ComponentModel.ISupportInitialize)(this.lblReturnDriver)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlReturnDriver)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupDate)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupDate)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupTime)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupTime)).EndInit();


            this.lblReturnSpecialReq = new Label();
            this.txtReturnSpecialReq = new TextBox();


            //   ((System.ComponentModel.ISupportInitialize)(this.lblReturnSpecialReq)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.txtReturnSpecialReq)).BeginInit();

            this.pnlMain.Controls.Add(this.lblReturnSpecialReq);
            this.pnlMain.Controls.Add(this.txtReturnSpecialReq);


            // 
            // lblReturnSpecialReq
            // 
            this.lblReturnSpecialReq.AutoSize = false;
            this.lblReturnSpecialReq.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnSpecialReq.Font = new System.Drawing.Font("Tahoma", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));



            this.lblReturnSpecialReq.Name = "lblReturnSpecialReq";
            this.lblReturnSpecialReq.Size = new System.Drawing.Size(116, 62);
            this.lblReturnSpecialReq.TabIndex = 267;
            this.lblReturnSpecialReq.Text = "Return Special Requirements";
            // 
            // txtReturnSpecialReq
            // 
            this.txtReturnSpecialReq.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtReturnSpecialReq.MaxLength = 500;
            this.txtReturnSpecialReq.Multiline = true;
            this.txtReturnSpecialReq.Name = "txtReturnSpecialReq";
            // 
            // 
            // 
            //   this.txtReturnSpecialReq.RootElement.StretchVertically = true;
            this.txtReturnSpecialReq.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.txtReturnSpecialReq.Size = new System.Drawing.Size(200, 75);
            this.txtReturnSpecialReq.TabIndex = 266;
            this.txtReturnSpecialReq.TabStop = false;




            this.lblReturnSpecialReq.Location = new System.Drawing.Point(320, 470);
            this.txtReturnSpecialReq.Location = new System.Drawing.Point(440, 462);



            // 
            // lblRetFares
            //
            //fwdkh2
            //////       this.lblRetFares.BackColor = System.Drawing.Color.Orange;
            //////       this.lblRetFares.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
            //////       this.lblRetFares.ForeColor = System.Drawing.Color.Black;
            //////       this.pnlFares.Controls.Add(this.lblRetFares);
            //////       this.lblRetFares.Location = new System.Drawing.Point(5, 36);//(525, 92);
            //////       this.lblRetFares.Name = "lblRetFares";
            //////       // 
            //////       // 
            //////       // 
            ////////       this.lblRetFares.RootElement.ForeColor = System.Drawing.Color.Black;
            //////       this.lblRetFares.Size = new System.Drawing.Size(111, 20);
            //////       this.lblRetFares.TabIndex = 239;
            //////       this.lblRetFares.Text = "Ret. Fares £";
            //////       lblRetFares.BackColor = Color.FromArgb(233, 240, 249);
            //////       // 
            //////       // numReturnFare
            //////       // 
            //////       this.numReturnFare.DecimalPlaces = 2;
            //////       this.numReturnFare.Enabled = false;
            //////       // this.numReturnFare.EnableKeyMap = true;
            //////       this.numReturnFare.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //////       this.numReturnFare.InterceptArrowKeys = false;
            //////       this.pnlFares.Controls.Add(numReturnFare);
            //////       this.numReturnFare.Location = new System.Drawing.Point(98, 36);//(620, 89);
            //////       this.numReturnFare.Maximum = new decimal(new int[] {
            //////       99999999,
            //////       0,
            //////       0,
            //////       0});
            //////       this.numReturnFare.Name = "numReturnFare";
            //////       // 
            //////       // 
            //////       // 
            //////       // this.numReturnFare.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //////       //   this.numReturnFare.ShowBorder = true;
            //////       //   this.numReturnFare.ShowUpDownButtons = false;
            //////       this.numReturnFare.Size = new System.Drawing.Size(62, 24);

            //////       this.numReturnFare.TabIndex = 238;
            //////       this.numReturnFare.Validated += new EventHandler(numReturnFare_Validated);
            //////       this.numReturnFare.TabStop = false;

            //  this.numReturnFare.Controls[0].Hide();


            //  ((Telerik.WinControls.UI.RadSpinElement)(this.numReturnFare.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
            //   ((Telerik.WinControls.Primitives.FillPrimitive)(this.numReturnFare.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numReturnFare.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0.00";
            //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numReturnFare.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));


            // 
            // lblReturnVehicle
            // 
            this.lblReturnVehicle.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnVehicle.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold);
            this.lblReturnVehicle.Location = new System.Drawing.Point(lblVehicleType.Location.X, lblVehicleType.Location.Y + 28);//(405, 58);//(3, 241);
            this.lblReturnVehicle.Name = "lblReturnVehicle";
            this.lblReturnVehicle.Size = new System.Drawing.Size(108, 20);
            this.lblReturnVehicle.TabIndex = 274;
            this.lblReturnVehicle.Text = "Return Vehicle";
            this.lblReturnVehicle.Visible = false;
            // 
            // ddlReturnVehicleType
            // 
            //this.ddlReturnVehicleType.Caption = null;
            this.ddlReturnVehicleType.Font = new System.Drawing.Font("Tahoma", 10F);
            this.ddlReturnVehicleType.Location = new System.Drawing.Point(ddlVehicleType.Location.X, ddlVehicleType.Location.Y + 28);//(515, 58);//(113, 240);
            this.ddlReturnVehicleType.Name = "ddlReturnVehicleType";
            //this.ddlReturnVehicleType.Property = null;
            // this.ddlReturnVehicleType.ShowDownArrow = true;
            this.ddlReturnVehicleType.Size = new System.Drawing.Size(ddlVehicleType.Size.Width, 26);//(124, 24);
            this.ddlReturnVehicleType.TabIndex = 273;
            this.ddlReturnVehicleType.Visible = false;



            // 
            // lblReturnFromAirport
            // 
            this.lblReturnFromAirport.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnFromAirport.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnFromAirport.Location = new System.Drawing.Point(363, 68);
            this.lblReturnFromAirport.Name = "lblReturnFromAirport";
            this.lblReturnFromAirport.Size = new System.Drawing.Size(98, 22);
            this.lblReturnFromAirport.TabIndex = 209;
            //   this.lblReturnFromAirport.Text = "Return From ";
            this.lblReturnFromAirport.Text = "";
            this.lblReturnFromAirport.Visible = false;
            // 
            // ddlReturnFromAirport
            // 
            this.ddlReturnFromAirport.BackColor = System.Drawing.Color.White;
            this.ddlReturnFromAirport.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //  this.ddlReturnFromAirport.Location = new System.Drawing.Point(496, 69);
            this.ddlReturnFromAirport.Location = ddlDropOffPlot.Location;
            this.ddlReturnFromAirport.Name = "ddlReturnFromAirport";
            //  this.ddlReturnFromAirport.NewValue = null;
            //   this.ddlReturnFromAirport.OldValue = null;
            // 
            // 
            // 
            // this.ddlReturnFromAirport.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //    this.ddlReturnFromAirport.ShowDropDownArrow = Telerik.WinControls.ElementVisibility.Visible;
            this.ddlReturnFromAirport.Size = new System.Drawing.Size(215, 23);
            this.ddlReturnFromAirport.TabIndex = 208;
            this.ddlReturnFromAirport.TabStop = false;
            this.ddlReturnFromAirport.Visible = false;


            //   ((System.ComponentModel.ISupportInitialize)(this.lblReturnSpecialReq)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.txtReturnSpecialReq)).EndInit();

            // ((System.ComponentModel.ISupportInitialize)(this.lblRetFares)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.numReturnFare)).EndInit();


            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnVehicle)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlReturnVehicleType)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.lblReturnFromAirport)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.ddlReturnFromAirport)).EndInit();


            InitializeReturnFareControls();

            InstallEventHandlers(panel2);


        }

        void dtpReturnPickupTime_TabIndexChanged(object sender, EventArgs e)
        {
            txtFromAddress.Focus();
        }

        void ddlReturnDriver_Enter(object sender, EventArgs e)
        {
            if (ddlReturnDriver.DataSource == null)
            {
                ComboFunctions.FillDriverNoQueueCombo(ddlReturnDriver);

            }
        }

        void dtpReturnPickupDate_Enter(object sender, EventArgs e)
        {
            lastReturnPickupDate = dtpReturnPickupDate.Value;
        }

        void numReturnFare_Validated(object sender, EventArgs e)
        {
            CalculateServiceCharges(null);

            //if (numReturnFare.Value > 0 && numReturnBookingFee != null)
            //    numReturnBookingFee.Value = numReturnFare.Value;
        }

        DateTime? lastReturnPickupDate;
        void dtpReturnPickupDate_Leave(object sender, EventArgs e)
        {
            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
            {
                try
                {

                    if (lastReturnPickupDate == null || (dtpReturnPickupDate.Value!=null && dtpReturnPickupDate.DateTimePickerElement.Value!=null && lastReturnPickupDate != dtpReturnPickupDate.DateTimePickerElement.Value))
                    {

                        UpdateAutoCalculateFares();
                    }
                }
                catch
                {


                }
            }
        }

        void dtpReturnPickupDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnReturnPickupTime();
            }
        }






        private void InitializeAgentPanel()
        {
            if (chkTakenByAgent == null)
            {

                this.chkTakenByAgent = new CheckBox();
                this.numAgentCommission = new NumericUpDown();
                this.radLabel32 = new Label();
                this.numAgentCommissionPercent = new NumericUpDown();
                this.radLabel34 = new Label();
                this.ddlAgentCommissionType = new UI.MyDropDownList();

                //  ((System.ComponentModel.ISupportInitialize)(this.chkTakenByAgent)).BeginInit();
                //   ((System.ComponentModel.ISupportInitialize)(this.numAgentCommission)).BeginInit();
                //      ((System.ComponentModel.ISupportInitialize)(this.radLabel32)).BeginInit();
                //   ((System.ComponentModel.ISupportInitialize)(this.numAgentCommissionPercent)).BeginInit();
                //      ((System.ComponentModel.ISupportInitialize)(this.radLabel34)).BeginInit();
                //    ((System.ComponentModel.ISupportInitialize)(this.ddlAgentCommissionType)).BeginInit();

                this.radPanel1.Controls.Add(this.chkTakenByAgent);
                this.radPanel1.Controls.Add(this.radLabel34);
                this.radPanel1.Controls.Add(this.numAgentCommissionPercent);
                this.radPanel1.Controls.Add(this.radLabel32);
                //  this.radPanel1.Controls.Add(this.radLabel30);
                this.radPanel1.Controls.Add(this.numAgentCommission);
                this.radPanel1.Controls.Add(this.ddlAgentCommissionType);


                // 
                // chkTakenByAgent
                // 
                this.chkTakenByAgent.BackColor = System.Drawing.Color.Transparent;
                this.chkTakenByAgent.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.chkTakenByAgent.ForeColor = System.Drawing.Color.Black;
                this.chkTakenByAgent.Location = new System.Drawing.Point(932, 64);
                this.chkTakenByAgent.Name = "chkTakenByAgent";
                // 
                // 
                // 
                //   this.chkTakenByAgent.RootElement.ForeColor = System.Drawing.Color.Black;
                this.chkTakenByAgent.Size = new System.Drawing.Size(157, 22);
                this.chkTakenByAgent.TabIndex = 266;
                this.chkTakenByAgent.Text = "Payment Taken By Agent";
                //   this.chkTakenByAgent.TextWrap = true;
                this.chkTakenByAgent.Visible = true;
                // 
                // numAgentCommission
                // 
                this.numAgentCommission.BackColor = System.Drawing.Color.Transparent;
                this.numAgentCommission.DecimalPlaces = 2;
                this.numAgentCommission.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numAgentCommission.Location = new System.Drawing.Point(1101, 91);
                this.numAgentCommission.Name = "numAgentCommission";
                this.numAgentCommission.Maximum = 1000;
                this.numAgentCommission.Validated += new EventHandler(numAgentCommission_Validated);
                // 
                // 
                // 
                // this.numAgentCommission.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
                // this.numAgentCommission.ShowBorder = true;
                //  this.numAgentCommission.ShowUpDownButtons = false;
                this.numAgentCommission.Size = new System.Drawing.Size(75, 24);
                this.numAgentCommission.TabIndex = 267;
                this.numAgentCommission.TabStop = false;
                // ((Telerik.WinControls.UI.RadSpinElement)(this.numAgentCommission.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
                //  ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //  ((Telerik.WinControls.Primitives.BorderPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // ((Telerik.WinControls.Layouts.BoxLayout)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0))).Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0.00";
                //   ((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // 
                // radLabel32
                // 
                this.radLabel32.AutoSize = false;
                this.radLabel32.BackColor = System.Drawing.Color.Transparent;
                this.radLabel32.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.radLabel32.ForeColor = System.Drawing.Color.Black;
                this.radLabel32.Location = new System.Drawing.Point(932, 93);
                this.radLabel32.Name = "radLabel32";
                // 
                // 
                // 
                // this.radLabel32.RootElement.ForeColor = System.Drawing.Color.Black;
                this.radLabel32.Size = new System.Drawing.Size(99, 22);
                this.radLabel32.TabIndex = 268;
                this.radLabel32.Text = "Commission";
                // 
                // numAgentCommissionPercent
                // 
                this.numAgentCommissionPercent.BackColor = System.Drawing.Color.Transparent;
                this.numAgentCommissionPercent.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numAgentCommissionPercent.Location = new System.Drawing.Point(1026, 92);
                this.numAgentCommissionPercent.Name = "numAgentCommissionPercent";
                // 
                // 
                // 
                //   this.numAgentCommissionPercent.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
                //   this.numAgentCommissionPercent.ShowBorder = true;
                // this.numAgentCommissionPercent.ShowUpDownButtons = false;
                this.numAgentCommissionPercent.Size = new System.Drawing.Size(36, 24);
                this.numAgentCommissionPercent.TabIndex = 269;
                this.numAgentCommissionPercent.TabStop = false;
                this.numAgentCommissionPercent.Validated += new EventHandler(numAgentCommissionPercent_Validated);

                //((Telerik.WinControls.UI.RadSpinElement)(this.numAgentCommissionPercent.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
                //((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //((Telerik.WinControls.Primitives.BorderPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //((Telerik.WinControls.Layouts.BoxLayout)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(0))).Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                //((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                //((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                //((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0";
                //((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommissionPercent.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //// 
                // radLabel34
                // 
                this.radLabel34.BackColor = System.Drawing.Color.Transparent;
                this.radLabel34.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.radLabel34.Location = new System.Drawing.Point(1063, 93);
                this.radLabel34.Name = "radLabel34";
                this.radLabel34.Size = new System.Drawing.Size(26, 22);
                this.radLabel34.TabIndex = 270;
                this.radLabel34.Text = "%";



                // 
                // ddlAgentCommissionType
                // 
                this.ddlAgentCommissionType.Caption = null;
                this.ddlAgentCommissionType.DropDownStyle = RadDropDownStyle.DropDown; //ComboBoxStyle.DropDown;
                this.ddlAgentCommissionType.Enabled = false;
                this.ddlAgentCommissionType.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.ddlAgentCommissionType.ForeColor = System.Drawing.Color.Black;

                Telerik.WinControls.UI.RadListDataItem radListDataItem1 = new Telerik.WinControls.UI.RadListDataItem();
                Telerik.WinControls.UI.RadListDataItem radListDataItem2 = new Telerik.WinControls.UI.RadListDataItem();
                radListDataItem1.Text = "Percent";
                radListDataItem1.TextWrap = true;
                radListDataItem2.Text = "Amount";
                radListDataItem2.TextWrap = true;
                this.ddlAgentCommissionType.Items.Add(radListDataItem1);
                this.ddlAgentCommissionType.Items.Add(radListDataItem2);
                this.ddlAgentCommissionType.Location = new System.Drawing.Point(1000, 117);
                this.ddlAgentCommissionType.Name = "ddlAgentCommissionType";
                this.ddlAgentCommissionType.Property = null;
                // 
                // 
                // 
                //   this.ddlAgentCommissionType.RootElement.ForeColor = System.Drawing.Color.Black;
                this.ddlAgentCommissionType.ShowDownArrow = true;
                this.ddlAgentCommissionType.Size = new System.Drawing.Size(108, 26);
                this.ddlAgentCommissionType.TabIndex = 243;

                // Added on 15 sept 2014
                //  this.ddlAgentCommissionType.SelectedIndex = 1;
                //

                ddlAgentCommissionType.SelectedIndexChanged += DdlAgentCommissionType_SelectedIndexChanged;//new EventHandler(ddlAgentCommissionType_SelectedIndexChanged);
                this.ddlAgentCommissionType.Enabled = true;

                //     ((System.ComponentModel.ISupportInitialize)(this.chkTakenByAgent)).EndInit();
                //     ((System.ComponentModel.ISupportInitialize)(this.numAgentCommission)).EndInit();
                //   ((System.ComponentModel.ISupportInitialize)(this.radLabel32)).EndInit();
                //    ((System.ComponentModel.ISupportInitialize)(this.numAgentCommissionPercent)).EndInit();
                //   ((System.ComponentModel.ISupportInitialize)(this.radLabel34)).EndInit();
                //     ((System.ComponentModel.ISupportInitialize)(this.ddlAgentCommissionType)).EndInit();
            }
        }

        private void DdlAgentCommissionType_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {

                if (ddlAgentCommissionType.Text.Trim() == "Percent")
                {
                    numAgentCommissionPercent.Enabled = false;
                    numAgentCommission.Enabled = false;
                }
                else
                {
                    numAgentCommissionPercent.Enabled = false;
                    numAgentCommission.Enabled = true;

                }

            }
            catch (Exception ex)
            {


            }
        }

        void numAgentCommission_Validated(object sender, EventArgs e)
        {
            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == true)
            {

                CalculateDriverFaresAndWOTopOfAgentCompanyPrice();
            }
        }

        void numAgentCommissionPercent_Validated(object sender, EventArgs e)
        {
            CalculateDriverFaresAndCompanyPrice();
            // CalculationAgentCommissionPercent();
        }


        private void CalculationAgentCommissionPercent()
        {
            try
            {
                if (numAgentCommission != null)
                {

                    numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value) / 100;

                    if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == true)
                    {
                        CalculateDriverFaresAndCompanyPrice();
                    }

                }
            }
            catch (Exception ex)
            {


            }
        }



        void ddlAgentCommissionType_SelectedIndexChanged(object sender, EventArgs e)
        {


            try
            {

                if (ddlAgentCommissionType.Text.Trim() == "Percent")
                {
                    numAgentCommissionPercent.Enabled = false;
                    numAgentCommission.Enabled = false;
                }
                else
                {
                    numAgentCommissionPercent.Enabled = false;
                    numAgentCommission.Enabled = true;

                }

            }
            catch (Exception ex)
            {


            }

        }

        private void InitializeAccPassowrdPanel()
        {
            if (pnlAccpassword != null)
                return;

            try
            {



                this.pnlAccpassword = new System.Windows.Forms.Panel();
                this.txtAccPassword = new TextBox();
                this.radLabel33 = new Label();

               // this.pnlAccpassword.SuspendLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.txtAccPassword)).BeginInit();
                //  ((System.ComponentModel.ISupportInitialize)(this.radLabel33)).BeginInit();



                // 
                // pnlAccpassword
                // 
                this.pnlAccpassword.BackColor = System.Drawing.Color.Transparent;
                // this.pnlAccpassword.Controls.Add(this.txtAccPassword);
                //this.pnlAccpassword.Controls.Add(this.radLabel33);
                this.pnlAccpassword.Location = new System.Drawing.Point(7, 382);
                this.pnlAccpassword.Name = "pnlAccpassword";
                this.pnlAccpassword.Size = new System.Drawing.Size(322, 1);
                this.pnlAccpassword.TabIndex = 221;
                this.pnlAccpassword.Visible = false;
                // 
                // txtAccPassword
                // 

                pnlCustomer.Controls.Add(txtAccPassword);
                this.txtAccPassword.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.txtAccPassword.Location = new System.Drawing.Point(487, 231);//(104, 3);
                this.txtAccPassword.MaxLength = 50;
                this.txtAccPassword.Name = "txtAccPassword";
                this.txtAccPassword.PasswordChar = '*';
                this.txtAccPassword.Size = new System.Drawing.Size(208, 21);
                this.txtAccPassword.TabIndex = 215;
                this.txtAccPassword.TabStop = false;
                // 
                // radLabel33
                // 
                this.radLabel33.BackColor = System.Drawing.Color.Transparent;
                this.radLabel33.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.radLabel33.ForeColor = System.Drawing.Color.Black;
                this.radLabel33.Location = new System.Drawing.Point(411, 232);//(1, 3);
                this.radLabel33.Name = "radLabel33";
                // 
                // 
                // 
                // this.radLabel33.RootElement.ForeColor = System.Drawing.Color.Black;
                this.radLabel33.Size = new System.Drawing.Size(83, 22);
                this.radLabel33.TabIndex = 214;
                this.radLabel33.Text = "Password";
                pnlCustomer.Controls.Add(radLabel33);

                this.pnlMain.Controls.Add(this.pnlAccpassword);

             //   this.pnlAccpassword.ResumeLayout(false);
                this.pnlAccpassword.PerformLayout();


                pnlAccpassword.BringToFront();

                //  ((System.ComponentModel.ISupportInitialize)(this.txtAccPassword)).EndInit();
                //  ((System.ComponentModel.ISupportInitialize)(this.radLabel33)).EndInit();
            }
            catch (Exception ex)
            {

            }
        }





        private void InitializeOrderNoPanel()
        {

            if (this.pnlOrderNo != null)
            {
                return;
            }

            try
            {


                this.pnlOrderNo = new System.Windows.Forms.Panel();
                //fwdkh9  pnlOrderNo.Visible = false;
                this.lblOrderNo = new Label();

                this.txtOrderNo = new TextBox();



                this.pnlOrderNo.SuspendLayout();
                // ((System.ComponentModel.ISupportInitialize)(this.lblOrderNo)).BeginInit();

                //     ((System.ComponentModel.ISupportInitialize)(this.txtOrderNo)).BeginInit();


                this.pnlMain.Controls.Add(this.pnlOrderNo);

                // 
                // pnlOrderNo
                // 
                // this.pnlOrderNo.Controls.Add(this.lblOrderNo);
                pnlCustomer.Controls.Add(lblOrderNo);

                //this.pnlOrderNo.Controls.Add(this.txtOrderNo);
                pnlCustomer.Controls.Add(txtOrderNo);

                this.pnlOrderNo.Location = new System.Drawing.Point(6, 408);
                this.pnlOrderNo.Name = "pnlOrderNo";
                this.pnlOrderNo.Size = new System.Drawing.Size(345, 29);
                this.pnlOrderNo.TabIndex = 205;
                pnlOrderNo.Visible = false;

                // 
                // lblOrderNo
                // 
                this.lblOrderNo.BackColor = System.Drawing.Color.Transparent;
                this.lblOrderNo.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.lblOrderNo.Location = new System.Drawing.Point(411, 174);//(16, 3);
                this.lblOrderNo.Name = "lblOrderNo";
                this.lblOrderNo.Size = new System.Drawing.Size(70, 22);
                this.lblOrderNo.TabIndex = 202;
                this.lblOrderNo.Text = "Order No";


                // 
                // txtOrderNo
                // 
                this.txtOrderNo.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                this.txtOrderNo.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.CustomSource;
                this.txtOrderNo.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.txtOrderNo.Location = new System.Drawing.Point(487, 172);//(104, 2);
                this.txtOrderNo.MaxLength = 50;
                this.txtOrderNo.Name = "txtOrderNo";
                this.txtOrderNo.Size = new System.Drawing.Size(208, 22);
                this.txtOrderNo.TabIndex = 201;
                this.txtOrderNo.TabStop = false;



                this.pnlOrderNo.ResumeLayout(false);
                this.pnlOrderNo.PerformLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.lblOrderNo)).EndInit();

                //   ((System.ComponentModel.ISupportInitialize)(this.txtOrderNo)).EndInit();


                pnlOrderNo.BringToFront();

            }
            catch (Exception ex)
            {


            }

        }



        private void InitializePupilNo()
        {
            try
            {

                if (pnlOrderNo == null)
                {

                    this.pnlOrderNo = new System.Windows.Forms.Panel();
                    this.pnlOrderNo.SuspendLayout();

                    this.pnlOrderNo.Location = new System.Drawing.Point(8, 410);
                    this.pnlOrderNo.Name = "pnlOrderNo";
                    this.pnlOrderNo.Size = new System.Drawing.Size(345, 54);
                    this.pnlOrderNo.TabIndex = 205;


                    this.pnlMain.Controls.Add(this.pnlOrderNo);


                    this.pnlOrderNo.ResumeLayout(false);
                    this.pnlOrderNo.PerformLayout();
                }




                if (this.txtPupilNo == null)
                {

                    this.txtPupilNo = new TextBox();

                    this.lblPupilNo = new Label();


                    //    ((System.ComponentModel.ISupportInitialize)(this.txtPupilNo)).BeginInit();
                    //    ((System.ComponentModel.ISupportInitialize)(this.lblPupilNo)).BeginInit();



                    // 
                    // pnlOrderNo
                    // 


                    //  this.pnlOrderNo.Controls.Add(this.txtPupilNo);
                    this.pnlCustomer.Controls.Add(this.txtPupilNo);

                    // this.pnlOrderNo.Controls.Add(this.lblPupilNo);
                    this.pnlCustomer.Controls.Add(this.lblPupilNo);

                    lblPupilNo.BringToFront();
                    // 
                    // lblOrderNo
                    // 


                    // 
                    // txtPupilNo
                    // 
                    this.txtPupilNo.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                    this.txtPupilNo.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.CustomSource;
                    this.txtPupilNo.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    this.txtPupilNo.Location = new System.Drawing.Point(133, 407);//(105, 28);
                    this.txtPupilNo.MaxLength = 10;
                    this.txtPupilNo.Name = "txtPupilNo";
                    this.txtPupilNo.Size = new System.Drawing.Size(208, 24);
                    this.txtPupilNo.TabIndex = 203;
                    this.txtPupilNo.TabStop = false;
                    // 
                    // txtOrderNo
                    // 

                    // 
                    // lblPupilNo
                    // 
                    this.lblPupilNo.BackColor = System.Drawing.Color.Transparent;
                    this.lblPupilNo.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    this.lblPupilNo.Location = new System.Drawing.Point(19, 406);//(1, 29);14, 410
                    this.lblPupilNo.Name = "lblPupilNo";
                    this.lblPupilNo.Size = new System.Drawing.Size(64, 22);
                    this.lblPupilNo.TabIndex = 204;
                    this.lblPupilNo.Text = "Rt. Order No";

                    //  ((System.ComponentModel.ISupportInitialize)(this.txtPupilNo)).EndInit();

                    //   ((System.ComponentModel.ISupportInitialize)(this.lblPupilNo)).EndInit();



                }


                //   pnlOrderNo.BringToFront();
            }
            catch (Exception ex)
            {


            }
        }


     

        private void SetCashAccount(int accTypeId)
        {
            if (accTypeId == Enums.ACCOUNT_TYPE.CASH)
            {

                if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == false && chkIsCommissionWise.Visible)
                {
                    chkIsCommissionWise.Checked = true;
                    ddlCommissionType.SelectedValue = "Amount";
                    ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;
                }
                //  ddlPaymentType.SelectedValue = null;

                //var item = ddlPaymentType.Items.FirstOrDefault(c => c.Value.ToInt() == Enums.PAYMENT_TYPES.ROOM_CHARGE);
                //if (item != null)
                //{
                //    item.Enabled = true;
                //}


            }
            else if (accTypeId == 3)
            {
                SetCreditCardPaymentType();
            }

            else
            {
                chkIsCommissionWise.Checked = false;
                SetAccountPaymentType();

                //var item = ddlPaymentType.Items.FirstOrDefault(c => c.Value.ToInt() == Enums.PAYMENT_TYPES.ROOM_CHARGE);
                //if (item != null)
                //{
                //    item.Enabled = false;
                //}
            }

        }


        private void SetCreditCardPaymentType()
        {

            ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD;
        }

        private void ClearDepartment()
        {
            if (ddlDepartment != null)
                ddlDepartment.DataSource = null;
        }


        private void FillDepartmentsCombo(int companyId)
        {

            try
            {
                ComboFunctions.FillCompanyDepartmentCombo(ddlDepartment, c => c.CompanyId == companyId);
            //    if (ddlDepartment.SelectedIndex == 0)
               //     ddlDepartment.SelectedIndex = -1;

            }
            catch
            {

            }
        }


        private void FillEscortsCombo()
        {

            if (ddlEscort.DataSource == null)
                ComboFunctions.FillEscortCombo(ddlEscort, null);
        }



        private void HideOrderNoPanel()
        {
            if (pnlOrderNo == null)
                return;

            pnlOrderNo.Visible = false;
            txtOrderNo.Text = string.Empty;
            txtPupilNo.Text = string.Empty;



            //if (txtSpecialRequirements.Location.Y != 458)
            //{
            //     txtSpecialRequirements.Location = new Point(111, 458);
            //     txtSpecialRequirements.Size = new Size(240,50);
            //}
        }




        private void btnExitForm_Click(object sender, EventArgs e)
        {
            try
            {
                if (pnlVia == null || pnlVia.Visible == false)
                {
                    if (DialogResult.Yes == MessageBox.Show("Are you sure you want to close?? ", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        this.Close();
                    }
                }
                else
                {

                    btnSelectVia.Tag = null;



                    if (pnlVia != null)
                    {

                        ShowViaPoint(false);

                    }
                }
            }
            catch
            {


            }
        }

        private void btnPrintJob_Click(object sender, EventArgs e)
        {
            Print();
        }

        private void Print()
        {

            if (objMaster.Current == null) return;


            long id = objMaster.Current.Id;


            ShowAuditLogReport();







        }


        private void JobReport_Click(object sender, EventArgs e)
        {
            try
            {
                TaxiDataContext db = new TaxiDataContext();

                var list = db.Vu_BookingDetails.Where(c => c.Id == objMaster.Current.Id || c.MasterJobId == objMaster.Current.Id).ToList();



                UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                rptfrmJobDetails frm = null;
                rptfrmJobDetails2 frm2 = null;
                rptfrmJobDetails3 frm3 = null;
                rptfrmJobDetails4 frm4 = null;
                if (objReport != null)
                {
                    switch (objReport.TemplateValue)
                    {
                        case "rptfrmJobDetails":
                            frm = new rptfrmJobDetails();
                            frm.DataSource = list;
                            frm.GenerateReport();

                            break;


                        case "rptfrmJobDetails2":
                            frm2 = new rptfrmJobDetails2();
                            frm2.DataSource = list;
                            frm2.GenerateReport();

                            break;
                        case "rptfrmJobDetails3":
                            frm3 = new rptfrmJobDetails3();
                            frm3.DataSource = list;
                            frm3.GenerateReport();

                            break;


                        case "rptfrmJobDetails4":
                            frm4 = new rptfrmJobDetails4();
                            frm4.DataSource = list;
                            frm4.GenerateReport();

                            break;

                    }
                }



                //Telerik.WinControls.UI.Docking.DockWindow doc = UI.MainMenuForm.MainMenuFrm.GetDockByName(objReport.TemplateValue + "1");

                //if (doc != null)
                //{
                //    doc.Close();
                //}


                if (frm != null)
                {
                    frm.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm.Size = new Size(800, 800);
                    frm.ControlBox = true;
                    frm.MaximizeBox = true;
                    frm.MinimizeBox = true;
                    frm.ShowDialog();

                    frm.Dispose();
                }
                else if (frm2 != null)
                {
                    frm2.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm2.Size = new Size(850, 800);
                    frm2.ControlBox = true;
                    frm2.MaximizeBox = true;
                    frm2.MinimizeBox = true;
                    frm2.ShowDialog();

                    frm2.Dispose();


                }
                else if (frm3 != null)
                {
                    frm3.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm3.Size = new Size(850, 800);
                    frm3.ControlBox = true;
                    frm3.MaximizeBox = true;
                    frm3.MinimizeBox = true;
                    frm3.ShowDialog();

                    frm3.Dispose();


                }

                else if (frm4 != null)
                {
                    frm4.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm4.Size = new Size(850, 800);
                    frm4.ControlBox = true;
                    frm4.MaximizeBox = true;
                    frm4.MinimizeBox = true;
                    frm4.ShowDialog();

                    frm4.Dispose();


                }
            }
            catch
            {


            }

        }

        private void opt_JOneWay_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetJourneyWise(args.ToggleState);

            if (args.ToggleState == ToggleState.On && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }

        private void chkIsCommissionWise_ToggleStateChanged(object sender, EventArgs args)
        {

            SetCommissionWise(chkIsCommissionWise.Checked ? ToggleState.On : ToggleState.Off);
        }


        private void SetCommissionWise(ToggleState toggle)
        {
            if (toggle == ToggleState.On)
            {
                numDriverCommission.Enabled = true;
                ddlCommissionType.Enabled = true;
            }
            else
            {
                numDriverCommission.Enabled = false;
                ddlCommissionType.Enabled = false;
            }

            SetDefaultCommission();
        }




        private void btnDespatchView_Click(object sender, EventArgs e)
        {


            ShowRouteSuggesstion();
        }


        private void ShowRouteSuggesstion()
        {
            try
            {

                string FromAddress = "";
                string ToAddress = "";
                string[] via = new string[0];

                if (pnlVia != null)
                {
                    via = grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr())).ToArray<string>();
                }


                int fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();


                FromAddress = txtFromAddress.Text.ToStr().Trim();
                int toLocTypeId = ddlToLocType.SelectedValue.ToInt();


                ToAddress = txtToAddress.Text.ToStr().Trim();


                if (string.IsNullOrEmpty(FromAddress) || string.IsNullOrEmpty(ToAddress))
                {

                    ENUtils.ShowMessage("Required FromAddress or ToAddress");
                    return;
                }



                int? VehicleId = ddlVehicleType.SelectedValue.ToInt();
                int? CompanyId = ddlCompany.SelectedValue.ToInt();







                string viaStr = "**";

                if (via != null && via.Count() > 0)
                {
                    viaStr = string.Join(">>>", via);

                    viaStr = viaStr.Replace(" ", "**").Trim();

                }


                string connString = Application.StartupPath + "\\TreasureRouteMap.exe";




                DateTime? pickupdatetime = dtpPickupTime.Value;

                if (pickupdatetime == null)
                    pickupdatetime = DateTime.Now;



                System.Diagnostics.Process proc = System.Diagnostics.Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }



                string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");




                FromAddress = General.GetPostCodeMatch(FromAddress) + ", UK";
                ToAddress = General.GetPostCodeMatch(ToAddress) + ", UK";



                string arg = "frmroutsuggestions" + " " + conn + " " + FromAddress.Replace(" ", "**") + " " + ToAddress.Replace(" ", "**") + " " + viaStr + " " + VehicleId + " " + CompanyId + " " + fromLocTypeId.ToStr() + " " + string.Format("{0:dd/MM/yyyy HH:mm}", pickupdatetime).Replace(" ", "**");
                System.Diagnostics.Process.Start(connString, arg);



            }
            catch (Exception ex)
            {


            }


        }




        private void ddlCommissionType_SelectedIndexChanged(object sender, EventArgs e)
        {


            if (ddlCommissionType.SelectedValue.ToStr().Trim() == "Percent")
            {
                numDriverCommission.DecimalPlaces = 0;
                numDriverCommission.Maximum = 100;
                SetDefaultCommission();
            }
            else
            {
                numDriverCommission.DecimalPlaces = 2;
                numDriverCommission.Maximum = 99999999;
                SetDefaultCommissionAmount();
            }

        }


        private void SetDefaultCommissionAmount()
        {
            numDriverCommission.Value = (numFareRate.Value * AppVars.objPolicyConfiguration.DriverCommissionPerBooking.ToDecimal()) / 100;


        }

        private void chkQuotation_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetQuotation(args.ToggleState);
        }

        private void SetQuotation(ToggleState toggle)
        {
            if (toggle == ToggleState.On)
            {
                ddlDriver.Enabled = false;

                if (ddlReturnDriver != null)
                    ddlReturnDriver.Enabled = false;


                btnSaveNew.Text = "Save Quotation";

                if (objMaster.PrimaryKeyValue != null)
                {
                    btnCancelBooking.Visible = false;
                    //       btnConfirmBooking.Visible = true;
                    // btnCancelBooking.SendToBack();
                    //      btnConfirmBooking.BringToFront();
                }
            }
            else
            {
                btnSaveNew.Text = "Save Booking    (HOME)";
                ddlDriver.Enabled = true;
                if (ddlReturnDriver != null)
                    ddlReturnDriver.Enabled = true;

            }

        }

        private void btnConfirmBooking_Click(object sender, EventArgs e)
        {
            try
            {
                chkQuotation.Checked = false;
                if (CheckDefaultValidation())
                {
                    if (Save())
                    {



                        if (AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool())
                        {
                            SendBookingConfirmationEmail();
                        }

                        General.AddBookingLog(objMaster.Current.Id, "Quotation " + objMaster.Current.BookingNo + " Confirmed by " + AppVars.LoginObj.UserName);

                        Close();
                    }
                }
            }
            catch
            {


            }
        }

        private void btnSendEmail_Click(object sender, EventArgs e)
        {

            if (CheckDefaultValidation())
            {
                SendEmail(true);


            }


        }


        private void SendEmail(bool saveBooking)
        {
            try
            {

                if (saveBooking)
                    Save();
                if (objMaster.PrimaryKeyValue != null)
                {


                    frmEmailBooking frm = new frmEmailBooking(objMaster.Current);
                    frm.IsOpenedFromBooking = true;
                    frm.StartPosition = FormStartPosition.CenterScreen;
                    frm.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        bool changepaymenttype = false;
        private void ddlPaymentType_SelectedValueChanged(object sender, EventArgs e)
        {
            try
            {
                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD)
                {
                    btnPayment.Visible = true;

                    ShowAgentDetails(true);
                }
                else
                {
                    btnPayment.Visible = false;


                    if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH && chkIsCompanyRates.Checked)
                    {
                        if (ddlCompany.SelectedValue != null)
                        {
                            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
                            {


                                if (objMaster.Current != null && objMaster.Current.CompanyId.ToInt() == ddlCompany.SelectedValue.ToInt() &&
                                    (objMaster.Current.Gen_Company.Gen_Company_PaymentTypes.Count(c =>
                                                    c.PaymentTypeId == ddlPaymentType.SelectedValue.ToInt()) == 0))
                                //objMaster.Current.Gen_Company.DefaultIfEmpty().AccountTypeId.ToInt() == Enums.ACCOUNT_TYPE.ACCOUNT)
                                {
                                    ddlCompany.SelectedValue = null;
                                    chkIsCompanyRates.Checked = false;

                                }
                                else
                                {

                                    if (General.GetQueryable<Gen_Company_PaymentType>(null).Count(c => c.CompanyId == ddlCompany.SelectedValue.ToInt() &&
                                                    c.PaymentTypeId == ddlPaymentType.SelectedValue.ToInt()) == 0)
                                    {
                                        ddlCompany.SelectedValue = null;
                                        chkIsCompanyRates.Checked = false;

                                    }

                                }
                            }
                        }
                        else
                        {
                            chkIsCompanyRates.Checked = false;
                        }


                        ShowAgentDetails(true);
                    }
                    else
                    {

                        if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.ROOM_CHARGE && chkIsCompanyRates.Checked)
                        {

                            ShowAgentDetails(true);

                            if (chkTakenByAgent != null && chkTakenByAgent.Visible)
                            {

                                chkTakenByAgent.Checked = true;
                            }

                        }
                        else if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                        {

                            ShowAgentDetails(false);

                            // General.GetObject<Gen_Company>(c => c.Id == ddlCompany.SelectedValue.ToInt());

                        }
                    }

                }



                if (IsDisplayingRecord == false && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {
                    if (numAgentCommission != null && numAgentCommission.Visible == true && numAgentCommission.Value > 0
                        && (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT ||
                        ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT))
                    {
                        changepaymenttype = true;
                    }
                    else
                        changepaymenttype = false;
                }
                else
                    changepaymenttype = false;

                UpdateAutoCalculateFares();

            }
            catch
            {


            }
        }
        bool IsSave = false;
        private void btnPayment_Click(object sender, EventArgs e)
        {
            try
            {
                List<Gen_SysPolicy_PaymentDetail> objMerchantInfo = General.GetQueryable<Gen_SysPolicy_PaymentDetail>(null).ToList();
                if (objMerchantInfo.Count == 0)
                {

                    ENUtils.ShowMessage("Merchant Details is not defined in Settings.");
                    return;

                }

                if (objMaster.Current != null && objMaster.Current.BookingPayment != null)
                {
                    objBookingPayment = objMaster.Current.BookingPayment;
                }
                else
                {

                    objBookingPayment = new Booking_Payment();

                }


               


                 if(btnPickFares.Enabled==false)
                {
                    MessageBox.Show("Please wait while system is calculating fares...");
                    return;
                }
                Thread.Sleep(1000);
                //   this.SaveAndClose();

                if (this.Save())
                {

                    if (objMaster.Current != null)
                    {

                        string BookingNO = objMaster.Current.BookingNo.ToStr();
                        int? BookingId = objMaster.Current.Id.ToInt();

                        if (IsSave == true)
                        {

                           // bool IsTransactionProcessed = false;
                            frmBookingPayment2 frm = new frmBookingPayment2(objBookingPayment, objMerchantInfo, objMaster.Current.FareRate.ToDecimal(), BookingNO, BookingId);
                            frm.FormBorderStyle = FormBorderStyle.FixedSingle;
                            frm.StartPosition = FormStartPosition.CenterScreen;
                            frm.ShowDialog();


                            if (frm.TransactionID.ToStr().Trim().Length > 0)
                            {
                                ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;
                                ddlPaymentType.Enabled = false;
                                txtPaymentReference.Text = frm.TransactionID.ToStr().Trim();
                             //   IsTransactionProcessed = true;
                                btnPayment.Tag = true;
                            }
                            frm.Dispose();


                           

                            GC.Collect();

                            if(btnPayment.Tag.ToBool()==true)
                            {
                                SaveAndClose();
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }
        }


       
        private void numFareRate_Validated(object sender, EventArgs e)
        {
            CalculateServiceCharges(null);
            CalculateTotalCharges();
            

        }

        private void CalculateTotalCharges()
        {
            try
            {
                if (ddlCompany.SelectedValue != null && numCompanyFares != null)
                {
                    if (numCompanyFares.Value == 0)
                    {

                        decimal fare = numFareRate.Value.ToDecimal();

                        if (companyPricePercentage > 0)
                        {

                            if (companyPriceAdditionType == true)
                            {
                                fare += (companyPricePercentage);

                            }
                            else
                            {

                                fare += (fare * companyPricePercentage) / 100;
                            }
                        }

                        if (fare > 0)
                        {
                            numCompanyFares.Value = fare;
                        }
                    }

                    if (pnlBookingFees.Visible)
                    {
                        numTotalChrgs.Value = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numBookingFee.Value;
                    }
                    else
                    {

                        numTotalChrgs.Value = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value;
                    }
                }
                else
                {


                    numTotalChrgs.Value = numFareRate.Value + numExtraChrgs.Value + numCongChrgs.Value + numMeetCharges.Value;

                    if (pnlBookingFees.Visible)
                    {
                        numTotalChrgs.Value = numTotalChrgs.Value + numBookingFee.Value;
                    }

                }



                if (fareCalculateBy > 0 && lastCalculatedFares != numFareRate.Value)
                {
                    fareCalculateBy = 0;
                    if (lblMap.Text.Contains("PlotToPlot"))
                        lblMap.Text = lblMap.Text.Replace("PlotToPlot", "").Trim();
                    else if (lblMap.Text.Contains("Normal"))
                        lblMap.Text = lblMap.Text.Replace("Normal", "").Trim();
                    else if (lblMap.Text.Contains("RTF"))
                        lblMap.Text = lblMap.Text.Replace("RTF", "").Trim();

                }





            }
            catch (Exception ex)
            {


            }

        }

        private void opt_WaitandReturn_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {

        }

       
       

        private void btnPickCustomerAddress_Click(object sender, EventArgs e)
        {
            PickCustomerAddress(txtCustomerPhoneNo.Text.Trim(), txtCustomerMobileNo.Text.Trim());

        }


        private void PickCustomerAddress(string phoneNo, string MobNo)
        {
            try
            {

                if (string.IsNullOrEmpty(phoneNo) && string.IsNullOrEmpty(MobNo))
                    return;



                Customer cust = General.GetObject<Customer>(c => ((!string.IsNullOrEmpty(phoneNo) && c.TelephoneNo == phoneNo)
                                                              || (!string.IsNullOrEmpty(MobNo) && c.MobileNo == MobNo)));


                if (cust != null)
                {
                    ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

                    txtFromFlightDoorNo.Text = cust.DoorNo.ToStr();

                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtFromAddress.Text = cust.Address1.ToStr();
                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }

            }
            catch (Exception ex)
            {


            }

        }






        int i = 0;
        private void dtpPickupTime_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                i++;

                RadMaskedEditBoxItem editItem = (RadMaskedEditBoxItem)sender;

                if (i == 2)
                {
                    SendKeys.Send("{right}");
                    i = 0;
                }


                if (editItem.SelectionStart > 2)
                {
                    i = 0;
                }
                //  }
            }
            catch (Exception ex)
            {


            }
        }


        private void dtpPickupDate_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                if (e.KeyChar == '\r')
                {
                    pnlCustomer.Select();
                    FocusOnCustomer();

                }
            }
            catch (Exception ex)
            {


            }
        }





        private void btnJobRoutePath_Click(object sender, EventArgs e)
        {
            MapReport();
        }

        private void MapReport()
        {
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (objMaster.PrimaryKeyValue != null && db.Booking_RoutePaths.Count(c => c.BookingId == objMaster.Current.Id) > 0)
                    {



                        rptJobRouthPathGoogle rptRoute = new rptJobRouthPathGoogle(objMaster.Current, false);
                        rptRoute.StartPosition = FormStartPosition.CenterScreen;
                        rptRoute.ShowDialog();
                        //    rptRoute.Dispose();
                    }
                    else
                    {
                        ENUtils.ShowMessage("Map Route Details not found");

                    }
                }
            }
            catch (Exception ex)
            {

            }

        }

        private void btnLogDetail_Click(object sender, EventArgs e)
        {
            ShowAuditLogReport();
        }


        private void ShowAuditLogReport()
        {
            try
            {
                rptfrmJobLog jobLog = new rptfrmJobLog(txtBookingNo.Text);
                jobLog.FormBorderStyle = FormBorderStyle.FixedSingle;
                jobLog.StartPosition = FormStartPosition.CenterScreen;
                jobLog.ShowDialog();
                jobLog.Dispose();
            }
            catch (Exception ex)
            {


            }

        }

        private void btnSms_Click(object sender, EventArgs e)
        {
            try
            {
                frmSMSAll sms = new frmSMSAll(txtCustomerMobileNo.Text);
                sms.ShowDialog();
                sms.Dispose();

            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        private void btn_notes_Click(object sender, EventArgs e)
        {
            AddNotes();
        }

        private void AddNotes()
        {

            try
            {
                ResetBookingStatusId();

                if (pnlAccpassword != null && pnlAccpassword.Visible == true)
                {
                    int? companyId = ddlCompany.SelectedValue.ToIntorNull();

                    Gen_Company obj = General.GetObject<Gen_Company>(c => c.Id == companyId);
                    string AccountPassword = obj.PasswordAccount.ToStr();

                    if (txtAccPassword.Text.ToStr().ToLower() == AccountPassword.ToStr().ToLower())
                    {
                        this.Save();
                        if (IsSave == true)
                        {
                            frmBookingNotes Note = new frmBookingNotes(objMaster.PrimaryKeyValue.ToInt());
                            Note.ShowDialog();
                            Note.Dispose();
                        }
                    }
                    else
                    {
                        RadMessageBox.Show("Please Enter Correct Company Password!");
                    }
                }
                else
                {
                    this.Save();
                    if (IsSave == true)
                    {
                        frmBookingNotes Note = new frmBookingNotes(objMaster.PrimaryKeyValue.ToInt());
                        Note.ShowDialog();
                        Note.Dispose();
                    }
                }
            }
            catch
            {

            }

        }

        private void FocusOnJourney()
        {
            // pnljourney.Select();
            //  opt_one.Focus();
            // opt_one.Select();
            // opt_one

            // radPanel2.TabStop = false;
            // FocusOnCustomer();
            // pnlJourneyTypes.Focus();
            ////fwdkh3  SendKeys.Send("{TAB}");
            opt_one.Focus();
            // opt_JOneWay.TabStop = false;
            // opt_JOneWay.Select();
        }


        private void ddlVehicleType_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnFare();
                //  FocusOnDriver();
                //fwdkh3 FocusOnJourney();
                // numFareRate.Focus();

                // SendKeys.Send("{TAB}");
            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnToAddress();
            }
            else if (e.KeyCode == Keys.Right)
            {
                ddlCustomerName.Focus();
            }
            else if (e.KeyCode == Keys.Left)
            {

                if (ddlVehicleType.SelectionStart == 0)
                {
                    FocusOnFromAddress();
                }
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{

            //    if (ddlCustomerName.Text == "")
            //        txtEmail.Focus();
            //    else { ddlCustomerName.Focus(); }
            //}
        }





        void child_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                numTotalLuggages.Focus();
            }
            //else if (e.KeyCode == Keys.Up || e.KeyCode == Keys.ShiftKey)
            //{
            //    ddlVehicleType.Focus();
            //}
            else if (e.KeyCode == Keys.Right)
            {
                //comment
                //if (num_TotalPassengers.SpinElement.TextBoxItem.SelectionStart == num_TotalPassengers.SpinElement.TextBoxItem.Text.Length)
                //{
                //    numTotalLuggages.Focus();
                //}            
            }
            else if (e.KeyCode == Keys.Down)
            {
                //comment
                //if (num_TotalPassengers.TextBoxItem.SelectionStart == num_TotalPassengers.SpinElement.TextBoxItem.Text.Length)
                //{
                txtSpecialRequirements.Focus();
                //}

            }

        }
        void totalLugg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtSpecialRequirements.Focus();

                //int? LocTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                //int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();


                //if (string.IsNullOrEmpty(txtToAddress.Text.ToStr().Trim()))
                //{

                //    if ((toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE))
                //    {


                //        FocusOnToAddress();

                //    }
                //    else if ((toLocTypeId == Enums.LOCATION_TYPES.POSTCODE))
                //    {
                //        FocusOnToPostCode();

                //    }
                //    else
                //    {

                //        FocusOnToLocation();
                //    }
                //}
                //else
                //{


                //    if (chkIsCompanyRates.Checked)
                //    {
                //        if (ddlDepartment != null)
                //            ddlDepartment.Select();
                //    }
                //    else
                //    {
                //        txtSpecialRequirements.Focus();
                //    }
                //}
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    num_TotalPassengers.Focus();

            //}
            else if (e.KeyCode == Keys.Right)
            {
                //comment
                //if (numTotalLuggages.SpinElement.TextBoxItem.SelectionStart == numTotalLuggages.SpinElement.TextBoxItem.Text.Length)
                //{
                //    FocusOnMobNo();
                //}

            }
            else if (e.KeyCode == Keys.Left)
            {
                //comment
                //if (numTotalLuggages.SpinElement.TextBoxItem.SelectionStart == 0)
                //{
                //    FocusToPassenger();
                //}

            }
        }

        private void ddlCompany_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnCustomer();
            }
        }

        private void ddlEscort_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
        }

        private void ddlDepartment_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
        }

        private void txtSpecialRequirements_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                ////fwdkh3 FocusOnFare();
                //// FocusOnJourney();
                FocusOnSave();
                //FocusOnPickupDate();
                // FocusOnCustomer();
                //btnSaveNew.Focus();
            }
            else if (e.KeyCode == Keys.Insert)
            {

                FocusOnPickupTime();
            }
            else if (e.KeyCode == Keys.Left)
            {
                int position = txtSpecialRequirements.SelectionStart;
                if (position == 0)
                {
                    FocusOnCustomer();
                    // ddlCustomerName.Focus();
                }
            }
            else if (e.KeyCode == Keys.Up)
            {
                int position = txtSpecialRequirements.SelectionStart;
                if (position == 0)
                {
                    SendKeys.Send("{Enter}");
                    // ddlCustomerName.Focus();
                }
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnFare();

            //}
        }




        private void txtFromAddress_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                if (e.KeyChar == '1' || e.KeyChar == '2' || e.KeyChar == '3' || e.KeyChar == '4'
                    || e.KeyChar == '5' || e.KeyChar == '6' || e.KeyChar == '7'
                    || e.KeyChar == '8' || e.KeyChar == '9')
                {




                   UIX.AutoCompleteTextBox txtData = (UIX.AutoCompleteTextBox)sender;
                    if (txtData.Text.StartsWith("W1"))
                        return;



                    if (txtData.Text.Length > 4 && txtData.ListBoxElement.Visible == true && txtData.ListBoxElement.Items.Count < 10)
                    {



                        try
                        {
                            string idx = e.KeyChar.ToStr();


                            if (txtData.ListBoxElement.Items.Count >= idx.ToInt())
                            {

                                string item = txtData.ListBoxElement.Items[idx.ToInt() - 1].ToStr();

                                string doorNo = string.Empty;
                                for (int i = 0; i <= 2; i++)
                                {
                                    if (char.IsNumber(txtData.FormerValue[i]))
                                        doorNo += txtData.FormerValue[i];
                                    else
                                        break;

                                }

                                txtData.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                                //if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool())
                                //{
                                txtData.Text = (item.Remove(0, item.IndexOf('.') + 1).Trim()).Trim();
                                //}
                                //else
                                //{

                                //    txtData.Text = (doorNo + " " + item.Remove(0, item.IndexOf('.') + 1).Trim()).Trim();
                                //}


                                if (txtData.Name == "txtFromAddress")
                                {
                                    SetPickupZone(txtData.Text);
                                    FocusOnFromDoor();
                                }
                                else if (txtData.Name == "txtToAddress")
                                {
                                    SetDropOffZone(txtData.Text);
                                    FocusOnToDoor();
                                }
                                else if (txtData.Name == "txtViaAddress")
                                {
                                    txtData.ResetListBox();
                                    AddViaPoint();

                                }

                                txtData.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                                e.Handled = true;

                                aTxt.ResetListBox();
                                aTxt.ListBoxElement.Items.Clear();


                                UpdateAutoCalculateFares();


                            }
                        }
                        catch
                        {


                        }
                        //   txtViaAddress.Focus();
                    }



                }
            }
            catch
            {


            }
        }

        private void label7_Click(object sender, EventArgs e)
        {
            try
            {
                //comment
                btnSelectVia.Tag = null;

                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = false;


                ddlCustomerName.Select();
            }
            catch
            {

            }
        }

        private void txtViaAddress_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtViaAddress.ListBoxElement.SelectedIndex == -1)
            {
                if (txtViaAddress.Text.Trim() == Environment.NewLine)
                    txtViaAddress.Text = string.Empty;

                e.SuppressKeyPress = true;
                if (txtViaAddress != null && txtViaAddress.Text.Trim().Length > 0)
                {



                    AddViaPoint();
                    FocusOnViAddress();
                }
            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnToAddress();


            }
        }


        #region VIA POINT REVERSE
        private void AddReverceFromColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 70;

            col.Name = "ColRervP";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Reverse P";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

            grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
        }
        private void AddReverceDestinationColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 70;

            col.Name = "ColRervD";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Reverse D";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

            grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
        }



        void ReverceToPickUpPoint()
        {
            try
            {
                // for via variables
                string viapointText = grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value.ToString();
                int viaLocTypeId = grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value.ToInt();
                string viapointLabel = grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value.ToString();

                // for Top Variables

                string FromAddress = "";
                int FromLocationId = grdVia.CurrentRow.Cells["VIALOCATIONID"].Value.ToInt();
                //if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                //{
                FromAddress = txtFromAddress.Text.ToStr();
                // }
                //else
                //{
                //    FromAddress = ddlFromLocation.Text.ToStr();
                //    FromLocationId = ddlFromLocation.SelectedValue.ToInt();
                //}

                ReverseVia(viapointText, viaLocTypeId, viapointLabel, FromAddress, ddlFromLocType.Text.ToStr(), ddlFromLocType.SelectedValue.ToIntorNull(), true, FromLocationId);

            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }
        void ReverceToDestination()
        {
            try
            {

                // for via variables
                string viapointText = grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value.ToString();
                int viaLocTypeId = grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value.ToInt();
                string viapointLabel = grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value.ToString();

                // for Top Variables

                string ToAddress = "";
                int ToLocationId = grdVia.CurrentRow.Cells["VIALOCATIONID"].Value.ToInt();
                //if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                //{
                ToAddress = txtToAddress.Text.ToStr();
                //}
                //else
                //{
                //    ToAddress = ddlToLocation.Text.ToStr();
                //    ToLocationId = ddlToLocation.SelectedValue.ToInt();
                //}

                ReverseVia(viapointText, viaLocTypeId, viapointLabel, ToAddress, ddlToLocType.Text.ToStr(), ddlToLocType.SelectedValue.ToIntorNull(), false, ToLocationId);


            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }
        void ReverseVia(string viaText, int viaLoctypeId, string viaLabel, string FromAddress, string fromLocType, int? fromlocTypeId, bool IsFrom, int locationId)
        {
            try
            {

                string ViaTextTemp = viaText;
                string FromAddressTemp = FromAddress;
                int? fromLocIdTemp = fromlocTypeId;
                int VialocIdTemp = viaLoctypeId;




                if (IsFrom == true)
                {
                    this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);


                    //if (VialocIdTemp == Enums.LOCATION_TYPES.ADDRESS || VialocIdTemp == Enums.LOCATION_TYPES.BASE)
                    //{
                    txtFromAddress.Text = ViaTextTemp;
                    ddlFromLocType.SelectedValue = VialocIdTemp;
                    //   }
                    //else
                    //{
                    //    ddlFromLocType.SelectedValue = VialocIdTemp;
                    //    ddlFromLocation.SelectedValue = locationId;
                    //}

                    GridViewRowInfo row;

                    if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                        grdVia.CurrentRow = null;


                    if (grdVia.CurrentRow != null)
                    {

                        row = grdVia.CurrentRow;
                    }

                    grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value = FromAddressTemp;
                    grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value = fromLocIdTemp;

                    grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value = fromLocType;


                    if (locationId != 0)
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = locationId;
                    else
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = null;



                    this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }
                else
                {
                    this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                    //if (VialocIdTemp == Enums.LOCATION_TYPES.ADDRESS || VialocIdTemp == Enums.LOCATION_TYPES.BASE)
                    //{
                    txtToAddress.Text = ViaTextTemp;
                    ddlToLocType.SelectedValue = VialocIdTemp;
                    //}
                    //else
                    //{
                    //    ddlToLocType.SelectedValue = VialocIdTemp;
                    //    ddlToLocation.SelectedValue = locationId;
                    //}

                    GridViewRowInfo row;

                    if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                        grdVia.CurrentRow = null;


                    if (grdVia.CurrentRow != null)
                    {
                        row = grdVia.CurrentRow;
                    }
                    else
                    {

                    }

                    grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value = FromAddressTemp;
                    grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value = fromLocIdTemp;

                    grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value = fromLocType;


                    if (locationId != 0)
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = locationId;
                    else
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = null;




                    this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }


        #endregion






        #region



        private void ddlMilesDrvs2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.IsHandleCreated == false)
                return;

            ShowMapAndNearestDrivers();
        }



        private void ShowMapAndNearestDrivers()
        {

            if (btnExit.Focused)
                return;

            //object o = "LoadNearestMap";
            //SendAsyncRequest(o);

            LoadNearestMap();

        }

        private void LoadNearestMap()
        {
            new Thread(new ThreadStart(LoadNearestJobDrivers)).Start();

        }


        delegate void UIDelegate();
        private void LoadNearestJobDrivers()
        {

            try
            {

                if (this.InvokeRequired)
                {

                    UIDelegate d = new UIDelegate(LoadNearest);
                    this.BeginInvoke(d);
                }
                else
                {
                    LoadNearest();

                }




            }
            catch (Exception ex)
            {


            }

        }





        #endregion



        private void btnNearestDrv_Click(object sender, EventArgs e)
        {
            //object o = "LoadNearestMap";
            //SendAsyncRequest(o);
            LoadNearestMap();
        }


        private bool is_in_circle(double circle_x, double circle_y, double r, double x, double y)
        {

            double d = new DotNetCoords.LatLng(Convert.ToDouble(circle_x), Convert.ToDouble(circle_y)).DistanceMiles(new DotNetCoords.LatLng(Convert.ToDouble(x), Convert.ToDouble(y)));

            //double d = Math.Sqrt(((circle_x - x) * (circle_x - x)) + ((circle_y - y) * (circle_y - y)));
            return d <= r;
        }



        private bool FindPoint(double pointLat, double pointLng, List<Gen_Zone_PolyVertice> PontosPolig)
        {//                             X               y               
            int sides = PontosPolig.Count();
            int j = sides - 1;
            bool pointStatus = false;


            if (sides == 1)
            {

                double radius = Convert.ToDouble(PontosPolig[0].Diameter) / 2;
                double lat = Convert.ToDouble(PontosPolig[0].Latitude);
                double lng = Convert.ToDouble(PontosPolig[0].Longitude);


                //double temp = ((lat - pointLat) * (lat - pointLat)) + ((lng - pointLng) * (lng - pointLng));

                //double dist = SqrRoot(temp);

                pointStatus = is_in_circle(pointLat, pointLng, radius, lat, lng);
                //  pointStatus = is_in_circle(lat, lng, radius, pointLat, pointLng);

                //if (dist <= radius)
                //    pointStatus = true;
            }
            else
            {

                for (int i = 0; i < sides; i++)
                {
                    if (PontosPolig[i].Longitude < pointLng && PontosPolig[j].Longitude >= pointLng ||
                        PontosPolig[j].Longitude < pointLng && PontosPolig[i].Longitude >= pointLng)
                    {
                        if (PontosPolig[i].Latitude + (pointLng - PontosPolig[i].Longitude) /
                            (PontosPolig[j].Longitude - PontosPolig[i].Longitude) * (PontosPolig[j].Latitude - PontosPolig[i].Latitude) < pointLat)
                        {
                            pointStatus = !pointStatus;
                        }
                    }
                    j = i;
                }
            }
            return pointStatus;
        }

        public static double SqrRoot(double t)
        {

            double lb = 0, ub = t, temp = 0;
            int count = 50;

            while (count != 0)
            {
                temp = (lb + ub) / 2;

                if (temp * temp == t)
                {

                    return temp;
                }
                else if (temp * temp > t)
                {
                    ub = temp;
                }
                else
                {

                    lb = temp;

                }



                count--;
            }

            return temp;


        }



        private void btnPrintJob_DropDownOpening(object sender, EventArgs e)
        {
            try
            {


                //if (this.menu_JobReceipt == null && AppVars.frmMDI.ListofUserRights.Count(c => c.formName == "rptfrmJobsListReceipts") > 0)
                //{

                //    this.menu_JobReceipt = new Telerik.WinControls.UI.RadMenuItem();
                //    this.menu_JobReceipt.Name = "menu_JobReceipt";
                //    this.menu_JobReceipt.Text = "Job Receipt";
                //    this.menu_JobReceipt.Click += new System.EventHandler(this.menu_JobReceipt_Click);
                //    this.btnPrintJob.Items.Add(menu_JobReceipt);
                //}


            }
            catch (Exception ex)
            {


            }
        }

        private void btnConfirmationSMS_Click(object sender, EventArgs e)
        {
            SendConfirmationSMS();
        }


        private void SendConfirmationSMS()
        {
            try
            {
                if (objMaster.PrimaryKeyValue != null)
                {


                    string custNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();

                    if (!string.IsNullOrEmpty(custNo))
                    {

                        // Send To Driver

                        EuroSMS objSMS = new EuroSMS();

                        string smsError2 = "";
                        string msg = string.Empty;

                        //if (Debugger.IsAttached == false)
                        //{

                        int idx = -1;
                        if (custNo.StartsWith("044") == true)
                        {
                            idx = custNo.IndexOf("044");
                            custNo = custNo.Substring(idx + 3);
                            custNo = custNo.Insert(0, "+44");
                        }

                        if (custNo.StartsWith("07"))
                        {
                            custNo = custNo.Substring(1);
                        }

                        if (custNo.StartsWith("044") == false || custNo.StartsWith("+44") == false)
                            custNo = custNo.Insert(0, "+44");
                        //  }


                        string confirmationSMS = string.Empty;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            confirmationSMS = db.Gen_SysPolicy_Configurations.FirstOrDefault().ConfirmationSMSText.ToStr().Trim();

                        }

                        msg += GetMessage(confirmationSMS);



                        objSMS.ToNumber = custNo;
                        objSMS.Message = msg;

                        new Thread(delegate ()
                        {
                            objSMS.Send(ref smsError2);
                        }).Start();

                        // General.SaveSentSMS("Confirmation Text : " + msg, custNo);


                        Thread.Sleep(1000);


                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {

                            RadDesktopAlert alert = new RadDesktopAlert();
                            alert.AutoCloseDelay = 5;
                            alert.FadeAnimationType = FadeAnimationType.None;
                            alert.FixedSize = new Size(320, 130);
                            alert.CaptionText = "Confirmation SMS has been sent Successfully";
                            alert.ContentText = msg;
                            alert.Show();
                        }

                    }
                }

            }
            catch (Exception ex)
            {


            }
        }


        private string GetMessage(string message)
        {
            try
            {

                if (AppVars.listofSMSTags == null || AppVars.listofSMSTags.Count == 0)
                {
                    AppVars.listofSMSTags = General.GetQueryable<SMSTag>(c => c.Id != 0).ToList();

                }

                string msg = message;



                object propertyValue = string.Empty;
                foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                {


                    switch (tag.TagObjectName)
                    {
                        case "booking":

                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objMaster.Current.GetType().GetProperty(val[0]).GetValue(objMaster.Current, null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(tag.ConditionNotNull) && objMaster.Current.GetType().GetProperty(tag.ConditionNotNull) != null)
                                {

                                    propertyValue = tag.ConditionNotNullReplacedValue.ToStr();
                                }
                                else
                                {

                                    propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current, null);
                                }
                            }


                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objMaster.Current, null);
                            }
                            break;

                        case "Booking_ViaLocations":
                            if (tag.TagPropertyValue == "ViaLocValue")
                            {


                                string[] VilLocs = null;
                                int cnt = 1;
                                VilLocs = objMaster.Current.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                if (VilLocs.Count() > 0)
                                {

                                    string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                    propertyValue = Locations;
                                }
                                else
                                    propertyValue = string.Empty;

                            }
                            break;


                        case "driver":

                            if (objMaster.Current.DriverId != null)
                            {
                                var ObjDriver = objMaster.Current.Fleet_Driver.DefaultIfEmpty();

                                if (tag.TagPropertyValue.Contains('.'))
                                {

                                    string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                    object parentObj = ObjDriver.GetType().GetProperty(val[0]).GetValue(ObjDriver, null);

                                    if (parentObj != null)
                                    {
                                        propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                    }
                                    else
                                        propertyValue = string.Empty;


                                    break;
                                }

                                else
                                {
                                    propertyValue = ObjDriver.GetType().GetProperty(tag.TagPropertyValue).GetValue(ObjDriver, null);
                                }

                                if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                {
                                    propertyValue = ObjDriver.GetType().GetProperty(tag.TagPropertyValue2).GetValue(ObjDriver, null);
                                }
                            }
                            else
                            {

                                propertyValue = " - ";

                            }
                            break;



                        default:
                            if (objMaster.Current.SubcompanyId == null)
                                propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);
                            else
                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);
                            break;

                    }




                    msg = msg.Replace(tag.TagMemberValue,
                        tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                }


                return msg.Replace("\n\n", "\n");
            }
            catch (Exception ex)
            {
                // ENUtils.ShowMessage(ex.Message);
                return "";
            }
        }






        private void LockUnLockShuttleGroupDetails(bool locked)
        {
            ddlBookingType.Enabled = !locked;
            ddlToLocType.Enabled = !locked;
            chkReverse.Enabled = !locked;
            // ddlToLocation.Enabled = !locked;
            ddlVehicleType.Enabled = !locked;
            num_TotalPassengers.Enabled = !locked;

        }



        private void btnSendInvoice_Click(object sender, EventArgs e)
        {
            SendInvoice();



        }

        private void SendInvoice()
        {

            if (objMaster.Current == null)
                return;

            try
            {






                if (objMaster.Current.CompanyId != null)
                {
                    SendCompanyInvoice();
                }
                else
                {

                    SendCustomerInvoice();
                }





            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void SendCustomerInvoice()
        {

            long jobId = objMaster.Current.Id;

            var obj = General.GetObject<Invoice_Charge>(c => c.BookingId == jobId);

            if (obj != null)
            {

                if (General.GetQueryable<Invoice_Charge>(c => c.InvoiceId == obj.InvoiceId).Count() <= 2)
                {
                    SendCustomerEmail(obj.InvoiceId.ToLong(), obj.Invoice.DefaultIfEmpty().InvoiceNo.ToStr().Trim());
                }

            }
            else
            {

                int? customerId = objMaster.Current.CustomerId;
                if (customerId == null)
                {
                    string customerName = ddlCustomerName.Text.ToStr().Trim();
                    string mobNo = txtCustomerMobileNo.Text.ToStr().Trim();
                    string telNo = txtCustomerPhoneNo.Text.ToStr().Trim();


                    if (string.IsNullOrEmpty(mobNo) && string.IsNullOrEmpty(telNo))
                    {
                        ENUtils.ShowMessage("Please enter Telephone or Mobile No");
                        return;
                    }


                    var objCust = General.GetObject<Customer>(c => c.Name.ToUpper() == customerName &&
                      ((c.MobileNo == mobNo || mobNo == string.Empty) || (c.TelephoneNo == telNo)));

                    if (objCust != null)
                    {

                        customerId = objCust.Id;
                    }
                    else
                    {
                        CustomerBO objCustBO = new CustomerBO();
                        objCustBO.New();
                        objCustBO.Current.Name = customerName;
                        objCustBO.Current.Email = txtEmail.Text.Trim();
                        objCustBO.Current.Address1 = txtFromAddress.Text.Trim();

                        if (string.IsNullOrEmpty(objCustBO.Current.Email.ToStr()))
                            objCustBO.Current.Email = "abc@xyz.com";

                        objCustBO.Save();


                        customerId = objCustBO.Current.Id;

                    }
                }

                InvoiceBO invBO = new InvoiceBO();
                try
                {


                    invBO.New();

                    invBO.Current.InvoiceDate = DateTime.Now.ToDate();
                    invBO.Current.CustomerId = customerId;
                    invBO.Current.InvoiceTypeId = Enums.INVOICE_TYPE.CUSTOMER;

                    decimal invoiceTotal = objMaster.Current.FareRate.ToDecimal();


                    invoiceTotal += objMaster.Current.CongtionCharges.ToDecimal() + objMaster.Current.MeetAndGreetCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal();

                    invBO.Current.InvoiceTotal = invoiceTotal;

                    invBO.Current.Invoice_Charges.Add(new Invoice_Charge
                    {
                        BookingId = jobId


                    });


                    invBO.Save();


                    SendCustomerEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                }
                catch (Exception ex)
                {
                    if (invBO.Errors.Count > 0)
                    {
                        ENUtils.ShowMessage(invBO.ShowErrors());

                    }
                    else
                    {

                        ENUtils.ShowMessage(ex.Message);
                    }


                }

            }

        }

        private void SendCompanyInvoice()
        {
            long jobId = objMaster.Current.Id;

            var obj = General.GetObject<Invoice_Charge>(c => c.BookingId == jobId);

            if (obj != null)
            {

                if (General.GetQueryable<Invoice_Charge>(c => c.InvoiceId == obj.InvoiceId).Count() <= 2)
                {
                    SendCompanyEmail(obj.InvoiceId.ToLong(), obj.Invoice.DefaultIfEmpty().InvoiceNo.ToStr().Trim());
                }

            }
            else
            {

                int? companyId = objMaster.Current.CompanyId;


                InvoiceBO invBO = new InvoiceBO();
                try
                {


                    invBO.New();

                    invBO.Current.InvoiceDate = DateTime.Now.ToDate();
                    invBO.Current.CompanyId = companyId;
                    invBO.Current.InvoiceTypeId = Enums.INVOICE_TYPE.ACCOUNT;

                    decimal invoiceTotal = objMaster.Current.CompanyPrice.ToDecimal();


                    invoiceTotal += objMaster.Current.ParkingCharges.ToDecimal() + objMaster.Current.WaitingCharges.ToDecimal() + objMaster.Current.TipAmount.ToDecimal();

                    invBO.Current.InvoiceTotal = invoiceTotal;

                    invBO.Current.Invoice_Charges.Add(new Invoice_Charge
                    {
                        BookingId = jobId


                    });


                    invBO.Save();


                    SendCompanyEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                    //  SendCustomerEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                }
                catch (Exception ex)
                {
                    if (invBO.Errors.Count > 0)
                    {
                        ENUtils.ShowMessage(invBO.ShowErrors());

                    }
                    else
                    {

                        ENUtils.ShowMessage(ex.Message);
                    }


                }

            }

        }

        private void SendCompanyEmail(long invoiceId, string invoiceNo)
        {
            try
            {


                if (invoiceId == 0)
                    return;

                frmInvoiceReport frm = new frmInvoiceReport();
                var list = General.GetQueryable<vu_Invoice>(a => a.Id == invoiceId).ToList();
                int count = list.Count;
                frm.DataSource = list;
                frm.reportViewer1.Tag = "invoice";
                frm.ObjInvoice = General.GetObject<Invoice>(c => c.Id == invoiceId);
                frm.GenerateReport();
                frm.SendEmail(invoiceNo, objMaster.Current.Gen_Company.DefaultIfEmpty().Email.ToStr().Trim());


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void SendCustomerEmail(long invoiceId, string invoiceNo)
        {
            try
            {


                if (invoiceId == 0)
                    return;
                //CC 22/07/19
                //rptfrmCustomerInvoice frm = new rptfrmCustomerInvoice(invoiceId);
                //var list = General.GetQueryable<vu_Invoice>(a => a.Id == invoiceId).ToList();
                //int count = list.Count;
                //frm.DataSource = list;
                //frm.reportViewer1.Tag = "invoice";
                //frm.GenerateReport();
                //frm.SendEmail(invoiceNo, txtEmail.Text.Trim(), objMaster.Current.Gen_SubCompany);


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }

        private void btnPickAccountBooking_Click(object sender, EventArgs e)
        {
            SearchAccountBooking();
        }

        private void SearchAccountBooking()
        {
            try
            {
                int companyId = ddlCompany.SelectedValue.ToInt();

                if (companyId != 0)
                {

                    frmSearchBooking frm = new frmSearchBooking(companyId);
                    frm.ShowDialog();



                    if (frm.IsSelected)
                    {

                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);
                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);

                        PickBookingComplete(frm.CustomerName, frm.phoneNo, frm.mobileNo, frm.fromLocTypeId, frm.toLocTypeId, frm.fromLocId, frm.toLocId, frm.from, frm.to, frm.fare, false, frm.bookingTypeId, frm.CustEmail);

                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);

                        numBookingFee.Value = frm.customerFare;

                        if (numCompanyFares != null)
                            numCompanyFares.Value = frm.companyFare;


                        if (frm.viaString.ToStr().Trim().Length > 0)
                        {

                            if (grdVia == null)
                            {
                                CreateViaPanel();

                            }

                            string[] viaArr = frm.viaString.ToStr().Trim().Split(new char[] { ',' });

                            grdVia.Rows.Clear();

                            GridViewRowInfo row = null;
                            for (int i = 0; i < viaArr.Count(); i++)
                            {


                                row = grdVia.Rows.AddNew();
                                row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;
                                row.Cells["FROMTYPELABEL"].Value = "";

                                row.Cells["FROMTYPEVALUE"].Value = "";

                                row.Cells["VIALOCATIONID"].Value = null;
                                row.Cells["VIALOCATIONLABEL"].Value = "Address";
                                row.Cells["VIALOCATIONVALUE"].Value = viaArr[i];
                            }

                            btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                            btnSelectVia.BackColor = Color.DarkOrange;
                            //    btnSelectVia.NumberOfColors = 1;
                        }

                    }


                    frm.Dispose();
                }

            }
            catch (Exception ex)
            {

            }

        }

        private void btnTrackDriver_Click(object sender, EventArgs e)
        {
            TrackDriver();
        }


        private void TrackDriver()
        {

            try
            {
                if (objMaster.PrimaryKeyValue != null && objMaster.Current != null)
                {


                    rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(General.GetObject<Booking>(c => c.Id == objMaster.Current.Id), true);
                    rpt.ShowDialog();

                    rpt.Dispose();


                }
            }
            catch (Exception ex)
            {


            }
        }





        private void InitializeDirectionCombo()
        {

            this.ddlDirection = new System.Windows.Forms.ComboBox();
            this.lblDirection = new Label();

            this.pnlMain.Controls.Add(this.ddlDirection);
            this.pnlMain.Controls.Add(this.lblDirection);


            // 
            // ddlDirection
            // 
            this.ddlDirection.BackColor = System.Drawing.Color.White;
            this.ddlDirection.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlDirection.FormattingEnabled = true;
            this.ddlDirection.Items.AddRange(new object[] {
            "InBound",
            "OutBound"});
            this.ddlDirection.Location = new System.Drawing.Point(1075, 45);
            this.ddlDirection.Name = "ddlDirection";
            this.ddlDirection.Size = new System.Drawing.Size(97, 24);
            this.ddlDirection.TabIndex = 268;
            // 
            // lblDirection
            // 

            //  ((System.ComponentModel.ISupportInitialize)(this.lblDirection)).BeginInit();
            this.lblDirection.BackColor = System.Drawing.Color.Transparent;
            this.lblDirection.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblDirection.Location = new System.Drawing.Point(1001, 47);
            this.lblDirection.Name = "lblDirection";
            this.lblDirection.Size = new System.Drawing.Size(68, 22);
            this.lblDirection.TabIndex = 267;
            this.lblDirection.Text = "Direction";




            //((System.ComponentModel.ISupportInitialize)(this.lblDirection)).EndInit();
        }




        private void btnPasteBooking_Click(object sender, EventArgs e)
        {


            //if (System.Diagnostics.Debugger.IsAttached)
            //{

            //    new Thread(delegate()
            //    {
            //        int i = 0;
            //        while (true)
            //        {
            //            Thread.Sleep(1000);
            //            if (i % 2 == 0)
            //            {

            //                new BroadcasterData().BroadCastToPort("^^<U>\0\0\0\0\0<S>\0\"3DU$02 I S 0000 G A0 08/15 04:00 PM 07712540086                   ", 3520);
            //            }
            //            else
            //            {
            //                new BroadcasterData().BroadCastToPort("^^<U>\0\0\0\0\0<S>\0\"3DU$02 I S 0000 G A0 08/15 04:00 PM 07411330306                   ", 3520);

            //            }
            //            i++;
            //        }
            //    }).Start();



            //}

            if (AppVars.objCopyBooking != null)
            {

                try
                {


                    txtVehicleNo.Text = AppVars.objCopyBooking.Fleet_Master.DefaultIfEmpty().Plateno.ToStr();

                    ddlSubCompany.SelectedValue = AppVars.objCopyBooking.SubcompanyId.ToInt();

                    ddlBookingType.SelectedValue = AppVars.objCopyBooking.BookingTypeId;

                    //   chkQuotation.Location = new Point(chkQuotation.Location.X, chkQuotation.Location.Y + 20);
                    chkQuotation.Checked = AppVars.objCopyBooking.IsQuotation.ToBool();
                    WasQuotiation = chkQuotation.Checked;





                    ddlFromLocType.SelectedValue = AppVars.objCopyBooking.FromLocTypeId;
                    ddlToLocType.SelectedValue = AppVars.objCopyBooking.ToLocTypeId;

                    //   DetachLocationsSelectionEvent(ddlFromLocation);
                    //ddlFromLocation.SelectedValue = AppVars.objCopyBooking.FromLocId;
                    //  AttachLocationSelectionEvent(ddlFromLocation);

                    //   DetachLocationsSelectionEvent(ddlToLocation);
                    //   ddlToLocation.SelectedValue = AppVars.objCopyBooking.ToLocId;
                    //   AttachLocationSelectionEvent(ddlToLocation);

                    ddlVehicleType.SelectedValue = AppVars.objCopyBooking.VehicleTypeId;


                    ddlCustomerName.Text = AppVars.objCopyBooking.CustomerName;

                    txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);
                    txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);




                    txtCustomerMobileNo.Text = AppVars.objCopyBooking.CustomerMobileNo;
                    txtCustomerPhoneNo.Text = AppVars.objCopyBooking.CustomerPhoneNo;
                    txtEmail.Text = AppVars.objCopyBooking.CustomerEmail.ToStr().Trim();
                    //  numBookingFee.Value = AppVars.objCopyBooking.CustomerPrice.ToDecimal();

                    txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);



                    txtSpecialRequirements.Text = AppVars.objCopyBooking.SpecialRequirements;


                    int journeyTypeId = AppVars.objCopyBooking.JourneyTypeId.ToInt();

                    opt_one.CheckedChanged -= opt_one_CheckedChanged;
                    // opt_JOneWay.ToggleStateChanging -= opt_JOneWay_ToggleStateChanging;


                    if (journeyTypeId == Enums.JOURNEY_TYPES.ONEWAY)
                        opt_one.Checked = true;
                    // opt_JOneWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;
                    else if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                    {
                        opt_return.Checked = true;
                        // opt_JReturnWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;


                    }
                    else if (journeyTypeId == Enums.JOURNEY_TYPES.WAITANDRETURN)
                    {
                        opt_waitreturn.Checked = true;
                        //   opt_WaitandReturn.ToggleState = ToggleState.On;
                    }

                    if (ddlReturnFromAirport != null)
                        ddlReturnFromAirport.SelectedValue = AppVars.objCopyBooking.ReturnFromLocId;



                    opt_one.CheckedChanged += new EventHandler(opt_one_CheckedChanged);
                    // opt_JOneWay.ToggleStateChanging += new StateChangingEventHandler(opt_JOneWay_ToggleStateChanging);



                    chkIsCompanyRates.Checked = AppVars.objCopyBooking.IsCompanyWise.ToBool();

                    //if (AppVars.objCopyBooking.CompanyId != null && AppVars.objCopyBooking.Gen_Company.IsClosed.ToBool())
                    //{

                    //    var data = (List<Gen_Company>)ddlCompany.DataSource;
                    //    data.Add(AppVars.objCopyBooking.Gen_Company);

                    //    ddlCompany.SelectedValueChanged -= new EventHandler(ddlCompany_SelectedValueChanged);
                    //    ComboFunctions.FillCompanyCombo(ddlCompany, data);
                    //    ddlCompany.SelectedValueChanged+=new EventHandler(ddlCompany_SelectedValueChanged);
                    //}


                    if (AppVars.objCopyBooking.CompanyId != null && AppVars.objCopyBooking.Gen_Company.IsClosed.ToBool())
                    {

                        ddlCompany.SelectedValueChanged -= new EventHandler(ddlCompany_SelectedValueChanged);
                        ComboFunctions.FillCompanyComboX(ddlCompany, AppVars.objCopyBooking.CompanyId.ToInt());
                        ddlCompany.SelectedIndex = -1;
                        ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                    }


                    ddlCompany.SelectedValue = AppVars.objCopyBooking.CompanyId;

                    ddlPaymentType.SelectedValue = AppVars.objCopyBooking.PaymentTypeId;



                    if (pnlOrderNo != null)
                    {

                        txtOrderNo.Text = AppVars.objCopyBooking.OrderNo.ToStr();
                        txtPupilNo.Text = AppVars.objCopyBooking.PupilNo.ToStr();

                    }

                    if (txtAccountBookedBy != null)
                    {
                        txtAccountBookedBy.Text = AppVars.objCopyBooking.BookedBy.ToStr().Trim();
                    }


                    if (chkTakenByAgent != null)
                    {

                        chkTakenByAgent.Checked = AppVars.objCopyBooking.JobTakenByCompany.ToBool();
                        numAgentCommissionPercent.Value = AppVars.objCopyBooking.AgentCommissionPercent.ToInt();
                        ddlAgentCommissionType.SelectedIndex = AppVars.objCopyBooking.FromFlightNo.ToStr().Trim() == "Percent" ? 0 : 1;
                        numAgentCommission.Value = AppVars.objCopyBooking.AgentCommission.ToDecimal();
                    }

                    if (ddlDepartment != null && AppVars.objCopyBooking.DepartmentId != null)
                        ddlDepartment.SelectedValue = AppVars.objCopyBooking.DepartmentId;



                    dtpPickupDate.Value = AppVars.objCopyBooking.PickupDateTime.ToDate();
                    dtpPickupTime.Value = AppVars.objCopyBooking.PickupDateTime;

                    if (dtpReturnPickupDate != null)
                    {
                        dtpReturnPickupDate.Value = AppVars.objCopyBooking.ReturnPickupDateTime.ToDateorNull();
                        dtpReturnPickupTime.Value = AppVars.objCopyBooking.ReturnPickupDateTime.ToDateTimeorNull();
                        ddlReturnDriver.SelectedValue = AppVars.objCopyBooking.ReturnDriverId;
                    }

                    if (txtReturnSpecialReq != null)
                    {
                        if (AppVars.objCopyBooking.BookingReturns.Count > 0)
                        {
                            txtReturnSpecialReq.Text = AppVars.objCopyBooking.BookingReturns[0].DefaultIfEmpty().SpecialRequirements.ToStr();

                            if (ddlReturnVehicleType != null)
                                ddlReturnVehicleType.SelectedValue = AppVars.objCopyBooking.BookingReturns[0].DefaultIfEmpty().VehicleTypeId;
                        }
                    }





                    num_TotalPassengers.Value = AppVars.objCopyBooking.NoofPassengers.ToDecimal();
                    numTotalLuggages.Value = AppVars.objCopyBooking.NoofLuggages.ToDecimal();

                    numFareRate.Value = AppVars.objCopyBooking.FareRate.ToDecimal();

                    if (numReturnFare != null)
                        numReturnFare.Value = AppVars.objCopyBooking.ReturnFareRate.ToDecimal();

                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Value = AppVars.objCopyBooking.CompanyPrice.ToDecimal();

                        if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                        {
                            numReturnCompanyFares.Value = AppVars.objCopyBooking.WaitingMins.ToDecimal();

                        }


                    }

                    numParkingChrgs.Value = AppVars.objCopyBooking.ParkingCharges.ToDecimal();
                    numWaitingChrgs.Value = AppVars.objCopyBooking.WaitingCharges.ToDecimal();
                    numExtraChrgs.Value = AppVars.objCopyBooking.ExtraDropCharges.ToDecimal();
                    numMeetCharges.Value = AppVars.objCopyBooking.MeetAndGreetCharges.ToDecimal();
                    numCongChrgs.Value = AppVars.objCopyBooking.CongtionCharges.ToDecimal();

                    numTotalChrgs.Value = AppVars.objCopyBooking.TotalCharges.ToDecimal();

                    //if (pnlComcab != null)
                    //{
                    //    numComcab_Cash.Value = AppVars.objCopyBooking.CashRate.ToDecimal();
                    //    numComcab_Account.Value = AppVars.objCopyBooking.AccountRate.ToDecimal();
                    //    numComcab_ExtraMile.Value = AppVars.objCopyBooking.ExtraMile.ToDecimal();
                    //    numComcab_WaitingMin.Value = AppVars.objCopyBooking.WaitingMins.ToDecimal();
                    //}


                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtFromAddress.Text = AppVars.objCopyBooking.FromAddress.ToStr();
                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                    txtFromFlightDoorNo.Text = AppVars.objCopyBooking.FromDoorNo.ToStr();
                    txtFromStreetComing.Text = AppVars.objCopyBooking.FromStreet.ToStr();

                    txtFromPostCode.Text = AppVars.objCopyBooking.FromPostCode.ToStr();

                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtToAddress.Text = AppVars.objCopyBooking.ToAddress.ToStr();
                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                    txtToFlightDoorNo.Text = AppVars.objCopyBooking.ToDoorNo.ToStr();
                    txtToStreetComing.Text = AppVars.objCopyBooking.ToStreet.ToStr();

                    txtToPostCode.Text = AppVars.objCopyBooking.ToPostCode.ToStr();



                    chkIsCommissionWise.Checked = AppVars.objCopyBooking.IsCommissionWise.ToBool();
                    ddlCommissionType.SelectedValue = AppVars.objCopyBooking.DriverCommissionType.ToStr().Trim();
                    numDriverCommission.Value = AppVars.objCopyBooking.DriverCommission.ToDecimal();

                    chkAutoDespatch.Checked = AppVars.objCopyBooking.AutoDespatch.ToBool();
                    DateTime? pickUpDate = AppVars.objCopyBooking.PickupDateTime;


                    if (AppVars.objCopyBooking.AutoDespatchTime != null)
                    {
                        DateTime? autoDespatchDate = AppVars.objCopyBooking.AutoDespatchTime;
                        int mins = pickUpDate.Value.TimeOfDay.Subtract(autoDespatchDate.Value.TimeOfDay).Minutes.ToInt();
                        numBeforeMinutes.Value = mins < 0 ? 10 : mins;
                    }
                    else
                        numBeforeMinutes.Value = 10;

                    //    ShowAutoDespatchLabels(AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool());



                    int fromLocTypeId = AppVars.objCopyBooking.FromLocTypeId.ToInt();

                    //if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                    txtFromAddress.Focus();
                    //else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                    //    txtFromPostCode.Focus();
                    //else
                    //    ddlFromLocation.Focus();


                    if (AppVars.objCopyBooking.ZoneId != null)
                        ddlPickupPlot.SelectedValue = AppVars.objCopyBooking.ZoneId.ToIntorNull();

                    if (AppVars.objCopyBooking.DropOffZoneId != null)
                        ddlDropOffPlot.SelectedValue = AppVars.objCopyBooking.DropOffZoneId.ToIntorNull();

                    // txtPickupPlot.Text = objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr();
                    // txtDropOffZone.Text = objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr();



                    // Shuttle Job Working



                    if (ddlDirection != null)
                        ddlDirection.Text = AppVars.objCopyBooking.BoundType.ToStr().Trim();

                    txtFaresPostedFrom.Text = AppVars.objCopyBooking.FaresPostedFrom.ToStr();

                    chkQuotedPrice.Checked = AppVars.objCopyBooking.IsQuotedPrice.ToBool();

                    //if (!string.IsNullOrEmpty(txtFaresPostedFrom.Text))
                    //{
                    //    txtFaresPostedFrom.Visible = true;

                    //    chkQuotedPrice.Visible = false;
                    //}
                    //else
                    //{
                    //    chkQuotedPrice.Visible = true;

                    //}

                    if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                    {
                        string babyseats = AppVars.objCopyBooking.BabySeats.ToStr();
                        if (!string.IsNullOrEmpty(babyseats) && babyseats.Contains("<<<"))
                        {

                            string[] arr = babyseats.Split(new string[] { "<<<" }, StringSplitOptions.None);

                            if (arr.Count() == 2)
                            {
                                ddlBabyseat1.SelectedItem = arr[0].ToStr().Trim();
                                ddlbabyseat2.SelectedItem = arr[1].ToStr().Trim();

                            }
                        }
                    }




                    //th = new System.Threading.Thread(new ThreadStart(DisplayBooking_Map));
                    //th.IsBackground = true;
                    //th.Start();

                    lblMap.Text = AppVars.objCopyBooking.DistanceString.ToStr();



                    if (AppVars.objCopyBooking.Booking_ViaLocations.Count > 0)
                    {
                        CreateViaPanel();


                        GridViewRowInfo row = null;
                        foreach (var item in AppVars.objCopyBooking.Booking_ViaLocations)
                        {
                            row = grdVia.Rows.AddNew();
                            row.Cells["ID"].Value = item.Id;
                            row.Cells["MASTERID"].Value = item.BookingId;
                            row.Cells["FROMTYPELABEL"].Value = "Via";
                            // row.Cells[COLS.FROMTYPELABEL].Value = item.ViaLocTypeLabel;
                            row.Cells["FROMTYPEVALUE"].Value = item.ViaLocTypeValue;
                            row.Cells["FROMVIALOCTYPEID"].Value = item.ViaLocTypeId;

                            row.Cells["VIALOCATIONID"].Value = item.ViaLocId;
                            row.Cells["VIALOCATIONLABEL"].Value = item.ViaLocLabel;
                            row.Cells["VIALOCATIONVALUE"].Value = item.ViaLocValue;

                        }

                        ClearViaDetails();


                        btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                    }





                }
                catch (Exception ex)
                {
                    //   ENUtils.ShowMessage(ex.Message);

                }


            }



        }



        private void btnReturnTo_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetReturnTo(args.ToggleState);
        }



        private void SetReturnTo(ToggleState toggle)
        {
            //if (toggle == ToggleState.On)
            //{
            //   // btnReturnTo.Text = "Airport";



            //   // ddlReturnTo.Visible = true;
            //    txtReturnTo.Text = string.Empty;
            //    txtReturnTo.Visible = false;

            //    //if (ddlReturnTo.DataSource == null)
            //    //{
            //    //    ComboFunctions.FillLocationsCombo(ddlReturnTo, c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT);
            //    //    ddlReturnTo.SelectedIndex = -1;
            //    //}
            //}
            //else
            //{
            //  //  btnReturnTo.Text = "Address";
            //   // ddlReturnTo.Visible = false;
            //   // ddlReturnTo.SelectedValue = null;
            //    txtReturnTo.Visible = true;

            //}
            //txtReturnTo.Text = string.Empty;
            //  txtReturnTo.Visible = true;

            // if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
            if (dtpReturnPickupDate != null)
            {
                lblReturnAddress.Visible = true;
                txtReturnTo.Visible = true;
                lblretto.Visible = true;
                //465
                //236
                txtToAddress.Width = 232;

               // txtFromAddress.ListBoxElement.Width = 370;
                //txtToAddress.ListBoxElement.Width = 370;
            }
            else
            {
                lblReturnAddress.Visible = false;
                txtReturnTo.Visible = false;
                lblretto.Visible = false;
                txtToAddress.Width = 465;
               
            }

        }

        private void SetReturnFrom(ToggleState toggle)
        {
            //if (toggle == ToggleState.On)
            //{
            ////    btnReturnFrom.Text = "Airport";

            ////    if (ddlReturnFromAirport != null)
            ////    {
            ////        ddlReturnFromAirport.Visible = true;

            ////        if (ddlReturnFromAirport.DataSource == null)
            ////        {
            ////            ComboFunctions.FillLocationsCombo(ddlReturnFromAirport, c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT);
            ////            ddlReturnFromAirport.SelectedIndex = -1;
            ////        }

            ////    }
            ////    txtReturnFrom.Text = string.Empty;
            ////    txtReturnFrom.Visible = false;

            //}
            //else
            //{
            ////    btnReturnFrom.Text = "Address";
            ////    if (ddlReturnFromAirport != null)
            ////    {
            ////        ddlReturnFromAirport.Visible = false;
            ////        ddlReturnFromAirport.SelectedValue = null;
            ////    }
          

            //}

          
            //if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
            if (dtpReturnPickupDate != null)
            {
               // objMaster.Current.JourneyTypeId
                txtReturnFrom.Visible = true;
                lblretfrom.Visible = true;
                
                txtFromAddress.Width = 232;
                // txtFromAddress.ListBoxElement.Width = 610;
                //// txtFromAddress.ListBoxElement.Height = 400;
                // txtToAddress.ListBoxElement.Width = 610;

            }
            else
            {
                txtReturnFrom.Visible = false;
                lblretfrom.Visible = false;
                txtFromAddress.Width = 465;
            }

        }

        private void btnReturnFrom_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetReturnFrom(args.ToggleState);
        }




        void wc_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
        {
            try
            {



                if (e.Cancelled)
                {
                    return;
                }


                var xmlElm = XElement.Parse(e.Result);


                res = (from elm in xmlElm.Descendants()

                           // where elm.Name == "description"
                           //&& (elm.Value.ToLower().Contains("united kingdom") || elm.Value.ToLower().Contains("uk"))
                       where elm.Name == "formatted_address"
                       select elm.Value).ToArray<string>();


                res = res.Where(c => AppVars.zonesList.Count(a => c.Contains(a)) > 0).ToArray<string>();

                ShowAddresses();

            }
            catch
            {


            }
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }







        public void SelectMileageFromRouteSugg(decimal fares, string milesString)
        {

            this.selectedFaresR = fares;
            this.selectedMilesR = milesString;
            UpdateUI();

        }



        private decimal selectedFaresR;
        private string selectedMilesR;

        private void UpdateUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIDelegate(UpdateUI), null);

            }
            else
            {

                numFareRate.Value = this.selectedFaresR;
                lblMap.Text = this.selectedMilesR.ToStr();
            }

        }










        private void btnVerify_Click(object sender, EventArgs e)
        {


        }



        Font f = null;
        public long PickupTimeAsc;
        public long PickupTimeDesc;


        private void grdPickupDateTime_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {



            if (e.CellElement is GridDataCellElement)
            {

                e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                e.CellElement.DrawFill = false;
                if (e.Column.Name == "Time")
                {


                    if (e.Row.Cells["Id"].Value.ToInt() == PickupTimeAsc)
                    {

                        e.CellElement.Font = f;
                        e.CellElement.ForeColor = Color.Red;
                        e.CellElement.DrawFill = true;
                    }

                    else if (e.Row.Cells["Id"].Value.ToInt() == PickupTimeDesc)
                    {

                        e.CellElement.Font = f;
                        e.CellElement.ForeColor = Color.Red;
                        e.CellElement.DrawFill = true;
                    }

                    if (e.Row.Cells["CompanyId"].Value != null)
                    {

                        e.CellElement.RowElement.Font = f;
                        e.CellElement.RowElement.ForeColor = Color.White;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.BackColor = Color.Red;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;
                        e.CellElement.RowElement.BackColor = Color.Red;
                        e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.RowElement.DrawFill = true;

                    }



                }

            }
        }


        #region Fares

        decimal oldCompanyFare = 0.00m;

        void numCompanyFares_Enter(object sender, EventArgs e)
        {
            oldCompanyFare = numCompanyFares.Value;
        }

        void numCompanyFares_Validated(object sender, EventArgs e)
        {
            try
            {

                // only for gbc cars
                if (AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                {
                    if (numCompanyFares.Text.Trim().Length > 0 && numCompanyFares.Text.Trim().ToDecimal() > 0)
                    {

                        //if (numCompanyFares.Value > 0)
                        //{
                        decimal serviceCharge = 0.00m;


                        decimal price = numBookingFee.Value;

                        if (ddlCompany.SelectedValue != null)
                            price = numCompanyFares.Text.Trim().ToDecimal();

                        Gen_ServiceCharge objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => (price >= c.FromValue && price <= c.ToValue) && (ddlCompany.SelectedValue.ToInt() == 0 || (c.IsAccount != null && c.IsAccount == true)));

                        if (objServiceCharge != null)
                        {

                            if (objServiceCharge.AmountWise.ToBool())
                            {
                                serviceCharge = objServiceCharge.ServiceChargeAmount.ToDecimal();
                            }
                            else
                            {
                                if (ddlCompany.SelectedValue != null)
                                    serviceCharge = (price * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;
                                else
                                    serviceCharge = (numBookingFee.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;



                            }

                            if (ddlCompany.SelectedValue != null)
                                numFareRate.Value = price - serviceCharge;
                            else
                                numFareRate.Value = numBookingFee.Value - serviceCharge;
                        }
                    }

                }


                if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == true)
                {

                    if (oldCompanyFare == 0 || oldCompanyFare != numCompanyFares.Value)
                    {

                        CalculateAgentFeesAndDriverFares();
                    }

                }

                CalculateTotalCharges();
            }
            catch
            {

            }
        }


        void numReturnCompanyFares_Validated(object sender, EventArgs e)
        {
            try
            {
                if (numReturnCompanyFares.Text.Trim().Length > 0 && numReturnCompanyFares.Text.Trim().ToDecimal() > 0)
                {

                    //if (numReturnCompanyFares.Value > 0)
                    //{
                    decimal serviceCharge = 0.00m;


                    decimal price = numReturnBookingFee.Value;

                    if (ddlCompany.SelectedValue != null)
                        price = numReturnCompanyFares.Text.Trim().ToDecimal();

                    Gen_ServiceCharge objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => (price >= c.FromValue && price <= c.ToValue) && (ddlCompany.SelectedValue.ToInt() == 0 || (c.IsAccount != null && c.IsAccount == true)));

                    if (objServiceCharge != null)
                    {

                        if (objServiceCharge.AmountWise.ToBool())
                        {
                            serviceCharge = objServiceCharge.ServiceChargeAmount.ToDecimal();
                        }
                        else
                        {
                            if (ddlCompany.SelectedValue != null)
                                serviceCharge = (price * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;
                            else
                                serviceCharge = (numReturnBookingFee.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;



                        }

                        if (ddlCompany.SelectedValue != null)
                            numReturnFare.Value = price - serviceCharge;
                        else
                            numReturnFare.Value = numReturnBookingFee.Value - serviceCharge;
                    }
                }

                //}
            }
            catch
            {


            }

        }


        private void CalculateAgentFeesAndDriverFares()
        {

            if (numAgentCommission != null && numAgentCommission.Visible == true)
            {
                numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

                if (numAgentCommission.Value > 0)
                {
                    //     numAgentCommission.Value = (decimal)(Math.Ceiling(Convert.ToDouble(numAgentCommission.Value) / 0.25) * 0.25);
                    numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;

                }
                if (numCompanyFares.Value - numAgentCommission.Value >= 0)
                {

                    numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;
                    numBookingFee.Value = numFareRate.Value;
                }
            }
        }


        private void CalculateDriverFaresAndCompanyPrice()
        {
            if (numAgentCommission != null && numAgentCommission.Visible == true)
            {

                //numAgentCommission.Value = (numFareRate.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

                //if (numAgentCommission.Value > 0)
                //{
                //    //     numAgentCommission.Value = (decimal)(Math.Ceiling(Convert.ToDouble(numAgentCommission.Value) / 0.25) * 0.25);
                //    numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;

                //}

                if (numCompanyFares.Value - numAgentCommission.Value >= 0)
                {
                    numCompanyFares.Value = numCompanyFares.Value + numAgentCommission.Value;
                    numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;
                    numBookingFee.Value = numFareRate.Value;
                }
            }
        }


        private void CalculateDriverFaresAndWOTopOfAgentCompanyPrice()
        {
            if (numAgentCommission != null && numAgentCommission.Visible == true)
            {

                //numAgentCommission.Value = (numFareRate.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

                //if (numAgentCommission.Value > 0)
                //{
                //    //     numAgentCommission.Value = (decimal)(Math.Ceiling(Convert.ToDouble(numAgentCommission.Value) / 0.25) * 0.25);
                //    numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;

                //}

                if (numCompanyFares.Value - numAgentCommission.Value >= 0)
                {
                    //numCompanyFares.Value = numCompanyFares.Value + numAgentCommission.Value;
                    numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;
                    numBookingFee.Value = numFareRate.Value;
                }
            }
        }

        private void CalculateAgentFees()
        {

            if (numAgentCommission != null && numAgentCommissionPercent.Value.ToInt() > 0)
            {
                numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

                if (numAgentCommission.Value > 0)
                {

                    numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;
                }
            }
        }

        #endregion




        #region fare backgroundworker
        private BackgroundWorker worker_fares;

        private void InitializeFaresWorker()
        {
            if (worker_fares == null)
            {
                worker_fares = new BackgroundWorker();
                worker_fares.DoWork += new DoWorkEventHandler(worker_fares_DoWork);
                worker_fares.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_fares_RunWorkerCompleted);
                worker_fares.WorkerSupportsCancellation = true;
            }

        }

        void worker_fares_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                EnableCalculateFaresButton();
                if (e.Result == null || e.Cancelled)
                    return;

                if (IsAllowUpdating == false)
                {
                    try
                    {
                        DisableCalculateFaresButton();
                        return;
                    }
                    catch
                    {

                    }
                }

                clsfaresworker cls = (clsfaresworker)e.Result;
                decimal airportPickupChrgs = cls.airportPickupChrgs;

                if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {
                    cls.fareVal += airportPickupChrgs;
                    cls.returnfares += airportPickupChrgs;

                    cls.companyPrice += airportPickupChrgs;
                }

                decimal dd = cls.dd;
                decimal returnFares = cls.returnfares;

                if (cls.fromZoneId != 0 && ddlPickupPlot.SelectedValue == null)
                    ddlPickupPlot.SelectedValue = cls.fromZoneId;

                if (cls.toZoneId != 0 && ddlDropOffPlot.SelectedValue == null)
                    ddlDropOffPlot.SelectedValue = cls.toZoneId;


                numFareRate.Value = cls.fareVal;
                //  numBookingFee.Value = cls.se.Value; => put cls.servicecharges

                decimal increasedCompanyPrice = 0.00m;
                if (cls.CompanyId != 0 && numCompanyFares != null)
                {



                    if (companyPricePercentage > 0)
                    {
                        if (companyPriceAdditionType == true)
                        {
                            dd += (dd + companyPricePercentage);
                            increasedCompanyPrice = (companyPricePercentage);
                        }
                        else
                        {

                            dd += (dd * companyPricePercentage) / 100;
                            increasedCompanyPrice = (cls.companyPrice * companyPricePercentage) / 100;
                        }

                    }



                    if (cls.companyPrice.ToDecimal() > 0)
                    {
                        numCompanyFares.Value = cls.companyPrice.ToDecimal() + increasedCompanyPrice;
                    }
                    else
                    {

                        numCompanyFares.Value = dd;
                    }



                }

                if (opt_return.Checked && numReturnFare != null)
                {

                    numReturnFare.Value = returnFares;

                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        numReturnFare.Value -= airportPickupChrgs;


                    else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        numReturnFare.Value += airportPickupChrgs;


                    if (cls.CompanyId != 0 && numReturnCompanyFares != null)
                    {
                        numReturnCompanyFares.Value = cls.companyPrice + increasedCompanyPrice;


                        if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            numReturnCompanyFares.Value -= airportPickupChrgs;

                    }

                    //if (numReturnBookingFee != null)
                    //{
                    //    numReturnBookingFee.Value = numReturnFare.Value; // cls.returnservicefees
                    //}
                }

                else if (opt_waitreturn.Checked)
                {
                    decimal discountRate = numFareRate.Value;

                    if (AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() > 0)
                    {
                        discountRate = (discountRate * AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt()) / 100;

                    }


                    numFareRate.Value = numFareRate.Value + discountRate;

                    //if (numBookingFee != null)
                    //    numBookingFee.Value = numBookingFee.Value + discountRate; // cls.servicecharges


                    if (cls.CompanyId != 0 && numCompanyFares != null)
                    {
                        numCompanyFares.Value = numCompanyFares.Value + discountRate;
                    }
                }
                else
                {
                    if (numReturnFare != null)
                        numReturnFare.Value = 0;
                }


                if (cls.CompanyId != 0 && cls.companyPrice != 0 && numAgentCommission != null && numAgentCommission.Visible)
                {
                    try
                    {
                        if (cls.IsAmountWiseAgentFees.ToBool())
                        {
                            numAgentCommission.Value = cls.agentPrice.ToDecimal();
                            ddlAgentCommissionType.SelectedIndex = 1;
                        }
                        else
                        {
                            numAgentCommissionPercent.Value = cls.agentPercent;
                            numAgentCommission.Value = (cls.companyPrice * cls.agentPrice) / 100;
                            ddlAgentCommissionType.SelectedIndex = 0;

                        }

                        if (cls.IsAirportAgentFares == false)
                            CalculateDriverFaresAndCompanyPrice();
                    }
                    catch
                    {


                    }


                }


                string via = string.Empty;

                if (AppVars.objPolicyConfiguration.EnableOfflineDistance.ToBool() == false && cls.hasVia && AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
                {
                    via = "&waypoints=";
                    via += string.Join("|", grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()) + ", UK").ToArray<string>());
                    estimatedTime = General.CalculateEstimatedTime(cls.tempFromPostCode, cls.tempToPostCode, via);
                }

                if (estimatedTime.ToStr().Length > 0)
                    estimatedTime = "Time :" + estimatedTime;


                string prefix = string.Empty;


                lastCalculatedFares = numFareRate.Value;

                if (fareCalculateBy > 0)
                {

                    lblMap.Font = new Font("Tahoma", 9, FontStyle.Bold);
                    if (fareCalculateBy == 1)
                        prefix = "PlotToPlot ";
                    else if (fareCalculateBy == 2)
                        prefix = "Normal ";
                    else if (fareCalculateBy == 3)
                        prefix = "RTF ";
                    else if (fareCalculateBy == 4)
                        prefix = "Fixed ";

                }

                int waitAndReturnMileage = opt_waitreturn.Checked ? 2 : 1;

                decimal totalMileage = milesList.Sum();




                lblMap.Text = prefix + " - Distance : " + string.Format("{0:#.##}", totalMileage * waitAndReturnMileage) + " miles " + estimatedTime;


                if (drvFareReductionType.ToStr() != "" && drvFareReductionValue > 0)
                {

                    if (drvFareReductionType.ToStr().ToLower() == "percent")
                    {
                        // Math.Round(fares * 4, MidpointRounding.ToEven) / 4;
                        numFareRate.Value = numCompanyFares.Value - ((numCompanyFares.Value * drvFareReductionValue) / 100);

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = numReturnCompanyFares.Value - ((numReturnCompanyFares.Value * drvFareReductionValue) / 100);

                        }
                    }
                    else
                    {
                        numFareRate.Value = numCompanyFares.Value - drvFareReductionValue;

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = numReturnCompanyFares.Value - drvFareReductionValue;

                        }

                    }

                }


                CalculateServiceCharges(cls.objServiceCharge);

                CalculateTotalCharges();


                if (chkQuotedPrice != null && chkQuotedPrice.Visible)
                {

                    if (prefix.ToStr().ToLower().Trim() == "plottoplot" || prefix.ToStr().ToLower().Trim() == "fixed")
                    {
                        chkQuotedPrice.Checked = true;
                    }
                    else
                    {
                        chkQuotedPrice.Checked = false;

                    }
                }



                if (AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() > 0 && numFareRate.Value <= AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt())
                {
                    chkAutoDespatch.Checked = false;


                }

            }
            catch
            {



            }
            finally
            {


            }
        }


        private void CalculateServiceCharges(Gen_ServiceCharge objServiceCharge)
        {
            if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool() == false)
                return;

            try
            {
                if (objServiceCharge == null)
                    objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => c.Id != 0);


                if (objServiceCharge != null)
                {
                    if (objServiceCharge.IsAccount.ToBool() == true ||
                        (objServiceCharge.IsAccount.ToBool() == false && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH))
                    {

                        if (objServiceCharge.AmountWise.ToBool())
                        {
                            if (numFareRate.Value >= objServiceCharge.FromValue.ToDecimal())
                            {
                                numBookingFee.Value = objServiceCharge.ServiceChargeAmount.ToDecimal();
                            }
                            else
                                numBookingFee.Value = 0.00m;

                            if (pnlBookingFees.Visible)
                            {
                                if (numReturnFare.Value >= objServiceCharge.FromValue.ToDecimal())
                                {
                                    numReturnBookingFee.Value = objServiceCharge.ServiceChargeAmount.ToDecimal();
                                }
                                else
                                    numReturnBookingFee.Value = 0.00m;
                            }
                        }
                        else
                        {

                            if (numFareRate.Value >= objServiceCharge.FromValue.ToDecimal())
                            {
                                numBookingFee.Value = (numFareRate.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;



                                decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                                if (roundUp > 0)
                                {
                                    numBookingFee.Value = (decimal)Math.Ceiling(numBookingFee.Value / roundUp) * roundUp;

                                }
                            }
                            else
                                numBookingFee.Value = 0.00m;

                            if (pnlBookingFees.Visible && numReturnBookingFee != null)
                            {
                                if (numReturnFare.Value >= objServiceCharge.FromValue.ToDecimal())
                                {
                                    numReturnBookingFee.Value = (numReturnFare.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;

                                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                                    if (roundUp > 0)
                                    {

                                        if (numReturnBookingFee != null && numReturnBookingFee.Visible)
                                            numReturnBookingFee.Value = (decimal)Math.Ceiling(numReturnBookingFee.Value / roundUp) * roundUp;

                                    }
                                }
                                else
                                    numReturnBookingFee.Value = 0.00m;
                            }
                        }



                    }
                    else
                    {
                        numBookingFee.Value = 0.00m;
                        if (pnlBookingFees.Visible && numReturnBookingFee != null)
                        {
                            numReturnBookingFee.Value = 0.00m;

                        }


                    }

                }
            }
            catch
            {

            }
        }

        private decimal lastCalculatedFares = 0;

        void worker_fares_DoWork(object sender, DoWorkEventArgs e)
        {

            clsfaresworker cls = (clsfaresworker)e.Argument;

            int? vehicleTypeId = cls.vehicleTypeId;
            int defaultVehicleId = cls.defaultVehicleId;
            bool IsMoreFareWise = cls.IsMoreFareWise;
            int fromZoneId = cls.fromZoneId;
            int toZoneId = cls.toZoneId;
            string tempFromPostCode = cls.tempFromPostCode;
            string tempToPostCode = cls.tempToPostCode;
            decimal fareVal = 0.00m;
            decimal returnFares = 0.00m;
            bool hasVia = cls.hasVia;
            int? fromLocTypeId = cls.fromLocTypeId;
            int? toLocTypeId = cls.toLocTypeId;
            int? fromLocationId = cls.fromLocationId;
            int? toLocationId = cls.toLocationId;
            string[] listofvia = cls.viaList;
            string fromAddress = cls.fromAddress;
            string toAddress = cls.toAddress;
            int tempToLocId = cls.tempToLocId;
            int tempFromLocId = cls.tempFromLocId;
            string fromLocName = cls.fromLocName;
            string toLocName = cls.toLocName;
            string fromPostCode = cls.fromPostCode;
            string toPostCode = cls.toPostCode;
            int companyId = cls.CompanyId.ToInt();
            bool IsCompanyFareExist = false;

            DateTime? pickupdateTime = cls.pickupDateTime;
            bool IsZoneWise = true;
            decimal deadMileage = 0.00m;
            int subCompanyId = cls.SubCompanyId;
            bool IsReverse = cls.IsReverse;

            string errorMsg = string.Empty;
            decimal companyPrice = 0.00m;
            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
            {
                //listofvia

                List<ClsViaLocations> viaLocs = cls.ViaLocations;

                if (viaLocs != null && viaLocs.Count() > 0)
                {

                    for (int i = 0; i < viaLocs.Count(); i++)
                    {
                        var item = viaLocs[i];

                        if (item.OrderNo == 2)
                        {
                            tempFromLocId = fromLocationId.ToInt();
                            if (tempFromLocId != 0)
                            {
                                tempFromPostCode = fromLocName;
                            }
                            else
                                tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                        }
                        else
                        {
                            tempFromLocId = viaLocs[i - 1].LocId.ToInt();
                            tempFromPostCode = viaLocs[i - 1].ViaLocValue;

                        }

                        tempToLocId = item.LocId.ToInt();
                        tempToPostCode = item.ViaLocValue;

                        estimatedTime = " ";

                        fareVal += General.GetFareRate(subCompanyId, companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime);

                        if (errorMsg == "Error")
                            break;

                    }
                }





                if (viaLocs != null && viaLocs.Count() > 0)
                {

                    if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                    {
                        tempFromLocId = fromLocationId.ToInt();
                        if (tempFromLocId != 0)
                        {
                            tempFromPostCode = fromLocName;
                        }
                        else
                            tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                    }
                    else
                    {
                        tempFromLocId = tempToLocId;
                        tempFromPostCode = tempToPostCode;

                    }

                    tempToLocId = toLocationId.ToInt();
                    if (tempToLocId != 0)
                        tempToPostCode = toLocName;
                    else
                        tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;
                }

                fareVal += General.GetFareRate(subCompanyId, companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, false, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, ref companyPrice,fromZoneId,toZoneId);

                returnFares = fareVal;


                if (companyId != 0 && companyPrice > 0 && cls.PaymentTypeId != Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        var objCompany = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);


                        if (objCompany != null)
                        {
                            if (objCompany.IsAgent.ToBool())
                            {
                                cls.agentPrice = objCompany.CommissionPerBooking.ToDecimal();
                                cls.IsAmountWiseAgentFees = objCompany.IsAmountWiseComm.ToBool();
                                cls.agentPercent = objCompany.CommissionPerBooking.ToDecimal();


                                if (fareVal < companyPrice || errorMsg == "fixed")
                                    cls.IsAirportAgentFares = true;

                                Gen_Company_AgentCommission objComm = null;

                                //if (paymentTypeId == Enums.PAYMENT_TYPES.CASH && --27/03/2017=> hyde park cars=> ask to remove cash payment type=> it should be from all payment types
                                if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                                {

                                    string locPostCode = string.Empty;
                                    if ((fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT))
                                    {
                                        locPostCode = General.GetPostCodeMatch(cls.tempFromPostCode.ToStr().ToUpper());
                                    }
                                    else
                                    {
                                        locPostCode = General.GetPostCodeMatch(cls.tempToPostCode.ToStr().ToUpper());
                                    }


                                    objComm = General.GetObject<Gen_Company_AgentCommission>(c => c.FareId != null && c.CompanyId == companyId && c.LocationId != null
                                                && c.Gen_Location.PostCode == locPostCode && c.VehicleTypeId == vehicleTypeId && c.CompanyPrice > 0);

                                    if (objComm != null)
                                    {

                                        if (changepaymenttype == false)
                                        {



                                            if (objComm.CommissionOnPercent.ToBool())
                                            {
                                                cls.agentPercent = objComm.CommissionPercent.ToDecimal();
                                            }
                                            else
                                            {
                                                cls.agentPercent = 0;
                                                cls.agentPrice = objComm.CommissionAmount.ToDecimal(); ;
                                                cls.IsAmountWiseAgentFees = true;


                                            }

                                            cls.IsAmountWiseAgentFees = true;
                                        }
                                        cls.IsAirportAgentFares = true;
                                        companyPrice = objComm.CompanyPrice.ToDecimal();
                                        cls.companyPrice = objComm.CompanyPrice.ToDecimal();

                                        fareVal = objComm.DriverPrice.ToDecimal();
                                        cls.fareVal = fareVal;
                                        // numCompanyFares.Value = objComm.CompanyPrice.ToDecimal();

                                    }
                                    else
                                    {

                                        if (cls.IsAirportAgentFares)
                                        {

                                            cls.agentPercent = 0;
                                            cls.agentPrice = companyPrice - fareVal;
                                            cls.IsAmountWiseAgentFees = true;
                                        }


                                    }
                                }
                                else
                                {

                                    if (objComm == null && cls.IsAirportAgentFares)
                                    {

                                        cls.agentPercent = 0;
                                        cls.agentPrice = companyPrice - fareVal;
                                        cls.IsAmountWiseAgentFees = true;
                                    }

                                }

                            }
                            else
                            {
                                cls.agentPrice = 0.00m;
                                cls.IsAmountWiseAgentFees = false;

                            }




                        }
                    }


                }
                else
                {
                    cls.agentPrice = 0.00m;
                    cls.IsAmountWiseAgentFees = false;
                    cls.agentPercent = 0;


                }

                if (errorMsg.ToStr().Trim().ToLower() == "fixed")
                    fareCalculateBy = 4;
                else
                    fareCalculateBy = 0;


                if (estimatedTime.ToStr().Trim().Length > 0 && estimatedTime.IsNumeric())
                {
                    estimatedTime += " mins";
                }


                //comment
                //if (AppVars.objPolicyConfiguration.FareMeterType.ToInt() != 2)
                //{
                //    fareVal += GetFareIncrementCharges(fareVal);
                //    returnFares += GetReturnFareIncrementCharges(returnFares);
                //}





            }
            else
            {

                if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 2)
                {



                    bool IsMajorZone = false;
                    if (fromZoneId != 0 && toZoneId != 0 && fromZoneId == toZoneId)
                    {
                        if (General.GetQueryable<Gen_Zone>(null).Count(c => c.Id == fromZoneId && c.ZoneTypeId != null && c.ZoneTypeId == 1) > 0)
                        {
                            IsMajorZone = true;

                        }


                    }

                    if (hasVia == false && (fromZoneId != 0 && toZoneId != 0) && IsMajorZone == false)
                    {



                        var objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId);

                        if (objPlotFare == null)
                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);


                        if (objPlotFare != null)
                        {
                            fareVal = objPlotFare.Price.ToDecimal();


                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);
                            if (objPlotFare == null)
                            {

                                returnFares = fareVal;
                            }
                            else
                                returnFares = objPlotFare.Price.ToDecimal();
                        }


                        milesList.Clear();


                        //if (IsReverse)
                        //{
                        //    string temp = tempFromPostCode;
                        //    tempFromPostCode = tempToPostCode;
                        //    tempToPostCode = temp;

                        //}

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);



                        milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));




                    }
                    else if (hasVia == false)
                    {

                        fareVal = General.GetSimpleFareRate(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise);
                        returnFares = fareVal;

                    }
                    else
                    {
                        milesList.Clear();


                        //if (chkReverse.ToggleState == ToggleState.On)
                        //{
                        //    string temp = tempFromPostCode;
                        //    tempFromPostCode = tempToPostCode;
                        //    tempToPostCode = temp;

                        //}

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);



                        var viaList = listofvia;
                        milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));


                        decimal totalMiles = milesList.Sum();

                        var objFare = new TaxiDataContext().stp_CalculateGeneralFares(vehicleTypeId, companyId, totalMiles, DateTime.Now);

                        if (objFare != null)
                        {
                            var f = objFare.FirstOrDefault();

                            if (f.Result == "Success" || f.Result.ToStr().IsNumeric())
                            {
                                fareVal = f.totalFares.ToDecimal();

                                //   companyFareExist = f.CompanyFareExist.ToBool();
                            }
                            else
                                errorMsg = "Error";
                        }
                        else
                            errorMsg = "Error";





                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {

                            decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                            {

                                //  rtnFare = Math.Ceiling((rtnFare);
                                fareVal = Math.Ceiling(fareVal);
                            }
                        }
                        else
                        {

                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                            if (roundUp > 0)
                            {
                                fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;

                            }


                        }

                        fareVal = fareVal + (viaList.Count() * AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal());


                        returnFares = fareVal;


                    }






                 //   fareVal += GetFareIncrementCharges(fareVal);
                  //  returnFares += GetReturnFareIncrementCharges(returnFares);


                }
                else if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 3)
                {
                    int defaultVehicleTypeId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                    if (vehicleTypeId.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt())
                    {
                        IsMoreFareWise = true;
                    }



                    //tempFromLocId = fromLocationId.ToInt();
                    //if (tempFromLocId != 0)
                    //    tempFromPostCode = fromLocName;
                    //else
                    //    tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;


                    //tempToLocId = toLocationId.ToInt();
                    //if (tempToLocId != 0)
                    //    tempToPostCode = toLocName;
                    //else
                    //    tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;




                    //  int subCompanyId = ddlSubCompany.SelectedValue.ToInt();

                    if (hasVia == false && (fromZoneId != 0 && toZoneId != 0))
                    {

                        var objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId);

                        if (objPlotFare == null)
                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId);





                        //if (IsReverse)
                        //{
                        //    string temp = tempFromPostCode;
                        //    tempFromPostCode = tempToPostCode;
                        //    tempToPostCode = temp;

                        //}

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                        milesList.Clear();
                        milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));

                        if (objPlotFare != null)
                        {
                            fareVal = objPlotFare.Price.ToDecimal();


                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId);
                            if (objPlotFare == null)
                            {

                                returnFares = fareVal;
                            }
                            else
                                returnFares = objPlotFare.Price.ToDecimal();


                            decimal totalMiles = milesList.Sum();
                            decimal mileageFares = 0.00m;
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(defaultVehicleTypeId, companyId, totalMiles, DateTime.Now, subCompanyId);

                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    mileageFares = f.totalFares.ToDecimal();

                                    //   companyFareExist = f.CompanyFareExist.ToBool();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";

                            if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                            {

                                decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == defaultVehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                                if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                                {

                                    //  rtnFare = Math.Ceiling((rtnFare);
                                    mileageFares = Math.Ceiling(mileageFares);
                                }
                            }
                            else
                            {

                                decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                                if (roundUp > 0)
                                {
                                    mileageFares = (decimal)Math.Ceiling(mileageFares / roundUp) * roundUp;

                                }
                            }



                            if (mileageFares < fareVal || fareVal == 0)
                            {
                                fareVal = mileageFares;

                                returnFares = fareVal;
                            }

                        }
                        else
                        {
                            if (fareVal == 0)
                            {
                                // decimal mileageFares = General.GetSimpleFareRateBySubCompany(companyId, defaultVehicleTypeId, tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ddlSubCompany.SelectedValue.ToIntorNull());

                                decimal totalMiles = milesList.Sum();

                                var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(defaultVehicleTypeId, companyId, totalMiles, DateTime.Now, subCompanyId);

                                if (objFare != null)
                                {
                                    var f = objFare.FirstOrDefault();

                                    if ((f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                    {
                                        fareVal = f.totalFares.ToDecimal();

                                        //   companyFareExist = f.CompanyFareExist.ToBool();
                                    }
                                    else
                                        errorMsg = "Error";
                                }
                                else
                                    errorMsg = "Error";

                                if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                {

                                    decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == defaultVehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                                    if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                                    {

                                        //  rtnFare = Math.Ceiling((rtnFare);
                                        fareVal = Math.Ceiling(fareVal);
                                    }
                                }
                                else
                                {

                                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                                    if (roundUp > 0)
                                    {
                                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;

                                    }
                                }

                                returnFares = fareVal;
                            }

                        }
                    }

                    else if (hasVia == false || fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        fareVal = General.GetSimpleFareRateBySubCompany(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, subCompanyId);
                        returnFares = fareVal;

                    }
                    else
                    {
                        milesList.Clear();

                        //if (chkReverse.ToggleState == ToggleState.On)
                        //{
                        //    string temp = tempFromPostCode;
                        //    tempFromPostCode = tempToPostCode;
                        //    tempToPostCode = temp;

                        //}

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        string[] viaList = new string[0];

                        if (hasVia)
                        {
                            viaList = listofvia;
                            milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));

                        }
                        else
                        {
                            milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                        }

                        decimal totalMiles = milesList.Sum();

                        var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(defaultVehicleTypeId, companyId, totalMiles, DateTime.Now, subCompanyId);

                        if (objFare != null)
                        {
                            var f = objFare.FirstOrDefault();

                            if ((f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                            {
                                fareVal = f.totalFares.ToDecimal();

                                //   companyFareExist = f.CompanyFareExist.ToBool();
                            }
                            else
                                errorMsg = "Error";
                        }
                        else
                            errorMsg = "Error";



                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {

                            decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == defaultVehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                            {

                                //  rtnFare = Math.Ceiling((rtnFare);
                                fareVal = Math.Ceiling(fareVal);
                            }
                        }
                        else
                        {

                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                            if (roundUp > 0)
                            {
                                fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;

                            }


                        }

                        fareVal = fareVal + (viaList.Count() * AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal());


                        returnFares = fareVal;


                    }
                }
                else if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 4)
                {
                    int defaultVehicleTypeId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                    if (vehicleTypeId.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt())
                    {
                        IsMoreFareWise = true;

                        if (General.GetQueryable<Taxi_Model.Fare>(null).Count(c => c.VehicleTypeId == vehicleTypeId && c.SubCompanyId == subCompanyId) == 0)
                        {
                            vehicleTypeId = defaultVehicleTypeId;
                        }

                    }


                    fareCalculateBy = 0;

                    //if (fromZoneId != 0 && toZoneId != 0 && fromZoneId == toZoneId)
                    //{
                    //    if (General.GetQueryable<Gen_Zone>(null).Count(c => c.Id == fromZoneId && c.ZoneTypeId != null && c.ZoneTypeId == 1) > 0)
                    //    {
                    //        IsMajorZone = true;

                    //    }
                    //}

                    bool surchargeRateFromAmountWise = false;
                    bool surchargeRateToAmountWise = false;

                    decimal surchargeRateFrom = 0.00m;
                    decimal surchargeRateTo = 0.00m;

                    if ((fromZoneId.ToInt() > 0) && (fromLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    {
                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        surchargeRateFrom = General.GetSurchargeRate(tempFromPostCode, fromZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateFromAmountWise);
                    }

                    if ((toZoneId.ToInt() > 0) && (toLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    {
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
                        surchargeRateTo = General.GetSurchargeRate(tempToPostCode, toZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateToAmountWise);
                    }

                    milesList.Clear();
                    if (hasVia == false && (fromZoneId != 0 && toZoneId != 0))
                    {

                       

                      

                        var objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId);

                        if (objPlotFare == null)
                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId);


                        if (objPlotFare != null)
                        {
                            fareVal = objPlotFare.Price.ToDecimal();


                            var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId);
                            if (objPlotFare2 == null)
                            {

                                returnFares = fareVal;
                            }
                            else
                                returnFares = objPlotFare2.Price.ToDecimal();
                        }


                        //if (IsReverse)
                        //{
                        //    string temp = tempFromPostCode;
                        //    tempFromPostCode = tempToPostCode;
                        //    tempToPostCode = temp;

                        //}

                        //tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        //tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        //   milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));




                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        if (tempFromPostCode.ToStr().Length == 0)
                        {

                            tempFromPostCode = fromAddress.ToStr().ToUpper();
                        }

                        if (tempToPostCode.ToStr().Length == 0)
                        {

                            tempToPostCode = toAddress.ToStr().ToUpper();
                        }




                        decimal journeyMilage = 0.00m;

                        if ((lastOrigin.Length > 0 && lastDestination.Length > 0
                                      && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination) && lastMileage > 0 && lastJourneyMileage > 0)
                        {


                            journeyMilage = lastMileage;
                            milesList.Add(lastJourneyMileage);
                        }
                        else
                        {

                            if (AppVars.objPolicyConfiguration.DeadMileage.ToDecimal() > 0)
                            {

                                string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();

                                decimal towntoPickup = General.CalculateDistance(basePostCode, tempFromPostCode);
                                decimal destToTown = (General.CalculateDistance(tempToPostCode, basePostCode));


                                journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);


                                if (towntoPickup > AppVars.objPolicyConfiguration.DeadMileage.ToDecimal()
                                    && destToTown > AppVars.objPolicyConfiguration.DeadMileage.ToDecimal())
                                {

                                    journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;

                                    fareCalculateBy = 3;
                                }
                                else
                                    fareCalculateBy = 2;


                                journeyMilage = Math.Round(journeyMilage, 1);
                                milesList.Add(journeyMilage);


                            }
                            else
                            {

                                milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                                fareCalculateBy = 1;
                            }



                            lastOrigin = tempFromPostCode;
                            lastDestination = tempToPostCode;
                            lastMileage = journeyMilage;
                            lastJourneyMileage = milesList.Sum();
                        }


                        if (objPlotFare == null)
                        {

                            fareVal = General.GetFixFareRate(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, fromAddress, toAddress, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ref fareCalculateBy, subCompanyId);
                            returnFares = fareVal;

                        }


                        decimal totalMiles = milesList.Sum();


                        decimal mileageFares = 0.00m;

                        if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool())
                        {
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, cls.SubCompanyId);

                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    mileageFares = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";
                        }
                        else
                        {
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFares(vehicleTypeId, companyId, totalMiles, DateTime.Now);



                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    mileageFares = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";


                        }

                        //  AppVars.objPolicyConfiguration.


                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {

                            decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                            {

                                //  rtnFare = Math.Ceiling((rtnFare);
                                mileageFares = Math.Ceiling(mileageFares);
                            }
                        }
                        else
                        {
                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                            if (roundUp > 0)
                            {
                                mileageFares = (decimal)Math.Ceiling(mileageFares / roundUp) * roundUp;
                            }
                        }


                        if (AppVars.objPolicyConfiguration.PreferredMileageFares.ToBool())
                        {
                            if (fareVal == 0 || mileageFares > fareVal)
                            {
                                fareCalculateBy = 2;
                                fareVal = mileageFares;
                                returnFares = fareVal;
                            }
                            else
                            {
                                fareCalculateBy = 1;
                            }

                        }
                        else
                        {


                            if (fareVal == 0)
                            {
                                fareVal = mileageFares;
                                returnFares = fareVal;
                                fareCalculateBy = 2;
                            }
                            else
                            {
                                fareCalculateBy = 1;
                            }


                        }


                    }
                    else if (hasVia == false)
                    {

                        fareVal = General.GetSimpleFareRateWithRoundTrip(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ref fareCalculateBy, subCompanyId);
                        returnFares = fareVal;
                    }
                    else
                    {
                        milesList.Clear();


                        
                        decimal journeyMilage = 0.00m;
                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                       

                        if (AppVars.objPolicyConfiguration.DeadMileage.ToDecimal() > 0)
                        {

                            string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();

                            


                            // new


                            decimal towntoPickup = General.CalculateDistance(basePostCode, tempFromPostCode);
                            decimal destToTown = (General.CalculateDistance(tempToPostCode, basePostCode));


                            var viaList = listofvia;
                            journeyMilage = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);

                            journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;



                            fareCalculateBy = 3;
                            journeyMilage = Math.Round(journeyMilage, 1);
                            milesList.Add(journeyMilage);

                            //
                        }
                        else
                        {
                            var viaList = listofvia;
                            milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));
                        }
                        //   }




                        decimal totalMiles = milesList.Sum();

                        if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool())
                        {
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, cls.SubCompanyId);



                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    fareVal = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";
                        }
                        else
                        {
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFares(vehicleTypeId, companyId, totalMiles, DateTime.Now);
                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    fareVal = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";
                        }


                        //Surcharge on Mileage
                      





                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {
                            decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                            {
                                //  rtnFare = Math.Ceiling((rtnFare);
                                fareVal = Math.Ceiling(fareVal);
                            }
                        }
                        else
                        {
                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                            if (roundUp > 0)
                            {
                                fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                            }
                        }

                      //  fareVal = fareVal;
                        returnFares = fareVal;
                        

                    }


                    if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == false)
                    {

                        decimal totalSurchargePercentage = surchargeRateFrom + surchargeRateTo;

                        decimal fareSurchargePercent = (fareVal * totalSurchargePercentage) / 100;
                        fareVal = fareVal + fareSurchargePercent;

                        fareSurchargePercent = (returnFares * totalSurchargePercentage) / 100;
                        returnFares = returnFares + fareSurchargePercent;

                    }
                    else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == true)
                    {

                        fareVal = fareVal + surchargeRateFrom + surchargeRateTo;
                        returnFares = returnFares + surchargeRateFrom + surchargeRateTo;
                    }
                    else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == false)
                    {
                        surchargeRateTo = (fareVal * surchargeRateTo) / 100;
                        fareVal = fareVal + surchargeRateFrom + surchargeRateTo;


                        surchargeRateTo = (returnFares * surchargeRateTo) / 100;
                        returnFares = returnFares + surchargeRateFrom + surchargeRateTo;
                    }
                    else if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == true)
                    {
                        surchargeRateFrom = (fareVal * surchargeRateFrom) / 100;
                        fareVal = fareVal + surchargeRateFrom + surchargeRateTo;


                        surchargeRateFrom = (returnFares * surchargeRateFrom) / 100;
                        returnFares = returnFares + surchargeRateFrom + surchargeRateTo;
                    }

                    //if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() && (fareCalculateBy == 1 || fareCalculateBy == 4))
                    //{

                    //    fareVal += GetFareIncrementCharges(fareVal, cls.pickupDateTime);
                    //    returnFares += GetFareIncrementCharges(returnFares, cls.returnpickupdateTime);

                    //}

                }

            }


            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() && (fareCalculateBy == 1 || fareCalculateBy == 4))
            {

                fareVal += GetFareIncrementCharges(fareVal, cls.pickupDateTime);
                returnFares += GetFareIncrementCharges(returnFares, cls.returnpickupdateTime);

            }

            //decimal waitandreturnnfare = 0.00m;
            //if (opt_WaitandReturn.ToggleState == ToggleState.On)
            //{
            //    if (AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() > 0)
            //    {
            //        waitandreturnnfare = (fareVal * AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt()) / 100;
            //        fareVal += waitandreturnnfare;


            //    }

            //}


            cls.fareVal = fareVal;
            cls.returnfares = returnFares;



            if (IsMoreFareWise)
            {
                int actualVehicleTypeId = cls.vehicleTypeId.ToInt();

                decimal AddedAmount = 0.00m;
                decimal returnAddedAmount = 0.00m;
                string op = string.Empty;


                Gen_SysPolicy_FaresSetting objFare = General.GetObject<Gen_SysPolicy_FaresSetting>(c => c.SysPolicyId != null && c.VehicleTypeId == actualVehicleTypeId);

                if (objFare != null)
                {
                    op = objFare.Operator.ToStr();


                    if (objFare.IsAmountWise == false)
                    {
                        AddedAmount = (fareVal * objFare.Percentage.ToDecimal()) / 100;
                        returnAddedAmount = (returnFares * objFare.Percentage.ToDecimal()) / 100;
                    }
                    else
                    {
                        AddedAmount = objFare.Amount.ToDecimal();
                        returnAddedAmount = (returnFares * objFare.Percentage.ToDecimal()) / 100;

                    }


                    switch (op)
                    {
                        case "+":
                            fareVal = (decimal)Math.Ceiling((fareVal + AddedAmount) / 0.1m) * 0.1m;
                            returnFares = (decimal)Math.Ceiling((returnFares + returnAddedAmount) / 0.1m) * 0.1m;

                            break;

                        case "-":
                            //fareVal = fareVal - AddedAmount;
                            //returnFares = returnFares + returnAddedAmount;
                            fareVal = (decimal)Math.Ceiling((fareVal - AddedAmount) / 0.1m) * 0.1m;
                            returnFares = (decimal)Math.Ceiling((returnFares - returnAddedAmount) / 0.1m) * 0.1m;
                            break;

                        default:
                            fareVal = (decimal)Math.Ceiling((fareVal + AddedAmount) / 0.1m) * 0.1m;
                            returnFares = (decimal)Math.Ceiling((returnFares + returnAddedAmount) / 0.1m) * 0.1m;
                            break;


                            //   rtnFare = (decimal)Math.Ceiling(rtnFare / 0.5m) * 0.5m;

                    }


                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                    if (roundUp > 0)
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                        returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                    }
                }
            }


            decimal peakFares = 0.00m;
            decimal rtnPeakFares = 0.00m;

            if (fareVal > 0)
            {



                // pickupdateTime = dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.Value.TimeOfDay;
                TimeSpan pickupTime = new TimeSpan(pickupdateTime.Value.TimeOfDay.Hours, pickupdateTime.Value.Minute, 0);
                int pickupDay = (int)pickupdateTime.Value.DayOfWeek;



                DateTime? returnpickupdateTime = cls.returnpickupdateTime; ;
                TimeSpan returnpickupTime = TimeSpan.Zero;
                int returnpickupDay = 0;

                if (returnpickupdateTime != null)
                {

                    // returnpickupdateTime = returnpickupdateTime.Value.ToDate() + dtpReturnPickupTime.Value.Value.TimeOfDay;
                    returnpickupTime = new TimeSpan(returnpickupdateTime.Value.TimeOfDay.Hours, returnpickupdateTime.Value.Minute, 0);
                    returnpickupDay = (int)pickupdateTime.Value.DayOfWeek;


                }


                //decimal peakFares = 0.00m;
                //decimal rtnPeakFares = 0.00m;
                foreach (var item in General.GetQueryable<PeakTimeSetting>(c => (c.Amount != null && c.Amount > 0) || c.IncrementPercent != null))
                {

                    int fromDay = item.FromDay.ToInt();
                    int tillDay = item.ToDay.ToInt();

                    TimeSpan fromTime = new TimeSpan(item.FromTime.Value.Hour, item.FromTime.Value.Minute, 0);
                    TimeSpan toTime = new TimeSpan(item.ToTill.Value.Hour, item.ToTill.Value.Minute, 0);

                    if (peakFares == 0 && fromDay <= pickupDay && (tillDay >= pickupDay || fromDay > tillDay))
                    {
                        if (
                            (
                            ((fromTime.Hours > 12 && toTime.Hours < 12) &&
                             ((fromTime >= pickupTime && pickupTime <= toTime)
                                 || (fromTime <= pickupTime && pickupTime >= toTime)))

                                ||
                            ((toTime.Hours > fromTime.Hours) &&
                             (pickupTime >= fromTime && pickupTime <= toTime))


                                 )


                            && (item.ZoneId == fromZoneId || item.ZoneId == null || item.ZoneId == 0))
                        {


                            if (item.ZoneId.ToInt() != 0)
                            {

                                if (fromZoneId != 0 && item.ZoneId.ToInt() == fromZoneId)
                                {

                                    if (item.IsAmountWise.ToBool() == false)
                                    {

                                        peakFares = ((fareVal * item.IncrementPercent.ToDecimal()) / 100);
                                    }
                                    else
                                    {

                                        peakFares = item.Amount.ToDecimal();
                                    }

                                }
                            }
                            else
                            {
                                if (item.IsAmountWise.ToBool() == false)
                                {

                                    peakFares = ((fareVal * item.IncrementPercent.ToDecimal()) / 100);
                                }
                                else
                                {
                                    peakFares = item.Amount.ToDecimal();

                                }
                            }
                        }
                    }


                    if (returnpickupdateTime != null)
                    {

                        if (rtnPeakFares == 0 && fromDay <= returnpickupDay && (tillDay >= returnpickupDay || fromDay > tillDay))
                        {
                            if (
                                 (
                                    ((fromTime.Hours > 12 && toTime.Hours < 12) &&
                                     ((fromTime >= returnpickupTime && returnpickupTime <= toTime)
                                         || (fromTime <= returnpickupTime && returnpickupTime >= toTime)))

                                        ||
                                    ((toTime.Hours > fromTime.Hours) &&
                                     (returnpickupTime >= fromTime && returnpickupTime <= toTime))


                                   )

                                && (item.ZoneId == toZoneId || item.ZoneId == null || item.ZoneId == 0)

                                )
                            {


                                if (item.ZoneId.ToInt() != 0)
                                {
                                    if (fromZoneId != 0 && item.ZoneId.ToInt() == toZoneId)
                                    {
                                        if (item.IsAmountWise.ToBool() == false)
                                        {
                                            rtnPeakFares = ((returnFares * item.IncrementPercent.ToDecimal()) / 100);
                                        }
                                        else
                                        {

                                            rtnPeakFares = item.Amount.ToDecimal();
                                        }
                                    }

                                }
                                else
                                {
                                    if (item.IsAmountWise.ToBool() == false)
                                    {
                                        rtnPeakFares = ((returnFares * item.IncrementPercent.ToDecimal()) / 100);
                                    }
                                    else
                                    {
                                        rtnPeakFares = item.Amount.ToDecimal();
                                    }
                                    //  returnFares += rtnPeakFares;

                                }

                            }
                        }

                    }
                }
            }


            fareVal += peakFares;
            returnFares += rtnPeakFares;


            if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
            {

                fareVal = Math.Round(fareVal, 1);
                returnFares = Math.Round(returnFares, 1);
                // fareVal = (Math.Round((fareVal * 2), MidpointRounding.AwayFromZero)) / 2;
                // returnFares = (Math.Round((returnFares * 2), MidpointRounding.AwayFromZero)) / 2;
            }



            decimal dd = fareVal.ToDecimal();


            decimal airportPickupChrgs = AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
            /// Add Airport Pickup Charges If Pickup Point is From Airport...
            if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {
                if (AppVars.objPolicyConfiguration.HasMultipleAirportPickupCharges.ToBool())
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempFromPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            airportPickupChrgs = db.Gen_SysPolicy_AirportPickupCharges.FirstOrDefault(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).DefaultIfEmpty().Charges.ToDecimal();
                        }
                    }


                    // airportPickupChrgs = General.GetObject<Gen_SysPolicy_AirportPickupCharge>(c => c.AirportId == fromLocationId).DefaultIfEmpty().Charges.ToDecimal();
                    dd += airportPickupChrgs;
                }
                else
                {
                    dd += AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                }
            }
            else if (cls.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {

                if (AppVars.objPolicyConfiguration.HasMultipleAirportPickupCharges.ToBool())
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempToPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            airportPickupChrgs = db.Gen_SysPolicy_AirportPickupCharges.FirstOrDefault(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).DefaultIfEmpty().Charges.ToDecimal();
                        }
                    }


                    // airportPickupChrgs = General.GetObject<Gen_SysPolicy_AirportPickupCharge>(c => c.AirportId == fromLocationId).DefaultIfEmpty().Charges.ToDecimal();
                    dd += airportPickupChrgs;
                }
                else
                {
                    dd += AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                }

            }


            if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    var objServiceCharge = db.Gen_ServiceCharges.FirstOrDefault();



                    if (objServiceCharge != null)
                    {
                        cls.objServiceCharge = new Gen_ServiceCharge();
                        cls.objServiceCharge.AmountWise = objServiceCharge.AmountWise;
                        cls.objServiceCharge.FromValue = objServiceCharge.FromValue;
                        cls.objServiceCharge.IsAccount = objServiceCharge.IsAccount;
                        cls.objServiceCharge.ServiceChargeAmount = objServiceCharge.ServiceChargeAmount;
                        cls.objServiceCharge.ServiceChargePercent = objServiceCharge.ServiceChargePercent;
                        cls.objServiceCharge.ToValue = objServiceCharge.ToValue;



                    }


                }

            }

            cls.airportPickupChrgs = airportPickupChrgs;
            cls.fareVal = fareVal;
            cls.returnfares = returnFares;
            cls.dd = dd;
            cls.companyPrice = companyPrice;

            e.Result = cls;

        }


        //private decimal ApplySurchargeOnMileageFares(decimal fareVal,int fromLocTypeId,int? fromZoneId,string tempFromPostCode,int toLocTypeId,int? toZoneId,string tempToPostCode)
        //{
        //    try
        //    {
        //        bool surchargeRateFromAmountWise = false;
        //        bool surchargeRateToAmountWise = false;

        //        decimal surchargeRateFrom = 0.00m;
        //        decimal surchargeRateTo = 0.00m;

        //        if ((tempFromPostCode.Length > 0 || fromZoneId.ToInt() > 0) && (fromLocTypeId != Enums.LOCATION_TYPES.TOWN))
        //        {
        //            tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
        //            surchargeRateFrom = General.GetSurchargeRate(tempFromPostCode, fromZoneId, ref surchargeRateFromAmountWise);
        //        }

        //        if ((tempToPostCode.Length > 0 || toZoneId.ToInt() > 0) && (toLocTypeId != Enums.LOCATION_TYPES.TOWN))
        //        {
        //            tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
        //            surchargeRateTo = General.GetSurchargeRate(tempToPostCode, toZoneId, ref surchargeRateToAmountWise);
        //        }

        //        if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == false)
        //        {
        //            decimal totalSurchargePercentage = surchargeRateFrom + surchargeRateTo;
        //            decimal fareSurchargePercent = (fareVal * totalSurchargePercentage) / 100;
        //            fareVal = fareVal + fareSurchargePercent;
        //        }
        //        else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == true)
        //        {
        //            fareVal = fareVal + surchargeRateFrom + surchargeRateTo;
        //        }
        //        else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == false)
        //        {
        //            surchargeRateTo = (fareVal * surchargeRateTo) / 100;
        //            fareVal = fareVal + surchargeRateFrom + surchargeRateTo;
        //        }
        //        else if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == true)
        //        {
        //            surchargeRateFrom = (fareVal * surchargeRateFrom) / 100;
        //            fareVal = fareVal + surchargeRateFrom + surchargeRateTo;
        //        }

        //    }
        //    catch
        //    {

        //    }
        //    return fareVal;

        //}

        int fareCalculateBy = 0;

        private decimal GetReturnFareIncrementCharges(decimal faresToIncrement)
        {
            if (dtpReturnPickupDate == null)
                return 0;

            if (dtpReturnPickupTime == null || dtpReturnPickupTime.Value == null)
                return 0;
            try
            {
                faresToIncrement = 0;

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var objIncList = db.GetTable<Fare_IncrementSetting>().Where(c => c.Id != 0 && c.EnableIncrement != null && c.EnableIncrement == true);

                    foreach (var objInc in objIncList)
                    {
                        if (objInc != null)
                        {
                            //   enablefareincrement = true;
                            bool IsExist = false;

                            DateTime? pickupDateTime = (dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();

                            if ((objInc.CriteriaBy.ToInt() == 1 && pickupDateTime >= objInc.FromDate && pickupDateTime <= objInc.TillDate)
                            || (objInc.CriteriaBy.ToInt() == 2 && pickupDateTime.ToDate() >= objInc.FromDate.ToDate() && pickupDateTime.ToDate() <= objInc.TillDate.ToDate())
                                )
                            {

                                IsExist = true;

                            }
                            else if (objInc.CriteriaBy.ToInt() == 3)
                            {
                                string str = dtpReturnPickupTime.Text.ToDateTime().TimeOfDay.ToStr();

                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();

                                int time = str.ToInt();


                                str = objInc.FromDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int fromTime = str.ToInt();


                                str = objInc.TillDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int toTime = str.ToInt();


                                if (time < 1000)
                                {

                                    // PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // OFF PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                }

                                else if (time >= 1000)
                                {
                                    if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                        else if ((fromTime >= 1000 && toTime < 1000))
                                        {

                                            if (time >= fromTime)
                                            {
                                                IsExist = true;
                                            }
                                        }
                                        else if ((toTime > fromTime && time < (toTime - fromTime))
                                            || (fromTime > toTime && time > (fromTime - toTime)))
                                        {
                                            IsExist = true;

                                        }

                                    }

                                    else if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                    }

                                    else if ((fromTime >= 1000 && toTime < 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime)
                                        {
                                            IsExist = true;
                                        }

                                    }
                                }
                            }



                            if (IsExist)
                            {

                                if (objInc.IncrementType.ToStr() == "percent")
                                {
                                    faresToIncrement = ((faresToIncrement * objInc.IncrementRate.ToDecimal()) / 100);

                                    if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                    {
                                        faresToIncrement = Math.Ceiling(faresToIncrement);
                                    }
                                }
                                else
                                {
                                    faresToIncrement = objInc.IncrementRate.ToDecimal();
                                }
                            }
                            else
                            {

                                faresToIncrement = 0;
                            }
                        }
                        else
                        {
                            //    enablefareincrement = false;
                            faresToIncrement = 0;

                        }

                    }
                }
            }
            catch
            {


            }

            return faresToIncrement;

        }

        #endregion



        //private void opt_JOneWay_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        //{
        //    FocusOnCustomer();
        //}

        //NC
        //Font f = null;
        //public long PickupTimeAsc;
        //public long PickupTimeDesc;
        void DateTimePickerElement_ValueChanged(object sender, EventArgs e)
        {




            GetCurrentWaitingBookings();


            try
            {
                //ShowLimitedBookings(dtpPickupTime.Value);

                if (dtpReturnPickupDate != null && dtpReturnPickupDate.Value.ToDate() < dtpPickupDate.Value.ToDate())
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();

                }

            }
            catch
            {


            }

        }
        //fwdkh00
        private void InitializeBookingLimits()
        {

            //if (this.radChart1 != null)
            //{
            //    return;
            //}
            //Telerik.Charting.Styles.ChartMarginsTitle chartMarginsTitle3 = new Telerik.Charting.Styles.ChartMarginsTitle();
            //System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmBookingLimitsGraph));
            //Telerik.Charting.Styles.ChartMarginsLegend chartMarginsLegend3 = new Telerik.Charting.Styles.ChartMarginsLegend();
            //Telerik.Charting.Styles.ChartMarginsPlotArea chartMarginsPlotArea3 = new Telerik.Charting.Styles.ChartMarginsPlotArea();


            //// chartMarginsPlotArea3.Right = -8;
            //this.radChart1 = new Telerik.WinControls.UI.RadChart();
            //((System.ComponentModel.ISupportInitialize)(this.radChart1)).BeginInit();
            //this.tabBookingLimit.Controls.Add(this.radChart1);
            //this.SuspendLayout();

            //this.radChart1.Appearance.Border.Color = System.Drawing.Color.FromArgb(((int)(((byte)(82)))), ((int)(((byte)(160)))), ((int)(((byte)(226)))));
            //this.radChart1.Appearance.FillStyle.MainColor = System.Drawing.Color.FromArgb(((int)(((byte)(226)))), ((int)(((byte)(247)))), ((int)(((byte)(255)))));
            //this.radChart1.ChartTitle.Appearance.Border.Color = System.Drawing.Color.Transparent;
            //this.radChart1.Font = new Font("Arial", 9F);
            //this.radChart1.ChartTitle.Appearance.Dimensions.Margins = chartMarginsTitle3;
            //this.radChart1.ChartTitle.Appearance.FillStyle.MainColor = System.Drawing.Color.Transparent;
            //this.radChart1.ChartTitle.TextBlock.Text = "Booking Limits";
            //this.radChart1.ChartTitle.TextBlock.Appearance.TextProperties.Color = System.Drawing.Color.FromArgb(((int)(((byte)(19)))), ((int)(((byte)(111)))), ((int)(((byte)(182)))));
            //this.radChart1.ChartTitle.TextBlock.Appearance.TextProperties.Font = new System.Drawing.Font("Arial", 15F);
            //this.radChart1.Legend.Appearance.Border.Color = System.Drawing.Color.Transparent;
            ////fwd  chartMarginsLegend3.Top = ((Telerik.Charting.Styles.Unit)(resources.GetObject("chartMarginsLegend3.Top")));
            //this.radChart1.Legend.Appearance.Dimensions.Margins = chartMarginsLegend3;
            //this.radChart1.Legend.Appearance.FillStyle.MainColor = System.Drawing.Color.Transparent;
            //this.radChart1.Legend.Appearance.ItemTextAppearance.TextProperties.Font = new System.Drawing.Font("Verdana", 8F);
            //this.radChart1.Legend.Appearance.Position.AlignedPosition = Telerik.Charting.Styles.AlignedPositions.TopRight;
            //this.radChart1.Location = new System.Drawing.Point(0, 39);
            //this.radChart1.Name = "radChart1";
            //this.radChart1.PlotArea.Appearance.Border.Color = System.Drawing.Color.FromArgb(((int)(((byte)(180)))), ((int)(((byte)(210)))), ((int)(((byte)(236)))));
            ////fwd chartMarginsPlotArea3.Left = ((Telerik.Charting.Styles.Unit)(resources.GetObject("chartMarginsPlotArea3.Left")));
            ////fwd chartMarginsPlotArea3.Right = ((Telerik.Charting.Styles.Unit)(resources.GetObject("chartMarginsPlotArea3.Right")));
            //this.radChart1.PlotArea.Appearance.Dimensions.Margins = chartMarginsPlotArea3;
            //this.radChart1.PlotArea.Appearance.FillStyle.FillType = Telerik.Charting.Styles.FillType.Solid;
            //this.radChart1.PlotArea.Appearance.FillStyle.MainColor = System.Drawing.Color.White;
            //this.radChart1.PlotArea.Appearance.Dimensions.AutoSize = true;
            //this.radChart1.PlotArea.EmptySeriesMessage.Appearance.Visible = true;
            //this.radChart1.PlotArea.EmptySeriesMessage.Visible = true;
            //this.radChart1.PlotArea.XAxis.Appearance.Color = System.Drawing.Color.FromArgb(((int)(((byte)(180)))), ((int)(((byte)(210)))), ((int)(((byte)(236)))));
            //this.radChart1.PlotArea.XAxis.Appearance.MajorGridLines.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.XAxis.Appearance.MajorGridLines.PenStyle = System.Drawing.Drawing2D.DashStyle.Solid;
            //this.radChart1.PlotArea.XAxis.Appearance.MajorTick.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.XAxis.Appearance.TextAppearance.TextProperties.Color = System.Drawing.Color.FromArgb(((int)(((byte)(51)))), ((int)(((byte)(51)))), ((int)(((byte)(51)))));
            //this.radChart1.PlotArea.XAxis.AxisLabel.TextBlock.Appearance.TextProperties.Color = System.Drawing.Color.FromArgb(((int)(((byte)(51)))), ((int)(((byte)(51)))), ((int)(((byte)(51)))));
            //this.radChart1.PlotArea.YAxis.Appearance.Color = System.Drawing.Color.FromArgb(((int)(((byte)(180)))), ((int)(((byte)(210)))), ((int)(((byte)(236)))));
            //this.radChart1.PlotArea.YAxis.Appearance.MajorGridLines.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.YAxis.Appearance.MajorTick.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.YAxis.Appearance.MinorGridLines.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.YAxis.Appearance.MinorGridLines.PenStyle = System.Drawing.Drawing2D.DashStyle.Dash;
            //this.radChart1.PlotArea.YAxis.Appearance.MinorTick.Color = System.Drawing.Color.FromArgb(((int)(((byte)(206)))), ((int)(((byte)(222)))), ((int)(((byte)(235)))));
            //this.radChart1.PlotArea.YAxis.Appearance.TextAppearance.TextProperties.Color = System.Drawing.Color.FromArgb(((int)(((byte)(51)))), ((int)(((byte)(51)))), ((int)(((byte)(51)))));
            //this.radChart1.PlotArea.XAxis.Appearance.TextAppearance.TextProperties.Font = new Font("Arial", 6.5F);
            //this.radChart1.PlotArea.YAxis.AxisLabel.TextBlock.Appearance.TextProperties.Color = System.Drawing.Color.FromArgb(((int)(((byte)(51)))), ((int)(((byte)(51)))), ((int)(((byte)(51)))));
            //this.radChart1.SeriesOrientation = Telerik.Charting.ChartSeriesOrientation.Horizontal;
            //this.radChart1.Size = new System.Drawing.Size(440, 351);
            //this.radChart1.Skin = "SkyBlue";
            //this.radChart1.TabIndex = 109;
            ////radChart1.PlotArea.YAxis.Appearance.ValueFormat = Telerik.Charting.Styles.ChartValueFormat.Number;
            //((System.ComponentModel.ISupportInitialize)(this.radChart1)).EndInit();
            //this.ResumeLayout(false);
        }

        private void InitializeCurrentWaitingBookings()
        {
            if (this.grdPickupDateTime != null)
                return;

            f = new Font("Tahoma", 9, FontStyle.Bold);
            this.grdPickupDateTime = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.grdPickupDateTime)).BeginInit();
            this.tabCurrentBooking.Controls.Add(this.grdPickupDateTime);

            this.grdPickupDateTime.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(191)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.grdPickupDateTime.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.grdPickupDateTime.Location = new System.Drawing.Point(4, 9);
            // 
            // grdPickupDateTime
            // 

            this.grdPickupDateTime.TabIndex = 0;
            this.grdPickupDateTime.TabStop = true;

            this.grdPickupDateTime.Name = "grdPickupDateTime";
            this.grdPickupDateTime.Size = new System.Drawing.Size(260, 426);
            this.grdPickupDateTime.TabIndex = 284;
            this.grdPickupDateTime.Text = "Attributes";
            this.grdPickupDateTime.Dock = DockStyle.Fill;
            this.grdPickupDateTime.CellFormatting += new DataGridViewCellFormattingEventHandler(grdPickupDateTime_CellFormatting);
            this.grdPickupDateTime.RowHeadersVisible = false;
            ((System.ComponentModel.ISupportInitialize)(this.grdPickupDateTime)).EndInit();

            LoadNearest();
        }

        void grdPickupDateTime_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            foreach (DataGridViewRow item in grdPickupDateTime.Rows)
            {
                if (item.Cells["id"].Value.ToInt() == PickupTimeAsc)
                {
                    item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Style.ForeColor = Color.Red;
                    // item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Selected = false;
                }
                if (item.Cells["id"].Value.ToInt() == PickupTimeDesc)
                {
                    // f = new Font("Tahoma", 9, FontStyle.Bold);
                    item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Style.ForeColor = Color.Red;
                    item.Cells["Time"].Selected = false;
                }
            }

        }
        private void InitializeCurrentWaitingBookingsTab()
        {
            try
            {
                if (this.radPageView1 != null)
                    return;

                this.radPageView1 = new System.Windows.Forms.TabControl();
                this.tabCurrentBooking = new System.Windows.Forms.TabPage();
                this.tabNearestDrivers = new System.Windows.Forms.TabPage();

                //fwdkh
                //      this.tabBookingLimit = new System.Windows.Forms.TabPage();

                this.btnRefreshNearestDrivers = new Button();

                this.radPageView1.SuspendLayout();
                this.tabNearestDrivers.SuspendLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.btnRefreshNearestDrivers)).BeginInit();


                // 
                // radPageView1
                // 
                this.radPageView1.Controls.Add(this.tabCurrentBooking);
                this.radPageView1.Controls.Add(this.tabNearestDrivers);
                //     this.radPageView1.Controls.Add(this.tabBookingLimit);
                this.radPageView1.Location = new System.Drawing.Point(909, 38);
                this.radPageView1.Name = "radPageView1";
                this.radPageView1.SelectedTab = this.tabCurrentBooking;
                this.radPageView1.Size = new System.Drawing.Size(540, 410);//(310, 410);
                this.radPageView1.TabIndex = 0;
                this.radPageView1.TabStop = true;

                this.radPageView1.Text = "radPageView1";
                // 
                // tabCurrentBooking
                // 
                this.tabCurrentBooking.Location = new System.Drawing.Point(10, 37);
                this.tabCurrentBooking.Name = "tabCurrentBooking";
                this.tabCurrentBooking.Size = new System.Drawing.Size(289, 503);
                this.tabCurrentBooking.Text = "Current Bookings";

                // 
                // tabNearestDrivers
                // 
                this.tabNearestDrivers.Controls.Add(this.btnRefreshNearestDrivers);
                this.tabNearestDrivers.Location = new System.Drawing.Point(10, 37);
                this.tabNearestDrivers.Name = "tabNearestDrivers";
                this.tabNearestDrivers.Size = new System.Drawing.Size(289, 410);
                this.tabNearestDrivers.Text = "Nearest Drivers";

                //tab Booking Limits, tabBookingLimit


                //this.tabBookingLimit.Location = new System.Drawing.Point(10, 37);
                //this.tabBookingLimit.Name = "tabBookingLimit";
                //this.tabBookingLimit.Size = new System.Drawing.Size(300, 410);//(289, 410);
                //this.tabBookingLimit.Text = "Booking Limits";




                // 
                // btnRefreshNearestDrivers
                // 
                //    this.btnRefreshNearestDrivers.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
                //    this.btnRefreshNearestDrivers.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                this.btnRefreshNearestDrivers.Location = new System.Drawing.Point(257, 5);
                this.btnRefreshNearestDrivers.Name = "btnRefreshNearestDrivers";
                this.btnRefreshNearestDrivers.Size = new System.Drawing.Size(28, 28);
                btnRefreshNearestDrivers.Visible = false;
                this.btnRefreshNearestDrivers.TabIndex = 250;
                this.btnRefreshNearestDrivers.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
                this.btnRefreshNearestDrivers.Click += new EventHandler(btnRefreshNearestDrivers_Click);
                this.radPageView1.ResumeLayout(false);
                this.tabNearestDrivers.ResumeLayout(false);
                //  ((System.ComponentModel.ISupportInitialize)(this.btnRefreshNearestDrivers)).EndInit();

                // this.pnlMain.Controls.Add(this.radPageView1);
                radPageView1.BringToFront();
                radPageView1.Dock = DockStyle.Right;
                this.tableLayoutPanel1.Controls.Add(this.radPageView1);


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }

        private void GetCurrentWaitingBookings(bool isStarting = false)
        {
            try
            {




                InitializeCurrentWaitingBookingsTab();
                InitializeCurrentWaitingBookings();
                InitializeBookingLimits();
                dtpPickupTime.Update();
                // ShowLimitedBookings(dtpPickupTime.Text.ToDateTime());




                DateTime Time = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();


                if (worker_Map == null)
                {

                    worker_Map = new BackgroundWorker();
                    worker_Map.DoWork += new DoWorkEventHandler(worker_Map_DoWork);
                    worker_Map.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_Map_RunWorkerCompleted);
                    worker_Map.WorkerSupportsCancellation = true;

                }


                if (worker_Map.IsBusy == false)
                {
                    //DateTime dt = dtpPickupDate.Value.ToDateTime().Date;
                    //dt = dtpPickupTime.Value.ToDateTime();
                    //DateTime Now = new DateTime();// dt.Value;
                    //Now = dtpPickupDate.Value.ToDateTime().ToDate();
                    //Now = Now.AddHours(dt.ToDateTime().Hour);
                    //Now = Now.AddMinutes(dt.ToDateTime().Minute);


                    //// Now = Now.AddDays(1);
                    //// if (Convert.ToInt32(dtpPickupDate.Text.ToDateTime().DayOfWeek) != 0)
                    //if (Convert.ToInt32(dtpPickupDate.Value.ToDateTime().DayOfWeek) == 0)
                    //{
                    //    LimitId = 7;

                    //}
                    //else
                    //    LimitId = Convert.ToInt32(dtpPickupDate.Value.ToDateTime().DayOfWeek);
                    ////else
                    ////    LimitId = 1;
                    ////DateTime.Now.DayOfWeek);// +1;
                    //// DateTime Now = DateTime.Now; // 10:40
                    //string tempDOW = dtpPickupDate.Value.ToDateTime().DayOfWeek.ToStr();
                    //DateTime dt1 = getDate(tempDOW);

                    ////From = dt.Date;//fwd00
                    //From = dt1.Date;
                    //From = Now.AddMinutes(-60); // 10:10
                    //                            //Till = dt.AddMinutes(60);// 11:10

                    //// Till = dt.Date;//fwd00
                    //Till = dt1.Date;
                    //Till = dt.AddMinutes(60);// 11:10


                    if (isStarting)
                        return;

                    worker_Map.RunWorkerAsync(Time);
                }
                else
                {


                }



            }
            catch
            {


            }


        }
        DateTime getDate(string dayOfWeekString)
        {
            var dayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), dayOfWeekString);
            var now = DateTime.Now.Date;
            var diff = (7 + (now.DayOfWeek - dayOfWeek)) % 7;
            return now.AddDays(-1 * diff).Date;
        }



       
      
        private void ShowDriversGrid()
        {
            try
            {







                int? jobStatusId = objMaster.PrimaryKeyValue != null ? objMaster.Current.BookingStatusId : Enums.BOOKINGSTATUS.WAITING;


                string fromAddress = General.GetPostCodeMatch(txtFromAddress.Text.Trim().ToUpper());
                string toAddress = General.GetPostCodeMatch(txtToAddress.Text.ToStr().Trim().ToUpper());

                int fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int toLocTypeId = ddlToLocType.SelectedValue.ToInt();

                if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    if (txtFromAddress.Text.Trim().Length > 2 && txtFromAddress.Text.Contains(' ') == false && txtFromAddress.SelectedItem != null)
                    {
                        fromAddress = General.GetPostCodeMatch(txtFromAddress.SelectedItem.Trim());


                    }
                }
                else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    fromAddress = txtFromPostCode.Text.Trim();

                }
                ////else
                ////{
                ////    fromAddress = General.GetPostCodeMatch(ddlFromLocation.Text.ToStr().ToUpper().Trim());

                ////}



                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    if (txtToAddress.Text.Trim().Length > 2 && txtToAddress.Text.Contains(' ') == false && txtToAddress.SelectedItem != null)
                        toAddress = General.GetPostCodeMatch(txtToAddress.SelectedItem.Trim());
                }
                else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    toAddress = txtToPostCode.Text.Trim();

                }
                ////else
                ////{
                ////    toAddress = General.GetPostCodeMatch(ddlToLocation.Text.ToStr().ToUpper().Trim());

                ////}


                if (string.IsNullOrEmpty(fromAddress))
                    return;


                if (!string.IsNullOrEmpty(toAddress))
                    toAddress += " UK";


                string pickupPoint = string.Empty;
                string pickupPointImageUrl = string.Empty;

                Gen_Coordinate pickupCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == fromAddress);


                if (pickupCoord == null)
                {

                    var coord = GetDistance.PostCodeToLongLat(fromAddress, "GBP");


                    if (coord != null)
                    {
                        pickupCoord = new Gen_Coordinate();
                        pickupCoord.PostCode = fromAddress;
                        pickupCoord.Latitude = coord.Value.Latitude;
                        pickupCoord.Longitude = coord.Value.Longitude;

                    }
                }


                StringBuilder nearestDrvLocations = new StringBuilder();
                double jobLatitude = 0;
                double jobLongitude = 0;
                double milesAway = 5;


                //if (ddlMilesDrvs2 == null)
                //{
                //    this.ddlMilesDrvs2 = new System.Windows.Forms.ComboBox();


                //    this.ddlMilesDrvs2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
                //    this.ddlMilesDrvs2.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //    this.ddlMilesDrvs2.FormattingEnabled = true;
                //    this.ddlMilesDrvs2.Items.AddRange(new object[] {
                //    "within 3 miles away",
                //    "within 5 miles away",
                //    "within 10 miles away"});
                //    this.ddlMilesDrvs2.Location = new System.Drawing.Point(0, 395);//(0, 365);//(20, 710);
                //    this.ddlMilesDrvs2.Name = "ddlMilesDrvs2";
                //    ddlMilesDrvs2.MinimumSize = new System.Drawing.Size(20, 0);
                //    this.ddlMilesDrvs2.Size = new System.Drawing.Size(448, 22);//(330, 22);//(283, 22);
                //    this.ddlMilesDrvs2.TabIndex = 227;
                //    //this.ddlMilesDrvs2.Visible = false;

                //    ddlMilesDrvs2.Visible = true;

                //    ddlMilesDrvs2.SelectedItem = ddlMilesDrvs2.Items[1];

                //    this.ddlMilesDrvs2.SelectedIndexChanged += new System.EventHandler(this.ddlMilesDrvs2_SelectedIndexChanged);



                //    this.tabNearestDrivers.Controls.Add(this.ddlMilesDrvs2);
                //    ddlMilesDrvs2.BringToFront();
                //}

                //if (ddlMilesDrvs2.SelectedIndex == 0)
                //    milesAway = 3;
                //else if (ddlMilesDrvs2.SelectedIndex == 2)
                //    milesAway = 10;








                //if (grdDrivers == null)
                //{

                //    this.grdDrivers = new System.Windows.Forms.DataGridView();



                //    System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
                //    System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
                //    System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle4 = new System.Windows.Forms.DataGridViewCellStyle();
                //    System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();



                //    this.DriverId = new System.Windows.Forms.DataGridViewTextBoxColumn();
                //    this.details = new System.Windows.Forms.DataGridViewTextBoxColumn();
                //    this.btnDespatchJob = new System.Windows.Forms.DataGridViewButtonColumn();

                //    this.DriverId.HeaderText = "DriverId";
                //    this.DriverId.Name = "DriverId";
                //    this.DriverId.ReadOnly = true;
                //    this.DriverId.Visible = false;

                //    this.details.HeaderText = "details";
                //    this.details.Name = "details";
                //    this.details.ReadOnly = true;
                //    this.details.Width = 200;

                //    this.details.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                //    dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
                //    dataGridViewCellStyle2.ForeColor = System.Drawing.Color.Black;
                //    dataGridViewCellStyle2.SelectionForeColor = System.Drawing.Color.Black;
                //    this.btnDespatchJob.DefaultCellStyle = dataGridViewCellStyle2;
                //    this.btnDespatchJob.HeaderText = "btnDespatchJob";
                //    this.btnDespatchJob.Name = "btnDespatchJob";
                //    this.btnDespatchJob.ReadOnly = true;
                //    this.btnDespatchJob.Text = "Despatch";
                //    this.btnDespatchJob.UseColumnTextForButtonValue = true;
                //    this.btnDespatchJob.Width = 80;
                //    this.btnDespatchJob.AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;



                //    this.grdDrivers.AllowUserToAddRows = false;
                //    this.grdDrivers.AllowUserToDeleteRows = false;
                //    this.grdDrivers.BackgroundColor = System.Drawing.Color.FloralWhite;
                //    dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                //    dataGridViewCellStyle1.BackColor = System.Drawing.Color.SteelBlue;
                //    dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                //    dataGridViewCellStyle1.ForeColor = System.Drawing.Color.White;
                //    dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
                //    dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
                //    dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                //    this.grdDrivers.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
                //    this.grdDrivers.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
                //    this.grdDrivers.ColumnHeadersVisible = false;
                //    this.grdDrivers.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
                //    this.DriverId,
                //    this.details,
                //    this.btnDespatchJob});
                //    dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                //    dataGridViewCellStyle3.BackColor = System.Drawing.SystemColors.Window;
                //    dataGridViewCellStyle3.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                //    dataGridViewCellStyle3.ForeColor = System.Drawing.Color.Black;
                //    dataGridViewCellStyle3.SelectionBackColor = System.Drawing.Color.FloralWhite;
                //    dataGridViewCellStyle3.SelectionForeColor = System.Drawing.Color.Black;
                //    dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.False;
                //    this.grdDrivers.DefaultCellStyle = dataGridViewCellStyle3;
                //    this.grdDrivers.Location = new System.Drawing.Point(0, 419);//(0, 389);
                //    this.grdDrivers.Name = "grdDrivers";
                //    this.grdDrivers.ReadOnly = true;
                //    dataGridViewCellStyle4.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                //    dataGridViewCellStyle4.BackColor = System.Drawing.SystemColors.Control;
                //    dataGridViewCellStyle4.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                //    dataGridViewCellStyle4.ForeColor = System.Drawing.SystemColors.WindowText;
                //    dataGridViewCellStyle4.SelectionBackColor = System.Drawing.Color.AliceBlue;
                //    dataGridViewCellStyle4.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
                //    dataGridViewCellStyle4.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                //    this.grdDrivers.RowHeadersDefaultCellStyle = dataGridViewCellStyle4;
                //    this.grdDrivers.RowHeadersVisible = false;
                //    this.grdDrivers.RowTemplate.DefaultCellStyle.BackColor = System.Drawing.Color.FloralWhite;
                //    this.grdDrivers.RowTemplate.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
                //    this.grdDrivers.RowTemplate.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.FloralWhite;
                //    this.grdDrivers.RowTemplate.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.Black;
                //    this.grdDrivers.RowTemplate.DefaultCellStyle.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                //    this.grdDrivers.RowTemplate.Height = 50;
                //    this.grdDrivers.RowTemplate.Resizable = System.Windows.Forms.DataGridViewTriState.True;
                //    this.grdDrivers.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
                //    grdDrivers.MinimumSize = new System.Drawing.Size(50, 50);
                //    this.grdDrivers.Size = new System.Drawing.Size(448, 400);//(412, 400);
                //    this.grdDrivers.TabIndex = 226;
                //    this.grdDrivers.CellClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.grdDrivers_CellClick);



                //    this.tabNearestDrivers.Controls.Add(this.grdDrivers);

                //}

                if (webBrowser1.Visible == false)
                {
                    webBrowser1.Visible = true;
                    // grdDrivers.Size = new Size(grdDrivers.Size.Width, 300);
                    // grdDrivers.Location = new Point(grdDrivers.Location.X, 372);

                    // grdDrivers.Font = new Font("Tahoma", 11, FontStyle.Bold);
                    //  ddlMilesDrvs2.Visible = true;
                }

                if (pickupCoord != null)
                {
                    jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                    jobLongitude = Convert.ToDouble(pickupCoord.Longitude);
                }


                if (jobStatusId == Enums.BOOKINGSTATUS.WAITING)
                {
                    // IList ListofAvailDrvs = null;

                    int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();

                    // grdDrivers.Rows.Clear();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.DeferredLoadingEnabled = false;
                        db.CommandTimeout = 4;

                        var ListofAvailDrvs = (from a in db.GetTable<Fleet_DriverQueueList>().Where(c => c.Status == true && c.Fleet_Driver.HasPDA == true &&
                                      (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE))
                                               join b in db.GetTable<Fleet_Driver_Location>().Where(c => c.Latitude != 0)
                                               on a.DriverId equals b.DriverId
                                               join c in db.GetTable<Fleet_Driver>() on a.DriverId equals c.Id
                                               where a.Fleet_Driver.VehicleTypeId == vehicleTypeId
                                               select new
                                               {
                                                   DriverId = a.DriverId,
                                                   DriverNo = c.DriverNo,
                                                   DriverLocation = b.LocationName,
                                                   Latitude = b.Latitude,
                                                   Longitude = b.Longitude
                                               }).ToList();








                        //ListofAvailDrvs = (from a in AppVars.BLData.GetAll<Fleet_DriverQueueList>(c => c.Status == true && c.Fleet_Driver.HasPDA == true &&
                        //               (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)).AsEnumerable()
                        //                      join b in AppVars.BLData.GetAll<Fleet_Driver_Location>(c => c.Latitude != 0).AsEnumerable()
                        //                      on a.DriverId equals b.DriverId
                        //                      select new
                        //                      {
                        //                          DriverId = a.DriverId,
                        //                          DriverNo = a.Fleet_Driver.DriverNo,
                        //                          DriverLocation = b.LocationName,
                        //                          Latitude = b.Latitude,
                        //                          Longitude = b.Longitude
                        //                      }).ToList();


                        var nearestDrivers = ListofAvailDrvs.Select(args => new
                        {
                            args.DriverId,
                            // MilesAwayFromPickup = GetNearestDistance(args.DriverLocation,fromAddress) ,
                            MilesAwayFromPickup = new DotNetCoords.LatLng(args.Latitude, args.Longitude).DistanceMiles(new DotNetCoords.LatLng(jobLatitude, jobLongitude)),
                            args.DriverNo,
                            Latitude = args.Latitude,
                            Longitude = args.Longitude,
                            Location = args.DriverLocation

                        }).OrderBy(args => args.MilesAwayFromPickup).Where(c => c.MilesAwayFromPickup <= milesAway).Take(3).ToList();
                        // grdDrivers.RowCount = nearestDrivers.Count;
                        for (int i = 0; i < nearestDrivers.Count; i++)
                        {
                            nearestDrvLocations.Append("['<h4>" + nearestDrivers[i].Location + "</h4>'," + nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "],");
                            // grdDrivers.Rows.Add(nearestDrivers[i].DriverId, nearestDrivers[i].DriverNo + " is " + Math.Round(nearestDrivers[i].MilesAwayFromPickup, 1) + " miles away");

                        }

                        //  grdDrivers.BringToFront();


                    }


                    //if (nearestDrvLocations.Length > 0)
                    //    nearestDrvLocations[nearestDrvLocations.Length - 1] = ' ';
                    //else
                    //{
                    //    if (pickupPoint.Length > 0)
                    //        pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                    //}
                }
                //else
                //{



                //    if (pickupPoint.Length > 0)
                //        pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                //}





                // webBrowser1.Refresh();
                //   GC.Collect();
            }
            catch (Exception ex)
            {


            }
        }

        private void LoadNearest()
        {
            try
            {
                if (IsFormShown == false || txtFromAddress.Text.Length == 0 || txtToAddress.Text.Length == 0)
                    return;



                if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool())
                {




                    if (string.IsNullOrEmpty(txtFromAddress.Text.Trim()) && string.IsNullOrEmpty(txtToAddress.Text.Trim()))
                    {
                        return;
                    }



                    if (worker_Map == null)
                    {

                        worker_Map = new BackgroundWorker();
                        worker_Map.DoWork += new DoWorkEventHandler(worker_Map_DoWork);
                        worker_Map.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_Map_RunWorkerCompleted);
                        worker_Map.WorkerSupportsCancellation = true;




                    }


                    if (webBrowser1 == null)
                    {
                        this.webBrowser1 = new System.Windows.Forms.WebBrowser();

                        this.webBrowser1.Location = new System.Drawing.Point(0, 0);
                        this.webBrowser1.MinimumSize = new System.Drawing.Size(20, 0);
                        this.webBrowser1.Name = "webBrowser1";
                        this.webBrowser1.ScrollBarsEnabled = false;
                        this.webBrowser1.Size = new System.Drawing.Size(275, 880);//(270, 700);//760);
                        //this.webBrowser1.Region = new Region(new RectangleF(0, 0, 300, 300));

                        this.webBrowser1.TabIndex = 225;
                        this.webBrowser1.Visible = false;
                        this.webBrowser1.Dock = DockStyle.Top;
                        ;
                        this.tabNearestDrivers.Controls.Add(this.webBrowser1);

                    }

                    clsfaresworker f = new clsfaresworker();
                    f.fromAddress = txtFromAddress.Text.Trim();
                    f.toAddress = txtToAddress.Text.Trim();
                    f.CompanyId = objMaster.PrimaryKeyValue != null ? objMaster.Current.BookingStatusId : Enums.BOOKINGSTATUS.WAITING;
                    f.fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                    f.toLocTypeId = ddlToLocType.SelectedValue.ToInt();

                    worker_Map.RunWorkerAsync(f);





                }
            }
            catch (Exception ex)
            {


            }
        }
        List<Booking> ls = new List<Booking>();
        void worker_Map_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            try
            {
                if (e.Result != null && (e.Result is IList))
                {


                    grdPickupDateTime.DataSource = e.Result;
                    if (grdPickupDateTime.Columns.Count > 0)
                    {
                        //grdPickupDateTime.ShowRowHeaderColumn = false;
                        grdPickupDateTime.Columns["Id"].Visible = false;
                        grdPickupDateTime.Columns["CompanyId"].Visible = false;
                        grdPickupDateTime.Columns["Pickup"].Visible = false;
                        grdPickupDateTime.Columns["Time"].Width = 60;
                        grdPickupDateTime.Columns["PickUpAddress"].Width = 290;//190;
                        grdPickupDateTime.Columns["PickUpAddress"].HeaderText = "Pickup Address";
                    }
                    //ShowLimitedBookings((dtpPickupTime.Value.ToDateTime()));

                    this.tabCurrentBooking.Text = "Current Bookings(" + grdPickupDateTime.Rows.Count + ")";
                }
                else
                {


                    if (txtFromAddress.Text.ToStr().Trim().Length > 0 && txtToAddress.Text.ToStr().Trim().Length == 0)
                    {
                        FocusOnToAddress();

                    }
                    else
                    {
                        if (aTxt != null && aTxt.Name == "txtFromAddress")
                        {
                            FocusOnToAddress();
                        }
                        else if (ddlCustomerName.Text.Trim().Length == 0)
                        {
                            FocusOnCustomer();

                        }
                        else
                        {
                            FocusOnVehicle();
                        }
                    }
                }

              

                ShowDriversGrid();
            }
            catch
            {


            }
        }
        //fwd00
      
      
        void worker_Map_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {


                if (e.Argument is DateTime)
                {

                    DateTime Time = e.Argument.ToDateTime();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.CommandTimeout = 4;
                        db.DeferredLoadingEnabled = false;

                        var query = (from a in db.Bookings

                                     where (a.PickupDateTime.Value >= Time.AddHours(-1) && a.PickupDateTime.Value <= Time.AddHours(1))

                                      && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                                                 || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                                     // && c.PickupDateTime.Value.TimeOfDay == Time.Value.TimeOfDay


                                     select new
                                     {
                                         id = a.Id,
                                         Time = string.Format("{0:HH:mm}", a.PickupDateTime.Value),
                                         Pickup = a.PickupDateTime,
                                         PickupAddress = a.FromAddress,
                                         CompanyId = a.CompanyId

                                     }).OrderBy(c => c.Pickup).ToList();
                        ls = db.Bookings.Where(a => a.PickupDateTime.Value >= Time.AddHours(-1) && a.PickupDateTime.Value <= Time.AddHours(1) && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                                           || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                          // && c.PickupDateTime.Value.TimeOfDay == Time.Value.TimeOfDay


                          ).OrderBy(c => c.PickupDateTime).ToList();


                        //lstBL = db.BookingLimits.Where(c => (c.LimitDateTime.Value.TimeOfDay >= new TimeSpan(From.Hour, From.Minute, 0)
                        //&& c.LimitDateTime.Value.TimeOfDay <= new TimeSpan(Till.Hour, Till.Minute, 0))
                        //&& c.LimitDayId == LimitId).ToList();
                        var SlectTimeRangeListAsc = query.Where(c => c.Pickup.ToDateTime() > Time.ToDateTime()).OrderBy(c => c.Pickup).FirstOrDefault();
                        var SlectTimeRangeListDesc = query.Where(c => c.Pickup.ToDateTime() < Time.ToDateTime()).OrderByDescending(c => c.Pickup).FirstOrDefault();

                        if (SlectTimeRangeListAsc != null)
                        {
                            PickupTimeAsc = SlectTimeRangeListAsc.id;
                        }
                        else
                        {
                            PickupTimeAsc = 0;
                        }


                        if (SlectTimeRangeListDesc != null)
                        {
                            PickupTimeDesc = SlectTimeRangeListDesc.id;
                        }

                        else
                        {
                            PickupTimeDesc = 0;
                        }


                        e.Result = query;


                    }


                }
                else if (e.Argument is clsfaresworker)
                {


                    clsfaresworker fworker = (clsfaresworker)e.Argument;


                    int? jobStatusId = fworker.CompanyId;

                    string fromAddress = General.GetPostCodeMatch(fworker.fromAddress.Trim().ToUpper());
                    string toAddress = General.GetPostCodeMatch(fworker.toAddress.ToStr().Trim().ToUpper());

                    int fromLocTypeId = fworker.fromLocTypeId.ToInt();
                    int toLocTypeId = fworker.toLocTypeId.ToInt();



                    string fullFromAddress = fworker.fromAddress.Trim().ToUpper();
                    string fulltoAddress = fworker.toAddress.ToStr().Trim().ToUpper();

                    stp_getCoordinatesByAddressResult pickupCoords = null;
                    stp_getCoordinatesByAddressResult destCoord = null;

                    try
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            pickupCoords = db.stp_getCoordinatesByAddress(fullFromAddress, fromAddress).FirstOrDefault();

                            if (fulltoAddress.Length > 0)
                            {
                                destCoord = db.stp_getCoordinatesByAddress(fulltoAddress, toAddress).FirstOrDefault();
                            }
                        }
                    }
                    catch
                    {

                    }


                    string originString = string.Empty;
                    string destString = string.Empty;
                    if (pickupCoords != null && pickupCoords.Latitude != null && pickupCoords.Latitude != 0)
                    {
                        originString = pickupCoords.Latitude + "," + pickupCoords.Longtiude;
                    }
                    else
                    {
                        fullFromAddress = fromAddress;
                        originString = fullFromAddress;

                    }
                    if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                    {
                        destString = destCoord.Latitude + "," + destCoord.Longtiude;
                    }
                    else
                    {
                        fulltoAddress = toAddress;
                        destString = fulltoAddress;

                    }

                    if (string.IsNullOrEmpty(fromAddress) && pickupCoords == null)
                        return;


                    if (!string.IsNullOrEmpty(toAddress))
                        toAddress += " UK";


                    string pickupPoint = string.Empty;
                    string pickupPointImageUrl = string.Empty;

                    Gen_Coordinate pickupCoord = null;


                    if (pickupCoords != null && pickupCoords.Latitude != null && pickupCoords.Latitude != 0)
                    {
                        pickupCoord = new Gen_Coordinate();
                        pickupCoord.Latitude = pickupCoords.Latitude;
                        pickupCoord.Longitude = pickupCoords.Longtiude;
                        pickupCoord.PostCode = fromAddress;

                    }
                    else
                    {

                        pickupCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == fromAddress);

                        if (pickupCoord == null)
                        {

                            var coord = GetDistance.PostCodeToLongLat(fromAddress, "GBP");


                            if (coord != null)
                            {
                                pickupCoord = new Gen_Coordinate();
                                pickupCoord.PostCode = fromAddress;
                                pickupCoord.Latitude = coord.Value.Latitude;
                                pickupCoord.Longitude = coord.Value.Longitude;

                            }
                        }
                    }


                    StringBuilder nearestDrvLocations = new StringBuilder();
                    double jobLatitude = 0;
                    double jobLongitude = 0;


                    if (!string.IsNullOrEmpty(fullFromAddress) && string.IsNullOrEmpty(fulltoAddress))
                    {

                        if (pickupCoord != null)
                        {

                            pickupPoint = "['<h4>test</h4>'," + pickupCoord.Latitude + "," + pickupCoord.Longitude + "],";

                            pickupPointImageUrl = "'http://google.com/mapfiles/kml/paddle/A.png',";
                            jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                            jobLongitude = Convert.ToDouble(pickupCoord.Longitude);

                        }
                        else
                            return;

                    }





                    if (pickupCoord != null)
                    {
                        jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                        jobLongitude = Convert.ToDouble(pickupCoord.Longitude);
                    }


                    if (jobStatusId == Enums.BOOKINGSTATUS.WAITING)
                    {


                        using (TaxiDataContext db = new TaxiDataContext())
                        {


                            var ListofAvailDrvs = db.stp_getavailabledrivers().ToList();

                            var nearestDrivers = ListofAvailDrvs.Select(args => new
                            {
                                args.driverid,
                                // MilesAwayFromPickup = GetNearestDistance(args.DriverLocation,fromAddress) ,
                                MilesAwayFromPickup = new DotNetCoords.LatLng(args.latitude, args.longitude).DistanceMiles(new DotNetCoords.LatLng(jobLatitude, jobLongitude)),
                                args.driverno,
                                Latitude = args.latitude,
                                Longitude = args.longitude,
                                Location = args.driverno

                            }).OrderBy(args => args.MilesAwayFromPickup).Take(3).ToList();

                            for (int i = 0; i < nearestDrivers.Count; i++)
                            {

                                nearestDrvLocations.Append("" + nearestDrivers[i].Location + "'," + nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "],");

                            }

                        }

                        if (nearestDrvLocations.Length > 0)
                            nearestDrvLocations[nearestDrvLocations.Length - 1] = ' ';
                        else
                        {
                            if (pickupPoint.Length > 0)
                                pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                        }
                    }
                    else
                    {

                        if (pickupPoint.Length > 0)
                            pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                    }
                    string text = "";


                    if (!string.IsNullOrEmpty(fullFromAddress) && !string.IsNullOrEmpty(fulltoAddress))
                    {
                        text = GetMapTemplate("{lat: " + jobLatitude + ", lng: " + jobLongitude + " }", originString, destString, fullFromAddress, fulltoAddress, nearestDrvLocations.ToString());
                    }
                    else
                    {
                        text = GetMapTemplate("{lat: " + jobLatitude + ", lng: " + jobLongitude + " }", jobLatitude + "," + jobLongitude, "", fullFromAddress, fulltoAddress, nearestDrvLocations.ToString());
                    }


                    e.Result = text;








                    ShowMapDirections(e.Result.ToStr());
                }

            }
            catch
            {

                e.Result = "";

            }
        }


        delegate void UIDelegateX(string text);

        private void ShowMapDirections(string text)
        {


            if (this.InvokeRequired)
            {

                this.BeginInvoke(new UIDelegateX(ShowMapDirections), text);
            }
            else
            {

                if (webBrowser1.Visible == false)
                {
                    webBrowser1.Visible = true;

                }




                if (text.ToStr().Trim().Length > 0)
                {

                    webBrowser1.ScriptErrorsSuppressed = true;
                    webBrowser1.DocumentText = text.ToStr().Trim();

                }



                this.radPageView1.SelectedTab = this.tabNearestDrivers;


            }
        }


        private BackgroundWorker worker_Map = null;


        void btnRefreshNearestDrivers_Click(object sender, EventArgs e)
        {
            LoadNearest();
        }



        private void opt_return_Validating(object sender, CancelEventArgs e)
        {
            if (CheckReturnBooking(opt_return.Checked ? ToggleState.On : ToggleState.Off) == false)
                e.Cancel = true;
        }



        private void opt_one_CheckedChanged(object sender, EventArgs e)
        {
            SetJourneyWise(opt_one.Checked ? ToggleState.On : ToggleState.Off);

            if (IsFormShown && opt_one.Checked && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }

        private void opt_return_CheckedChanged(object sender, EventArgs e)
        {
            if (opt_one.Checked == false)
            {
                SetJourneyWise(opt_return.Checked ? ToggleState.Off : ToggleState.On);
            }

            SetReturnAirportJob(opt_return.Checked ? ToggleState.On : ToggleState.Off);

            //   FocusToPassenger();

            if (opt_return.Checked && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }



        private void opt_waitreturn_CheckedChanged(object sender, EventArgs e)
        {
            SetJourneyWise(opt_waitreturn.Checked ? ToggleState.On : ToggleState.Off);



            if (opt_waitreturn.Checked && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }



        //private void opt_one_KeyDown(object sender, KeyEventArgs e)
        //{
        //    if (e.KeyCode == Keys.Enter)
        //    {

        //     ////fwdkh   FocusOnCustomer();
        //        //fwdkh3  FocusOnFare();
        //        FocusOnDriver();
        //    }
        //}

        private void btnAccountCode_Click(object sender, EventArgs e)
        {
            AccountCode();
        }

        private void btnAttributes_Click(object sender, EventArgs e)
        {
            try
            {



                frmBookingAttributesList frm = new frmBookingAttributesList(btnAttributes.Tag.ToStr());
                frm.ShowDialog();
                btnAttributes.Text = "Attributes" + Environment.NewLine + frm.input_values;

                if (frm.input_values.ToStr().Trim().Length > 0)
                {

                    btnAttributes.Tag = "," + frm.input_values + ",";
                }
                else
                    btnAttributes.Tag = "";



                frm.Dispose();

                FocusOnCustomer();

            }
            catch
            {


            }
        }

        private void btnSearchLocation_Click(object sender, EventArgs e)
        {

        }

        private void SearchLocation()
        {
            string search = string.Empty;
            try
            {
                if (txtFromAddress.Focused)
                {
                    search = txtFromAddress.Text.Trim();

                }
                else if (txtToAddress.Focused)
                {

                    search = txtToAddress.Text.Trim();
                }
                else if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused != null && txtViaAddress.Focused)
                {

                    search = txtViaAddress.Text.Trim();

                }



                if (search.Length == 0)
                    return;


                frmSearchLocation frm = new frmSearchLocation();
                frm.LocationName = search;

                frm.OpenFromSearch = true;
                frm.Address = search;

                frm.ShowDialog();

                if (frm.IsPick)
                {

                    txtFromAddress.Leave -= txtFromAddress_Leave;

                    int focusType = 1;
                    if (frm.SelectedLocation.ToStr().Trim().Length > 0)
                    {
                        if (txtFromAddress.Focused)
                        {

                            txtFromAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtFromAddress.Text = frm.SelectedLocation.ToStr();
                            txtFromAddress.TextChanged += TextBoxElement_TextChanged;

                            SetPickupZone(txtFromAddress.Text);


                        }
                        else if (txtToAddress.Focused)
                        {

                            txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtToAddress.Text = frm.SelectedLocation.ToStr();
                            txtToAddress.TextChanged += TextBoxElement_TextChanged;
                            SetDropOffZone(txtToAddress.Text);
                            focusType = 2;

                        }
                        else if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused)
                        {

                            txtViaAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtViaAddress.Text = frm.SelectedLocation.ToStr();
                            txtViaAddress.TextChanged += TextBoxElement_TextChanged;

                            focusType = 3;
                        }
                    }




                    LoadNearest();

                    if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused)
                    {
                        AddViaPoint();

                    }

                    UpdateAutoCalculateFares();

                    if (focusType == 1)
                    {
                        FocusOnFromAddress();

                    }
                    else if (focusType == 2)
                        FocusOnToAddress();
                    else if (focusType == 3)
                        FocusOnViaAddress();



                    txtFromAddress.Leave += txtFromAddress_Leave;

                }


                frm.Dispose();
            }
            catch
            {


            }
        }


        void dtpPickupTime_Validated(object sender, EventArgs e)
        {
            try
            {

                if (objMaster.PrimaryKeyValue == null)
                {

                    if (dtpPickupDate.AllowDrop == false && DateTime.Now.TimeOfDay > dtpPickupTime.Value.ToDateTime().TimeOfDay
             && dtpPickupDate.Value != null && dtpPickupDate.Value.ToDate() == DateTime.Now.Date)
                    {
                        double hours = DateTime.Now.TimeOfDay.Subtract(dtpPickupTime.Value.ToDateTime().TimeOfDay).TotalHours;
                        if (hours >= 2)
                        {
                            dtpPickupDate.Value = dtpPickupDate.Value.ToDate().AddDays(1);
                            dtpPickupDate.AllowDrop = true;
                        }
                    }
                }
            }
            catch
            {


            }
        }






        #region OnlineBooking




        #endregion



        private string GetMapTemplate(string CenterPointLatLng, string FromLatLng, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        {
            try
            {

                if (FromAddress.ToStr().Trim().Contains("\n"))
                    FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


                if (ToAddress.ToStr().Trim().Contains("\n"))
                    ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();

                //  CenterPointLatLng = ToLatLng;

                string toCaption = "B";
                if (FromLatLng.Contains(",") == false)
                {
                    return "";

                }

                if (ToLatLng == "" || ToLatLng.Contains(",") == false)
                {
                    ToLatLng = FromLatLng;
                    ToAddress = FromAddress;
                    toCaption = "A";
                }


                if (FromLatLng == "0,0")
                    return "";

                if (ToLatLng == "0,0")
                    return "";



                if (ToLatLng.Contains(",") == false)
                    return "";





                string APP_ID = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
                string APP_CODE = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
                string IsUseHTTPS = System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"].ToStr() : bool.FalseString.ToLower();

                NearestDriverList = NearestDriverList.Replace("'", @"\'");
                FromAddress = FromAddress.Replace("'", @"\'");
                ToAddress = ToAddress.Replace("'", @"\'");

                StringBuilder htmlMap = new StringBuilder();
                htmlMap.Append(
                 @"<!DOCTYPE html>
                <html>
                <head>
                <meta http-equiv='X-UA-Compatible' content='IE=edge'>
                <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
                <meta name='viewport' content='initial-scale=1.0, width=device-width' />
                <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

                </head>
                <body>
  
                  <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
                  <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

                  <script  type='text/javascript' charset='UTF-8' >

                      var APP_ID = '" + APP_ID + @"';
                      var APP_CODE = '" + APP_CODE + @"';
                      var IsUseHTTPS = " + IsUseHTTPS + @";

                      var CenterPoint = " + CenterPointLatLng + @";
                      var FromLatLng = '" + FromLatLng + @"';
                      var ToLatLng = '" + ToLatLng + @"';
                      var FromLocName = '" + FromAddress + @"';
                      var ToLocName = '" + ToAddress + @"';
                      var NearestDriverList = '" + NearestDriverList + @"'


                /**
                 * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
                 * to Friedrichstraße Railway Station.
                 *
                 * A full list of available request parameters can be found in the Routing API documentation.
                 * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
                 *
                 * @param   {H.service.Platform} platform    A stub class to access HERE services
                 */
                function calculateRouteFromAtoB (platform) {
                  var router = platform.getRoutingService(),
                    routeRequestParams = {      
                      mode: 'shortest;car',
                      representation: 'display',
                      routeattributes : 'waypoints,summary,shape,legs',
                      maneuverattributes: 'direction,action',
                      waypoint0: FromLatLng, // Brandenburg Gate
                      waypoint1: ToLatLng  // Friedrichstraße Railway Station
                    
                    };


                  router.calculateRoute(
                    routeRequestParams,
                    onSuccess,
                    onError
                  );
                }
                /**
                 * This function will be called once the Routing REST API provides a response
                 * @param  {Object} result          A JSONP object representing the calculated route
                 *
                 * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
                 */
                function onSuccess(result) {
                  var route = result.response.route[0];
                 /*
                  * The styling of the route response on the map is entirely under the developer's control.
                  * A representitive styling can be found the full JS + HTML code of this example
                  * in the functions below:
                  */
                  addRouteShapeToMap(route);
                  addManueversToMap(route);

                  addWaypointsToPanel(route.waypoint);
                  addManueversToPanel(route);
                  //addSummaryToPanel(route.summary);
                  // ... etc.
                }

                /**
                 * This function will be called if a communication error occurs during the JSON-P request
                 * @param  {Object} error  The error message received.
                 */
                function onError(error) {
                  alert('Ooops!');
                }




                /**
                 * Boilerplate map initialization code starts below:
                 */

                // set up containers for the map  + panel
                var mapContainer = document.getElementById('map'),
                  routeInstructionsContainer = document.getElementById('panel');

                //Step 1: initialize communication with the platform
                var platform = new H.service.Platform({
                    app_id: APP_ID,
                    app_code: APP_CODE,
                    useHTTPS: IsUseHTTPS
                });

                var pixelRatio = window.devicePixelRatio || 1;
                var defaultLayers = platform.createDefaultLayers({
                  tileSize: pixelRatio === 1 ? 256 : 512,
                  ppi: pixelRatio === 1 ? undefined : 320
                });

                //Step 2: initialize a map - this map is centered over Berlin
                var map = new H.Map(mapContainer,
                  defaultLayers.normal.map,{
                      center: CenterPoint,
                  zoom: 13,
                  pixelRatio: pixelRatio
                });

                //Step 3: make the map interactive
                // MapEvents enables the event system
                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                // Create the default UI components
                var ui = H.ui.UI.createDefault(map, defaultLayers);

                // Hold a reference to any infobubble opened
                var bubble;

                /**
                 * Opens/Closes a infobubble
                 * @param  {H.geo.Point} position     The location on the map.
                 * @param  {String} text              The contents of the infobubble.
                 */
                function openBubble(position, text){
                 if(!bubble){
                    bubble =  new H.ui.InfoBubble(
                      position,
                      // The FO property holds the province name.
                      {content: text});
                    ui.addBubble(bubble);
                  } else {
                    bubble.setPosition(position);
                    bubble.setContent(text);
                    bubble.open();
                  }
                }


                /**
                 * Creates a H.map.Polyline from the shape of the route and adds it to the map.
                 * @param {Object} route A route as received from the H.service.RoutingService
                 */
                function addRouteShapeToMap(route){
                  var lineString = new H.geo.LineString(),
                    routeShape = route.shape,
                    polyline;

                  routeShape.forEach(function(point) {
                    var parts = point.split(',');
                    lineString.pushLatLngAlt(parts[0], parts[1]);
                  });

                  polyline = new H.map.Polyline(lineString, {
                    style: {
                      lineWidth: 4,
                      strokeColor: 'rgba(0, 128, 255, 0.7)'
                    }
                  });
                  // Add the polyline to the map
                  map.addObject(polyline);
                  // And zoom to its bounding rectangle
                  map.setViewBounds(polyline.getBounds(), true);
                }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addManueversToMap(route){
                      var group = new  H.map.Group(),
                        i,
                        j;
                      /*
                      // Add a marker for each maneuver
                      for (i = 0;  i < route.leg.length; i += 1) {
                        for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                          // Get the next maneuver.
                          maneuver = route.leg[i].maneuver[j];
                          // Add a marker to the maneuvers group
                          var marker =  new H.map.Marker({
                            lat: maneuver.position.latitude,
                            lng: maneuver.position.longitude} ,
                            { icon: new H.map.Icon(svgMarkup.replace('${text}', j), { anchor: { x: 8, y: 8} }) });
                          marker.instruction = maneuver.instruction;
                          group.addObject(marker);
                        }
                      }*/

                      drawNearestDriver(map, group);

                      // Add a marker to the maneuvers group
                      var FromManeuver = route.leg[0].maneuver[0];
                      var FromMarker = new H.map.Marker(
                                { lat: FromManeuver.position.latitude, lng: FromManeuver.position.longitude },
                                { icon: GetMarkerIconTemp('red','A') }
                                );
                      FromMarker.instruction = FromLocName;
                      group.addObject(FromMarker);

                      var ToManeuver = route.leg[route.leg.length - 1].maneuver[route.leg[route.leg.length - 1].maneuver.length - 1];

                      var ToMarker = new H.map.Marker(
                                { lat: ToManeuver.position.latitude, lng: ToManeuver.position.longitude },
                                { icon: GetMarkerIconTemp('red', '" + toCaption + @"') }
                                );
                      ToMarker.instruction = ToLocName;
                      group.addObject(ToMarker);

                      var zIndex = 1;
                      group.addEventListener('tap', function (evt) {
                        map.setCenter(evt.target.getPosition());
                        openBubble(
                           evt.target.getPosition(), evt.target.instruction);
                           // increase z-index of the marker that was tapped
                                  evt.target.setZIndex(zIndex++);
                      }, false);

                      

                      // Add the maneuvers group to the map
                      map.addObject(group);
                    }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addWaypointsToPanel(waypoints){



                  var nodeH3 = document.createElement('h3'),
                    waypointLabels = [],
                    i;


                   for (i = 0;  i < waypoints.length; i += 1) {
                    waypointLabels.push(waypoints[i].label)
                   }

                   nodeH3.textContent = waypointLabels.join(' - ');

                  //*routeInstructionsContainer.innerHTML = '';
                  //*routeInstructionsContainer.appendChild(nodeH3);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addSummaryToPanel(summary){
                  var summaryDiv = document.createElement('div'),
                   content = '';
                   content += '<b>Total distance</b>: ' + summary.distance  + 'm. <br/>';
                   content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


                 summaryDiv.style.fontSize = 'small';
                  summaryDiv.style.marginLeft ='5%';
                  summaryDiv.style.marginRight ='5%';
                  summaryDiv.innerHTML = content;
                  //*routeInstructionsContainer.appendChild(summaryDiv);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addManueversToPanel(route){



                  var nodeOL = document.createElement('ol'),
                    i,
                    j;

                  nodeOL.style.fontSize = 'small';
                  nodeOL.style.marginLeft ='5%';
                  nodeOL.style.marginRight ='5%';
                  nodeOL.className = 'directions';

                     // Add a marker for each maneuver
                  for (i = 0;  i < route.leg.length; i += 1) {
                    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                      // Get the next maneuver.
                      maneuver = route.leg[i].maneuver[j];

                      var li = document.createElement('li'),
                        spanArrow = document.createElement('span'),
                        spanInstruction = document.createElement('span');

                      spanArrow.className = 'arrow '  + maneuver.action;
                      spanInstruction.innerHTML = maneuver.instruction;
                      li.appendChild(spanArrow);
                      li.appendChild(spanInstruction);

                      nodeOL.appendChild(li);
                    }
                  }

                //*routeInstructionsContainer.appendChild(nodeOL);
                }


                Number.prototype.toMMSS = function () {
                  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
                }

                
                function addMarkersToMap(map) {

                    drawNearestDriver(map, group);

                    var group = new H.map.Group();

                    // Add a marker to the maneuvers group    
                    var FromMarker = new H.map.Marker(
                                        { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
                                        { icon: GetMarkerIconTemp('red', 'A') }
                                        );
                    FromMarker.instruction = FromLocName;
                    group.addObject(FromMarker);                   

                   var zIndex = 1;
                   group.addEventListener('tap', function (evt) {
                       map.setCenter(evt.target.getPosition());
                       openBubble(
                      evt.target.getPosition(), evt.target.instruction);
                      // increase z-index of the marker that was tapped
                        evt.target.setZIndex(zIndex++);

                   }, false);

                    // Add the maneuvers group to the map
                    map.addObject(group);

                //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
                //    map.addObject(parisMarker);

                }


                function drawNearestDriver(map, group) {
                    if (NearestDriverList != undefined && NearestDriverList != '') {
                        var text = NearestDriverList;
                        var NearestDriver = text.split('],')
                        for (i = 0; i < NearestDriver.length; i++) {
                            var Drv = NearestDriver[i].split('\',')[0];
                            var nearestLatLng = NearestDriver[i].split('\',');

                            var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
                                        { icon: GetMarkerIconTemp('blue', Drv) });
                            group.addObject(parisMarker);
                        }
                    }
                }

                function GetMarkerIconTemp(color, text) {

                    var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
                                        '<g> ' +
                                        '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
                                            '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
                                            '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'7em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
                                        '</g>' +
                                    '</g></svg>';

    
                    color = color == undefined ? 'blue' : color;
                    text = text == undefined ? '' : text;

                    var XPos =90;

                    if(text.length>1)
                    XPos=70;

                    // Add the first marker
                    var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
                    return Icon;
                }

                // Now use the map as required...
                if (ToLatLng != undefined && ToLatLng != '') {
                    calculateRouteFromAtoB(platform);
                }
                else {
                    addMarkersToMap(map);
                }
                  </script>
                </body>
                </html>");
                return htmlMap.ToString();
            }
            catch
            {
                return "";
            }


        }

        private void btnSaveNew_MouseHover(object sender, EventArgs e)
        {

            ((Button)sender).BackColor = Color.LightCyan;

        }

        private void btnSaveNew_MouseLeave(object sender, EventArgs e)
        {
            ((Button)sender).BackColor = Color.AliceBlue;

        }

        private void btnBase_Click(object sender, EventArgs e)
        {
            if (txtToAddress.Focused)
            {
                SetToBase();
            }
            else
            {
                SetFromBase();
            }

            UpdateAutoCalculateFares();
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            this.Opacity = 1;
        }

        private void ddlCustomerName_Leave(object sender, EventArgs e)
        {
            //  txtCustomerPhoneNo.Focus();
        }

        private void txtCustomerMobileNo_Leave(object sender, EventArgs e)
        {
            //   txtEmail.Focus();
        }

        private void txtEmail_Leave(object sender, EventArgs e)
        {
            //  ddlVehicleType.Focus();
        }

        private void chkIsCompanyRates_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                // FocusOnSave();
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    /// chkIsCompanyRates.Focus();

            //}
        }



        private void txtToAddress_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void btnSearchFlight_Click(object sender, EventArgs e)
        {
            if (txtFromFlightDoorNo.Text.Trim().Length > 0)
            {
                Process process = new Process();
                //  process.StartInfo.Verb = "runas";
                // Configure the process using the StartInfo properties.
                //   process.StartInfo.FileName = @"C:\Program Files (x86)\Eurosoft Tech\Treasure Cab System\Taxi_Services.exe";
                process.StartInfo.FileName = System.Windows.Forms.Application.StartupPath + "\\SearchFlightDetails.exe";

                process.StartInfo.Arguments = "https://flightaware.com/live/flight/" + txtFromFlightDoorNo.Text.Trim();
                process.StartInfo.WindowStyle = ProcessWindowStyle.Normal;

                // process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                process.Start();
                process.WaitForExit();
                //webbrowser_searchFlight.Visible = true;
                //webbrowser_searchFlight.Navigate("https://flightaware.com/live/flight/" + txtFromFlightDoorNo.Text.Trim());
            }
            else
                MessageBox.Show("Required : Flight No");
        }


        private void chkLead_CheckedChanged(object sender, EventArgs e)
        {
            if (chkLead.Checked)
                numLead.Enabled = true;
            else
                numLead.Enabled = false;
        }

        private void btnExcludeDrivers_Click(object sender, EventArgs e)
        {
            try
            {




                frmBookingExcDriversList frm = new frmBookingExcDriversList(btnExcludeDrivers.Tag.ToStr());
                frm.ShowDialog();
                btnExcludeDrivers.Text = "Exclude Driver(s)" + Environment.NewLine + frm.input_values;

                if (frm.input_Ids.ToStr().Trim().Length > 0)
                {

                    btnExcludeDrivers.Tag = "," + frm.input_Ids + ",";
                }
                else
                    btnExcludeDrivers.Tag = "";


                FocusOnCustomer();

            }
            catch
            {


            }
        }


        //private void MapReport()
        //{
        //    try
        //    {
        //        using (TaxiDataContext db = new TaxiDataContext())
        //        {

        //            if (objMaster.PrimaryKeyValue != null && db.Booking_RoutePaths.Count(c => c.BookingId == objMaster.Current.Id) > 0)
        //            {



        //                rptJobRouthPathGoogle rptRoute = new rptJobRouthPathGoogle(objMaster.Current, false);
        //                rptRoute.StartPosition = FormStartPosition.CenterScreen;
        //                rptRoute.ShowDialog();
        //                //    rptRoute.Dispose();
        //            }
        //            else
        //            {
        //                ENUtils.ShowMessage("Map Route Details not found");

        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }

        //}



        private void DisableFieldsForDriverInvoice()
        {
            //DisableFields();


            try
            {


                numFareRate.Enabled = false;
                numCongChrgs.Enabled = false;
                numMeetCharges.Enabled = false;
                numExtraChrgs.Enabled = false;

                if (numReturnFare != null)
                {
                    numReturnFare.Enabled = false;

                }

                if (numCompanyFares != null && ddlCompany.SelectedValue != null)
                {

                    numCompanyFares.Enabled = true;


                    if (numReturnCompanyFares != null && numReturnCompanyFares.Visible)
                        numReturnCompanyFares.Enabled = true;
                }

                opt_one.Enabled = false;
                opt_return.Enabled = false;
                opt_waitreturn.Enabled = false;
            }
            catch
            {

            }


        }





        private void DisableFieldsForCompanyInvoice()
        {
            DisableFields();


            try
            {

                ddlFromLocType.Enabled = false;
                //  ddlToLocation.Enabled = false;

                txtFromAddress.Enabled = false;
                txtToAddress.Enabled = false;
                txtFromFlightDoorNo.Enabled = false;
                txtToFlightDoorNo.Enabled = false;

                // ddlFromLocation.Enabled = false;
                // ddlToLocation.Enabled = false;


                txtFromPostCode.Enabled = false;
                txtToPostCode.Enabled = false;


                if (ddlReturnFromAirport != null)
                    ddlReturnFromAirport.Enabled = false;

                // if (ddlReturnTo != null)
                //     ddlReturnTo.Enabled = false;

                if (txtReturnFrom != null)
                    txtReturnFrom.Enabled = false;

                if (txtReturnTo != null)
                    txtReturnTo.Enabled = false;


                ddlVehicleType.Enabled = false;

                if (ddlReturnVehicleType != null)
                    ddlReturnVehicleType.Visible = false;



                opt_one.Enabled = false;
                opt_return.Enabled = false;
                opt_waitreturn.Enabled = false;

                dtpPickupDate.Enabled = false;
                dtpPickupTime.Enabled = false;


                if (dtpReturnPickupDate != null)
                    dtpReturnPickupDate.Enabled = false;

                if (dtpReturnPickupTime != null)
                    dtpReturnPickupTime.Enabled = false;



                //  radLabel1.Enabled = false;


                if (numCompanyFares.Enabled)
                {

                    numCompanyFares.Enabled = false;

                    if (numReturnCompanyFares != null)
                    {
                        numReturnCompanyFares.Enabled = false;

                    }

                    numParkingChrgs.Enabled = false;
                    numWaitingChrgs.Enabled = false;
                    numExtraChrgs.Enabled = false;

                }



                if (numFareRate.Enabled)
                {


                    numFareRate.Enabled = true;


                    if (numReturnFare != null && numReturnFare.Visible)
                        numReturnFare.Enabled = true;


                }


            
            }
            catch
            {

            }
        }


        bool IsAllowUpdating = true;

        private void DisableFields()
        {
            try
            {
                pnlOtherCharges.Enabled = false;
                pnlPaymentMode.Enabled = false;


                btnBase.Enabled = false;


                btnDespatchView.Enabled = false;


                ddlSubCompany.Enabled = false;
                ddlBookingType.Enabled = false;


                btnSaveNew.Enabled = true;
                if (numCompanyFares != null && ddlCompany.SelectedValue != null)
                {
                    pnlFares.Enabled = true;

                }


                btnSearch.Enabled = false;
              
            }
            catch
            {


            }

        }


        private void SetPickupTimeHourAndMin(DateTime dt)
        {


            string hour = dt.Hour.ToStr();
            string min = dt.Minute.ToStr();
            if (hour.ToStr().Length == 1)
                hour = "0" + hour;

            if (min.ToStr().Length == 1)
                min = "0" + min;

            UpdatePickupTimeText(hour + min);

          
        }

        private void UpdatePickupTimeText(string text)
        {
            dtpPickupTime_txt.Tag = "onchanging";
            dtpPickupTime_txt.Text = text;
            dtpPickupTime_txt.Tag = "onchanged";

        }

        private void UpdatePickupTime()
        {

            try
            {
                string text = dtpPickupTime_txt.Text;


                if (text.Length > 0 && text.Length <= 3)
                {
                   
                   SetPickupTimeHourAndMin(DateTime.Now.AddMinutes(text.ToInt()));

                }
                else if(text.Length==0)
                {
                    UpdatePickupTimeText("ASAP");
                  

                }
            }
            catch
            {

            }
        }

        private void dtpPickupTime_txt_Leave(object sender, EventArgs e)
        {

            try
            {
                UpdatePickupTime();

                string text = dtpPickupTime_txt.Text.Trim();
                if (text == "ASAP")
                {
                    dtpPickupTime.Value = DateTime.Now;



                    if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
                    {
                        //comment
                        try
                        {
                            if (lastPickupTime == null || (lastPickupTime.Value.Hour != dtpPickupTime.Value.Value.Hour && lastPickupTime.Value.Minute != dtpPickupTime.Value.Value.Minute ))
                            {

                                UpdateAutoCalculateFares();


                            }
                        }
                        catch
                        {


                        }
                    }
                }
                else
                {
                    if (text.Length == 4)
                    {
                        if(text.IsNumeric())
                        {
                            if(text.ToInt()>2359)
                            {
                                MessageBox.Show("Invalid Pickup Time");
                                FocusOnPickupTime();

                                return;
                            }

                        }

                        dtpPickupTime.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, text.Substring(0, 2).ToInt(), text.Substring(2).ToInt(), 0);


                        try
                        {

                            if (objMaster.PrimaryKeyValue == null)
                            {

                                if (dtpPickupDate.AllowDrop == false && DateTime.Now.TimeOfDay > dtpPickupTime.Value.ToDateTime().TimeOfDay
                         && dtpPickupDate.Value != null && dtpPickupDate.Value.ToDate() == DateTime.Now.Date)
                                {
                                    double hours = DateTime.Now.TimeOfDay.Subtract(dtpPickupTime.Value.ToDateTime().TimeOfDay).TotalHours;
                                    if (hours >= 2)
                                    {
                                        dtpPickupDate.Value = dtpPickupDate.Value.ToDate().AddDays(1);
                                        dtpPickupDate.AllowDrop = true;
                                    }
                                }








                                if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
                                {
                                    //comment
                                    try
                                    {
                                        if (lastPickupTime == null || (lastPickupTime.Value.TimeOfDay != dtpPickupTime.Value.Value.TimeOfDay))
                                        {

                                            UpdateAutoCalculateFares();


                                        }
                                    }
                                    catch
                                    {


                                    }
                                }












                            }
                        }
                        catch
                        {


                        }

                    }
                    else
                    {
                        MessageBox.Show("Invalid Pickup Time");
                        FocusOnPickupTime();
                    }


                }

                alreadyFocused = false;
            }
            catch
            {

            }
        }

        private void dtpPickupTime_txt_KeyDown(object sender, KeyEventArgs e)
        {


            if (e.KeyCode == Keys.Enter)
            {
                dtpPickupTime.Tag = null;
                FocusOnPickupDate();
            }

        }

        private void dtpPickupTime_txt_TextChanged(object sender, EventArgs e)
        {

            if (dtpPickupTime_txt.Tag.ToStr() == "onchanging")
                return;

            if (dtpPickupTime_txt.Text.ToStr().IsNumeric() == false)
            {
                dtpPickupTime_txt.Text = string.Empty;

                return;
            }
        }


     
        private bool alreadyFocused = false;

      


        void dtpPickupTime_txt_GotFocus(object sender, EventArgs e)
        {
            // Select all text only if the mouse isn't down.
            // This makes tabbing to the textbox give focus.
            if (MouseButtons == MouseButtons.None)
            {
                dtpPickupTime_txt.Tag = "onchanging";
                this.dtpPickupTime_txt.SelectAll();
                dtpPickupTime_txt.Tag = "onchanged";
                lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();
                alreadyFocused = true;

            }
        }
      

        void dtpPickupTime_txt_MouseUp(object sender, MouseEventArgs e)
        {
            // Web browsers like Google Chrome select the text on mouse up.
            // They only do it if the textbox isn't already focused,
            // and if the user hasn't selected all text.
            if (!alreadyFocused && this.dtpPickupTime_txt.SelectionLength == 0)
            {
                alreadyFocused = true;
                this.dtpPickupTime_txt.SelectAll();
                lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();
            }
        }

        private void btnInfo_Click(object sender, EventArgs e)
        {
            try
            {

                if (objMaster.PrimaryKeyValue == null)
                {
                    if (DialogResult.Yes == MessageBox.Show("Do you want to save this Booking ? ", "", MessageBoxButtons.YesNo))
                    {

                        chkAutoDespatch.Checked = false;
                        chkBidding.Checked = false;
                        if (Save() == false)
                            return;


                    }
                    else
                        return;

                }


                frmCustomer c = new frmCustomer();

                int? custId = null;


                if (objMaster.Current.CustomerId != null)
                    custId = objMaster.Current.CustomerId;


                if (custId == null)
                {

                    string mobNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                    string telNo = objMaster.Current.CustomerPhoneNo.ToStr().Trim();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        if (mobNo.ToStr().Trim().Length > 0 && telNo.ToStr().Trim().Length == 0)
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => (cc.MobileNo == mobNo || cc.TelephoneNo == mobNo)).Id;

                        else if (telNo.ToStr().Trim().Length > 0 && mobNo.ToStr().Trim().Length == 0)
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => cc.TelephoneNo == telNo || cc.MobileNo == telNo).Id;
                        else
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => ((cc.MobileNo == mobNo || mobNo == string.Empty) || (cc.TelephoneNo == telNo || telNo == string.Empty))).Id;

                    }

                }

                c.OpenFromBooking = true;
                c.OnDisplayRecord(custId);
                c.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
                c.StartPosition = FormStartPosition.CenterScreen;
                c.ShowDialog();


                if ((c.excludedDriverIds.ToStr().Trim().Length > 0 && c.excludedDriverNos.ToStr().Trim().Length > 0)
                    || (c.excludedDriverIds.ToStr().Trim().Length == 0 && c.excludedDriverNos.ToStr().Trim().Length == 0))
                {
                    btnExcludeDrivers.Tag = "," + c.excludedDriverIds+",";
                    btnExcludeDrivers.Text = "Exclude Driver(s)" + Environment.NewLine + c.excludedDriverNos;
                }


                c.Dispose();
                c = null;
            }
            catch
            {


            }

        }


    }
}

